
dht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006948  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08006a88  08006a88  00016a88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eac  08006eac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006eac  08006eac  00016eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006eb4  08006eb4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eb4  08006eb4  00016eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006eb8  08006eb8  00016eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006ebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200001dc  08007098  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08007098  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e20  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d7f  00000000  00000000  0002a025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002bda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002c7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d76  00000000  00000000  0002d178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cbf1  00000000  00000000  00043eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088602  00000000  00000000  00050adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d90e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b00  00000000  00000000  000d9134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001dc 	.word	0x200001dc
 800015c:	00000000 	.word	0x00000000
 8000160:	08006a70 	.word	0x08006a70

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e0 	.word	0x200001e0
 800017c:	08006a70 	.word	0x08006a70

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b976 	b.w	8000e5c <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	460d      	mov	r5, r1
 8000b90:	4604      	mov	r4, r0
 8000b92:	4688      	mov	r8, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14d      	bne.n	8000c34 <__udivmoddi4+0xac>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4694      	mov	ip, r2
 8000b9c:	d968      	bls.n	8000c70 <__udivmoddi4+0xe8>
 8000b9e:	fab2 f282 	clz	r2, r2
 8000ba2:	b152      	cbz	r2, 8000bba <__udivmoddi4+0x32>
 8000ba4:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba8:	f1c2 0120 	rsb	r1, r2, #32
 8000bac:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb4:	ea41 0803 	orr.w	r8, r1, r3
 8000bb8:	4094      	lsls	r4, r2
 8000bba:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000bbe:	fbb8 f7f1 	udiv	r7, r8, r1
 8000bc2:	fa1f fe8c 	uxth.w	lr, ip
 8000bc6:	fb01 8817 	mls	r8, r1, r7, r8
 8000bca:	fb07 f00e 	mul.w	r0, r7, lr
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd4:	4298      	cmp	r0, r3
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x66>
 8000bd8:	eb1c 0303 	adds.w	r3, ip, r3
 8000bdc:	f107 35ff 	add.w	r5, r7, #4294967295
 8000be0:	f080 811e 	bcs.w	8000e20 <__udivmoddi4+0x298>
 8000be4:	4298      	cmp	r0, r3
 8000be6:	f240 811b 	bls.w	8000e20 <__udivmoddi4+0x298>
 8000bea:	3f02      	subs	r7, #2
 8000bec:	4463      	add	r3, ip
 8000bee:	1a1b      	subs	r3, r3, r0
 8000bf0:	fbb3 f0f1 	udiv	r0, r3, r1
 8000bf4:	fb01 3310 	mls	r3, r1, r0, r3
 8000bf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bfc:	b2a4      	uxth	r4, r4
 8000bfe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c02:	45a6      	cmp	lr, r4
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	f080 8109 	bcs.w	8000e24 <__udivmoddi4+0x29c>
 8000c12:	45a6      	cmp	lr, r4
 8000c14:	f240 8106 	bls.w	8000e24 <__udivmoddi4+0x29c>
 8000c18:	4464      	add	r4, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	eba4 040e 	sub.w	r4, r4, lr
 8000c22:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c26:	b11e      	cbz	r6, 8000c30 <__udivmoddi4+0xa8>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	40d4      	lsrs	r4, r2
 8000c2c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	428b      	cmp	r3, r1
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0xc2>
 8000c38:	2e00      	cmp	r6, #0
 8000c3a:	f000 80ee 	beq.w	8000e1a <__udivmoddi4+0x292>
 8000c3e:	2100      	movs	r1, #0
 8000c40:	e9c6 0500 	strd	r0, r5, [r6]
 8000c44:	4608      	mov	r0, r1
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f183 	clz	r1, r3
 8000c4e:	2900      	cmp	r1, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x160>
 8000c52:	42ab      	cmp	r3, r5
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xd4>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80fc 	bhi.w	8000e54 <__udivmoddi4+0x2cc>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb65 0303 	sbc.w	r3, r5, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	4698      	mov	r8, r3
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d0e2      	beq.n	8000c30 <__udivmoddi4+0xa8>
 8000c6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c6e:	e7df      	b.n	8000c30 <__udivmoddi4+0xa8>
 8000c70:	b902      	cbnz	r2, 8000c74 <__udivmoddi4+0xec>
 8000c72:	deff      	udf	#255	; 0xff
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f040 8091 	bne.w	8000da0 <__udivmoddi4+0x218>
 8000c7e:	eba1 000c 	sub.w	r0, r1, ip
 8000c82:	2101      	movs	r1, #1
 8000c84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c88:	fa1f fe8c 	uxth.w	lr, ip
 8000c8c:	fbb0 f3f7 	udiv	r3, r0, r7
 8000c90:	fb07 0013 	mls	r0, r7, r3, r0
 8000c94:	0c25      	lsrs	r5, r4, #16
 8000c96:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000c9a:	fb0e f003 	mul.w	r0, lr, r3
 8000c9e:	42a8      	cmp	r0, r5
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x12c>
 8000ca2:	eb1c 0505 	adds.w	r5, ip, r5
 8000ca6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x12a>
 8000cac:	42a8      	cmp	r0, r5
 8000cae:	f200 80ce 	bhi.w	8000e4e <__udivmoddi4+0x2c6>
 8000cb2:	4643      	mov	r3, r8
 8000cb4:	1a2d      	subs	r5, r5, r0
 8000cb6:	fbb5 f0f7 	udiv	r0, r5, r7
 8000cba:	fb07 5510 	mls	r5, r7, r0, r5
 8000cbe:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x156>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x154>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80b6 	bhi.w	8000e48 <__udivmoddi4+0x2c0>
 8000cdc:	4628      	mov	r0, r5
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ce6:	e79e      	b.n	8000c26 <__udivmoddi4+0x9e>
 8000ce8:	f1c1 0720 	rsb	r7, r1, #32
 8000cec:	408b      	lsls	r3, r1
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa25 fa07 	lsr.w	sl, r5, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fbba f8f9 	udiv	r8, sl, r9
 8000d02:	fa20 f307 	lsr.w	r3, r0, r7
 8000d06:	fb09 aa18 	mls	sl, r9, r8, sl
 8000d0a:	408d      	lsls	r5, r1
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	431d      	orrs	r5, r3
 8000d12:	fa00 f301 	lsl.w	r3, r0, r1
 8000d16:	fb08 f00e 	mul.w	r0, r8, lr
 8000d1a:	0c2c      	lsrs	r4, r5, #16
 8000d1c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d20:	42a0      	cmp	r0, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b8>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2bc>
 8000d34:	42a0      	cmp	r0, r4
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2bc>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4464      	add	r4, ip
 8000d40:	1a24      	subs	r4, r4, r0
 8000d42:	fbb4 f0f9 	udiv	r0, r4, r9
 8000d46:	fb09 4410 	mls	r4, r9, r0, r4
 8000d4a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4e:	b2ad      	uxth	r5, r5
 8000d50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d54:	45a6      	cmp	lr, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1e2>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2b4>
 8000d62:	45a6      	cmp	lr, r4
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2b4>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4464      	add	r4, ip
 8000d6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6e:	fba0 9502 	umull	r9, r5, r0, r2
 8000d72:	eba4 040e 	sub.w	r4, r4, lr
 8000d76:	42ac      	cmp	r4, r5
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46ae      	mov	lr, r5
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x2a4>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x2a0>
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d069      	beq.n	8000e58 <__udivmoddi4+0x2d0>
 8000d84:	ebb3 0208 	subs.w	r2, r3, r8
 8000d88:	eb64 040e 	sbc.w	r4, r4, lr
 8000d8c:	fa22 f301 	lsr.w	r3, r2, r1
 8000d90:	fa04 f707 	lsl.w	r7, r4, r7
 8000d94:	431f      	orrs	r7, r3
 8000d96:	40cc      	lsrs	r4, r1
 8000d98:	e9c6 7400 	strd	r7, r4, [r6]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e747      	b.n	8000c30 <__udivmoddi4+0xa8>
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	f1c2 0120 	rsb	r1, r2, #32
 8000da8:	fa25 f301 	lsr.w	r3, r5, r1
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa20 f101 	lsr.w	r1, r0, r1
 8000db4:	4095      	lsls	r5, r2
 8000db6:	430d      	orrs	r5, r1
 8000db8:	fbb3 f1f7 	udiv	r1, r3, r7
 8000dbc:	fb07 3311 	mls	r3, r7, r1, r3
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	0c28      	lsrs	r0, r5, #16
 8000dc6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dca:	fb01 f30e 	mul.w	r3, r1, lr
 8000dce:	4283      	cmp	r3, r0
 8000dd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x260>
 8000dd6:	eb1c 0000 	adds.w	r0, ip, r0
 8000dda:	f101 38ff 	add.w	r8, r1, #4294967295
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b8>
 8000de0:	4283      	cmp	r3, r0
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b8>
 8000de4:	3902      	subs	r1, #2
 8000de6:	4460      	add	r0, ip
 8000de8:	1ac0      	subs	r0, r0, r3
 8000dea:	fbb0 f3f7 	udiv	r3, r0, r7
 8000dee:	fb07 0013 	mls	r0, r7, r3, r0
 8000df2:	b2ad      	uxth	r5, r5
 8000df4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000df8:	fb03 f00e 	mul.w	r0, r3, lr
 8000dfc:	42a8      	cmp	r0, r5
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x28a>
 8000e00:	eb1c 0505 	adds.w	r5, ip, r5
 8000e04:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0a:	42a8      	cmp	r0, r5
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	4465      	add	r5, ip
 8000e12:	1a28      	subs	r0, r5, r0
 8000e14:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0x104>
 8000e1a:	4631      	mov	r1, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e707      	b.n	8000c30 <__udivmoddi4+0xa8>
 8000e20:	462f      	mov	r7, r5
 8000e22:	e6e4      	b.n	8000bee <__udivmoddi4+0x66>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6f9      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e28:	454b      	cmp	r3, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f8>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e34:	3801      	subs	r0, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f8>
 8000e38:	4643      	mov	r3, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x28a>
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1e2>
 8000e40:	4641      	mov	r1, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b8>
 8000e48:	4464      	add	r4, ip
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	e747      	b.n	8000cde <__udivmoddi4+0x156>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4465      	add	r5, ip
 8000e52:	e72f      	b.n	8000cb4 <__udivmoddi4+0x12c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e706      	b.n	8000c66 <__udivmoddi4+0xde>
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e6e9      	b.n	8000c30 <__udivmoddi4+0xa8>

08000e5c <__aeabi_idiv0>:
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	4b34      	ldr	r3, [pc, #208]	; (8000f48 <MX_GPIO_Init+0xe8>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	4a33      	ldr	r2, [pc, #204]	; (8000f48 <MX_GPIO_Init+0xe8>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	61d3      	str	r3, [r2, #28]
 8000e82:	4b31      	ldr	r3, [pc, #196]	; (8000f48 <MX_GPIO_Init+0xe8>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e8e:	4b2e      	ldr	r3, [pc, #184]	; (8000f48 <MX_GPIO_Init+0xe8>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	4a2d      	ldr	r2, [pc, #180]	; (8000f48 <MX_GPIO_Init+0xe8>)
 8000e94:	f043 0320 	orr.w	r3, r3, #32
 8000e98:	61d3      	str	r3, [r2, #28]
 8000e9a:	4b2b      	ldr	r3, [pc, #172]	; (8000f48 <MX_GPIO_Init+0xe8>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f003 0320 	and.w	r3, r3, #32
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <MX_GPIO_Init+0xe8>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a27      	ldr	r2, [pc, #156]	; (8000f48 <MX_GPIO_Init+0xe8>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	61d3      	str	r3, [r2, #28]
 8000eb2:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <MX_GPIO_Init+0xe8>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <MX_GPIO_Init+0xe8>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	4a21      	ldr	r2, [pc, #132]	; (8000f48 <MX_GPIO_Init+0xe8>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	61d3      	str	r3, [r2, #28]
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <MX_GPIO_Init+0xe8>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2120      	movs	r1, #32
 8000eda:	481c      	ldr	r0, [pc, #112]	; (8000f4c <MX_GPIO_Init+0xec>)
 8000edc:	f001 f927 	bl	800212e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	481a      	ldr	r0, [pc, #104]	; (8000f50 <MX_GPIO_Init+0xf0>)
 8000ee6:	f001 f922 	bl	800212e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	4814      	ldr	r0, [pc, #80]	; (8000f54 <MX_GPIO_Init+0xf4>)
 8000f02:	f000 ff6d 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f06:	2320      	movs	r3, #32
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <MX_GPIO_Init+0xec>)
 8000f1e:	f000 ff5f 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f22:	2310      	movs	r3, #16
 8000f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_GPIO_Init+0xf0>)
 8000f3a:	f000 ff51 	bl	8001de0 <HAL_GPIO_Init>

}
 8000f3e:	bf00      	nop
 8000f40:	3728      	adds	r7, #40	; 0x28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	40020400 	.word	0x40020400
 8000f54:	40020800 	.word	0x40020800

08000f58 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f5e:	4a13      	ldr	r2, [pc, #76]	; (8000fac <MX_I2C1_Init+0x54>)
 8000f60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f64:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <MX_I2C1_Init+0x58>)
 8000f66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_I2C1_Init+0x50>)
 8000f96:	f001 f8e3 	bl	8002160 <HAL_I2C_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fa0:	f000 fbf2 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200001f8 	.word	0x200001f8
 8000fac:	40005400 	.word	0x40005400
 8000fb0:	000186a0 	.word	0x000186a0

08000fb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a17      	ldr	r2, [pc, #92]	; (8001030 <HAL_I2C_MspInit+0x7c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d128      	bne.n	8001028 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_I2C_MspInit+0x80>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	4a16      	ldr	r2, [pc, #88]	; (8001034 <HAL_I2C_MspInit+0x80>)
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	61d3      	str	r3, [r2, #28]
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <HAL_I2C_MspInit+0x80>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff4:	2312      	movs	r3, #18
 8000ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001000:	2304      	movs	r3, #4
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	480b      	ldr	r0, [pc, #44]	; (8001038 <HAL_I2C_MspInit+0x84>)
 800100c:	f000 fee8 	bl	8001de0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_I2C_MspInit+0x80>)
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_I2C_MspInit+0x80>)
 8001016:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800101a:	6253      	str	r3, [r2, #36]	; 0x24
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_I2C_MspInit+0x80>)
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001028:	bf00      	nop
 800102a:	3728      	adds	r7, #40	; 0x28
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40005400 	.word	0x40005400
 8001034:	40023800 	.word	0x40023800
 8001038:	40020400 	.word	0x40020400

0800103c <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af02      	add	r7, sp, #8
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	f043 030c 	orr.w	r3, r3, #12
 8001052:	b2da      	uxtb	r2, r3
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	f043 0320 	orr.w	r3, r3, #32
 8001064:	b2db      	uxtb	r3, r3
 8001066:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 8001068:	f107 0118 	add.w	r1, r7, #24
 800106c:	230a      	movs	r3, #10
 800106e:	2202      	movs	r2, #2
 8001070:	486c      	ldr	r0, [pc, #432]	; (8001224 <lcd_init+0x1e8>)
 8001072:	f002 fc30 	bl	80038d6 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8001076:	f640 230d 	movw	r3, #2573	; 0xa0d
 800107a:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 800107c:	f107 0114 	add.w	r1, r7, #20
 8001080:	230a      	movs	r3, #10
 8001082:	2202      	movs	r2, #2
 8001084:	4867      	ldr	r0, [pc, #412]	; (8001224 <lcd_init+0x1e8>)
 8001086:	f002 fc26 	bl	80038d6 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 800108a:	2364      	movs	r3, #100	; 0x64
 800108c:	2205      	movs	r2, #5
 800108e:	217c      	movs	r1, #124	; 0x7c
 8001090:	69f8      	ldr	r0, [r7, #28]
 8001092:	f001 faa7 	bl	80025e4 <HAL_I2C_IsDeviceReady>
 8001096:	4603      	mov	r3, r0
 8001098:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 800109a:	f107 0113 	add.w	r1, r7, #19
 800109e:	230a      	movs	r3, #10
 80010a0:	2201      	movs	r2, #1
 80010a2:	4860      	ldr	r0, [pc, #384]	; (8001224 <lcd_init+0x1e8>)
 80010a4:	f002 fc17 	bl	80038d6 <HAL_UART_Transmit>
	HAL_Delay(50);
 80010a8:	2032      	movs	r0, #50	; 0x32
 80010aa:	f000 fd93 	bl	8001bd4 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 80010ae:	f107 0218 	add.w	r2, r7, #24
 80010b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2302      	movs	r3, #2
 80010ba:	217c      	movs	r1, #124	; 0x7c
 80010bc:	69f8      	ldr	r0, [r7, #28]
 80010be:	f001 f993 	bl	80023e8 <HAL_I2C_Master_Transmit>
 80010c2:	4603      	mov	r3, r0
 80010c4:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 80010c6:	f107 0112 	add.w	r1, r7, #18
 80010ca:	230a      	movs	r3, #10
 80010cc:	2201      	movs	r2, #1
 80010ce:	4855      	ldr	r0, [pc, #340]	; (8001224 <lcd_init+0x1e8>)
 80010d0:	f002 fc01 	bl	80038d6 <HAL_UART_Transmit>
	HAL_Delay(50);
 80010d4:	2032      	movs	r0, #50	; 0x32
 80010d6:	f000 fd7d 	bl	8001bd4 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80010da:	f107 0218 	add.w	r2, r7, #24
 80010de:	f241 3388 	movw	r3, #5000	; 0x1388
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2302      	movs	r3, #2
 80010e6:	217c      	movs	r1, #124	; 0x7c
 80010e8:	69f8      	ldr	r0, [r7, #28]
 80010ea:	f001 f97d 	bl	80023e8 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80010ee:	2005      	movs	r0, #5
 80010f0:	f000 fd70 	bl	8001bd4 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80010f4:	f107 0218 	add.w	r2, r7, #24
 80010f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2302      	movs	r3, #2
 8001100:	217c      	movs	r1, #124	; 0x7c
 8001102:	69f8      	ldr	r0, [r7, #28]
 8001104:	f001 f970 	bl	80023e8 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	2204      	movs	r2, #4
 800110c:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	785b      	ldrb	r3, [r3, #1]
 8001112:	f043 0308 	orr.w	r3, r3, #8
 8001116:	b2db      	uxtb	r3, r3
 8001118:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 800111a:	f107 0218 	add.w	r2, r7, #24
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2302      	movs	r3, #2
 8001126:	217c      	movs	r1, #124	; 0x7c
 8001128:	69f8      	ldr	r0, [r7, #28]
 800112a:	f001 f95d 	bl	80023e8 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 800112e:	2301      	movs	r3, #1
 8001130:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001132:	f107 0218 	add.w	r2, r7, #24
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2302      	movs	r3, #2
 800113e:	217c      	movs	r1, #124	; 0x7c
 8001140:	69f8      	ldr	r0, [r7, #28]
 8001142:	f001 f951 	bl	80023e8 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8001146:	2002      	movs	r0, #2
 8001148:	f000 fd44 	bl	8001bd4 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	2202      	movs	r2, #2
 8001150:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	789b      	ldrb	r3, [r3, #2]
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	b2db      	uxtb	r3, r3
 800115c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800115e:	f107 0218 	add.w	r2, r7, #24
 8001162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2302      	movs	r3, #2
 800116a:	217c      	movs	r1, #124	; 0x7c
 800116c:	69f8      	ldr	r0, [r7, #28]
 800116e:	f001 f93b 	bl	80023e8 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8001172:	2300      	movs	r3, #0
 8001174:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800117a:	f107 0210 	add.w	r2, r7, #16
 800117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2302      	movs	r3, #2
 8001186:	21c4      	movs	r1, #196	; 0xc4
 8001188:	69f8      	ldr	r0, [r7, #28]
 800118a:	f001 f92d 	bl	80023e8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 800118e:	2308      	movs	r3, #8
 8001190:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 8001192:	23ff      	movs	r3, #255	; 0xff
 8001194:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001196:	f107 0210 	add.w	r2, r7, #16
 800119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2302      	movs	r3, #2
 80011a2:	21c4      	movs	r1, #196	; 0xc4
 80011a4:	69f8      	ldr	r0, [r7, #28]
 80011a6:	f001 f91f 	bl	80023e8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 80011aa:	2301      	movs	r3, #1
 80011ac:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 80011ae:	2320      	movs	r3, #32
 80011b0:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80011b2:	f107 0210 	add.w	r2, r7, #16
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2302      	movs	r3, #2
 80011be:	21c4      	movs	r1, #196	; 0xc4
 80011c0:	69f8      	ldr	r0, [r7, #28]
 80011c2:	f001 f911 	bl	80023e8 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 80011c6:	2304      	movs	r3, #4
 80011c8:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80011ca:	23ff      	movs	r3, #255	; 0xff
 80011cc:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80011ce:	f107 020c 	add.w	r2, r7, #12
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2302      	movs	r3, #2
 80011da:	21c4      	movs	r1, #196	; 0xc4
 80011dc:	69f8      	ldr	r0, [r7, #28]
 80011de:	f001 f903 	bl	80023e8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 80011e2:	2303      	movs	r3, #3
 80011e4:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80011e6:	23ff      	movs	r3, #255	; 0xff
 80011e8:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2302      	movs	r3, #2
 80011f6:	21c4      	movs	r1, #196	; 0xc4
 80011f8:	69f8      	ldr	r0, [r7, #28]
 80011fa:	f001 f8f5 	bl	80023e8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 80011fe:	2302      	movs	r3, #2
 8001200:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001202:	23ff      	movs	r3, #255	; 0xff
 8001204:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001206:	f107 020c 	add.w	r2, r7, #12
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2302      	movs	r3, #2
 8001212:	21c4      	movs	r1, #196	; 0xc4
 8001214:	69f8      	ldr	r0, [r7, #28]
 8001216:	f001 f8e7 	bl	80023e8 <HAL_I2C_Master_Transmit>


}
 800121a:	bf00      	nop
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000368 	.word	0x20000368

08001228 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af02      	add	r7, sp, #8
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8001236:	2340      	movs	r3, #64	; 0x40
 8001238:	733b      	strb	r3, [r7, #12]
    int i=0;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 800123e:	e011      	b.n	8001264 <lcd_print+0x3c>
    {
            data[1] = str[i];
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	4413      	add	r3, r2
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 800124a:	f107 020c 	add.w	r2, r7, #12
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2302      	movs	r3, #2
 8001256:	217c      	movs	r1, #124	; 0x7c
 8001258:	6938      	ldr	r0, [r7, #16]
 800125a:	f001 f8c5 	bl	80023e8 <HAL_I2C_Master_Transmit>
            i++;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1e7      	bne.n	8001240 <lcd_print+0x18>
   }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af02      	add	r7, sp, #8
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	460b      	mov	r3, r1
 8001284:	70fb      	strb	r3, [r7, #3]
 8001286:	4613      	mov	r3, r2
 8001288:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 800128e:	78bb      	ldrb	r3, [r7, #2]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d104      	bne.n	800129e <lcd_position+0x24>
    {
        col = col | 0x80;
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800129a:	70fb      	strb	r3, [r7, #3]
 800129c:	e003      	b.n	80012a6 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80012a4:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80012ae:	f107 0208 	add.w	r2, r7, #8
 80012b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2302      	movs	r3, #2
 80012ba:	217c      	movs	r1, #124	; 0x7c
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f001 f893 	bl	80023e8 <HAL_I2C_Master_Transmit>
}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <DWT_Delay_Init>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
uint32_t DWT_Delay_Init(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <DWT_Delay_Init+0x58>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	4a13      	ldr	r2, [pc, #76]	; (8001324 <DWT_Delay_Init+0x58>)
 80012d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012da:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <DWT_Delay_Init+0x58>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	4a10      	ldr	r2, [pc, #64]	; (8001324 <DWT_Delay_Init+0x58>)
 80012e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012e6:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <DWT_Delay_Init+0x5c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <DWT_Delay_Init+0x5c>)
 80012ee:	f023 0301 	bic.w	r3, r3, #1
 80012f2:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <DWT_Delay_Init+0x5c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <DWT_Delay_Init+0x5c>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <DWT_Delay_Init+0x5c>)
 8001302:	2200      	movs	r2, #0
 8001304:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8001306:	bf00      	nop
    __ASM volatile ("NOP");
 8001308:	bf00      	nop
    __ASM volatile ("NOP");
 800130a:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <DWT_Delay_Init+0x5c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8001314:	2300      	movs	r3, #0
 8001316:	e000      	b.n	800131a <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001318:	2301      	movs	r3, #1
    }
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000edf0 	.word	0xe000edf0
 8001328:	e0001000 	.word	0xe0001000

0800132c <DWT_Delay_us>:

// This Function Provides Delay In Microseconds Using DWT

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <DWT_Delay_us+0x48>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 800133a:	f002 f9ed 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 800133e:	4603      	mov	r3, r0
 8001340:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <DWT_Delay_us+0x4c>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	0c9b      	lsrs	r3, r3, #18
 8001348:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	fb02 f303 	mul.w	r3, r2, r3
 8001352:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8001354:	bf00      	nop
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <DWT_Delay_us+0x48>)
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1ad2      	subs	r2, r2, r3
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	1acb      	subs	r3, r1, r3
 8001364:	429a      	cmp	r2, r3
 8001366:	d3f6      	bcc.n	8001356 <DWT_Delay_us+0x2a>
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	e0001000 	.word	0xe0001000
 8001378:	431bde83 	.word	0x431bde83

0800137c <Set_Pin_Output>:

/*uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM, RH, TEMP;*/

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	4619      	mov	r1, r3
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 fd18 	bl	8001de0 <HAL_GPIO_Init>
}
 80013b0:	bf00      	nop
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013dc:	2301      	movs	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4619      	mov	r1, r3
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fcfa 	bl	8001de0 <HAL_GPIO_Init>
}
 80013ec:	bf00      	nop
 80013ee:	3720      	adds	r7, #32
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <Read_data>:

void Read_data (uint8_t *data)
  {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  	int i, k;
  	for (i=0;i<8;i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e053      	b.n	80014aa <Read_data+0xb6>
  	{
  		if (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET)
 8001402:	2110      	movs	r1, #16
 8001404:	482d      	ldr	r0, [pc, #180]	; (80014bc <Read_data+0xc8>)
 8001406:	f000 fe7b 	bl	8002100 <HAL_GPIO_ReadPin>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d11c      	bne.n	800144a <Read_data+0x56>
  		{
  			(*data)&= ~(1<<(7-i)); //data bit is 0
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b25a      	sxtb	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1c3 0307 	rsb	r3, r3, #7
 800141c:	2101      	movs	r1, #1
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	b25b      	sxtb	r3, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	b25b      	sxtb	r3, r3
 8001428:	4013      	ands	r3, r2
 800142a:	b25b      	sxtb	r3, r3
 800142c:	b2da      	uxtb	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	701a      	strb	r2, [r3, #0]
  			while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)));
 8001432:	bf00      	nop
 8001434:	2110      	movs	r1, #16
 8001436:	4821      	ldr	r0, [pc, #132]	; (80014bc <Read_data+0xc8>)
 8001438:	f000 fe62 	bl	8002100 <HAL_GPIO_ReadPin>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f8      	beq.n	8001434 <Read_data+0x40>
  			DWT_Delay_us(40);
 8001442:	2028      	movs	r0, #40	; 0x28
 8001444:	f7ff ff72 	bl	800132c <DWT_Delay_us>
 8001448:	e02c      	b.n	80014a4 <Read_data+0xb0>
  		}
  		else                       //data bit is 1
  		{
  			(*data)|= (1<<(7-i));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b25a      	sxtb	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2101      	movs	r1, #1
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	b25b      	sxtb	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	b25b      	sxtb	r3, r3
 8001462:	b2da      	uxtb	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	701a      	strb	r2, [r3, #0]
  			for (k=0;k<1000;k++)
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	e009      	b.n	8001482 <Read_data+0x8e>
  			{
  				if (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET)
 800146e:	2110      	movs	r1, #16
 8001470:	4812      	ldr	r0, [pc, #72]	; (80014bc <Read_data+0xc8>)
 8001472:	f000 fe45 	bl	8002100 <HAL_GPIO_ReadPin>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d007      	beq.n	800148c <Read_data+0x98>
  			for (k=0;k<1000;k++)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	3301      	adds	r3, #1
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001488:	dbf1      	blt.n	800146e <Read_data+0x7a>
 800148a:	e000      	b.n	800148e <Read_data+0x9a>
  				  {
  				  	break;
 800148c:	bf00      	nop
  				  }
  			}
  			while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)));
 800148e:	bf00      	nop
 8001490:	2110      	movs	r1, #16
 8001492:	480a      	ldr	r0, [pc, #40]	; (80014bc <Read_data+0xc8>)
 8001494:	f000 fe34 	bl	8002100 <HAL_GPIO_ReadPin>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f8      	beq.n	8001490 <Read_data+0x9c>
  			DWT_Delay_us(40);
 800149e:	2028      	movs	r0, #40	; 0x28
 80014a0:	f7ff ff44 	bl	800132c <DWT_Delay_us>
  	for (i=0;i<8;i++)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	3301      	adds	r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2b07      	cmp	r3, #7
 80014ae:	dda8      	ble.n	8001402 <Read_data+0xe>
  		}
  	 }
  }
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40020400 	.word	0x40020400

080014c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  int k = 0; //variable pour les boucles while
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ca:	f000 fb14 	bl	8001af6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ce:	f000 f90d 	bl	80016ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d2:	f7ff fcc5 	bl	8000e60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014d6:	f000 fa7b 	bl	80019d0 <MX_USART2_UART_Init>
  //MX_USART1_UART_Init();

  MX_I2C1_Init();
 80014da:	f7ff fd3d 	bl	8000f58 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 80014de:	f7ff fef5 	bl	80012cc <DWT_Delay_Init>
  lcd_init(&hi2c1, &lcdData); // initialise le lcd
 80014e2:	496f      	ldr	r1, [pc, #444]	; (80016a0 <main+0x1e0>)
 80014e4:	486f      	ldr	r0, [pc, #444]	; (80016a4 <main+0x1e4>)
 80014e6:	f7ff fda9 	bl	800103c <lcd_init>

	      /* USER CODE BEGIN 3 */

	  	  /*commence la communication avec le capteur*/

 	  HAL_Delay(1000);// Effectuer des mesures chaque seconde
 80014ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ee:	f000 fb71 	bl	8001bd4 <HAL_Delay>
	  	  Set_Pin_Output(GPIOB, GPIO_PIN_4); //Configuration du pin en sortie
 80014f2:	2110      	movs	r1, #16
 80014f4:	486c      	ldr	r0, [pc, #432]	; (80016a8 <main+0x1e8>)
 80014f6:	f7ff ff41 	bl	800137c <Set_Pin_Output>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //Mise à 0 du pin
 80014fa:	2200      	movs	r2, #0
 80014fc:	2110      	movs	r1, #16
 80014fe:	486a      	ldr	r0, [pc, #424]	; (80016a8 <main+0x1e8>)
 8001500:	f000 fe15 	bl	800212e <HAL_GPIO_WritePin>
	  	  DWT_Delay_us(1000); //Envoi de la premiere partie du signal de commande
 8001504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001508:	f7ff ff10 	bl	800132c <DWT_Delay_us>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // Mise a 1 du pin
 800150c:	2201      	movs	r2, #1
 800150e:	2110      	movs	r1, #16
 8001510:	4865      	ldr	r0, [pc, #404]	; (80016a8 <main+0x1e8>)
 8001512:	f000 fe0c 	bl	800212e <HAL_GPIO_WritePin>
	  	  DWT_Delay_us(30); //Envoi de la deuxieme partie du signal de commande
 8001516:	201e      	movs	r0, #30
 8001518:	f7ff ff08 	bl	800132c <DWT_Delay_us>
	  	  Set_Pin_Input(GPIOB, GPIO_PIN_4); //Configuration du pin en entrée
 800151c:	2110      	movs	r1, #16
 800151e:	4862      	ldr	r0, [pc, #392]	; (80016a8 <main+0x1e8>)
 8001520:	f7ff ff4a 	bl	80013b8 <Set_Pin_Input>

	  	  // Lecture des données

	  	  while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)));
 8001524:	bf00      	nop
 8001526:	2110      	movs	r1, #16
 8001528:	485f      	ldr	r0, [pc, #380]	; (80016a8 <main+0x1e8>)
 800152a:	f000 fde9 	bl	8002100 <HAL_GPIO_ReadPin>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f8      	beq.n	8001526 <main+0x66>

	  	  for (k=0;k<1000;k++)
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	e009      	b.n	800154e <main+0x8e>
	  	  {
	  		  if (HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_4) == GPIO_PIN_RESET)
 800153a:	2110      	movs	r1, #16
 800153c:	485a      	ldr	r0, [pc, #360]	; (80016a8 <main+0x1e8>)
 800153e:	f000 fddf 	bl	8002100 <HAL_GPIO_ReadPin>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d007      	beq.n	8001558 <main+0x98>
	  	  for (k=0;k<1000;k++)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3301      	adds	r3, #1
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001554:	dbf1      	blt.n	800153a <main+0x7a>
 8001556:	e000      	b.n	800155a <main+0x9a>
	  		  {
	  	  	  	break;
 8001558:	bf00      	nop
	  	  	  }
	  	  }

	  	  while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)));
 800155a:	bf00      	nop
 800155c:	2110      	movs	r1, #16
 800155e:	4852      	ldr	r0, [pc, #328]	; (80016a8 <main+0x1e8>)
 8001560:	f000 fdce 	bl	8002100 <HAL_GPIO_ReadPin>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f8      	beq.n	800155c <main+0x9c>
	  	  DWT_Delay_us(40);
 800156a:	2028      	movs	r0, #40	; 0x28
 800156c:	f7ff fede 	bl	800132c <DWT_Delay_us>

	  	  Read_data(&dataH1); //Lecture du premier octet d'humidité
 8001570:	484e      	ldr	r0, [pc, #312]	; (80016ac <main+0x1ec>)
 8001572:	f7ff ff3f 	bl	80013f4 <Read_data>
	  	  Read_data(&dataH2); //Lecture du deuxieme octet d'humidité
 8001576:	484e      	ldr	r0, [pc, #312]	; (80016b0 <main+0x1f0>)
 8001578:	f7ff ff3c 	bl	80013f4 <Read_data>
	  	  Read_data(&dataT1); //Lecture du premier octet de temperature
 800157c:	484d      	ldr	r0, [pc, #308]	; (80016b4 <main+0x1f4>)
 800157e:	f7ff ff39 	bl	80013f4 <Read_data>
	  	  Read_data(&dataT2); //Lecture du deuxieme octet de temperature
 8001582:	484d      	ldr	r0, [pc, #308]	; (80016b8 <main+0x1f8>)
 8001584:	f7ff ff36 	bl	80013f4 <Read_data>
	  	  Read_data(&SUM);  //Lecture d'octet de sécurité
 8001588:	484c      	ldr	r0, [pc, #304]	; (80016bc <main+0x1fc>)
 800158a:	f7ff ff33 	bl	80013f4 <Read_data>

	  	  check = dataH1 + dataH2 + dataT1 + dataT2;
 800158e:	4b47      	ldr	r3, [pc, #284]	; (80016ac <main+0x1ec>)
 8001590:	781a      	ldrb	r2, [r3, #0]
 8001592:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <main+0x1f0>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	4413      	add	r3, r2
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4b46      	ldr	r3, [pc, #280]	; (80016b4 <main+0x1f4>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4b45      	ldr	r3, [pc, #276]	; (80016b8 <main+0x1f8>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b45      	ldr	r3, [pc, #276]	; (80016c0 <main+0x200>)
 80015ac:	701a      	strb	r2, [r3, #0]


	  	  RH = (dataH1<<8) | dataH2;  //Concatenation des octets d'humidité
 80015ae:	4b3f      	ldr	r3, [pc, #252]	; (80016ac <main+0x1ec>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	4b3e      	ldr	r3, [pc, #248]	; (80016b0 <main+0x1f0>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b21b      	sxth	r3, r3
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	4b40      	ldr	r3, [pc, #256]	; (80016c4 <main+0x204>)
 80015c4:	801a      	strh	r2, [r3, #0]
	  	  TEMP = (dataT1<<8) | dataT2; //Concatenation des octets de temperature
 80015c6:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <main+0x1f4>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <main+0x1f8>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	b29a      	uxth	r2, r3
 80015da:	4b3b      	ldr	r3, [pc, #236]	; (80016c8 <main+0x208>)
 80015dc:	801a      	strh	r2, [r3, #0]

	  	  Humidite = (int) RH / 10.0; //Les valeurs recues sont egales à fois les valeurs reelles
 80015de:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <main+0x204>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ff26 	bl	8000434 <__aeabi_i2d>
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4b37      	ldr	r3, [pc, #220]	; (80016cc <main+0x20c>)
 80015ee:	f7ff f8b5 	bl	800075c <__aeabi_ddiv>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff fa5d 	bl	8000ab8 <__aeabi_d2f>
 80015fe:	4603      	mov	r3, r0
 8001600:	4a33      	ldr	r2, [pc, #204]	; (80016d0 <main+0x210>)
 8001602:	6013      	str	r3, [r2, #0]
	  	  Temperature = (int) TEMP / 10.0;
 8001604:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <main+0x208>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff13 	bl	8000434 <__aeabi_i2d>
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <main+0x20c>)
 8001614:	f7ff f8a2 	bl	800075c <__aeabi_ddiv>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	f7ff fa4a 	bl	8000ab8 <__aeabi_d2f>
 8001624:	4603      	mov	r3, r0
 8001626:	4a2b      	ldr	r2, [pc, #172]	; (80016d4 <main+0x214>)
 8001628:	6013      	str	r3, [r2, #0]

	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //Preparation pour lecture suivante
 800162a:	2201      	movs	r2, #1
 800162c:	2110      	movs	r1, #16
 800162e:	481e      	ldr	r0, [pc, #120]	; (80016a8 <main+0x1e8>)
 8001630:	f000 fd7d 	bl	800212e <HAL_GPIO_WritePin>

	  	 //Affichage sur LCD

	  	  size=sprintf((char *)Data,"HUMIDITE : %.1f", Humidite);
 8001634:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <main+0x210>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff0d 	bl	8000458 <__aeabi_f2d>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4925      	ldr	r1, [pc, #148]	; (80016d8 <main+0x218>)
 8001644:	4825      	ldr	r0, [pc, #148]	; (80016dc <main+0x21c>)
 8001646:	f002 ff99 	bl	800457c <siprintf>
 800164a:	4603      	mov	r3, r0
 800164c:	b29a      	uxth	r2, r3
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <main+0x220>)
 8001650:	801a      	strh	r2, [r3, #0]

	  	  lcd_position(&hi2c1,0,0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	4813      	ldr	r0, [pc, #76]	; (80016a4 <main+0x1e4>)
 8001658:	f7ff fe0f 	bl	800127a <lcd_position>
	  	  lcd_print(&hi2c1,(char*)Data);
 800165c:	491f      	ldr	r1, [pc, #124]	; (80016dc <main+0x21c>)
 800165e:	4811      	ldr	r0, [pc, #68]	; (80016a4 <main+0x1e4>)
 8001660:	f7ff fde2 	bl	8001228 <lcd_print>
	  	  lcd_print(&hi2c1,"%");
 8001664:	491f      	ldr	r1, [pc, #124]	; (80016e4 <main+0x224>)
 8001666:	480f      	ldr	r0, [pc, #60]	; (80016a4 <main+0x1e4>)
 8001668:	f7ff fdde 	bl	8001228 <lcd_print>
	  	  size=  sprintf((char *)Data, "TEMP :    %.1f C", Temperature);
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <main+0x214>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe fef1 	bl	8000458 <__aeabi_f2d>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	491b      	ldr	r1, [pc, #108]	; (80016e8 <main+0x228>)
 800167c:	4817      	ldr	r0, [pc, #92]	; (80016dc <main+0x21c>)
 800167e:	f002 ff7d 	bl	800457c <siprintf>
 8001682:	4603      	mov	r3, r0
 8001684:	b29a      	uxth	r2, r3
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <main+0x220>)
 8001688:	801a      	strh	r2, [r3, #0]

	  	  lcd_position(&hi2c1,0,1);
 800168a:	2201      	movs	r2, #1
 800168c:	2100      	movs	r1, #0
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <main+0x1e4>)
 8001690:	f7ff fdf3 	bl	800127a <lcd_position>
	  	  lcd_print(&hi2c1,(char*)Data);
 8001694:	4911      	ldr	r1, [pc, #68]	; (80016dc <main+0x21c>)
 8001696:	4803      	ldr	r0, [pc, #12]	; (80016a4 <main+0x1e4>)
 8001698:	f7ff fdc6 	bl	8001228 <lcd_print>
 	  HAL_Delay(1000);// Effectuer des mesures chaque seconde
 800169c:	e725      	b.n	80014ea <main+0x2a>
 800169e:	bf00      	nop
 80016a0:	2000024c 	.word	0x2000024c
 80016a4:	200001f8 	.word	0x200001f8
 80016a8:	40020400 	.word	0x40020400
 80016ac:	2000025e 	.word	0x2000025e
 80016b0:	2000025f 	.word	0x2000025f
 80016b4:	20000260 	.word	0x20000260
 80016b8:	20000261 	.word	0x20000261
 80016bc:	20000262 	.word	0x20000262
 80016c0:	20000263 	.word	0x20000263
 80016c4:	2000025a 	.word	0x2000025a
 80016c8:	2000025c 	.word	0x2000025c
 80016cc:	40240000 	.word	0x40240000
 80016d0:	20000254 	.word	0x20000254
 80016d4:	20000250 	.word	0x20000250
 80016d8:	08006a88 	.word	0x08006a88
 80016dc:	20000264 	.word	0x20000264
 80016e0:	20000258 	.word	0x20000258
 80016e4:	08006a98 	.word	0x08006a98
 80016e8:	08006a9c 	.word	0x08006a9c

080016ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b092      	sub	sp, #72	; 0x48
 80016f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	2234      	movs	r2, #52	; 0x34
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 fad6 	bl	8003cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001700:	463b      	mov	r3, r7
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <SystemClock_Config+0x98>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001716:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <SystemClock_Config+0x98>)
 8001718:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800171c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800171e:	2302      	movs	r3, #2
 8001720:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001722:	2301      	movs	r3, #1
 8001724:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001726:	2310      	movs	r3, #16
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172a:	2302      	movs	r3, #2
 800172c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800172e:	2300      	movs	r3, #0
 8001730:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001732:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001738:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800173c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4618      	mov	r0, r3
 8001744:	f001 fa84 	bl	8002c50 <HAL_RCC_OscConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800174e:	f000 f81b 	bl	8001788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001752:	230f      	movs	r3, #15
 8001754:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001756:	2303      	movs	r3, #3
 8001758:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001766:	463b      	mov	r3, r7
 8001768:	2101      	movs	r1, #1
 800176a:	4618      	mov	r0, r3
 800176c:	f001 fda0 	bl	80032b0 <HAL_RCC_ClockConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001776:	f000 f807 	bl	8001788 <Error_Handler>
  }
}
 800177a:	bf00      	nop
 800177c:	3748      	adds	r7, #72	; 0x48
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40007000 	.word	0x40007000

08001788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800178c:	b672      	cpsid	i
}
 800178e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001790:	e7fe      	b.n	8001790 <Error_Handler+0x8>
	...

08001794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_MspInit+0x5c>)
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <HAL_MspInit+0x5c>)
 80017a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80017a4:	6253      	str	r3, [r2, #36]	; 0x24
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_MspInit+0x5c>)
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_MspInit+0x5c>)
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <HAL_MspInit+0x5c>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6213      	str	r3, [r2, #32]
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_MspInit+0x5c>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_MspInit+0x5c>)
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_MspInit+0x5c>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	6253      	str	r3, [r2, #36]	; 0x24
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_MspInit+0x5c>)
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017e2:	2007      	movs	r0, #7
 80017e4:	f000 fac8 	bl	8001d78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40023800 	.word	0x40023800

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <NMI_Handler+0x4>

080017fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <MemManage_Handler+0x4>

08001806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <UsageFault_Handler+0x4>

08001812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183a:	f000 f9af 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}

08001842 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  return 1;
 8001846:	2301      	movs	r3, #1
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <_kill>:

int _kill(int pid, int sig)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800185a:	f002 f9fd 	bl	8003c58 <__errno>
 800185e:	4603      	mov	r3, r0
 8001860:	2216      	movs	r2, #22
 8001862:	601a      	str	r2, [r3, #0]
  return -1;
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <_exit>:

void _exit (int status)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ffe7 	bl	8001850 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001882:	e7fe      	b.n	8001882 <_exit+0x12>

08001884 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	e00a      	b.n	80018ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001896:	f3af 8000 	nop.w
 800189a:	4601      	mov	r1, r0
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	60ba      	str	r2, [r7, #8]
 80018a2:	b2ca      	uxtb	r2, r1
 80018a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3301      	adds	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	dbf0      	blt.n	8001896 <_read+0x12>
  }

  return len;
 80018b4:	687b      	ldr	r3, [r7, #4]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	60f8      	str	r0, [r7, #12]
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	e009      	b.n	80018e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	60ba      	str	r2, [r7, #8]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	3301      	adds	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	dbf1      	blt.n	80018d0 <_write+0x12>
  }
  return len;
 80018ec:	687b      	ldr	r3, [r7, #4]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_close>:

int _close(int file)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800191c:	605a      	str	r2, [r3, #4]
  return 0;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr

0800192a <_isatty>:

int _isatty(int file)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800193e:	b480      	push	{r7}
 8001940:	b085      	sub	sp, #20
 8001942:	af00      	add	r7, sp, #0
 8001944:	60f8      	str	r0, [r7, #12]
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
	...

08001958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001960:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <_sbrk+0x5c>)
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <_sbrk+0x60>)
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <_sbrk+0x64>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d102      	bne.n	800197a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <_sbrk+0x64>)
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <_sbrk+0x68>)
 8001978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	429a      	cmp	r2, r3
 8001986:	d207      	bcs.n	8001998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001988:	f002 f966 	bl	8003c58 <__errno>
 800198c:	4603      	mov	r3, r0
 800198e:	220c      	movs	r2, #12
 8001990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	e009      	b.n	80019ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800199e:	4b07      	ldr	r3, [pc, #28]	; (80019bc <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	4a05      	ldr	r2, [pc, #20]	; (80019bc <_sbrk+0x64>)
 80019a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019aa:	68fb      	ldr	r3, [r7, #12]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20014000 	.word	0x20014000
 80019b8:	00000400 	.word	0x00000400
 80019bc:	20000364 	.word	0x20000364
 80019c0:	200003c0 	.word	0x200003c0

080019c4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <MX_USART2_UART_Init+0x50>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_USART2_UART_Init+0x4c>)
 8001a08:	f001 ff18 	bl	800383c <HAL_UART_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a12:	f7ff feb9 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000368 	.word	0x20000368
 8001a20:	40004400 	.word	0x40004400

08001a24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <HAL_UART_MspInit+0x7c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d127      	bne.n	8001a96 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <HAL_UART_MspInit+0x80>)
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	4a16      	ldr	r2, [pc, #88]	; (8001aa4 <HAL_UART_MspInit+0x80>)
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a50:	6253      	str	r3, [r2, #36]	; 0x24
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <HAL_UART_MspInit+0x80>)
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_UART_MspInit+0x80>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <HAL_UART_MspInit+0x80>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	61d3      	str	r3, [r2, #28]
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_UART_MspInit+0x80>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a76:	230c      	movs	r3, #12
 8001a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a86:	2307      	movs	r3, #7
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <HAL_UART_MspInit+0x84>)
 8001a92:	f000 f9a5 	bl	8001de0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	; 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40004400 	.word	0x40004400
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000

08001aac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aac:	480c      	ldr	r0, [pc, #48]	; (8001ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aae:	490d      	ldr	r1, [pc, #52]	; (8001ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab4:	e002      	b.n	8001abc <LoopCopyDataInit>

08001ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aba:	3304      	adds	r3, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac0:	d3f9      	bcc.n	8001ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ac4:	4c0a      	ldr	r4, [pc, #40]	; (8001af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac8:	e001      	b.n	8001ace <LoopFillZerobss>

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001acc:	3204      	adds	r2, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ad2:	f7ff ff77 	bl	80019c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad6:	f002 f8c5 	bl	8003c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ada:	f7ff fcf1 	bl	80014c0 <main>
  bx lr
 8001ade:	4770      	bx	lr
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ae8:	08006ebc 	.word	0x08006ebc
  ldr r2, =_sbss
 8001aec:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001af0:	200003c0 	.word	0x200003c0

08001af4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC1_IRQHandler>

08001af6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b00:	2003      	movs	r0, #3
 8001b02:	f000 f939 	bl	8001d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b06:	2000      	movs	r0, #0
 8001b08:	f000 f80e 	bl	8001b28 <HAL_InitTick>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	71fb      	strb	r3, [r7, #7]
 8001b16:	e001      	b.n	8001b1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b18:	f7ff fe3c 	bl	8001794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b34:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <HAL_InitTick+0x68>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d022      	beq.n	8001b82 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <HAL_InitTick+0x6c>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <HAL_InitTick+0x68>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 f938 	bl	8001dc6 <HAL_SYSTICK_Config>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10f      	bne.n	8001b7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b0f      	cmp	r3, #15
 8001b60:	d809      	bhi.n	8001b76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b62:	2200      	movs	r2, #0
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	f04f 30ff 	mov.w	r0, #4294967295
 8001b6a:	f000 f910 	bl	8001d8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <HAL_InitTick+0x70>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	e007      	b.n	8001b86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	e004      	b.n	8001b86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	e001      	b.n	8001b86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000008 	.word	0x20000008
 8001b94:	20000000 	.word	0x20000000
 8001b98:	20000004 	.word	0x20000004

08001b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_IncTick+0x1c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4413      	add	r3, r2
 8001baa:	4a03      	ldr	r2, [pc, #12]	; (8001bb8 <HAL_IncTick+0x1c>)
 8001bac:	6013      	str	r3, [r2, #0]
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	200003ac 	.word	0x200003ac
 8001bbc:	20000008 	.word	0x20000008

08001bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b02      	ldr	r3, [pc, #8]	; (8001bd0 <HAL_GetTick+0x10>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	200003ac 	.word	0x200003ac

08001bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bdc:	f7ff fff0 	bl	8001bc0 <HAL_GetTick>
 8001be0:	60b8      	str	r0, [r7, #8]
   uint32_t wait = Delay;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bec:	d004      	beq.n	8001bf8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_Delay+0x40>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bf8:	bf00      	nop
 8001bfa:	f7ff ffe1 	bl	8001bc0 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d8f7      	bhi.n	8001bfa <HAL_Delay+0x26>
  {
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000008 	.word	0x20000008

08001c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c34:	4013      	ands	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4a:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	60d3      	str	r3, [r2, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <__NVIC_GetPriorityGrouping+0x18>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	f003 0307 	and.w	r3, r3, #7
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	db0a      	blt.n	8001ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	490c      	ldr	r1, [pc, #48]	; (8001cc8 <__NVIC_SetPriority+0x4c>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	0112      	lsls	r2, r2, #4
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca4:	e00a      	b.n	8001cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4908      	ldr	r1, [pc, #32]	; (8001ccc <__NVIC_SetPriority+0x50>)
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	3b04      	subs	r3, #4
 8001cb4:	0112      	lsls	r2, r2, #4
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	440b      	add	r3, r1
 8001cba:	761a      	strb	r2, [r3, #24]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000e100 	.word	0xe000e100
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f1c3 0307 	rsb	r3, r3, #7
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	bf28      	it	cs
 8001cee:	2304      	movcs	r3, #4
 8001cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d902      	bls.n	8001d00 <NVIC_EncodePriority+0x30>
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3b03      	subs	r3, #3
 8001cfe:	e000      	b.n	8001d02 <NVIC_EncodePriority+0x32>
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	f04f 32ff 	mov.w	r2, #4294967295
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	401a      	ands	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d18:	f04f 31ff 	mov.w	r1, #4294967295
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	43d9      	mvns	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	4313      	orrs	r3, r2
         );
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3724      	adds	r7, #36	; 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d44:	d301      	bcc.n	8001d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00f      	b.n	8001d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <SysTick_Config+0x40>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d52:	210f      	movs	r1, #15
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	f7ff ff90 	bl	8001c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <SysTick_Config+0x40>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d62:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <SysTick_Config+0x40>)
 8001d64:	2207      	movs	r2, #7
 8001d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	e000e010 	.word	0xe000e010

08001d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff49 	bl	8001c18 <__NVIC_SetPriorityGrouping>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da0:	f7ff ff5e 	bl	8001c60 <__NVIC_GetPriorityGrouping>
 8001da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	6978      	ldr	r0, [r7, #20]
 8001dac:	f7ff ff90 	bl	8001cd0 <NVIC_EncodePriority>
 8001db0:	4602      	mov	r2, r0
 8001db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff5f 	bl	8001c7c <__NVIC_SetPriority>
}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ffb0 	bl	8001d34 <SysTick_Config>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001df6:	e160      	b.n	80020ba <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	fa01 f303 	lsl.w	r3, r1, r3
 8001e04:	4013      	ands	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 8152 	beq.w	80020b4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d005      	beq.n	8001e28 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d130      	bne.n	8001e8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001e5e:	2201      	movs	r2, #1
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	091b      	lsrs	r3, r3, #4
 8001e74:	f003 0201 	and.w	r2, r3, #1
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d017      	beq.n	8001ec6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d123      	bne.n	8001f1a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	08da      	lsrs	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3208      	adds	r2, #8
 8001eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ede:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	220f      	movs	r2, #15
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	08da      	lsrs	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3208      	adds	r2, #8
 8001f14:	6939      	ldr	r1, [r7, #16]
 8001f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	2203      	movs	r2, #3
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0203 	and.w	r2, r3, #3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 80ac 	beq.w	80020b4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5c:	4b5e      	ldr	r3, [pc, #376]	; (80020d8 <HAL_GPIO_Init+0x2f8>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4a5d      	ldr	r2, [pc, #372]	; (80020d8 <HAL_GPIO_Init+0x2f8>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6213      	str	r3, [r2, #32]
 8001f68:	4b5b      	ldr	r3, [pc, #364]	; (80020d8 <HAL_GPIO_Init+0x2f8>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f74:	4a59      	ldr	r2, [pc, #356]	; (80020dc <HAL_GPIO_Init+0x2fc>)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a51      	ldr	r2, [pc, #324]	; (80020e0 <HAL_GPIO_Init+0x300>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d025      	beq.n	8001fec <HAL_GPIO_Init+0x20c>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a50      	ldr	r2, [pc, #320]	; (80020e4 <HAL_GPIO_Init+0x304>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d01f      	beq.n	8001fe8 <HAL_GPIO_Init+0x208>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a4f      	ldr	r2, [pc, #316]	; (80020e8 <HAL_GPIO_Init+0x308>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d019      	beq.n	8001fe4 <HAL_GPIO_Init+0x204>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a4e      	ldr	r2, [pc, #312]	; (80020ec <HAL_GPIO_Init+0x30c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d013      	beq.n	8001fe0 <HAL_GPIO_Init+0x200>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a4d      	ldr	r2, [pc, #308]	; (80020f0 <HAL_GPIO_Init+0x310>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00d      	beq.n	8001fdc <HAL_GPIO_Init+0x1fc>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a4c      	ldr	r2, [pc, #304]	; (80020f4 <HAL_GPIO_Init+0x314>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d007      	beq.n	8001fd8 <HAL_GPIO_Init+0x1f8>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a4b      	ldr	r2, [pc, #300]	; (80020f8 <HAL_GPIO_Init+0x318>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d101      	bne.n	8001fd4 <HAL_GPIO_Init+0x1f4>
 8001fd0:	2306      	movs	r3, #6
 8001fd2:	e00c      	b.n	8001fee <HAL_GPIO_Init+0x20e>
 8001fd4:	2307      	movs	r3, #7
 8001fd6:	e00a      	b.n	8001fee <HAL_GPIO_Init+0x20e>
 8001fd8:	2305      	movs	r3, #5
 8001fda:	e008      	b.n	8001fee <HAL_GPIO_Init+0x20e>
 8001fdc:	2304      	movs	r3, #4
 8001fde:	e006      	b.n	8001fee <HAL_GPIO_Init+0x20e>
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e004      	b.n	8001fee <HAL_GPIO_Init+0x20e>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e002      	b.n	8001fee <HAL_GPIO_Init+0x20e>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <HAL_GPIO_Init+0x20e>
 8001fec:	2300      	movs	r3, #0
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	f002 0203 	and.w	r2, r2, #3
 8001ff4:	0092      	lsls	r2, r2, #2
 8001ff6:	4093      	lsls	r3, r2
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ffe:	4937      	ldr	r1, [pc, #220]	; (80020dc <HAL_GPIO_Init+0x2fc>)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	3302      	adds	r3, #2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800200c:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <HAL_GPIO_Init+0x31c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	43db      	mvns	r3, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002030:	4a32      	ldr	r2, [pc, #200]	; (80020fc <HAL_GPIO_Init+0x31c>)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002036:	4b31      	ldr	r3, [pc, #196]	; (80020fc <HAL_GPIO_Init+0x31c>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43db      	mvns	r3, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800205a:	4a28      	ldr	r2, [pc, #160]	; (80020fc <HAL_GPIO_Init+0x31c>)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002060:	4b26      	ldr	r3, [pc, #152]	; (80020fc <HAL_GPIO_Init+0x31c>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	43db      	mvns	r3, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002084:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <HAL_GPIO_Init+0x31c>)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800208a:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <HAL_GPIO_Init+0x31c>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	43db      	mvns	r3, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020ae:	4a13      	ldr	r2, [pc, #76]	; (80020fc <HAL_GPIO_Init+0x31c>)
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	3301      	adds	r3, #1
 80020b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f47f ae97 	bne.w	8001df8 <HAL_GPIO_Init+0x18>
  }
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	371c      	adds	r7, #28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40010000 	.word	0x40010000
 80020e0:	40020000 	.word	0x40020000
 80020e4:	40020400 	.word	0x40020400
 80020e8:	40020800 	.word	0x40020800
 80020ec:	40020c00 	.word	0x40020c00
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40021400 	.word	0x40021400
 80020f8:	40021800 	.word	0x40021800
 80020fc:	40010400 	.word	0x40010400

08002100 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e001      	b.n	8002122 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002122:	7bfb      	ldrb	r3, [r7, #15]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr

0800212e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	807b      	strh	r3, [r7, #2]
 800213a:	4613      	mov	r3, r2
 800213c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800213e:	787b      	ldrb	r3, [r7, #1]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002144:	887a      	ldrh	r2, [r7, #2]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800214a:	e003      	b.n	8002154 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	041a      	lsls	r2, r3, #16
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	619a      	str	r2, [r3, #24]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
	...

08002160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e12b      	b.n	80023ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe ff14 	bl	8000fb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2224      	movs	r2, #36	; 0x24
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021c4:	f001 fab2 	bl	800372c <HAL_RCC_GetPCLK1Freq>
 80021c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4a81      	ldr	r2, [pc, #516]	; (80023d4 <HAL_I2C_Init+0x274>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d807      	bhi.n	80021e4 <HAL_I2C_Init+0x84>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4a80      	ldr	r2, [pc, #512]	; (80023d8 <HAL_I2C_Init+0x278>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	bf94      	ite	ls
 80021dc:	2301      	movls	r3, #1
 80021de:	2300      	movhi	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	e006      	b.n	80021f2 <HAL_I2C_Init+0x92>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4a7d      	ldr	r2, [pc, #500]	; (80023dc <HAL_I2C_Init+0x27c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	bf94      	ite	ls
 80021ec:	2301      	movls	r3, #1
 80021ee:	2300      	movhi	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0e7      	b.n	80023ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4a78      	ldr	r2, [pc, #480]	; (80023e0 <HAL_I2C_Init+0x280>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	0c9b      	lsrs	r3, r3, #18
 8002204:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	430a      	orrs	r2, r1
 8002218:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4a6a      	ldr	r2, [pc, #424]	; (80023d4 <HAL_I2C_Init+0x274>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d802      	bhi.n	8002234 <HAL_I2C_Init+0xd4>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	3301      	adds	r3, #1
 8002232:	e009      	b.n	8002248 <HAL_I2C_Init+0xe8>
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800223a:	fb02 f303 	mul.w	r3, r2, r3
 800223e:	4a69      	ldr	r2, [pc, #420]	; (80023e4 <HAL_I2C_Init+0x284>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	099b      	lsrs	r3, r3, #6
 8002246:	3301      	adds	r3, #1
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	430b      	orrs	r3, r1
 800224e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800225a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	495c      	ldr	r1, [pc, #368]	; (80023d4 <HAL_I2C_Init+0x274>)
 8002264:	428b      	cmp	r3, r1
 8002266:	d819      	bhi.n	800229c <HAL_I2C_Init+0x13c>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1e59      	subs	r1, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	fbb1 f3f3 	udiv	r3, r1, r3
 8002276:	1c59      	adds	r1, r3, #1
 8002278:	f640 73fc 	movw	r3, #4092	; 0xffc
 800227c:	400b      	ands	r3, r1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_I2C_Init+0x138>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1e59      	subs	r1, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002290:	3301      	adds	r3, #1
 8002292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002296:	e051      	b.n	800233c <HAL_I2C_Init+0x1dc>
 8002298:	2304      	movs	r3, #4
 800229a:	e04f      	b.n	800233c <HAL_I2C_Init+0x1dc>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d111      	bne.n	80022c8 <HAL_I2C_Init+0x168>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1e58      	subs	r0, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	440b      	add	r3, r1
 80022b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf0c      	ite	eq
 80022c0:	2301      	moveq	r3, #1
 80022c2:	2300      	movne	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	e012      	b.n	80022ee <HAL_I2C_Init+0x18e>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1e58      	subs	r0, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	0099      	lsls	r1, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	fbb0 f3f3 	udiv	r3, r0, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Init+0x196>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e022      	b.n	800233c <HAL_I2C_Init+0x1dc>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10e      	bne.n	800231c <HAL_I2C_Init+0x1bc>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1e58      	subs	r0, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6859      	ldr	r1, [r3, #4]
 8002306:	460b      	mov	r3, r1
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	440b      	add	r3, r1
 800230c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002310:	3301      	adds	r3, #1
 8002312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800231a:	e00f      	b.n	800233c <HAL_I2C_Init+0x1dc>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1e58      	subs	r0, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	0099      	lsls	r1, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002332:	3301      	adds	r3, #1
 8002334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	6809      	ldr	r1, [r1, #0]
 8002340:	4313      	orrs	r3, r2
 8002342:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800236a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6911      	ldr	r1, [r2, #16]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68d2      	ldr	r2, [r2, #12]
 8002376:	4311      	orrs	r1, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	430b      	orrs	r3, r1
 800237e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	000186a0 	.word	0x000186a0
 80023d8:	001e847f 	.word	0x001e847f
 80023dc:	003d08ff 	.word	0x003d08ff
 80023e0:	431bde83 	.word	0x431bde83
 80023e4:	10624dd3 	.word	0x10624dd3

080023e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	461a      	mov	r2, r3
 80023f4:	460b      	mov	r3, r1
 80023f6:	817b      	strh	r3, [r7, #10]
 80023f8:	4613      	mov	r3, r2
 80023fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7ff fbe0 	bl	8001bc0 <HAL_GetTick>
 8002400:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b20      	cmp	r3, #32
 800240c:	f040 80e0 	bne.w	80025d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2319      	movs	r3, #25
 8002416:	2201      	movs	r2, #1
 8002418:	4970      	ldr	r1, [pc, #448]	; (80025dc <HAL_I2C_Master_Transmit+0x1f4>)
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fa92 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002426:	2302      	movs	r3, #2
 8002428:	e0d3      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_I2C_Master_Transmit+0x50>
 8002434:	2302      	movs	r3, #2
 8002436:	e0cc      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b01      	cmp	r3, #1
 800244c:	d007      	beq.n	800245e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 0201 	orr.w	r2, r2, #1
 800245c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800246c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2221      	movs	r2, #33	; 0x21
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2210      	movs	r2, #16
 800247a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	893a      	ldrh	r2, [r7, #8]
 800248e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4a50      	ldr	r2, [pc, #320]	; (80025e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800249e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024a0:	8979      	ldrh	r1, [r7, #10]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	6a3a      	ldr	r2, [r7, #32]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f9ca 	bl	8002840 <I2C_MasterRequestWrite>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e08d      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024cc:	e066      	b.n	800259c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	6a39      	ldr	r1, [r7, #32]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 fb0c 	bl	8002af0 <I2C_WaitOnTXEFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00d      	beq.n	80024fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d107      	bne.n	80024f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e06b      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	781a      	ldrb	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b04      	cmp	r3, #4
 8002536:	d11b      	bne.n	8002570 <HAL_I2C_Master_Transmit+0x188>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	d017      	beq.n	8002570 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	781a      	ldrb	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	6a39      	ldr	r1, [r7, #32]
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fafc 	bl	8002b72 <I2C_WaitOnBTFFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00d      	beq.n	800259c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	2b04      	cmp	r3, #4
 8002586:	d107      	bne.n	8002598 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002596:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e01a      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d194      	bne.n	80024ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	e000      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025d0:	2302      	movs	r3, #2
  }
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	00100002 	.word	0x00100002
 80025e0:	ffff0000 	.word	0xffff0000

080025e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	; 0x28
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	460b      	mov	r3, r1
 80025f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80025f4:	f7ff fae4 	bl	8001bc0 <HAL_GetTick>
 80025f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80025fa:	2301      	movs	r3, #1
 80025fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b20      	cmp	r3, #32
 8002608:	f040 8111 	bne.w	800282e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2319      	movs	r3, #25
 8002612:	2201      	movs	r2, #1
 8002614:	4988      	ldr	r1, [pc, #544]	; (8002838 <HAL_I2C_IsDeviceReady+0x254>)
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f994 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002622:	2302      	movs	r3, #2
 8002624:	e104      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_I2C_IsDeviceReady+0x50>
 8002630:	2302      	movs	r3, #2
 8002632:	e0fd      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b01      	cmp	r3, #1
 8002648:	d007      	beq.n	800265a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002668:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2224      	movs	r2, #36	; 0x24
 800266e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4a70      	ldr	r2, [pc, #448]	; (800283c <HAL_I2C_IsDeviceReady+0x258>)
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800268c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2200      	movs	r2, #0
 8002696:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f952 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00d      	beq.n	80026c2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026b4:	d103      	bne.n	80026be <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e0b6      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026c2:	897b      	ldrh	r3, [r7, #10]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80026d2:	f7ff fa75 	bl	8001bc0 <HAL_GetTick>
 80026d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	bf0c      	ite	eq
 80026e6:	2301      	moveq	r3, #1
 80026e8:	2300      	movne	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fc:	bf0c      	ite	eq
 80026fe:	2301      	moveq	r3, #1
 8002700:	2300      	movne	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002706:	e025      	b.n	8002754 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002708:	f7ff fa5a 	bl	8001bc0 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d302      	bcc.n	800271e <HAL_I2C_IsDeviceReady+0x13a>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d103      	bne.n	8002726 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	22a0      	movs	r2, #160	; 0xa0
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b02      	cmp	r3, #2
 8002732:	bf0c      	ite	eq
 8002734:	2301      	moveq	r3, #1
 8002736:	2300      	movne	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274a:	bf0c      	ite	eq
 800274c:	2301      	moveq	r3, #1
 800274e:	2300      	movne	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2ba0      	cmp	r3, #160	; 0xa0
 800275e:	d005      	beq.n	800276c <HAL_I2C_IsDeviceReady+0x188>
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d102      	bne.n	800276c <HAL_I2C_IsDeviceReady+0x188>
 8002766:	7dbb      	ldrb	r3, [r7, #22]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0cd      	beq.n	8002708 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b02      	cmp	r3, #2
 8002780:	d129      	bne.n	80027d6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002790:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2319      	movs	r3, #25
 80027ae:	2201      	movs	r2, #1
 80027b0:	4921      	ldr	r1, [pc, #132]	; (8002838 <HAL_I2C_IsDeviceReady+0x254>)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f8c6 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e036      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	e02c      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027ee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	2319      	movs	r3, #25
 80027f6:	2201      	movs	r2, #1
 80027f8:	490f      	ldr	r1, [pc, #60]	; (8002838 <HAL_I2C_IsDeviceReady+0x254>)
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f8a2 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e012      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	3301      	adds	r3, #1
 800280e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	429a      	cmp	r2, r3
 8002816:	f4ff af32 	bcc.w	800267e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800282e:	2302      	movs	r3, #2
  }
}
 8002830:	4618      	mov	r0, r3
 8002832:	3720      	adds	r7, #32
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	00100002 	.word	0x00100002
 800283c:	ffff0000 	.word	0xffff0000

08002840 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	460b      	mov	r3, r1
 800284e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b08      	cmp	r3, #8
 800285a:	d006      	beq.n	800286a <I2C_MasterRequestWrite+0x2a>
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d003      	beq.n	800286a <I2C_MasterRequestWrite+0x2a>
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002868:	d108      	bne.n	800287c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e00b      	b.n	8002894 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	2b12      	cmp	r3, #18
 8002882:	d107      	bne.n	8002894 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002892:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f84f 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00d      	beq.n	80028c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ba:	d103      	bne.n	80028c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e035      	b.n	8002934 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028d0:	d108      	bne.n	80028e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028d2:	897b      	ldrh	r3, [r7, #10]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028e0:	611a      	str	r2, [r3, #16]
 80028e2:	e01b      	b.n	800291c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028e4:	897b      	ldrh	r3, [r7, #10]
 80028e6:	11db      	asrs	r3, r3, #7
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f003 0306 	and.w	r3, r3, #6
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f063 030f 	orn	r3, r3, #15
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	490e      	ldr	r1, [pc, #56]	; (800293c <I2C_MasterRequestWrite+0xfc>)
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f875 	bl	80029f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e010      	b.n	8002934 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002912:	897b      	ldrh	r3, [r7, #10]
 8002914:	b2da      	uxtb	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4907      	ldr	r1, [pc, #28]	; (8002940 <I2C_MasterRequestWrite+0x100>)
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f865 	bl	80029f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	00010008 	.word	0x00010008
 8002940:	00010002 	.word	0x00010002

08002944 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	4613      	mov	r3, r2
 8002952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002954:	e025      	b.n	80029a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d021      	beq.n	80029a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800295e:	f7ff f92f 	bl	8001bc0 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d302      	bcc.n	8002974 <I2C_WaitOnFlagUntilTimeout+0x30>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d116      	bne.n	80029a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f043 0220 	orr.w	r2, r3, #32
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e023      	b.n	80029ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d10d      	bne.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	43da      	mvns	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4013      	ands	r3, r2
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bf0c      	ite	eq
 80029be:	2301      	moveq	r3, #1
 80029c0:	2300      	movne	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	e00c      	b.n	80029e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	43da      	mvns	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4013      	ands	r3, r2
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bf0c      	ite	eq
 80029da:	2301      	moveq	r3, #1
 80029dc:	2300      	movne	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d0b6      	beq.n	8002956 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a00:	e051      	b.n	8002aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a10:	d123      	bne.n	8002a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a20:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a2a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f043 0204 	orr.w	r2, r3, #4
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e046      	b.n	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a60:	d021      	beq.n	8002aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a62:	f7ff f8ad 	bl	8001bc0 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d302      	bcc.n	8002a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d116      	bne.n	8002aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f043 0220 	orr.w	r2, r3, #32
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e020      	b.n	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	0c1b      	lsrs	r3, r3, #16
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d10c      	bne.n	8002aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4013      	ands	r3, r2
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bf14      	ite	ne
 8002ac2:	2301      	movne	r3, #1
 8002ac4:	2300      	moveq	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	e00b      	b.n	8002ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	43da      	mvns	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf14      	ite	ne
 8002adc:	2301      	movne	r3, #1
 8002ade:	2300      	moveq	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d18d      	bne.n	8002a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002afc:	e02d      	b.n	8002b5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f878 	bl	8002bf4 <I2C_IsAcknowledgeFailed>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e02d      	b.n	8002b6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d021      	beq.n	8002b5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b16:	f7ff f853 	bl	8001bc0 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d302      	bcc.n	8002b2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d116      	bne.n	8002b5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f043 0220 	orr.w	r2, r3, #32
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e007      	b.n	8002b6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b64:	2b80      	cmp	r3, #128	; 0x80
 8002b66:	d1ca      	bne.n	8002afe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b7e:	e02d      	b.n	8002bdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 f837 	bl	8002bf4 <I2C_IsAcknowledgeFailed>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e02d      	b.n	8002bec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b96:	d021      	beq.n	8002bdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b98:	f7ff f812 	bl	8001bc0 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d302      	bcc.n	8002bae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d116      	bne.n	8002bdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e007      	b.n	8002bec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d1ca      	bne.n	8002b80 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0a:	d11b      	bne.n	8002c44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	f043 0204 	orr.w	r2, r3, #4
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e31d      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c62:	4b94      	ldr	r3, [pc, #592]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c6c:	4b91      	ldr	r3, [pc, #580]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c74:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d07b      	beq.n	8002d7a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d006      	beq.n	8002c96 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d10f      	bne.n	8002cae <HAL_RCC_OscConfig+0x5e>
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c94:	d10b      	bne.n	8002cae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c96:	4b87      	ldr	r3, [pc, #540]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d06a      	beq.n	8002d78 <HAL_RCC_OscConfig+0x128>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d166      	bne.n	8002d78 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e2f7      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d106      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x74>
 8002cb6:	4b7f      	ldr	r3, [pc, #508]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a7e      	ldr	r2, [pc, #504]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e02d      	b.n	8002d20 <HAL_RCC_OscConfig+0xd0>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10c      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x96>
 8002ccc:	4b79      	ldr	r3, [pc, #484]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a78      	ldr	r2, [pc, #480]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd6:	6013      	str	r3, [r2, #0]
 8002cd8:	4b76      	ldr	r3, [pc, #472]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a75      	ldr	r2, [pc, #468]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	e01c      	b.n	8002d20 <HAL_RCC_OscConfig+0xd0>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b05      	cmp	r3, #5
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCC_OscConfig+0xb8>
 8002cee:	4b71      	ldr	r3, [pc, #452]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a70      	ldr	r2, [pc, #448]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b6e      	ldr	r3, [pc, #440]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a6d      	ldr	r2, [pc, #436]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e00b      	b.n	8002d20 <HAL_RCC_OscConfig+0xd0>
 8002d08:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a69      	ldr	r2, [pc, #420]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	4b67      	ldr	r3, [pc, #412]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a66      	ldr	r2, [pc, #408]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d013      	beq.n	8002d50 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7fe ff4a 	bl	8001bc0 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d30:	f7fe ff46 	bl	8001bc0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	; 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e2ad      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d42:	4b5c      	ldr	r3, [pc, #368]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0xe0>
 8002d4e:	e014      	b.n	8002d7a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fe ff36 	bl	8001bc0 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d58:	f7fe ff32 	bl	8001bc0 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	; 0x64
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e299      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d6a:	4b52      	ldr	r3, [pc, #328]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x108>
 8002d76:	e000      	b.n	8002d7a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d05a      	beq.n	8002e3c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2b0c      	cmp	r3, #12
 8002d90:	d119      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x176>
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d116      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d98:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_OscConfig+0x160>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e276      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db0:	4b40      	ldr	r3, [pc, #256]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	021b      	lsls	r3, r3, #8
 8002dbe:	493d      	ldr	r1, [pc, #244]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc4:	e03a      	b.n	8002e3c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d020      	beq.n	8002e10 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dce:	4b3a      	ldr	r3, [pc, #232]	; (8002eb8 <HAL_RCC_OscConfig+0x268>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7fe fef4 	bl	8001bc0 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ddc:	f7fe fef0 	bl	8001bc0 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e257      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dee:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfa:	4b2e      	ldr	r3, [pc, #184]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	492a      	ldr	r1, [pc, #168]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	604b      	str	r3, [r1, #4]
 8002e0e:	e015      	b.n	8002e3c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e10:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <HAL_RCC_OscConfig+0x268>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e16:	f7fe fed3 	bl	8001bc0 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1e:	f7fe fecf 	bl	8001bc0 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e236      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80b8 	beq.w	8002fba <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d170      	bne.n	8002f32 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e50:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_RCC_OscConfig+0x218>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e21a      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1a      	ldr	r2, [r3, #32]
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d921      	bls.n	8002ebc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fc7d 	bl	800377c <RCC_SetFlashLatencyFromMSIRange>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e208      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e8c:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	4906      	ldr	r1, [pc, #24]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	061b      	lsls	r3, r3, #24
 8002eac:	4901      	ldr	r1, [pc, #4]	; (8002eb4 <HAL_RCC_OscConfig+0x264>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	604b      	str	r3, [r1, #4]
 8002eb2:	e020      	b.n	8002ef6 <HAL_RCC_OscConfig+0x2a6>
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ebc:	4b99      	ldr	r3, [pc, #612]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4996      	ldr	r1, [pc, #600]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ece:	4b95      	ldr	r3, [pc, #596]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	061b      	lsls	r3, r3, #24
 8002edc:	4991      	ldr	r1, [pc, #580]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fc48 	bl	800377c <RCC_SetFlashLatencyFromMSIRange>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e1d3      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	0b5b      	lsrs	r3, r3, #13
 8002efc:	3301      	adds	r3, #1
 8002efe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f06:	4a87      	ldr	r2, [pc, #540]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8002f08:	6892      	ldr	r2, [r2, #8]
 8002f0a:	0912      	lsrs	r2, r2, #4
 8002f0c:	f002 020f 	and.w	r2, r2, #15
 8002f10:	4985      	ldr	r1, [pc, #532]	; (8003128 <HAL_RCC_OscConfig+0x4d8>)
 8002f12:	5c8a      	ldrb	r2, [r1, r2]
 8002f14:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f16:	4a85      	ldr	r2, [pc, #532]	; (800312c <HAL_RCC_OscConfig+0x4dc>)
 8002f18:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f1a:	4b85      	ldr	r3, [pc, #532]	; (8003130 <HAL_RCC_OscConfig+0x4e0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe fe02 	bl	8001b28 <HAL_InitTick>
 8002f24:	4603      	mov	r3, r0
 8002f26:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d045      	beq.n	8002fba <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	e1b5      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d029      	beq.n	8002f8e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f3a:	4b7e      	ldr	r3, [pc, #504]	; (8003134 <HAL_RCC_OscConfig+0x4e4>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7fe fe3e 	bl	8001bc0 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f48:	f7fe fe3a 	bl	8001bc0 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e1a1      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f5a:	4b72      	ldr	r3, [pc, #456]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f66:	4b6f      	ldr	r3, [pc, #444]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	496c      	ldr	r1, [pc, #432]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f78:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	061b      	lsls	r3, r3, #24
 8002f86:	4967      	ldr	r1, [pc, #412]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
 8002f8c:	e015      	b.n	8002fba <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f8e:	4b69      	ldr	r3, [pc, #420]	; (8003134 <HAL_RCC_OscConfig+0x4e4>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fe fe14 	bl	8001bc0 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f9c:	f7fe fe10 	bl	8001bc0 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e177      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002fae:	4b5d      	ldr	r3, [pc, #372]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d030      	beq.n	8003028 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d016      	beq.n	8002ffc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fce:	4b5a      	ldr	r3, [pc, #360]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd4:	f7fe fdf4 	bl	8001bc0 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fdc:	f7fe fdf0 	bl	8001bc0 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e157      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fee:	4b4d      	ldr	r3, [pc, #308]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0x38c>
 8002ffa:	e015      	b.n	8003028 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ffc:	4b4e      	ldr	r3, [pc, #312]	; (8003138 <HAL_RCC_OscConfig+0x4e8>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003002:	f7fe fddd 	bl	8001bc0 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800300a:	f7fe fdd9 	bl	8001bc0 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e140      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800301c:	4b41      	ldr	r3, [pc, #260]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 800301e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f0      	bne.n	800300a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80b5 	beq.w	80031a0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003036:	2300      	movs	r3, #0
 8003038:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303a:	4b3a      	ldr	r3, [pc, #232]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10d      	bne.n	8003062 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	4b37      	ldr	r3, [pc, #220]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	4a36      	ldr	r2, [pc, #216]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 800304c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003050:	6253      	str	r3, [r2, #36]	; 0x24
 8003052:	4b34      	ldr	r3, [pc, #208]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800305e:	2301      	movs	r3, #1
 8003060:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003062:	4b36      	ldr	r3, [pc, #216]	; (800313c <HAL_RCC_OscConfig+0x4ec>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306a:	2b00      	cmp	r3, #0
 800306c:	d118      	bne.n	80030a0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800306e:	4b33      	ldr	r3, [pc, #204]	; (800313c <HAL_RCC_OscConfig+0x4ec>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a32      	ldr	r2, [pc, #200]	; (800313c <HAL_RCC_OscConfig+0x4ec>)
 8003074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307a:	f7fe fda1 	bl	8001bc0 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003082:	f7fe fd9d 	bl	8001bc0 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b64      	cmp	r3, #100	; 0x64
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e104      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003094:	4b29      	ldr	r3, [pc, #164]	; (800313c <HAL_RCC_OscConfig+0x4ec>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d106      	bne.n	80030b6 <HAL_RCC_OscConfig+0x466>
 80030a8:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 80030aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ac:	4a1d      	ldr	r2, [pc, #116]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 80030ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b2:	6353      	str	r3, [r2, #52]	; 0x34
 80030b4:	e02d      	b.n	8003112 <HAL_RCC_OscConfig+0x4c2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x488>
 80030be:	4b19      	ldr	r3, [pc, #100]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 80030c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c2:	4a18      	ldr	r2, [pc, #96]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 80030c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030c8:	6353      	str	r3, [r2, #52]	; 0x34
 80030ca:	4b16      	ldr	r3, [pc, #88]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 80030cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ce:	4a15      	ldr	r2, [pc, #84]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 80030d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030d4:	6353      	str	r3, [r2, #52]	; 0x34
 80030d6:	e01c      	b.n	8003112 <HAL_RCC_OscConfig+0x4c2>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b05      	cmp	r3, #5
 80030de:	d10c      	bne.n	80030fa <HAL_RCC_OscConfig+0x4aa>
 80030e0:	4b10      	ldr	r3, [pc, #64]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 80030e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e4:	4a0f      	ldr	r2, [pc, #60]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 80030e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ea:	6353      	str	r3, [r2, #52]	; 0x34
 80030ec:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 80030ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f0:	4a0c      	ldr	r2, [pc, #48]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 80030f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f6:	6353      	str	r3, [r2, #52]	; 0x34
 80030f8:	e00b      	b.n	8003112 <HAL_RCC_OscConfig+0x4c2>
 80030fa:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 80030fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fe:	4a09      	ldr	r2, [pc, #36]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8003100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003104:	6353      	str	r3, [r2, #52]	; 0x34
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 8003108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310a:	4a06      	ldr	r2, [pc, #24]	; (8003124 <HAL_RCC_OscConfig+0x4d4>)
 800310c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003110:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d024      	beq.n	8003164 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311a:	f7fe fd51 	bl	8001bc0 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003120:	e019      	b.n	8003156 <HAL_RCC_OscConfig+0x506>
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800
 8003128:	08006abc 	.word	0x08006abc
 800312c:	20000000 	.word	0x20000000
 8003130:	20000004 	.word	0x20000004
 8003134:	42470020 	.word	0x42470020
 8003138:	42470680 	.word	0x42470680
 800313c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	f7fe fd3e 	bl	8001bc0 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	; 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e0a3      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003156:	4b54      	ldr	r3, [pc, #336]	; (80032a8 <HAL_RCC_OscConfig+0x658>)
 8003158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0ee      	beq.n	8003140 <HAL_RCC_OscConfig+0x4f0>
 8003162:	e014      	b.n	800318e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003164:	f7fe fd2c 	bl	8001bc0 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800316a:	e00a      	b.n	8003182 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800316c:	f7fe fd28 	bl	8001bc0 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	; 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e08d      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003182:	4b49      	ldr	r3, [pc, #292]	; (80032a8 <HAL_RCC_OscConfig+0x658>)
 8003184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1ee      	bne.n	800316c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800318e:	7ffb      	ldrb	r3, [r7, #31]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d105      	bne.n	80031a0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003194:	4b44      	ldr	r3, [pc, #272]	; (80032a8 <HAL_RCC_OscConfig+0x658>)
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	4a43      	ldr	r2, [pc, #268]	; (80032a8 <HAL_RCC_OscConfig+0x658>)
 800319a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800319e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d079      	beq.n	800329c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2b0c      	cmp	r3, #12
 80031ac:	d056      	beq.n	800325c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d13b      	bne.n	800322e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b6:	4b3d      	ldr	r3, [pc, #244]	; (80032ac <HAL_RCC_OscConfig+0x65c>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fe fd00 	bl	8001bc0 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c4:	f7fe fcfc 	bl	8001bc0 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e063      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031d6:	4b34      	ldr	r3, [pc, #208]	; (80032a8 <HAL_RCC_OscConfig+0x658>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e2:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <HAL_RCC_OscConfig+0x658>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	4319      	orrs	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	430b      	orrs	r3, r1
 80031fa:	492b      	ldr	r1, [pc, #172]	; (80032a8 <HAL_RCC_OscConfig+0x658>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003200:	4b2a      	ldr	r3, [pc, #168]	; (80032ac <HAL_RCC_OscConfig+0x65c>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003206:	f7fe fcdb 	bl	8001bc0 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320e:	f7fe fcd7 	bl	8001bc0 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e03e      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003220:	4b21      	ldr	r3, [pc, #132]	; (80032a8 <HAL_RCC_OscConfig+0x658>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x5be>
 800322c:	e036      	b.n	800329c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322e:	4b1f      	ldr	r3, [pc, #124]	; (80032ac <HAL_RCC_OscConfig+0x65c>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fe fcc4 	bl	8001bc0 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323c:	f7fe fcc0 	bl	8001bc0 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e027      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800324e:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <HAL_RCC_OscConfig+0x658>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x5ec>
 800325a:	e01f      	b.n	800329c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e01a      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <HAL_RCC_OscConfig+0x658>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003278:	429a      	cmp	r2, r3
 800327a:	d10d      	bne.n	8003298 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003286:	429a      	cmp	r2, r3
 8003288:	d106      	bne.n	8003298 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800
 80032ac:	42470060 	.word	0x42470060

080032b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e11a      	b.n	80034fa <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032c4:	4b8f      	ldr	r3, [pc, #572]	; (8003504 <HAL_RCC_ClockConfig+0x254>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d919      	bls.n	8003306 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d105      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x34>
 80032d8:	4b8a      	ldr	r3, [pc, #552]	; (8003504 <HAL_RCC_ClockConfig+0x254>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a89      	ldr	r2, [pc, #548]	; (8003504 <HAL_RCC_ClockConfig+0x254>)
 80032de:	f043 0304 	orr.w	r3, r3, #4
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	4b87      	ldr	r3, [pc, #540]	; (8003504 <HAL_RCC_ClockConfig+0x254>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f023 0201 	bic.w	r2, r3, #1
 80032ec:	4985      	ldr	r1, [pc, #532]	; (8003504 <HAL_RCC_ClockConfig+0x254>)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f4:	4b83      	ldr	r3, [pc, #524]	; (8003504 <HAL_RCC_ClockConfig+0x254>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d001      	beq.n	8003306 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e0f9      	b.n	80034fa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003312:	4b7d      	ldr	r3, [pc, #500]	; (8003508 <HAL_RCC_ClockConfig+0x258>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	497a      	ldr	r1, [pc, #488]	; (8003508 <HAL_RCC_ClockConfig+0x258>)
 8003320:	4313      	orrs	r3, r2
 8003322:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 808e 	beq.w	800344e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d107      	bne.n	800334a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800333a:	4b73      	ldr	r3, [pc, #460]	; (8003508 <HAL_RCC_ClockConfig+0x258>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d121      	bne.n	800338a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e0d7      	b.n	80034fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b03      	cmp	r3, #3
 8003350:	d107      	bne.n	8003362 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003352:	4b6d      	ldr	r3, [pc, #436]	; (8003508 <HAL_RCC_ClockConfig+0x258>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d115      	bne.n	800338a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e0cb      	b.n	80034fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d107      	bne.n	800337a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800336a:	4b67      	ldr	r3, [pc, #412]	; (8003508 <HAL_RCC_ClockConfig+0x258>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e0bf      	b.n	80034fa <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800337a:	4b63      	ldr	r3, [pc, #396]	; (8003508 <HAL_RCC_ClockConfig+0x258>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e0b7      	b.n	80034fa <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800338a:	4b5f      	ldr	r3, [pc, #380]	; (8003508 <HAL_RCC_ClockConfig+0x258>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f023 0203 	bic.w	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	495c      	ldr	r1, [pc, #368]	; (8003508 <HAL_RCC_ClockConfig+0x258>)
 8003398:	4313      	orrs	r3, r2
 800339a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800339c:	f7fe fc10 	bl	8001bc0 <HAL_GetTick>
 80033a0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d112      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033aa:	e00a      	b.n	80033c2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ac:	f7fe fc08 	bl	8001bc0 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e09b      	b.n	80034fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033c2:	4b51      	ldr	r3, [pc, #324]	; (8003508 <HAL_RCC_ClockConfig+0x258>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d1ee      	bne.n	80033ac <HAL_RCC_ClockConfig+0xfc>
 80033ce:	e03e      	b.n	800344e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d112      	bne.n	80033fe <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033da:	f7fe fbf1 	bl	8001bc0 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e084      	b.n	80034fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033f0:	4b45      	ldr	r3, [pc, #276]	; (8003508 <HAL_RCC_ClockConfig+0x258>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 030c 	and.w	r3, r3, #12
 80033f8:	2b0c      	cmp	r3, #12
 80033fa:	d1ee      	bne.n	80033da <HAL_RCC_ClockConfig+0x12a>
 80033fc:	e027      	b.n	800344e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d11d      	bne.n	8003442 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003406:	e00a      	b.n	800341e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003408:	f7fe fbda 	bl	8001bc0 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	; 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e06d      	b.n	80034fa <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800341e:	4b3a      	ldr	r3, [pc, #232]	; (8003508 <HAL_RCC_ClockConfig+0x258>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b04      	cmp	r3, #4
 8003428:	d1ee      	bne.n	8003408 <HAL_RCC_ClockConfig+0x158>
 800342a:	e010      	b.n	800344e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342c:	f7fe fbc8 	bl	8001bc0 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	; 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e05b      	b.n	80034fa <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003442:	4b31      	ldr	r3, [pc, #196]	; (8003508 <HAL_RCC_ClockConfig+0x258>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1ee      	bne.n	800342c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800344e:	4b2d      	ldr	r3, [pc, #180]	; (8003504 <HAL_RCC_ClockConfig+0x254>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d219      	bcs.n	8003490 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <HAL_RCC_ClockConfig+0x1be>
 8003462:	4b28      	ldr	r3, [pc, #160]	; (8003504 <HAL_RCC_ClockConfig+0x254>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a27      	ldr	r2, [pc, #156]	; (8003504 <HAL_RCC_ClockConfig+0x254>)
 8003468:	f043 0304 	orr.w	r3, r3, #4
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	4b25      	ldr	r3, [pc, #148]	; (8003504 <HAL_RCC_ClockConfig+0x254>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 0201 	bic.w	r2, r3, #1
 8003476:	4923      	ldr	r1, [pc, #140]	; (8003504 <HAL_RCC_ClockConfig+0x254>)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	4313      	orrs	r3, r2
 800347c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347e:	4b21      	ldr	r3, [pc, #132]	; (8003504 <HAL_RCC_ClockConfig+0x254>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d001      	beq.n	8003490 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e034      	b.n	80034fa <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800349c:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <HAL_RCC_ClockConfig+0x258>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4917      	ldr	r1, [pc, #92]	; (8003508 <HAL_RCC_ClockConfig+0x258>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ba:	4b13      	ldr	r3, [pc, #76]	; (8003508 <HAL_RCC_ClockConfig+0x258>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	490f      	ldr	r1, [pc, #60]	; (8003508 <HAL_RCC_ClockConfig+0x258>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034ce:	f000 f823 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80034d2:	4602      	mov	r2, r0
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <HAL_RCC_ClockConfig+0x258>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	490b      	ldr	r1, [pc, #44]	; (800350c <HAL_RCC_ClockConfig+0x25c>)
 80034e0:	5ccb      	ldrb	r3, [r1, r3]
 80034e2:	fa22 f303 	lsr.w	r3, r2, r3
 80034e6:	4a0a      	ldr	r2, [pc, #40]	; (8003510 <HAL_RCC_ClockConfig+0x260>)
 80034e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034ea:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <HAL_RCC_ClockConfig+0x264>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe fb1a 	bl	8001b28 <HAL_InitTick>
 80034f4:	4603      	mov	r3, r0
 80034f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80034f8:	7afb      	ldrb	r3, [r7, #11]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40023c00 	.word	0x40023c00
 8003508:	40023800 	.word	0x40023800
 800350c:	08006abc 	.word	0x08006abc
 8003510:	20000000 	.word	0x20000000
 8003514:	20000004 	.word	0x20000004

08003518 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800351c:	b092      	sub	sp, #72	; 0x48
 800351e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003520:	4b79      	ldr	r3, [pc, #484]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003528:	f003 030c 	and.w	r3, r3, #12
 800352c:	2b0c      	cmp	r3, #12
 800352e:	d00d      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0x34>
 8003530:	2b0c      	cmp	r3, #12
 8003532:	f200 80d5 	bhi.w	80036e0 <HAL_RCC_GetSysClockFreq+0x1c8>
 8003536:	2b04      	cmp	r3, #4
 8003538:	d002      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0x28>
 800353a:	2b08      	cmp	r3, #8
 800353c:	d003      	beq.n	8003546 <HAL_RCC_GetSysClockFreq+0x2e>
 800353e:	e0cf      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003540:	4b72      	ldr	r3, [pc, #456]	; (800370c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003542:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8003544:	e0da      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003546:	4b72      	ldr	r3, [pc, #456]	; (8003710 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003548:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800354a:	e0d7      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800354c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800354e:	0c9b      	lsrs	r3, r3, #18
 8003550:	f003 020f 	and.w	r2, r3, #15
 8003554:	4b6f      	ldr	r3, [pc, #444]	; (8003714 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003556:	5c9b      	ldrb	r3, [r3, r2]
 8003558:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800355a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355c:	0d9b      	lsrs	r3, r3, #22
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	3301      	adds	r3, #1
 8003564:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003566:	4b68      	ldr	r3, [pc, #416]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d05d      	beq.n	800362e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003574:	2200      	movs	r2, #0
 8003576:	4618      	mov	r0, r3
 8003578:	4611      	mov	r1, r2
 800357a:	4604      	mov	r4, r0
 800357c:	460d      	mov	r5, r1
 800357e:	4622      	mov	r2, r4
 8003580:	462b      	mov	r3, r5
 8003582:	f04f 0000 	mov.w	r0, #0
 8003586:	f04f 0100 	mov.w	r1, #0
 800358a:	0159      	lsls	r1, r3, #5
 800358c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003590:	0150      	lsls	r0, r2, #5
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4621      	mov	r1, r4
 8003598:	1a51      	subs	r1, r2, r1
 800359a:	6139      	str	r1, [r7, #16]
 800359c:	4629      	mov	r1, r5
 800359e:	eb63 0301 	sbc.w	r3, r3, r1
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035b0:	4659      	mov	r1, fp
 80035b2:	018b      	lsls	r3, r1, #6
 80035b4:	4651      	mov	r1, sl
 80035b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035ba:	4651      	mov	r1, sl
 80035bc:	018a      	lsls	r2, r1, #6
 80035be:	46d4      	mov	ip, sl
 80035c0:	ebb2 080c 	subs.w	r8, r2, ip
 80035c4:	4659      	mov	r1, fp
 80035c6:	eb63 0901 	sbc.w	r9, r3, r1
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035de:	4690      	mov	r8, r2
 80035e0:	4699      	mov	r9, r3
 80035e2:	4623      	mov	r3, r4
 80035e4:	eb18 0303 	adds.w	r3, r8, r3
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	462b      	mov	r3, r5
 80035ec:	eb49 0303 	adc.w	r3, r9, r3
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035fe:	4629      	mov	r1, r5
 8003600:	024b      	lsls	r3, r1, #9
 8003602:	4620      	mov	r0, r4
 8003604:	4629      	mov	r1, r5
 8003606:	4604      	mov	r4, r0
 8003608:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800360c:	4601      	mov	r1, r0
 800360e:	024a      	lsls	r2, r1, #9
 8003610:	4610      	mov	r0, r2
 8003612:	4619      	mov	r1, r3
 8003614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003616:	2200      	movs	r2, #0
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
 800361a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800361c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003620:	f7fd fa9a 	bl	8000b58 <__aeabi_uldivmod>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4613      	mov	r3, r2
 800362a:	647b      	str	r3, [r7, #68]	; 0x44
 800362c:	e055      	b.n	80036da <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800362e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003630:	2200      	movs	r2, #0
 8003632:	623b      	str	r3, [r7, #32]
 8003634:	627a      	str	r2, [r7, #36]	; 0x24
 8003636:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800363a:	4642      	mov	r2, r8
 800363c:	464b      	mov	r3, r9
 800363e:	f04f 0000 	mov.w	r0, #0
 8003642:	f04f 0100 	mov.w	r1, #0
 8003646:	0159      	lsls	r1, r3, #5
 8003648:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800364c:	0150      	lsls	r0, r2, #5
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	46c4      	mov	ip, r8
 8003654:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003658:	4640      	mov	r0, r8
 800365a:	4649      	mov	r1, r9
 800365c:	468c      	mov	ip, r1
 800365e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800366e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003672:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003676:	ebb2 040a 	subs.w	r4, r2, sl
 800367a:	eb63 050b 	sbc.w	r5, r3, fp
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	00eb      	lsls	r3, r5, #3
 8003688:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800368c:	00e2      	lsls	r2, r4, #3
 800368e:	4614      	mov	r4, r2
 8003690:	461d      	mov	r5, r3
 8003692:	4603      	mov	r3, r0
 8003694:	18e3      	adds	r3, r4, r3
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	460b      	mov	r3, r1
 800369a:	eb45 0303 	adc.w	r3, r5, r3
 800369e:	607b      	str	r3, [r7, #4]
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036ac:	4629      	mov	r1, r5
 80036ae:	028b      	lsls	r3, r1, #10
 80036b0:	4620      	mov	r0, r4
 80036b2:	4629      	mov	r1, r5
 80036b4:	4604      	mov	r4, r0
 80036b6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80036ba:	4601      	mov	r1, r0
 80036bc:	028a      	lsls	r2, r1, #10
 80036be:	4610      	mov	r0, r2
 80036c0:	4619      	mov	r1, r3
 80036c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c4:	2200      	movs	r2, #0
 80036c6:	61bb      	str	r3, [r7, #24]
 80036c8:	61fa      	str	r2, [r7, #28]
 80036ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036ce:	f7fd fa43 	bl	8000b58 <__aeabi_uldivmod>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4613      	mov	r3, r2
 80036d8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80036da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036dc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80036de:	e00d      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80036e0:	4b09      	ldr	r3, [pc, #36]	; (8003708 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	0b5b      	lsrs	r3, r3, #13
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80036ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ee:	3301      	adds	r3, #1
 80036f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80036fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3748      	adds	r7, #72	; 0x48
 8003702:	46bd      	mov	sp, r7
 8003704:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003708:	40023800 	.word	0x40023800
 800370c:	00f42400 	.word	0x00f42400
 8003710:	007a1200 	.word	0x007a1200
 8003714:	08006ab0 	.word	0x08006ab0

08003718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800371c:	4b02      	ldr	r3, [pc, #8]	; (8003728 <HAL_RCC_GetHCLKFreq+0x10>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr
 8003728:	20000000 	.word	0x20000000

0800372c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003730:	f7ff fff2 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8003734:	4602      	mov	r2, r0
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	0a1b      	lsrs	r3, r3, #8
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	4903      	ldr	r1, [pc, #12]	; (8003750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003742:	5ccb      	ldrb	r3, [r1, r3]
 8003744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40023800 	.word	0x40023800
 8003750:	08006acc 	.word	0x08006acc

08003754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003758:	f7ff ffde 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 800375c:	4602      	mov	r2, r0
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	0adb      	lsrs	r3, r3, #11
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	4903      	ldr	r1, [pc, #12]	; (8003778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800376a:	5ccb      	ldrb	r3, [r1, r3]
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40023800 	.word	0x40023800
 8003778:	08006acc 	.word	0x08006acc

0800377c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003784:	2300      	movs	r3, #0
 8003786:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003788:	4b29      	ldr	r3, [pc, #164]	; (8003830 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d12c      	bne.n	80037ee <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003794:	4b26      	ldr	r3, [pc, #152]	; (8003830 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80037a0:	4b24      	ldr	r3, [pc, #144]	; (8003834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	e016      	b.n	80037da <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ac:	4b20      	ldr	r3, [pc, #128]	; (8003830 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	4a1f      	ldr	r2, [pc, #124]	; (8003830 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b6:	6253      	str	r3, [r2, #36]	; 0x24
 80037b8:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80037c4:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80037cc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ce:	4b18      	ldr	r3, [pc, #96]	; (8003830 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	4a17      	ldr	r2, [pc, #92]	; (8003830 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80037e0:	d105      	bne.n	80037ee <RCC_SetFlashLatencyFromMSIRange+0x72>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037e8:	d101      	bne.n	80037ee <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80037ea:	2301      	movs	r3, #1
 80037ec:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d105      	bne.n	8003800 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80037f4:	4b10      	ldr	r3, [pc, #64]	; (8003838 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a0f      	ldr	r2, [pc, #60]	; (8003838 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037fa:	f043 0304 	orr.w	r3, r3, #4
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	4b0d      	ldr	r3, [pc, #52]	; (8003838 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f023 0201 	bic.w	r2, r3, #1
 8003808:	490b      	ldr	r1, [pc, #44]	; (8003838 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003810:	4b09      	ldr	r3, [pc, #36]	; (8003838 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	429a      	cmp	r2, r3
 800381c:	d001      	beq.n	8003822 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800
 8003834:	40007000 	.word	0x40007000
 8003838:	40023c00 	.word	0x40023c00

0800383c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e03f      	b.n	80038ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fe f8de 	bl	8001a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2224      	movs	r2, #36	; 0x24
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800387e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f905 	bl	8003a90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003894:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695a      	ldr	r2, [r3, #20]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b08a      	sub	sp, #40	; 0x28
 80038da:	af02      	add	r7, sp, #8
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	4613      	mov	r3, r2
 80038e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d17c      	bne.n	80039f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_UART_Transmit+0x2c>
 80038fc:	88fb      	ldrh	r3, [r7, #6]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e075      	b.n	80039f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_UART_Transmit+0x3e>
 8003910:	2302      	movs	r3, #2
 8003912:	e06e      	b.n	80039f2 <HAL_UART_Transmit+0x11c>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2221      	movs	r2, #33	; 0x21
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800392a:	f7fe f949 	bl	8001bc0 <HAL_GetTick>
 800392e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	88fa      	ldrh	r2, [r7, #6]
 8003934:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	88fa      	ldrh	r2, [r7, #6]
 800393a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003944:	d108      	bne.n	8003958 <HAL_UART_Transmit+0x82>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d104      	bne.n	8003958 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	e003      	b.n	8003960 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800395c:	2300      	movs	r3, #0
 800395e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003968:	e02a      	b.n	80039c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2200      	movs	r2, #0
 8003972:	2180      	movs	r1, #128	; 0x80
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 f840 	bl	80039fa <UART_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e036      	b.n	80039f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10b      	bne.n	80039a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003998:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	3302      	adds	r3, #2
 800399e:	61bb      	str	r3, [r7, #24]
 80039a0:	e007      	b.n	80039b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	781a      	ldrb	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	3301      	adds	r3, #1
 80039b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1cf      	bne.n	800396a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2200      	movs	r2, #0
 80039d2:	2140      	movs	r1, #64	; 0x40
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f810 	bl	80039fa <UART_WaitOnFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e006      	b.n	80039f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	e000      	b.n	80039f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039f0:	2302      	movs	r3, #2
  }
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	603b      	str	r3, [r7, #0]
 8003a06:	4613      	mov	r3, r2
 8003a08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a0a:	e02c      	b.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a12:	d028      	beq.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x30>
 8003a1a:	f7fe f8d1 	bl	8001bc0 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d21d      	bcs.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a38:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0201 	bic.w	r2, r2, #1
 8003a48:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e00f      	b.n	8003a86 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	bf0c      	ite	eq
 8003a76:	2301      	moveq	r3, #1
 8003a78:	2300      	movne	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	79fb      	ldrb	r3, [r7, #7]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d0c3      	beq.n	8003a0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ad0:	f023 030c 	bic.w	r3, r3, #12
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	430b      	orrs	r3, r1
 8003adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a55      	ldr	r2, [pc, #340]	; (8003c50 <UART_SetConfig+0x1c0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d103      	bne.n	8003b06 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003afe:	f7ff fe29 	bl	8003754 <HAL_RCC_GetPCLK2Freq>
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	e002      	b.n	8003b0c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b06:	f7ff fe11 	bl	800372c <HAL_RCC_GetPCLK1Freq>
 8003b0a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b14:	d14c      	bne.n	8003bb0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009a      	lsls	r2, r3, #2
 8003b20:	441a      	add	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2c:	4a49      	ldr	r2, [pc, #292]	; (8003c54 <UART_SetConfig+0x1c4>)
 8003b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	0119      	lsls	r1, r3, #4
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009a      	lsls	r2, r3, #2
 8003b40:	441a      	add	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b4c:	4b41      	ldr	r3, [pc, #260]	; (8003c54 <UART_SetConfig+0x1c4>)
 8003b4e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	2064      	movs	r0, #100	; 0x64
 8003b56:	fb00 f303 	mul.w	r3, r0, r3
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	3332      	adds	r3, #50	; 0x32
 8003b60:	4a3c      	ldr	r2, [pc, #240]	; (8003c54 <UART_SetConfig+0x1c4>)
 8003b62:	fba2 2303 	umull	r2, r3, r2, r3
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b6e:	4419      	add	r1, r3
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009a      	lsls	r2, r3, #2
 8003b7a:	441a      	add	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b86:	4b33      	ldr	r3, [pc, #204]	; (8003c54 <UART_SetConfig+0x1c4>)
 8003b88:	fba3 0302 	umull	r0, r3, r3, r2
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	2064      	movs	r0, #100	; 0x64
 8003b90:	fb00 f303 	mul.w	r3, r0, r3
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	3332      	adds	r3, #50	; 0x32
 8003b9a:	4a2e      	ldr	r2, [pc, #184]	; (8003c54 <UART_SetConfig+0x1c4>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	f003 0207 	and.w	r2, r3, #7
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	440a      	add	r2, r1
 8003bac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bae:	e04a      	b.n	8003c46 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009a      	lsls	r2, r3, #2
 8003bba:	441a      	add	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc6:	4a23      	ldr	r2, [pc, #140]	; (8003c54 <UART_SetConfig+0x1c4>)
 8003bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	0119      	lsls	r1, r3, #4
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009a      	lsls	r2, r3, #2
 8003bda:	441a      	add	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003be6:	4b1b      	ldr	r3, [pc, #108]	; (8003c54 <UART_SetConfig+0x1c4>)
 8003be8:	fba3 0302 	umull	r0, r3, r3, r2
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	2064      	movs	r0, #100	; 0x64
 8003bf0:	fb00 f303 	mul.w	r3, r0, r3
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	3332      	adds	r3, #50	; 0x32
 8003bfa:	4a16      	ldr	r2, [pc, #88]	; (8003c54 <UART_SetConfig+0x1c4>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c06:	4419      	add	r1, r3
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	009a      	lsls	r2, r3, #2
 8003c12:	441a      	add	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <UART_SetConfig+0x1c4>)
 8003c20:	fba3 0302 	umull	r0, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	2064      	movs	r0, #100	; 0x64
 8003c28:	fb00 f303 	mul.w	r3, r0, r3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	3332      	adds	r3, #50	; 0x32
 8003c32:	4a08      	ldr	r2, [pc, #32]	; (8003c54 <UART_SetConfig+0x1c4>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	f003 020f 	and.w	r2, r3, #15
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	440a      	add	r2, r1
 8003c44:	609a      	str	r2, [r3, #8]
}
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40013800 	.word	0x40013800
 8003c54:	51eb851f 	.word	0x51eb851f

08003c58 <__errno>:
 8003c58:	4b01      	ldr	r3, [pc, #4]	; (8003c60 <__errno+0x8>)
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	2000000c 	.word	0x2000000c

08003c64 <__libc_init_array>:
 8003c64:	b570      	push	{r4, r5, r6, lr}
 8003c66:	2600      	movs	r6, #0
 8003c68:	4d0c      	ldr	r5, [pc, #48]	; (8003c9c <__libc_init_array+0x38>)
 8003c6a:	4c0d      	ldr	r4, [pc, #52]	; (8003ca0 <__libc_init_array+0x3c>)
 8003c6c:	1b64      	subs	r4, r4, r5
 8003c6e:	10a4      	asrs	r4, r4, #2
 8003c70:	42a6      	cmp	r6, r4
 8003c72:	d109      	bne.n	8003c88 <__libc_init_array+0x24>
 8003c74:	f002 fefc 	bl	8006a70 <_init>
 8003c78:	2600      	movs	r6, #0
 8003c7a:	4d0a      	ldr	r5, [pc, #40]	; (8003ca4 <__libc_init_array+0x40>)
 8003c7c:	4c0a      	ldr	r4, [pc, #40]	; (8003ca8 <__libc_init_array+0x44>)
 8003c7e:	1b64      	subs	r4, r4, r5
 8003c80:	10a4      	asrs	r4, r4, #2
 8003c82:	42a6      	cmp	r6, r4
 8003c84:	d105      	bne.n	8003c92 <__libc_init_array+0x2e>
 8003c86:	bd70      	pop	{r4, r5, r6, pc}
 8003c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c8c:	4798      	blx	r3
 8003c8e:	3601      	adds	r6, #1
 8003c90:	e7ee      	b.n	8003c70 <__libc_init_array+0xc>
 8003c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c96:	4798      	blx	r3
 8003c98:	3601      	adds	r6, #1
 8003c9a:	e7f2      	b.n	8003c82 <__libc_init_array+0x1e>
 8003c9c:	08006eb4 	.word	0x08006eb4
 8003ca0:	08006eb4 	.word	0x08006eb4
 8003ca4:	08006eb4 	.word	0x08006eb4
 8003ca8:	08006eb8 	.word	0x08006eb8

08003cac <memset>:
 8003cac:	4603      	mov	r3, r0
 8003cae:	4402      	add	r2, r0
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d100      	bne.n	8003cb6 <memset+0xa>
 8003cb4:	4770      	bx	lr
 8003cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cba:	e7f9      	b.n	8003cb0 <memset+0x4>

08003cbc <__cvt>:
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc2:	461f      	mov	r7, r3
 8003cc4:	bfbb      	ittet	lt
 8003cc6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003cca:	461f      	movlt	r7, r3
 8003ccc:	2300      	movge	r3, #0
 8003cce:	232d      	movlt	r3, #45	; 0x2d
 8003cd0:	b088      	sub	sp, #32
 8003cd2:	4614      	mov	r4, r2
 8003cd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003cd6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003cd8:	7013      	strb	r3, [r2, #0]
 8003cda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003cdc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003ce0:	f023 0820 	bic.w	r8, r3, #32
 8003ce4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ce8:	d005      	beq.n	8003cf6 <__cvt+0x3a>
 8003cea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003cee:	d100      	bne.n	8003cf2 <__cvt+0x36>
 8003cf0:	3501      	adds	r5, #1
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e000      	b.n	8003cf8 <__cvt+0x3c>
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	aa07      	add	r2, sp, #28
 8003cfa:	9204      	str	r2, [sp, #16]
 8003cfc:	aa06      	add	r2, sp, #24
 8003cfe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003d02:	e9cd 3500 	strd	r3, r5, [sp]
 8003d06:	4622      	mov	r2, r4
 8003d08:	463b      	mov	r3, r7
 8003d0a:	f000 fce5 	bl	80046d8 <_dtoa_r>
 8003d0e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003d12:	4606      	mov	r6, r0
 8003d14:	d102      	bne.n	8003d1c <__cvt+0x60>
 8003d16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d18:	07db      	lsls	r3, r3, #31
 8003d1a:	d522      	bpl.n	8003d62 <__cvt+0xa6>
 8003d1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d20:	eb06 0905 	add.w	r9, r6, r5
 8003d24:	d110      	bne.n	8003d48 <__cvt+0x8c>
 8003d26:	7833      	ldrb	r3, [r6, #0]
 8003d28:	2b30      	cmp	r3, #48	; 0x30
 8003d2a:	d10a      	bne.n	8003d42 <__cvt+0x86>
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2300      	movs	r3, #0
 8003d30:	4620      	mov	r0, r4
 8003d32:	4639      	mov	r1, r7
 8003d34:	f7fc fe50 	bl	80009d8 <__aeabi_dcmpeq>
 8003d38:	b918      	cbnz	r0, 8003d42 <__cvt+0x86>
 8003d3a:	f1c5 0501 	rsb	r5, r5, #1
 8003d3e:	f8ca 5000 	str.w	r5, [sl]
 8003d42:	f8da 3000 	ldr.w	r3, [sl]
 8003d46:	4499      	add	r9, r3
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	4639      	mov	r1, r7
 8003d50:	f7fc fe42 	bl	80009d8 <__aeabi_dcmpeq>
 8003d54:	b108      	cbz	r0, 8003d5a <__cvt+0x9e>
 8003d56:	f8cd 901c 	str.w	r9, [sp, #28]
 8003d5a:	2230      	movs	r2, #48	; 0x30
 8003d5c:	9b07      	ldr	r3, [sp, #28]
 8003d5e:	454b      	cmp	r3, r9
 8003d60:	d307      	bcc.n	8003d72 <__cvt+0xb6>
 8003d62:	4630      	mov	r0, r6
 8003d64:	9b07      	ldr	r3, [sp, #28]
 8003d66:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003d68:	1b9b      	subs	r3, r3, r6
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	b008      	add	sp, #32
 8003d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d72:	1c59      	adds	r1, r3, #1
 8003d74:	9107      	str	r1, [sp, #28]
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	e7f0      	b.n	8003d5c <__cvt+0xa0>

08003d7a <__exponent>:
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d7e:	2900      	cmp	r1, #0
 8003d80:	f803 2b02 	strb.w	r2, [r3], #2
 8003d84:	bfb6      	itet	lt
 8003d86:	222d      	movlt	r2, #45	; 0x2d
 8003d88:	222b      	movge	r2, #43	; 0x2b
 8003d8a:	4249      	neglt	r1, r1
 8003d8c:	2909      	cmp	r1, #9
 8003d8e:	7042      	strb	r2, [r0, #1]
 8003d90:	dd2b      	ble.n	8003dea <__exponent+0x70>
 8003d92:	f10d 0407 	add.w	r4, sp, #7
 8003d96:	46a4      	mov	ip, r4
 8003d98:	270a      	movs	r7, #10
 8003d9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8003d9e:	460a      	mov	r2, r1
 8003da0:	46a6      	mov	lr, r4
 8003da2:	fb07 1516 	mls	r5, r7, r6, r1
 8003da6:	2a63      	cmp	r2, #99	; 0x63
 8003da8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003dac:	4631      	mov	r1, r6
 8003dae:	f104 34ff 	add.w	r4, r4, #4294967295
 8003db2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003db6:	dcf0      	bgt.n	8003d9a <__exponent+0x20>
 8003db8:	3130      	adds	r1, #48	; 0x30
 8003dba:	f1ae 0502 	sub.w	r5, lr, #2
 8003dbe:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	1c44      	adds	r4, r0, #1
 8003dc6:	4561      	cmp	r1, ip
 8003dc8:	d30a      	bcc.n	8003de0 <__exponent+0x66>
 8003dca:	f10d 0209 	add.w	r2, sp, #9
 8003dce:	eba2 020e 	sub.w	r2, r2, lr
 8003dd2:	4565      	cmp	r5, ip
 8003dd4:	bf88      	it	hi
 8003dd6:	2200      	movhi	r2, #0
 8003dd8:	4413      	add	r3, r2
 8003dda:	1a18      	subs	r0, r3, r0
 8003ddc:	b003      	add	sp, #12
 8003dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003de0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003de4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003de8:	e7ed      	b.n	8003dc6 <__exponent+0x4c>
 8003dea:	2330      	movs	r3, #48	; 0x30
 8003dec:	3130      	adds	r1, #48	; 0x30
 8003dee:	7083      	strb	r3, [r0, #2]
 8003df0:	70c1      	strb	r1, [r0, #3]
 8003df2:	1d03      	adds	r3, r0, #4
 8003df4:	e7f1      	b.n	8003dda <__exponent+0x60>
	...

08003df8 <_printf_float>:
 8003df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dfc:	b091      	sub	sp, #68	; 0x44
 8003dfe:	460c      	mov	r4, r1
 8003e00:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003e04:	4616      	mov	r6, r2
 8003e06:	461f      	mov	r7, r3
 8003e08:	4605      	mov	r5, r0
 8003e0a:	f001 fa53 	bl	80052b4 <_localeconv_r>
 8003e0e:	6803      	ldr	r3, [r0, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	9309      	str	r3, [sp, #36]	; 0x24
 8003e14:	f7fc f9b4 	bl	8000180 <strlen>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	930e      	str	r3, [sp, #56]	; 0x38
 8003e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8003e20:	900a      	str	r0, [sp, #40]	; 0x28
 8003e22:	3307      	adds	r3, #7
 8003e24:	f023 0307 	bic.w	r3, r3, #7
 8003e28:	f103 0208 	add.w	r2, r3, #8
 8003e2c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003e30:	f8d4 b000 	ldr.w	fp, [r4]
 8003e34:	f8c8 2000 	str.w	r2, [r8]
 8003e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003e40:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003e44:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003e48:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e4e:	4640      	mov	r0, r8
 8003e50:	4b9c      	ldr	r3, [pc, #624]	; (80040c4 <_printf_float+0x2cc>)
 8003e52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e54:	f7fc fdf2 	bl	8000a3c <__aeabi_dcmpun>
 8003e58:	bb70      	cbnz	r0, 8003eb8 <_printf_float+0xc0>
 8003e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e5e:	4640      	mov	r0, r8
 8003e60:	4b98      	ldr	r3, [pc, #608]	; (80040c4 <_printf_float+0x2cc>)
 8003e62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e64:	f7fc fdcc 	bl	8000a00 <__aeabi_dcmple>
 8003e68:	bb30      	cbnz	r0, 8003eb8 <_printf_float+0xc0>
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	4640      	mov	r0, r8
 8003e70:	4651      	mov	r1, sl
 8003e72:	f7fc fdbb 	bl	80009ec <__aeabi_dcmplt>
 8003e76:	b110      	cbz	r0, 8003e7e <_printf_float+0x86>
 8003e78:	232d      	movs	r3, #45	; 0x2d
 8003e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e7e:	4b92      	ldr	r3, [pc, #584]	; (80040c8 <_printf_float+0x2d0>)
 8003e80:	4892      	ldr	r0, [pc, #584]	; (80040cc <_printf_float+0x2d4>)
 8003e82:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003e86:	bf94      	ite	ls
 8003e88:	4698      	movls	r8, r3
 8003e8a:	4680      	movhi	r8, r0
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	f04f 0a00 	mov.w	sl, #0
 8003e92:	6123      	str	r3, [r4, #16]
 8003e94:	f02b 0304 	bic.w	r3, fp, #4
 8003e98:	6023      	str	r3, [r4, #0]
 8003e9a:	4633      	mov	r3, r6
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	9700      	str	r7, [sp, #0]
 8003ea2:	aa0f      	add	r2, sp, #60	; 0x3c
 8003ea4:	f000 f9d4 	bl	8004250 <_printf_common>
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	f040 8090 	bne.w	8003fce <_printf_float+0x1d6>
 8003eae:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb2:	b011      	add	sp, #68	; 0x44
 8003eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb8:	4642      	mov	r2, r8
 8003eba:	4653      	mov	r3, sl
 8003ebc:	4640      	mov	r0, r8
 8003ebe:	4651      	mov	r1, sl
 8003ec0:	f7fc fdbc 	bl	8000a3c <__aeabi_dcmpun>
 8003ec4:	b148      	cbz	r0, 8003eda <_printf_float+0xe2>
 8003ec6:	f1ba 0f00 	cmp.w	sl, #0
 8003eca:	bfb8      	it	lt
 8003ecc:	232d      	movlt	r3, #45	; 0x2d
 8003ece:	4880      	ldr	r0, [pc, #512]	; (80040d0 <_printf_float+0x2d8>)
 8003ed0:	bfb8      	it	lt
 8003ed2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003ed6:	4b7f      	ldr	r3, [pc, #508]	; (80040d4 <_printf_float+0x2dc>)
 8003ed8:	e7d3      	b.n	8003e82 <_printf_float+0x8a>
 8003eda:	6863      	ldr	r3, [r4, #4]
 8003edc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	d142      	bne.n	8003f6a <_printf_float+0x172>
 8003ee4:	2306      	movs	r3, #6
 8003ee6:	6063      	str	r3, [r4, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	9206      	str	r2, [sp, #24]
 8003eec:	aa0e      	add	r2, sp, #56	; 0x38
 8003eee:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003ef2:	aa0d      	add	r2, sp, #52	; 0x34
 8003ef4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003ef8:	9203      	str	r2, [sp, #12]
 8003efa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003efe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003f02:	6023      	str	r3, [r4, #0]
 8003f04:	6863      	ldr	r3, [r4, #4]
 8003f06:	4642      	mov	r2, r8
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	4653      	mov	r3, sl
 8003f0e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003f10:	f7ff fed4 	bl	8003cbc <__cvt>
 8003f14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f16:	4680      	mov	r8, r0
 8003f18:	2947      	cmp	r1, #71	; 0x47
 8003f1a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003f1c:	d108      	bne.n	8003f30 <_printf_float+0x138>
 8003f1e:	1cc8      	adds	r0, r1, #3
 8003f20:	db02      	blt.n	8003f28 <_printf_float+0x130>
 8003f22:	6863      	ldr	r3, [r4, #4]
 8003f24:	4299      	cmp	r1, r3
 8003f26:	dd40      	ble.n	8003faa <_printf_float+0x1b2>
 8003f28:	f1a9 0902 	sub.w	r9, r9, #2
 8003f2c:	fa5f f989 	uxtb.w	r9, r9
 8003f30:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003f34:	d81f      	bhi.n	8003f76 <_printf_float+0x17e>
 8003f36:	464a      	mov	r2, r9
 8003f38:	3901      	subs	r1, #1
 8003f3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003f3e:	910d      	str	r1, [sp, #52]	; 0x34
 8003f40:	f7ff ff1b 	bl	8003d7a <__exponent>
 8003f44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f46:	4682      	mov	sl, r0
 8003f48:	1813      	adds	r3, r2, r0
 8003f4a:	2a01      	cmp	r2, #1
 8003f4c:	6123      	str	r3, [r4, #16]
 8003f4e:	dc02      	bgt.n	8003f56 <_printf_float+0x15e>
 8003f50:	6822      	ldr	r2, [r4, #0]
 8003f52:	07d2      	lsls	r2, r2, #31
 8003f54:	d501      	bpl.n	8003f5a <_printf_float+0x162>
 8003f56:	3301      	adds	r3, #1
 8003f58:	6123      	str	r3, [r4, #16]
 8003f5a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d09b      	beq.n	8003e9a <_printf_float+0xa2>
 8003f62:	232d      	movs	r3, #45	; 0x2d
 8003f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f68:	e797      	b.n	8003e9a <_printf_float+0xa2>
 8003f6a:	2947      	cmp	r1, #71	; 0x47
 8003f6c:	d1bc      	bne.n	8003ee8 <_printf_float+0xf0>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1ba      	bne.n	8003ee8 <_printf_float+0xf0>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e7b7      	b.n	8003ee6 <_printf_float+0xee>
 8003f76:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003f7a:	d118      	bne.n	8003fae <_printf_float+0x1b6>
 8003f7c:	2900      	cmp	r1, #0
 8003f7e:	6863      	ldr	r3, [r4, #4]
 8003f80:	dd0b      	ble.n	8003f9a <_printf_float+0x1a2>
 8003f82:	6121      	str	r1, [r4, #16]
 8003f84:	b913      	cbnz	r3, 8003f8c <_printf_float+0x194>
 8003f86:	6822      	ldr	r2, [r4, #0]
 8003f88:	07d0      	lsls	r0, r2, #31
 8003f8a:	d502      	bpl.n	8003f92 <_printf_float+0x19a>
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	440b      	add	r3, r1
 8003f90:	6123      	str	r3, [r4, #16]
 8003f92:	f04f 0a00 	mov.w	sl, #0
 8003f96:	65a1      	str	r1, [r4, #88]	; 0x58
 8003f98:	e7df      	b.n	8003f5a <_printf_float+0x162>
 8003f9a:	b913      	cbnz	r3, 8003fa2 <_printf_float+0x1aa>
 8003f9c:	6822      	ldr	r2, [r4, #0]
 8003f9e:	07d2      	lsls	r2, r2, #31
 8003fa0:	d501      	bpl.n	8003fa6 <_printf_float+0x1ae>
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	e7f4      	b.n	8003f90 <_printf_float+0x198>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e7f2      	b.n	8003f90 <_printf_float+0x198>
 8003faa:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fb0:	4299      	cmp	r1, r3
 8003fb2:	db05      	blt.n	8003fc0 <_printf_float+0x1c8>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	6121      	str	r1, [r4, #16]
 8003fb8:	07d8      	lsls	r0, r3, #31
 8003fba:	d5ea      	bpl.n	8003f92 <_printf_float+0x19a>
 8003fbc:	1c4b      	adds	r3, r1, #1
 8003fbe:	e7e7      	b.n	8003f90 <_printf_float+0x198>
 8003fc0:	2900      	cmp	r1, #0
 8003fc2:	bfcc      	ite	gt
 8003fc4:	2201      	movgt	r2, #1
 8003fc6:	f1c1 0202 	rsble	r2, r1, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	e7e0      	b.n	8003f90 <_printf_float+0x198>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	055a      	lsls	r2, r3, #21
 8003fd2:	d407      	bmi.n	8003fe4 <_printf_float+0x1ec>
 8003fd4:	6923      	ldr	r3, [r4, #16]
 8003fd6:	4642      	mov	r2, r8
 8003fd8:	4631      	mov	r1, r6
 8003fda:	4628      	mov	r0, r5
 8003fdc:	47b8      	blx	r7
 8003fde:	3001      	adds	r0, #1
 8003fe0:	d12b      	bne.n	800403a <_printf_float+0x242>
 8003fe2:	e764      	b.n	8003eae <_printf_float+0xb6>
 8003fe4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003fe8:	f240 80dd 	bls.w	80041a6 <_printf_float+0x3ae>
 8003fec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f7fc fcf0 	bl	80009d8 <__aeabi_dcmpeq>
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d033      	beq.n	8004064 <_printf_float+0x26c>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	4631      	mov	r1, r6
 8004000:	4628      	mov	r0, r5
 8004002:	4a35      	ldr	r2, [pc, #212]	; (80040d8 <_printf_float+0x2e0>)
 8004004:	47b8      	blx	r7
 8004006:	3001      	adds	r0, #1
 8004008:	f43f af51 	beq.w	8003eae <_printf_float+0xb6>
 800400c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004010:	429a      	cmp	r2, r3
 8004012:	db02      	blt.n	800401a <_printf_float+0x222>
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	07d8      	lsls	r0, r3, #31
 8004018:	d50f      	bpl.n	800403a <_printf_float+0x242>
 800401a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800401e:	4631      	mov	r1, r6
 8004020:	4628      	mov	r0, r5
 8004022:	47b8      	blx	r7
 8004024:	3001      	adds	r0, #1
 8004026:	f43f af42 	beq.w	8003eae <_printf_float+0xb6>
 800402a:	f04f 0800 	mov.w	r8, #0
 800402e:	f104 091a 	add.w	r9, r4, #26
 8004032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004034:	3b01      	subs	r3, #1
 8004036:	4543      	cmp	r3, r8
 8004038:	dc09      	bgt.n	800404e <_printf_float+0x256>
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	079b      	lsls	r3, r3, #30
 800403e:	f100 8102 	bmi.w	8004246 <_printf_float+0x44e>
 8004042:	68e0      	ldr	r0, [r4, #12]
 8004044:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004046:	4298      	cmp	r0, r3
 8004048:	bfb8      	it	lt
 800404a:	4618      	movlt	r0, r3
 800404c:	e731      	b.n	8003eb2 <_printf_float+0xba>
 800404e:	2301      	movs	r3, #1
 8004050:	464a      	mov	r2, r9
 8004052:	4631      	mov	r1, r6
 8004054:	4628      	mov	r0, r5
 8004056:	47b8      	blx	r7
 8004058:	3001      	adds	r0, #1
 800405a:	f43f af28 	beq.w	8003eae <_printf_float+0xb6>
 800405e:	f108 0801 	add.w	r8, r8, #1
 8004062:	e7e6      	b.n	8004032 <_printf_float+0x23a>
 8004064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004066:	2b00      	cmp	r3, #0
 8004068:	dc38      	bgt.n	80040dc <_printf_float+0x2e4>
 800406a:	2301      	movs	r3, #1
 800406c:	4631      	mov	r1, r6
 800406e:	4628      	mov	r0, r5
 8004070:	4a19      	ldr	r2, [pc, #100]	; (80040d8 <_printf_float+0x2e0>)
 8004072:	47b8      	blx	r7
 8004074:	3001      	adds	r0, #1
 8004076:	f43f af1a 	beq.w	8003eae <_printf_float+0xb6>
 800407a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800407e:	4313      	orrs	r3, r2
 8004080:	d102      	bne.n	8004088 <_printf_float+0x290>
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	07d9      	lsls	r1, r3, #31
 8004086:	d5d8      	bpl.n	800403a <_printf_float+0x242>
 8004088:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800408c:	4631      	mov	r1, r6
 800408e:	4628      	mov	r0, r5
 8004090:	47b8      	blx	r7
 8004092:	3001      	adds	r0, #1
 8004094:	f43f af0b 	beq.w	8003eae <_printf_float+0xb6>
 8004098:	f04f 0900 	mov.w	r9, #0
 800409c:	f104 0a1a 	add.w	sl, r4, #26
 80040a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040a2:	425b      	negs	r3, r3
 80040a4:	454b      	cmp	r3, r9
 80040a6:	dc01      	bgt.n	80040ac <_printf_float+0x2b4>
 80040a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040aa:	e794      	b.n	8003fd6 <_printf_float+0x1de>
 80040ac:	2301      	movs	r3, #1
 80040ae:	4652      	mov	r2, sl
 80040b0:	4631      	mov	r1, r6
 80040b2:	4628      	mov	r0, r5
 80040b4:	47b8      	blx	r7
 80040b6:	3001      	adds	r0, #1
 80040b8:	f43f aef9 	beq.w	8003eae <_printf_float+0xb6>
 80040bc:	f109 0901 	add.w	r9, r9, #1
 80040c0:	e7ee      	b.n	80040a0 <_printf_float+0x2a8>
 80040c2:	bf00      	nop
 80040c4:	7fefffff 	.word	0x7fefffff
 80040c8:	08006ad8 	.word	0x08006ad8
 80040cc:	08006adc 	.word	0x08006adc
 80040d0:	08006ae4 	.word	0x08006ae4
 80040d4:	08006ae0 	.word	0x08006ae0
 80040d8:	08006ae8 	.word	0x08006ae8
 80040dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040e0:	429a      	cmp	r2, r3
 80040e2:	bfa8      	it	ge
 80040e4:	461a      	movge	r2, r3
 80040e6:	2a00      	cmp	r2, #0
 80040e8:	4691      	mov	r9, r2
 80040ea:	dc37      	bgt.n	800415c <_printf_float+0x364>
 80040ec:	f04f 0b00 	mov.w	fp, #0
 80040f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040f4:	f104 021a 	add.w	r2, r4, #26
 80040f8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80040fc:	ebaa 0309 	sub.w	r3, sl, r9
 8004100:	455b      	cmp	r3, fp
 8004102:	dc33      	bgt.n	800416c <_printf_float+0x374>
 8004104:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004108:	429a      	cmp	r2, r3
 800410a:	db3b      	blt.n	8004184 <_printf_float+0x38c>
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	07da      	lsls	r2, r3, #31
 8004110:	d438      	bmi.n	8004184 <_printf_float+0x38c>
 8004112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004114:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004116:	eba3 020a 	sub.w	r2, r3, sl
 800411a:	eba3 0901 	sub.w	r9, r3, r1
 800411e:	4591      	cmp	r9, r2
 8004120:	bfa8      	it	ge
 8004122:	4691      	movge	r9, r2
 8004124:	f1b9 0f00 	cmp.w	r9, #0
 8004128:	dc34      	bgt.n	8004194 <_printf_float+0x39c>
 800412a:	f04f 0800 	mov.w	r8, #0
 800412e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004132:	f104 0a1a 	add.w	sl, r4, #26
 8004136:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	eba3 0309 	sub.w	r3, r3, r9
 8004140:	4543      	cmp	r3, r8
 8004142:	f77f af7a 	ble.w	800403a <_printf_float+0x242>
 8004146:	2301      	movs	r3, #1
 8004148:	4652      	mov	r2, sl
 800414a:	4631      	mov	r1, r6
 800414c:	4628      	mov	r0, r5
 800414e:	47b8      	blx	r7
 8004150:	3001      	adds	r0, #1
 8004152:	f43f aeac 	beq.w	8003eae <_printf_float+0xb6>
 8004156:	f108 0801 	add.w	r8, r8, #1
 800415a:	e7ec      	b.n	8004136 <_printf_float+0x33e>
 800415c:	4613      	mov	r3, r2
 800415e:	4631      	mov	r1, r6
 8004160:	4642      	mov	r2, r8
 8004162:	4628      	mov	r0, r5
 8004164:	47b8      	blx	r7
 8004166:	3001      	adds	r0, #1
 8004168:	d1c0      	bne.n	80040ec <_printf_float+0x2f4>
 800416a:	e6a0      	b.n	8003eae <_printf_float+0xb6>
 800416c:	2301      	movs	r3, #1
 800416e:	4631      	mov	r1, r6
 8004170:	4628      	mov	r0, r5
 8004172:	920b      	str	r2, [sp, #44]	; 0x2c
 8004174:	47b8      	blx	r7
 8004176:	3001      	adds	r0, #1
 8004178:	f43f ae99 	beq.w	8003eae <_printf_float+0xb6>
 800417c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800417e:	f10b 0b01 	add.w	fp, fp, #1
 8004182:	e7b9      	b.n	80040f8 <_printf_float+0x300>
 8004184:	4631      	mov	r1, r6
 8004186:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800418a:	4628      	mov	r0, r5
 800418c:	47b8      	blx	r7
 800418e:	3001      	adds	r0, #1
 8004190:	d1bf      	bne.n	8004112 <_printf_float+0x31a>
 8004192:	e68c      	b.n	8003eae <_printf_float+0xb6>
 8004194:	464b      	mov	r3, r9
 8004196:	4631      	mov	r1, r6
 8004198:	4628      	mov	r0, r5
 800419a:	eb08 020a 	add.w	r2, r8, sl
 800419e:	47b8      	blx	r7
 80041a0:	3001      	adds	r0, #1
 80041a2:	d1c2      	bne.n	800412a <_printf_float+0x332>
 80041a4:	e683      	b.n	8003eae <_printf_float+0xb6>
 80041a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041a8:	2a01      	cmp	r2, #1
 80041aa:	dc01      	bgt.n	80041b0 <_printf_float+0x3b8>
 80041ac:	07db      	lsls	r3, r3, #31
 80041ae:	d537      	bpl.n	8004220 <_printf_float+0x428>
 80041b0:	2301      	movs	r3, #1
 80041b2:	4642      	mov	r2, r8
 80041b4:	4631      	mov	r1, r6
 80041b6:	4628      	mov	r0, r5
 80041b8:	47b8      	blx	r7
 80041ba:	3001      	adds	r0, #1
 80041bc:	f43f ae77 	beq.w	8003eae <_printf_float+0xb6>
 80041c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041c4:	4631      	mov	r1, r6
 80041c6:	4628      	mov	r0, r5
 80041c8:	47b8      	blx	r7
 80041ca:	3001      	adds	r0, #1
 80041cc:	f43f ae6f 	beq.w	8003eae <_printf_float+0xb6>
 80041d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041d4:	2200      	movs	r2, #0
 80041d6:	2300      	movs	r3, #0
 80041d8:	f7fc fbfe 	bl	80009d8 <__aeabi_dcmpeq>
 80041dc:	b9d8      	cbnz	r0, 8004216 <_printf_float+0x41e>
 80041de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041e0:	f108 0201 	add.w	r2, r8, #1
 80041e4:	3b01      	subs	r3, #1
 80041e6:	4631      	mov	r1, r6
 80041e8:	4628      	mov	r0, r5
 80041ea:	47b8      	blx	r7
 80041ec:	3001      	adds	r0, #1
 80041ee:	d10e      	bne.n	800420e <_printf_float+0x416>
 80041f0:	e65d      	b.n	8003eae <_printf_float+0xb6>
 80041f2:	2301      	movs	r3, #1
 80041f4:	464a      	mov	r2, r9
 80041f6:	4631      	mov	r1, r6
 80041f8:	4628      	mov	r0, r5
 80041fa:	47b8      	blx	r7
 80041fc:	3001      	adds	r0, #1
 80041fe:	f43f ae56 	beq.w	8003eae <_printf_float+0xb6>
 8004202:	f108 0801 	add.w	r8, r8, #1
 8004206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004208:	3b01      	subs	r3, #1
 800420a:	4543      	cmp	r3, r8
 800420c:	dcf1      	bgt.n	80041f2 <_printf_float+0x3fa>
 800420e:	4653      	mov	r3, sl
 8004210:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004214:	e6e0      	b.n	8003fd8 <_printf_float+0x1e0>
 8004216:	f04f 0800 	mov.w	r8, #0
 800421a:	f104 091a 	add.w	r9, r4, #26
 800421e:	e7f2      	b.n	8004206 <_printf_float+0x40e>
 8004220:	2301      	movs	r3, #1
 8004222:	4642      	mov	r2, r8
 8004224:	e7df      	b.n	80041e6 <_printf_float+0x3ee>
 8004226:	2301      	movs	r3, #1
 8004228:	464a      	mov	r2, r9
 800422a:	4631      	mov	r1, r6
 800422c:	4628      	mov	r0, r5
 800422e:	47b8      	blx	r7
 8004230:	3001      	adds	r0, #1
 8004232:	f43f ae3c 	beq.w	8003eae <_printf_float+0xb6>
 8004236:	f108 0801 	add.w	r8, r8, #1
 800423a:	68e3      	ldr	r3, [r4, #12]
 800423c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800423e:	1a5b      	subs	r3, r3, r1
 8004240:	4543      	cmp	r3, r8
 8004242:	dcf0      	bgt.n	8004226 <_printf_float+0x42e>
 8004244:	e6fd      	b.n	8004042 <_printf_float+0x24a>
 8004246:	f04f 0800 	mov.w	r8, #0
 800424a:	f104 0919 	add.w	r9, r4, #25
 800424e:	e7f4      	b.n	800423a <_printf_float+0x442>

08004250 <_printf_common>:
 8004250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004254:	4616      	mov	r6, r2
 8004256:	4699      	mov	r9, r3
 8004258:	688a      	ldr	r2, [r1, #8]
 800425a:	690b      	ldr	r3, [r1, #16]
 800425c:	4607      	mov	r7, r0
 800425e:	4293      	cmp	r3, r2
 8004260:	bfb8      	it	lt
 8004262:	4613      	movlt	r3, r2
 8004264:	6033      	str	r3, [r6, #0]
 8004266:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800426a:	460c      	mov	r4, r1
 800426c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004270:	b10a      	cbz	r2, 8004276 <_printf_common+0x26>
 8004272:	3301      	adds	r3, #1
 8004274:	6033      	str	r3, [r6, #0]
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	0699      	lsls	r1, r3, #26
 800427a:	bf42      	ittt	mi
 800427c:	6833      	ldrmi	r3, [r6, #0]
 800427e:	3302      	addmi	r3, #2
 8004280:	6033      	strmi	r3, [r6, #0]
 8004282:	6825      	ldr	r5, [r4, #0]
 8004284:	f015 0506 	ands.w	r5, r5, #6
 8004288:	d106      	bne.n	8004298 <_printf_common+0x48>
 800428a:	f104 0a19 	add.w	sl, r4, #25
 800428e:	68e3      	ldr	r3, [r4, #12]
 8004290:	6832      	ldr	r2, [r6, #0]
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	42ab      	cmp	r3, r5
 8004296:	dc28      	bgt.n	80042ea <_printf_common+0x9a>
 8004298:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800429c:	1e13      	subs	r3, r2, #0
 800429e:	6822      	ldr	r2, [r4, #0]
 80042a0:	bf18      	it	ne
 80042a2:	2301      	movne	r3, #1
 80042a4:	0692      	lsls	r2, r2, #26
 80042a6:	d42d      	bmi.n	8004304 <_printf_common+0xb4>
 80042a8:	4649      	mov	r1, r9
 80042aa:	4638      	mov	r0, r7
 80042ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042b0:	47c0      	blx	r8
 80042b2:	3001      	adds	r0, #1
 80042b4:	d020      	beq.n	80042f8 <_printf_common+0xa8>
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	68e5      	ldr	r5, [r4, #12]
 80042ba:	f003 0306 	and.w	r3, r3, #6
 80042be:	2b04      	cmp	r3, #4
 80042c0:	bf18      	it	ne
 80042c2:	2500      	movne	r5, #0
 80042c4:	6832      	ldr	r2, [r6, #0]
 80042c6:	f04f 0600 	mov.w	r6, #0
 80042ca:	68a3      	ldr	r3, [r4, #8]
 80042cc:	bf08      	it	eq
 80042ce:	1aad      	subeq	r5, r5, r2
 80042d0:	6922      	ldr	r2, [r4, #16]
 80042d2:	bf08      	it	eq
 80042d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042d8:	4293      	cmp	r3, r2
 80042da:	bfc4      	itt	gt
 80042dc:	1a9b      	subgt	r3, r3, r2
 80042de:	18ed      	addgt	r5, r5, r3
 80042e0:	341a      	adds	r4, #26
 80042e2:	42b5      	cmp	r5, r6
 80042e4:	d11a      	bne.n	800431c <_printf_common+0xcc>
 80042e6:	2000      	movs	r0, #0
 80042e8:	e008      	b.n	80042fc <_printf_common+0xac>
 80042ea:	2301      	movs	r3, #1
 80042ec:	4652      	mov	r2, sl
 80042ee:	4649      	mov	r1, r9
 80042f0:	4638      	mov	r0, r7
 80042f2:	47c0      	blx	r8
 80042f4:	3001      	adds	r0, #1
 80042f6:	d103      	bne.n	8004300 <_printf_common+0xb0>
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
 80042fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004300:	3501      	adds	r5, #1
 8004302:	e7c4      	b.n	800428e <_printf_common+0x3e>
 8004304:	2030      	movs	r0, #48	; 0x30
 8004306:	18e1      	adds	r1, r4, r3
 8004308:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004312:	4422      	add	r2, r4
 8004314:	3302      	adds	r3, #2
 8004316:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800431a:	e7c5      	b.n	80042a8 <_printf_common+0x58>
 800431c:	2301      	movs	r3, #1
 800431e:	4622      	mov	r2, r4
 8004320:	4649      	mov	r1, r9
 8004322:	4638      	mov	r0, r7
 8004324:	47c0      	blx	r8
 8004326:	3001      	adds	r0, #1
 8004328:	d0e6      	beq.n	80042f8 <_printf_common+0xa8>
 800432a:	3601      	adds	r6, #1
 800432c:	e7d9      	b.n	80042e2 <_printf_common+0x92>
	...

08004330 <_printf_i>:
 8004330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004334:	7e0f      	ldrb	r7, [r1, #24]
 8004336:	4691      	mov	r9, r2
 8004338:	2f78      	cmp	r7, #120	; 0x78
 800433a:	4680      	mov	r8, r0
 800433c:	460c      	mov	r4, r1
 800433e:	469a      	mov	sl, r3
 8004340:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004342:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004346:	d807      	bhi.n	8004358 <_printf_i+0x28>
 8004348:	2f62      	cmp	r7, #98	; 0x62
 800434a:	d80a      	bhi.n	8004362 <_printf_i+0x32>
 800434c:	2f00      	cmp	r7, #0
 800434e:	f000 80d9 	beq.w	8004504 <_printf_i+0x1d4>
 8004352:	2f58      	cmp	r7, #88	; 0x58
 8004354:	f000 80a4 	beq.w	80044a0 <_printf_i+0x170>
 8004358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800435c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004360:	e03a      	b.n	80043d8 <_printf_i+0xa8>
 8004362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004366:	2b15      	cmp	r3, #21
 8004368:	d8f6      	bhi.n	8004358 <_printf_i+0x28>
 800436a:	a101      	add	r1, pc, #4	; (adr r1, 8004370 <_printf_i+0x40>)
 800436c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004370:	080043c9 	.word	0x080043c9
 8004374:	080043dd 	.word	0x080043dd
 8004378:	08004359 	.word	0x08004359
 800437c:	08004359 	.word	0x08004359
 8004380:	08004359 	.word	0x08004359
 8004384:	08004359 	.word	0x08004359
 8004388:	080043dd 	.word	0x080043dd
 800438c:	08004359 	.word	0x08004359
 8004390:	08004359 	.word	0x08004359
 8004394:	08004359 	.word	0x08004359
 8004398:	08004359 	.word	0x08004359
 800439c:	080044eb 	.word	0x080044eb
 80043a0:	0800440d 	.word	0x0800440d
 80043a4:	080044cd 	.word	0x080044cd
 80043a8:	08004359 	.word	0x08004359
 80043ac:	08004359 	.word	0x08004359
 80043b0:	0800450d 	.word	0x0800450d
 80043b4:	08004359 	.word	0x08004359
 80043b8:	0800440d 	.word	0x0800440d
 80043bc:	08004359 	.word	0x08004359
 80043c0:	08004359 	.word	0x08004359
 80043c4:	080044d5 	.word	0x080044d5
 80043c8:	682b      	ldr	r3, [r5, #0]
 80043ca:	1d1a      	adds	r2, r3, #4
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	602a      	str	r2, [r5, #0]
 80043d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043d8:	2301      	movs	r3, #1
 80043da:	e0a4      	b.n	8004526 <_printf_i+0x1f6>
 80043dc:	6820      	ldr	r0, [r4, #0]
 80043de:	6829      	ldr	r1, [r5, #0]
 80043e0:	0606      	lsls	r6, r0, #24
 80043e2:	f101 0304 	add.w	r3, r1, #4
 80043e6:	d50a      	bpl.n	80043fe <_printf_i+0xce>
 80043e8:	680e      	ldr	r6, [r1, #0]
 80043ea:	602b      	str	r3, [r5, #0]
 80043ec:	2e00      	cmp	r6, #0
 80043ee:	da03      	bge.n	80043f8 <_printf_i+0xc8>
 80043f0:	232d      	movs	r3, #45	; 0x2d
 80043f2:	4276      	negs	r6, r6
 80043f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043f8:	230a      	movs	r3, #10
 80043fa:	485e      	ldr	r0, [pc, #376]	; (8004574 <_printf_i+0x244>)
 80043fc:	e019      	b.n	8004432 <_printf_i+0x102>
 80043fe:	680e      	ldr	r6, [r1, #0]
 8004400:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004404:	602b      	str	r3, [r5, #0]
 8004406:	bf18      	it	ne
 8004408:	b236      	sxthne	r6, r6
 800440a:	e7ef      	b.n	80043ec <_printf_i+0xbc>
 800440c:	682b      	ldr	r3, [r5, #0]
 800440e:	6820      	ldr	r0, [r4, #0]
 8004410:	1d19      	adds	r1, r3, #4
 8004412:	6029      	str	r1, [r5, #0]
 8004414:	0601      	lsls	r1, r0, #24
 8004416:	d501      	bpl.n	800441c <_printf_i+0xec>
 8004418:	681e      	ldr	r6, [r3, #0]
 800441a:	e002      	b.n	8004422 <_printf_i+0xf2>
 800441c:	0646      	lsls	r6, r0, #25
 800441e:	d5fb      	bpl.n	8004418 <_printf_i+0xe8>
 8004420:	881e      	ldrh	r6, [r3, #0]
 8004422:	2f6f      	cmp	r7, #111	; 0x6f
 8004424:	bf0c      	ite	eq
 8004426:	2308      	moveq	r3, #8
 8004428:	230a      	movne	r3, #10
 800442a:	4852      	ldr	r0, [pc, #328]	; (8004574 <_printf_i+0x244>)
 800442c:	2100      	movs	r1, #0
 800442e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004432:	6865      	ldr	r5, [r4, #4]
 8004434:	2d00      	cmp	r5, #0
 8004436:	bfa8      	it	ge
 8004438:	6821      	ldrge	r1, [r4, #0]
 800443a:	60a5      	str	r5, [r4, #8]
 800443c:	bfa4      	itt	ge
 800443e:	f021 0104 	bicge.w	r1, r1, #4
 8004442:	6021      	strge	r1, [r4, #0]
 8004444:	b90e      	cbnz	r6, 800444a <_printf_i+0x11a>
 8004446:	2d00      	cmp	r5, #0
 8004448:	d04d      	beq.n	80044e6 <_printf_i+0x1b6>
 800444a:	4615      	mov	r5, r2
 800444c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004450:	fb03 6711 	mls	r7, r3, r1, r6
 8004454:	5dc7      	ldrb	r7, [r0, r7]
 8004456:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800445a:	4637      	mov	r7, r6
 800445c:	42bb      	cmp	r3, r7
 800445e:	460e      	mov	r6, r1
 8004460:	d9f4      	bls.n	800444c <_printf_i+0x11c>
 8004462:	2b08      	cmp	r3, #8
 8004464:	d10b      	bne.n	800447e <_printf_i+0x14e>
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	07de      	lsls	r6, r3, #31
 800446a:	d508      	bpl.n	800447e <_printf_i+0x14e>
 800446c:	6923      	ldr	r3, [r4, #16]
 800446e:	6861      	ldr	r1, [r4, #4]
 8004470:	4299      	cmp	r1, r3
 8004472:	bfde      	ittt	le
 8004474:	2330      	movle	r3, #48	; 0x30
 8004476:	f805 3c01 	strble.w	r3, [r5, #-1]
 800447a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800447e:	1b52      	subs	r2, r2, r5
 8004480:	6122      	str	r2, [r4, #16]
 8004482:	464b      	mov	r3, r9
 8004484:	4621      	mov	r1, r4
 8004486:	4640      	mov	r0, r8
 8004488:	f8cd a000 	str.w	sl, [sp]
 800448c:	aa03      	add	r2, sp, #12
 800448e:	f7ff fedf 	bl	8004250 <_printf_common>
 8004492:	3001      	adds	r0, #1
 8004494:	d14c      	bne.n	8004530 <_printf_i+0x200>
 8004496:	f04f 30ff 	mov.w	r0, #4294967295
 800449a:	b004      	add	sp, #16
 800449c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a0:	4834      	ldr	r0, [pc, #208]	; (8004574 <_printf_i+0x244>)
 80044a2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80044a6:	6829      	ldr	r1, [r5, #0]
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80044ae:	6029      	str	r1, [r5, #0]
 80044b0:	061d      	lsls	r5, r3, #24
 80044b2:	d514      	bpl.n	80044de <_printf_i+0x1ae>
 80044b4:	07df      	lsls	r7, r3, #31
 80044b6:	bf44      	itt	mi
 80044b8:	f043 0320 	orrmi.w	r3, r3, #32
 80044bc:	6023      	strmi	r3, [r4, #0]
 80044be:	b91e      	cbnz	r6, 80044c8 <_printf_i+0x198>
 80044c0:	6823      	ldr	r3, [r4, #0]
 80044c2:	f023 0320 	bic.w	r3, r3, #32
 80044c6:	6023      	str	r3, [r4, #0]
 80044c8:	2310      	movs	r3, #16
 80044ca:	e7af      	b.n	800442c <_printf_i+0xfc>
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	f043 0320 	orr.w	r3, r3, #32
 80044d2:	6023      	str	r3, [r4, #0]
 80044d4:	2378      	movs	r3, #120	; 0x78
 80044d6:	4828      	ldr	r0, [pc, #160]	; (8004578 <_printf_i+0x248>)
 80044d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044dc:	e7e3      	b.n	80044a6 <_printf_i+0x176>
 80044de:	0659      	lsls	r1, r3, #25
 80044e0:	bf48      	it	mi
 80044e2:	b2b6      	uxthmi	r6, r6
 80044e4:	e7e6      	b.n	80044b4 <_printf_i+0x184>
 80044e6:	4615      	mov	r5, r2
 80044e8:	e7bb      	b.n	8004462 <_printf_i+0x132>
 80044ea:	682b      	ldr	r3, [r5, #0]
 80044ec:	6826      	ldr	r6, [r4, #0]
 80044ee:	1d18      	adds	r0, r3, #4
 80044f0:	6961      	ldr	r1, [r4, #20]
 80044f2:	6028      	str	r0, [r5, #0]
 80044f4:	0635      	lsls	r5, r6, #24
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	d501      	bpl.n	80044fe <_printf_i+0x1ce>
 80044fa:	6019      	str	r1, [r3, #0]
 80044fc:	e002      	b.n	8004504 <_printf_i+0x1d4>
 80044fe:	0670      	lsls	r0, r6, #25
 8004500:	d5fb      	bpl.n	80044fa <_printf_i+0x1ca>
 8004502:	8019      	strh	r1, [r3, #0]
 8004504:	2300      	movs	r3, #0
 8004506:	4615      	mov	r5, r2
 8004508:	6123      	str	r3, [r4, #16]
 800450a:	e7ba      	b.n	8004482 <_printf_i+0x152>
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	2100      	movs	r1, #0
 8004510:	1d1a      	adds	r2, r3, #4
 8004512:	602a      	str	r2, [r5, #0]
 8004514:	681d      	ldr	r5, [r3, #0]
 8004516:	6862      	ldr	r2, [r4, #4]
 8004518:	4628      	mov	r0, r5
 800451a:	f000 fed7 	bl	80052cc <memchr>
 800451e:	b108      	cbz	r0, 8004524 <_printf_i+0x1f4>
 8004520:	1b40      	subs	r0, r0, r5
 8004522:	6060      	str	r0, [r4, #4]
 8004524:	6863      	ldr	r3, [r4, #4]
 8004526:	6123      	str	r3, [r4, #16]
 8004528:	2300      	movs	r3, #0
 800452a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800452e:	e7a8      	b.n	8004482 <_printf_i+0x152>
 8004530:	462a      	mov	r2, r5
 8004532:	4649      	mov	r1, r9
 8004534:	4640      	mov	r0, r8
 8004536:	6923      	ldr	r3, [r4, #16]
 8004538:	47d0      	blx	sl
 800453a:	3001      	adds	r0, #1
 800453c:	d0ab      	beq.n	8004496 <_printf_i+0x166>
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	079b      	lsls	r3, r3, #30
 8004542:	d413      	bmi.n	800456c <_printf_i+0x23c>
 8004544:	68e0      	ldr	r0, [r4, #12]
 8004546:	9b03      	ldr	r3, [sp, #12]
 8004548:	4298      	cmp	r0, r3
 800454a:	bfb8      	it	lt
 800454c:	4618      	movlt	r0, r3
 800454e:	e7a4      	b.n	800449a <_printf_i+0x16a>
 8004550:	2301      	movs	r3, #1
 8004552:	4632      	mov	r2, r6
 8004554:	4649      	mov	r1, r9
 8004556:	4640      	mov	r0, r8
 8004558:	47d0      	blx	sl
 800455a:	3001      	adds	r0, #1
 800455c:	d09b      	beq.n	8004496 <_printf_i+0x166>
 800455e:	3501      	adds	r5, #1
 8004560:	68e3      	ldr	r3, [r4, #12]
 8004562:	9903      	ldr	r1, [sp, #12]
 8004564:	1a5b      	subs	r3, r3, r1
 8004566:	42ab      	cmp	r3, r5
 8004568:	dcf2      	bgt.n	8004550 <_printf_i+0x220>
 800456a:	e7eb      	b.n	8004544 <_printf_i+0x214>
 800456c:	2500      	movs	r5, #0
 800456e:	f104 0619 	add.w	r6, r4, #25
 8004572:	e7f5      	b.n	8004560 <_printf_i+0x230>
 8004574:	08006aea 	.word	0x08006aea
 8004578:	08006afb 	.word	0x08006afb

0800457c <siprintf>:
 800457c:	b40e      	push	{r1, r2, r3}
 800457e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004582:	b500      	push	{lr}
 8004584:	b09c      	sub	sp, #112	; 0x70
 8004586:	ab1d      	add	r3, sp, #116	; 0x74
 8004588:	9002      	str	r0, [sp, #8]
 800458a:	9006      	str	r0, [sp, #24]
 800458c:	9107      	str	r1, [sp, #28]
 800458e:	9104      	str	r1, [sp, #16]
 8004590:	4808      	ldr	r0, [pc, #32]	; (80045b4 <siprintf+0x38>)
 8004592:	4909      	ldr	r1, [pc, #36]	; (80045b8 <siprintf+0x3c>)
 8004594:	f853 2b04 	ldr.w	r2, [r3], #4
 8004598:	9105      	str	r1, [sp, #20]
 800459a:	6800      	ldr	r0, [r0, #0]
 800459c:	a902      	add	r1, sp, #8
 800459e:	9301      	str	r3, [sp, #4]
 80045a0:	f001 fb7e 	bl	8005ca0 <_svfiprintf_r>
 80045a4:	2200      	movs	r2, #0
 80045a6:	9b02      	ldr	r3, [sp, #8]
 80045a8:	701a      	strb	r2, [r3, #0]
 80045aa:	b01c      	add	sp, #112	; 0x70
 80045ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80045b0:	b003      	add	sp, #12
 80045b2:	4770      	bx	lr
 80045b4:	2000000c 	.word	0x2000000c
 80045b8:	ffff0208 	.word	0xffff0208

080045bc <quorem>:
 80045bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c0:	6903      	ldr	r3, [r0, #16]
 80045c2:	690c      	ldr	r4, [r1, #16]
 80045c4:	4607      	mov	r7, r0
 80045c6:	42a3      	cmp	r3, r4
 80045c8:	f2c0 8082 	blt.w	80046d0 <quorem+0x114>
 80045cc:	3c01      	subs	r4, #1
 80045ce:	f100 0514 	add.w	r5, r0, #20
 80045d2:	f101 0814 	add.w	r8, r1, #20
 80045d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80045e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045e4:	3301      	adds	r3, #1
 80045e6:	429a      	cmp	r2, r3
 80045e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80045ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80045f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80045f4:	d331      	bcc.n	800465a <quorem+0x9e>
 80045f6:	f04f 0e00 	mov.w	lr, #0
 80045fa:	4640      	mov	r0, r8
 80045fc:	46ac      	mov	ip, r5
 80045fe:	46f2      	mov	sl, lr
 8004600:	f850 2b04 	ldr.w	r2, [r0], #4
 8004604:	b293      	uxth	r3, r2
 8004606:	fb06 e303 	mla	r3, r6, r3, lr
 800460a:	0c12      	lsrs	r2, r2, #16
 800460c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004610:	b29b      	uxth	r3, r3
 8004612:	fb06 e202 	mla	r2, r6, r2, lr
 8004616:	ebaa 0303 	sub.w	r3, sl, r3
 800461a:	f8dc a000 	ldr.w	sl, [ip]
 800461e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004622:	fa1f fa8a 	uxth.w	sl, sl
 8004626:	4453      	add	r3, sl
 8004628:	f8dc a000 	ldr.w	sl, [ip]
 800462c:	b292      	uxth	r2, r2
 800462e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004632:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004636:	b29b      	uxth	r3, r3
 8004638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800463c:	4581      	cmp	r9, r0
 800463e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004642:	f84c 3b04 	str.w	r3, [ip], #4
 8004646:	d2db      	bcs.n	8004600 <quorem+0x44>
 8004648:	f855 300b 	ldr.w	r3, [r5, fp]
 800464c:	b92b      	cbnz	r3, 800465a <quorem+0x9e>
 800464e:	9b01      	ldr	r3, [sp, #4]
 8004650:	3b04      	subs	r3, #4
 8004652:	429d      	cmp	r5, r3
 8004654:	461a      	mov	r2, r3
 8004656:	d32f      	bcc.n	80046b8 <quorem+0xfc>
 8004658:	613c      	str	r4, [r7, #16]
 800465a:	4638      	mov	r0, r7
 800465c:	f001 f8d0 	bl	8005800 <__mcmp>
 8004660:	2800      	cmp	r0, #0
 8004662:	db25      	blt.n	80046b0 <quorem+0xf4>
 8004664:	4628      	mov	r0, r5
 8004666:	f04f 0c00 	mov.w	ip, #0
 800466a:	3601      	adds	r6, #1
 800466c:	f858 1b04 	ldr.w	r1, [r8], #4
 8004670:	f8d0 e000 	ldr.w	lr, [r0]
 8004674:	b28b      	uxth	r3, r1
 8004676:	ebac 0303 	sub.w	r3, ip, r3
 800467a:	fa1f f28e 	uxth.w	r2, lr
 800467e:	4413      	add	r3, r2
 8004680:	0c0a      	lsrs	r2, r1, #16
 8004682:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004686:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800468a:	b29b      	uxth	r3, r3
 800468c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004690:	45c1      	cmp	r9, r8
 8004692:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004696:	f840 3b04 	str.w	r3, [r0], #4
 800469a:	d2e7      	bcs.n	800466c <quorem+0xb0>
 800469c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046a4:	b922      	cbnz	r2, 80046b0 <quorem+0xf4>
 80046a6:	3b04      	subs	r3, #4
 80046a8:	429d      	cmp	r5, r3
 80046aa:	461a      	mov	r2, r3
 80046ac:	d30a      	bcc.n	80046c4 <quorem+0x108>
 80046ae:	613c      	str	r4, [r7, #16]
 80046b0:	4630      	mov	r0, r6
 80046b2:	b003      	add	sp, #12
 80046b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	3b04      	subs	r3, #4
 80046bc:	2a00      	cmp	r2, #0
 80046be:	d1cb      	bne.n	8004658 <quorem+0x9c>
 80046c0:	3c01      	subs	r4, #1
 80046c2:	e7c6      	b.n	8004652 <quorem+0x96>
 80046c4:	6812      	ldr	r2, [r2, #0]
 80046c6:	3b04      	subs	r3, #4
 80046c8:	2a00      	cmp	r2, #0
 80046ca:	d1f0      	bne.n	80046ae <quorem+0xf2>
 80046cc:	3c01      	subs	r4, #1
 80046ce:	e7eb      	b.n	80046a8 <quorem+0xec>
 80046d0:	2000      	movs	r0, #0
 80046d2:	e7ee      	b.n	80046b2 <quorem+0xf6>
 80046d4:	0000      	movs	r0, r0
	...

080046d8 <_dtoa_r>:
 80046d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046dc:	4616      	mov	r6, r2
 80046de:	461f      	mov	r7, r3
 80046e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80046e2:	b099      	sub	sp, #100	; 0x64
 80046e4:	4605      	mov	r5, r0
 80046e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80046ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80046ee:	b974      	cbnz	r4, 800470e <_dtoa_r+0x36>
 80046f0:	2010      	movs	r0, #16
 80046f2:	f000 fde3 	bl	80052bc <malloc>
 80046f6:	4602      	mov	r2, r0
 80046f8:	6268      	str	r0, [r5, #36]	; 0x24
 80046fa:	b920      	cbnz	r0, 8004706 <_dtoa_r+0x2e>
 80046fc:	21ea      	movs	r1, #234	; 0xea
 80046fe:	4ba8      	ldr	r3, [pc, #672]	; (80049a0 <_dtoa_r+0x2c8>)
 8004700:	48a8      	ldr	r0, [pc, #672]	; (80049a4 <_dtoa_r+0x2cc>)
 8004702:	f001 fbdd 	bl	8005ec0 <__assert_func>
 8004706:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800470a:	6004      	str	r4, [r0, #0]
 800470c:	60c4      	str	r4, [r0, #12]
 800470e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004710:	6819      	ldr	r1, [r3, #0]
 8004712:	b151      	cbz	r1, 800472a <_dtoa_r+0x52>
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	2301      	movs	r3, #1
 8004718:	4093      	lsls	r3, r2
 800471a:	604a      	str	r2, [r1, #4]
 800471c:	608b      	str	r3, [r1, #8]
 800471e:	4628      	mov	r0, r5
 8004720:	f000 fe30 	bl	8005384 <_Bfree>
 8004724:	2200      	movs	r2, #0
 8004726:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	1e3b      	subs	r3, r7, #0
 800472c:	bfaf      	iteee	ge
 800472e:	2300      	movge	r3, #0
 8004730:	2201      	movlt	r2, #1
 8004732:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004736:	9305      	strlt	r3, [sp, #20]
 8004738:	bfa8      	it	ge
 800473a:	f8c8 3000 	strge.w	r3, [r8]
 800473e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004742:	4b99      	ldr	r3, [pc, #612]	; (80049a8 <_dtoa_r+0x2d0>)
 8004744:	bfb8      	it	lt
 8004746:	f8c8 2000 	strlt.w	r2, [r8]
 800474a:	ea33 0309 	bics.w	r3, r3, r9
 800474e:	d119      	bne.n	8004784 <_dtoa_r+0xac>
 8004750:	f242 730f 	movw	r3, #9999	; 0x270f
 8004754:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800475c:	4333      	orrs	r3, r6
 800475e:	f000 857f 	beq.w	8005260 <_dtoa_r+0xb88>
 8004762:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004764:	b953      	cbnz	r3, 800477c <_dtoa_r+0xa4>
 8004766:	4b91      	ldr	r3, [pc, #580]	; (80049ac <_dtoa_r+0x2d4>)
 8004768:	e022      	b.n	80047b0 <_dtoa_r+0xd8>
 800476a:	4b91      	ldr	r3, [pc, #580]	; (80049b0 <_dtoa_r+0x2d8>)
 800476c:	9303      	str	r3, [sp, #12]
 800476e:	3308      	adds	r3, #8
 8004770:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	9803      	ldr	r0, [sp, #12]
 8004776:	b019      	add	sp, #100	; 0x64
 8004778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800477c:	4b8b      	ldr	r3, [pc, #556]	; (80049ac <_dtoa_r+0x2d4>)
 800477e:	9303      	str	r3, [sp, #12]
 8004780:	3303      	adds	r3, #3
 8004782:	e7f5      	b.n	8004770 <_dtoa_r+0x98>
 8004784:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004788:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800478c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004790:	2200      	movs	r2, #0
 8004792:	2300      	movs	r3, #0
 8004794:	f7fc f920 	bl	80009d8 <__aeabi_dcmpeq>
 8004798:	4680      	mov	r8, r0
 800479a:	b158      	cbz	r0, 80047b4 <_dtoa_r+0xdc>
 800479c:	2301      	movs	r3, #1
 800479e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 8558 	beq.w	800525a <_dtoa_r+0xb82>
 80047aa:	4882      	ldr	r0, [pc, #520]	; (80049b4 <_dtoa_r+0x2dc>)
 80047ac:	6018      	str	r0, [r3, #0]
 80047ae:	1e43      	subs	r3, r0, #1
 80047b0:	9303      	str	r3, [sp, #12]
 80047b2:	e7df      	b.n	8004774 <_dtoa_r+0x9c>
 80047b4:	ab16      	add	r3, sp, #88	; 0x58
 80047b6:	9301      	str	r3, [sp, #4]
 80047b8:	ab17      	add	r3, sp, #92	; 0x5c
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	4628      	mov	r0, r5
 80047be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80047c2:	f001 f8c5 	bl	8005950 <__d2b>
 80047c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80047ca:	4683      	mov	fp, r0
 80047cc:	2c00      	cmp	r4, #0
 80047ce:	d07f      	beq.n	80048d0 <_dtoa_r+0x1f8>
 80047d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80047d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047d6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80047da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80047e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80047e6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80047ea:	2200      	movs	r2, #0
 80047ec:	4b72      	ldr	r3, [pc, #456]	; (80049b8 <_dtoa_r+0x2e0>)
 80047ee:	f7fb fcd3 	bl	8000198 <__aeabi_dsub>
 80047f2:	a365      	add	r3, pc, #404	; (adr r3, 8004988 <_dtoa_r+0x2b0>)
 80047f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f8:	f7fb fe86 	bl	8000508 <__aeabi_dmul>
 80047fc:	a364      	add	r3, pc, #400	; (adr r3, 8004990 <_dtoa_r+0x2b8>)
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	f7fb fccb 	bl	800019c <__adddf3>
 8004806:	4606      	mov	r6, r0
 8004808:	4620      	mov	r0, r4
 800480a:	460f      	mov	r7, r1
 800480c:	f7fb fe12 	bl	8000434 <__aeabi_i2d>
 8004810:	a361      	add	r3, pc, #388	; (adr r3, 8004998 <_dtoa_r+0x2c0>)
 8004812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004816:	f7fb fe77 	bl	8000508 <__aeabi_dmul>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	4630      	mov	r0, r6
 8004820:	4639      	mov	r1, r7
 8004822:	f7fb fcbb 	bl	800019c <__adddf3>
 8004826:	4606      	mov	r6, r0
 8004828:	460f      	mov	r7, r1
 800482a:	f7fc f91d 	bl	8000a68 <__aeabi_d2iz>
 800482e:	2200      	movs	r2, #0
 8004830:	4682      	mov	sl, r0
 8004832:	2300      	movs	r3, #0
 8004834:	4630      	mov	r0, r6
 8004836:	4639      	mov	r1, r7
 8004838:	f7fc f8d8 	bl	80009ec <__aeabi_dcmplt>
 800483c:	b148      	cbz	r0, 8004852 <_dtoa_r+0x17a>
 800483e:	4650      	mov	r0, sl
 8004840:	f7fb fdf8 	bl	8000434 <__aeabi_i2d>
 8004844:	4632      	mov	r2, r6
 8004846:	463b      	mov	r3, r7
 8004848:	f7fc f8c6 	bl	80009d8 <__aeabi_dcmpeq>
 800484c:	b908      	cbnz	r0, 8004852 <_dtoa_r+0x17a>
 800484e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004852:	f1ba 0f16 	cmp.w	sl, #22
 8004856:	d858      	bhi.n	800490a <_dtoa_r+0x232>
 8004858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800485c:	4b57      	ldr	r3, [pc, #348]	; (80049bc <_dtoa_r+0x2e4>)
 800485e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004866:	f7fc f8c1 	bl	80009ec <__aeabi_dcmplt>
 800486a:	2800      	cmp	r0, #0
 800486c:	d04f      	beq.n	800490e <_dtoa_r+0x236>
 800486e:	2300      	movs	r3, #0
 8004870:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004874:	930f      	str	r3, [sp, #60]	; 0x3c
 8004876:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004878:	1b1c      	subs	r4, r3, r4
 800487a:	1e63      	subs	r3, r4, #1
 800487c:	9309      	str	r3, [sp, #36]	; 0x24
 800487e:	bf49      	itett	mi
 8004880:	f1c4 0301 	rsbmi	r3, r4, #1
 8004884:	2300      	movpl	r3, #0
 8004886:	9306      	strmi	r3, [sp, #24]
 8004888:	2300      	movmi	r3, #0
 800488a:	bf54      	ite	pl
 800488c:	9306      	strpl	r3, [sp, #24]
 800488e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004890:	f1ba 0f00 	cmp.w	sl, #0
 8004894:	db3d      	blt.n	8004912 <_dtoa_r+0x23a>
 8004896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004898:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800489c:	4453      	add	r3, sl
 800489e:	9309      	str	r3, [sp, #36]	; 0x24
 80048a0:	2300      	movs	r3, #0
 80048a2:	930a      	str	r3, [sp, #40]	; 0x28
 80048a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048a6:	2b09      	cmp	r3, #9
 80048a8:	f200 808c 	bhi.w	80049c4 <_dtoa_r+0x2ec>
 80048ac:	2b05      	cmp	r3, #5
 80048ae:	bfc4      	itt	gt
 80048b0:	3b04      	subgt	r3, #4
 80048b2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80048b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048b6:	bfc8      	it	gt
 80048b8:	2400      	movgt	r4, #0
 80048ba:	f1a3 0302 	sub.w	r3, r3, #2
 80048be:	bfd8      	it	le
 80048c0:	2401      	movle	r4, #1
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	f200 808a 	bhi.w	80049dc <_dtoa_r+0x304>
 80048c8:	e8df f003 	tbb	[pc, r3]
 80048cc:	5b4d4f2d 	.word	0x5b4d4f2d
 80048d0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80048d4:	441c      	add	r4, r3
 80048d6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80048da:	2b20      	cmp	r3, #32
 80048dc:	bfc3      	ittte	gt
 80048de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80048e2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80048e6:	fa09 f303 	lslgt.w	r3, r9, r3
 80048ea:	f1c3 0320 	rsble	r3, r3, #32
 80048ee:	bfc6      	itte	gt
 80048f0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80048f4:	4318      	orrgt	r0, r3
 80048f6:	fa06 f003 	lslle.w	r0, r6, r3
 80048fa:	f7fb fd8b 	bl	8000414 <__aeabi_ui2d>
 80048fe:	2301      	movs	r3, #1
 8004900:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004904:	3c01      	subs	r4, #1
 8004906:	9313      	str	r3, [sp, #76]	; 0x4c
 8004908:	e76f      	b.n	80047ea <_dtoa_r+0x112>
 800490a:	2301      	movs	r3, #1
 800490c:	e7b2      	b.n	8004874 <_dtoa_r+0x19c>
 800490e:	900f      	str	r0, [sp, #60]	; 0x3c
 8004910:	e7b1      	b.n	8004876 <_dtoa_r+0x19e>
 8004912:	9b06      	ldr	r3, [sp, #24]
 8004914:	eba3 030a 	sub.w	r3, r3, sl
 8004918:	9306      	str	r3, [sp, #24]
 800491a:	f1ca 0300 	rsb	r3, sl, #0
 800491e:	930a      	str	r3, [sp, #40]	; 0x28
 8004920:	2300      	movs	r3, #0
 8004922:	930e      	str	r3, [sp, #56]	; 0x38
 8004924:	e7be      	b.n	80048a4 <_dtoa_r+0x1cc>
 8004926:	2300      	movs	r3, #0
 8004928:	930b      	str	r3, [sp, #44]	; 0x2c
 800492a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800492c:	2b00      	cmp	r3, #0
 800492e:	dc58      	bgt.n	80049e2 <_dtoa_r+0x30a>
 8004930:	f04f 0901 	mov.w	r9, #1
 8004934:	464b      	mov	r3, r9
 8004936:	f8cd 9020 	str.w	r9, [sp, #32]
 800493a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800493e:	2200      	movs	r2, #0
 8004940:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004942:	6042      	str	r2, [r0, #4]
 8004944:	2204      	movs	r2, #4
 8004946:	f102 0614 	add.w	r6, r2, #20
 800494a:	429e      	cmp	r6, r3
 800494c:	6841      	ldr	r1, [r0, #4]
 800494e:	d94e      	bls.n	80049ee <_dtoa_r+0x316>
 8004950:	4628      	mov	r0, r5
 8004952:	f000 fcd7 	bl	8005304 <_Balloc>
 8004956:	9003      	str	r0, [sp, #12]
 8004958:	2800      	cmp	r0, #0
 800495a:	d14c      	bne.n	80049f6 <_dtoa_r+0x31e>
 800495c:	4602      	mov	r2, r0
 800495e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004962:	4b17      	ldr	r3, [pc, #92]	; (80049c0 <_dtoa_r+0x2e8>)
 8004964:	e6cc      	b.n	8004700 <_dtoa_r+0x28>
 8004966:	2301      	movs	r3, #1
 8004968:	e7de      	b.n	8004928 <_dtoa_r+0x250>
 800496a:	2300      	movs	r3, #0
 800496c:	930b      	str	r3, [sp, #44]	; 0x2c
 800496e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004970:	eb0a 0903 	add.w	r9, sl, r3
 8004974:	f109 0301 	add.w	r3, r9, #1
 8004978:	2b01      	cmp	r3, #1
 800497a:	9308      	str	r3, [sp, #32]
 800497c:	bfb8      	it	lt
 800497e:	2301      	movlt	r3, #1
 8004980:	e7dd      	b.n	800493e <_dtoa_r+0x266>
 8004982:	2301      	movs	r3, #1
 8004984:	e7f2      	b.n	800496c <_dtoa_r+0x294>
 8004986:	bf00      	nop
 8004988:	636f4361 	.word	0x636f4361
 800498c:	3fd287a7 	.word	0x3fd287a7
 8004990:	8b60c8b3 	.word	0x8b60c8b3
 8004994:	3fc68a28 	.word	0x3fc68a28
 8004998:	509f79fb 	.word	0x509f79fb
 800499c:	3fd34413 	.word	0x3fd34413
 80049a0:	08006b19 	.word	0x08006b19
 80049a4:	08006b30 	.word	0x08006b30
 80049a8:	7ff00000 	.word	0x7ff00000
 80049ac:	08006b15 	.word	0x08006b15
 80049b0:	08006b0c 	.word	0x08006b0c
 80049b4:	08006ae9 	.word	0x08006ae9
 80049b8:	3ff80000 	.word	0x3ff80000
 80049bc:	08006c20 	.word	0x08006c20
 80049c0:	08006b8b 	.word	0x08006b8b
 80049c4:	2401      	movs	r4, #1
 80049c6:	2300      	movs	r3, #0
 80049c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80049ca:	9322      	str	r3, [sp, #136]	; 0x88
 80049cc:	f04f 39ff 	mov.w	r9, #4294967295
 80049d0:	2200      	movs	r2, #0
 80049d2:	2312      	movs	r3, #18
 80049d4:	f8cd 9020 	str.w	r9, [sp, #32]
 80049d8:	9223      	str	r2, [sp, #140]	; 0x8c
 80049da:	e7b0      	b.n	800493e <_dtoa_r+0x266>
 80049dc:	2301      	movs	r3, #1
 80049de:	930b      	str	r3, [sp, #44]	; 0x2c
 80049e0:	e7f4      	b.n	80049cc <_dtoa_r+0x2f4>
 80049e2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80049e6:	464b      	mov	r3, r9
 80049e8:	f8cd 9020 	str.w	r9, [sp, #32]
 80049ec:	e7a7      	b.n	800493e <_dtoa_r+0x266>
 80049ee:	3101      	adds	r1, #1
 80049f0:	6041      	str	r1, [r0, #4]
 80049f2:	0052      	lsls	r2, r2, #1
 80049f4:	e7a7      	b.n	8004946 <_dtoa_r+0x26e>
 80049f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80049f8:	9a03      	ldr	r2, [sp, #12]
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	9b08      	ldr	r3, [sp, #32]
 80049fe:	2b0e      	cmp	r3, #14
 8004a00:	f200 80a8 	bhi.w	8004b54 <_dtoa_r+0x47c>
 8004a04:	2c00      	cmp	r4, #0
 8004a06:	f000 80a5 	beq.w	8004b54 <_dtoa_r+0x47c>
 8004a0a:	f1ba 0f00 	cmp.w	sl, #0
 8004a0e:	dd34      	ble.n	8004a7a <_dtoa_r+0x3a2>
 8004a10:	4a9a      	ldr	r2, [pc, #616]	; (8004c7c <_dtoa_r+0x5a4>)
 8004a12:	f00a 030f 	and.w	r3, sl, #15
 8004a16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004a1a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004a1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004a26:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004a2a:	d016      	beq.n	8004a5a <_dtoa_r+0x382>
 8004a2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a30:	4b93      	ldr	r3, [pc, #588]	; (8004c80 <_dtoa_r+0x5a8>)
 8004a32:	2703      	movs	r7, #3
 8004a34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a38:	f7fb fe90 	bl	800075c <__aeabi_ddiv>
 8004a3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a40:	f004 040f 	and.w	r4, r4, #15
 8004a44:	4e8e      	ldr	r6, [pc, #568]	; (8004c80 <_dtoa_r+0x5a8>)
 8004a46:	b954      	cbnz	r4, 8004a5e <_dtoa_r+0x386>
 8004a48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a50:	f7fb fe84 	bl	800075c <__aeabi_ddiv>
 8004a54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a58:	e029      	b.n	8004aae <_dtoa_r+0x3d6>
 8004a5a:	2702      	movs	r7, #2
 8004a5c:	e7f2      	b.n	8004a44 <_dtoa_r+0x36c>
 8004a5e:	07e1      	lsls	r1, r4, #31
 8004a60:	d508      	bpl.n	8004a74 <_dtoa_r+0x39c>
 8004a62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a66:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004a6a:	f7fb fd4d 	bl	8000508 <__aeabi_dmul>
 8004a6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004a72:	3701      	adds	r7, #1
 8004a74:	1064      	asrs	r4, r4, #1
 8004a76:	3608      	adds	r6, #8
 8004a78:	e7e5      	b.n	8004a46 <_dtoa_r+0x36e>
 8004a7a:	f000 80a5 	beq.w	8004bc8 <_dtoa_r+0x4f0>
 8004a7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a82:	f1ca 0400 	rsb	r4, sl, #0
 8004a86:	4b7d      	ldr	r3, [pc, #500]	; (8004c7c <_dtoa_r+0x5a4>)
 8004a88:	f004 020f 	and.w	r2, r4, #15
 8004a8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	f7fb fd38 	bl	8000508 <__aeabi_dmul>
 8004a98:	2702      	movs	r7, #2
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004aa0:	4e77      	ldr	r6, [pc, #476]	; (8004c80 <_dtoa_r+0x5a8>)
 8004aa2:	1124      	asrs	r4, r4, #4
 8004aa4:	2c00      	cmp	r4, #0
 8004aa6:	f040 8084 	bne.w	8004bb2 <_dtoa_r+0x4da>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1d2      	bne.n	8004a54 <_dtoa_r+0x37c>
 8004aae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 808b 	beq.w	8004bcc <_dtoa_r+0x4f4>
 8004ab6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004aba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004abe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	4b6f      	ldr	r3, [pc, #444]	; (8004c84 <_dtoa_r+0x5ac>)
 8004ac6:	f7fb ff91 	bl	80009ec <__aeabi_dcmplt>
 8004aca:	2800      	cmp	r0, #0
 8004acc:	d07e      	beq.n	8004bcc <_dtoa_r+0x4f4>
 8004ace:	9b08      	ldr	r3, [sp, #32]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d07b      	beq.n	8004bcc <_dtoa_r+0x4f4>
 8004ad4:	f1b9 0f00 	cmp.w	r9, #0
 8004ad8:	dd38      	ble.n	8004b4c <_dtoa_r+0x474>
 8004ada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ade:	2200      	movs	r2, #0
 8004ae0:	4b69      	ldr	r3, [pc, #420]	; (8004c88 <_dtoa_r+0x5b0>)
 8004ae2:	f7fb fd11 	bl	8000508 <__aeabi_dmul>
 8004ae6:	464c      	mov	r4, r9
 8004ae8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004aec:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004af0:	3701      	adds	r7, #1
 8004af2:	4638      	mov	r0, r7
 8004af4:	f7fb fc9e 	bl	8000434 <__aeabi_i2d>
 8004af8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004afc:	f7fb fd04 	bl	8000508 <__aeabi_dmul>
 8004b00:	2200      	movs	r2, #0
 8004b02:	4b62      	ldr	r3, [pc, #392]	; (8004c8c <_dtoa_r+0x5b4>)
 8004b04:	f7fb fb4a 	bl	800019c <__adddf3>
 8004b08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004b0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b10:	9611      	str	r6, [sp, #68]	; 0x44
 8004b12:	2c00      	cmp	r4, #0
 8004b14:	d15d      	bne.n	8004bd2 <_dtoa_r+0x4fa>
 8004b16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	4b5c      	ldr	r3, [pc, #368]	; (8004c90 <_dtoa_r+0x5b8>)
 8004b1e:	f7fb fb3b 	bl	8000198 <__aeabi_dsub>
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b2a:	4633      	mov	r3, r6
 8004b2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004b2e:	f7fb ff7b 	bl	8000a28 <__aeabi_dcmpgt>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	f040 829c 	bne.w	8005070 <_dtoa_r+0x998>
 8004b38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004b3e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004b42:	f7fb ff53 	bl	80009ec <__aeabi_dcmplt>
 8004b46:	2800      	cmp	r0, #0
 8004b48:	f040 8290 	bne.w	800506c <_dtoa_r+0x994>
 8004b4c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004b50:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004b54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f2c0 8152 	blt.w	8004e00 <_dtoa_r+0x728>
 8004b5c:	f1ba 0f0e 	cmp.w	sl, #14
 8004b60:	f300 814e 	bgt.w	8004e00 <_dtoa_r+0x728>
 8004b64:	4b45      	ldr	r3, [pc, #276]	; (8004c7c <_dtoa_r+0x5a4>)
 8004b66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004b6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b6e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004b72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f280 80db 	bge.w	8004d30 <_dtoa_r+0x658>
 8004b7a:	9b08      	ldr	r3, [sp, #32]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f300 80d7 	bgt.w	8004d30 <_dtoa_r+0x658>
 8004b82:	f040 8272 	bne.w	800506a <_dtoa_r+0x992>
 8004b86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	4b40      	ldr	r3, [pc, #256]	; (8004c90 <_dtoa_r+0x5b8>)
 8004b8e:	f7fb fcbb 	bl	8000508 <__aeabi_dmul>
 8004b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b96:	f7fb ff3d 	bl	8000a14 <__aeabi_dcmpge>
 8004b9a:	9c08      	ldr	r4, [sp, #32]
 8004b9c:	4626      	mov	r6, r4
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	f040 8248 	bne.w	8005034 <_dtoa_r+0x95c>
 8004ba4:	2331      	movs	r3, #49	; 0x31
 8004ba6:	9f03      	ldr	r7, [sp, #12]
 8004ba8:	f10a 0a01 	add.w	sl, sl, #1
 8004bac:	f807 3b01 	strb.w	r3, [r7], #1
 8004bb0:	e244      	b.n	800503c <_dtoa_r+0x964>
 8004bb2:	07e2      	lsls	r2, r4, #31
 8004bb4:	d505      	bpl.n	8004bc2 <_dtoa_r+0x4ea>
 8004bb6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004bba:	f7fb fca5 	bl	8000508 <__aeabi_dmul>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	3701      	adds	r7, #1
 8004bc2:	1064      	asrs	r4, r4, #1
 8004bc4:	3608      	adds	r6, #8
 8004bc6:	e76d      	b.n	8004aa4 <_dtoa_r+0x3cc>
 8004bc8:	2702      	movs	r7, #2
 8004bca:	e770      	b.n	8004aae <_dtoa_r+0x3d6>
 8004bcc:	46d0      	mov	r8, sl
 8004bce:	9c08      	ldr	r4, [sp, #32]
 8004bd0:	e78f      	b.n	8004af2 <_dtoa_r+0x41a>
 8004bd2:	9903      	ldr	r1, [sp, #12]
 8004bd4:	4b29      	ldr	r3, [pc, #164]	; (8004c7c <_dtoa_r+0x5a4>)
 8004bd6:	4421      	add	r1, r4
 8004bd8:	9112      	str	r1, [sp, #72]	; 0x48
 8004bda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004be0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004be4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004be8:	2900      	cmp	r1, #0
 8004bea:	d055      	beq.n	8004c98 <_dtoa_r+0x5c0>
 8004bec:	2000      	movs	r0, #0
 8004bee:	4929      	ldr	r1, [pc, #164]	; (8004c94 <_dtoa_r+0x5bc>)
 8004bf0:	f7fb fdb4 	bl	800075c <__aeabi_ddiv>
 8004bf4:	463b      	mov	r3, r7
 8004bf6:	4632      	mov	r2, r6
 8004bf8:	f7fb face 	bl	8000198 <__aeabi_dsub>
 8004bfc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c00:	9f03      	ldr	r7, [sp, #12]
 8004c02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c06:	f7fb ff2f 	bl	8000a68 <__aeabi_d2iz>
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	f7fb fc12 	bl	8000434 <__aeabi_i2d>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c18:	f7fb fabe 	bl	8000198 <__aeabi_dsub>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	3430      	adds	r4, #48	; 0x30
 8004c22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004c2a:	f807 4b01 	strb.w	r4, [r7], #1
 8004c2e:	f7fb fedd 	bl	80009ec <__aeabi_dcmplt>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	d174      	bne.n	8004d20 <_dtoa_r+0x648>
 8004c36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	4911      	ldr	r1, [pc, #68]	; (8004c84 <_dtoa_r+0x5ac>)
 8004c3e:	f7fb faab 	bl	8000198 <__aeabi_dsub>
 8004c42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004c46:	f7fb fed1 	bl	80009ec <__aeabi_dcmplt>
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	f040 80b7 	bne.w	8004dbe <_dtoa_r+0x6e6>
 8004c50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c52:	429f      	cmp	r7, r3
 8004c54:	f43f af7a 	beq.w	8004b4c <_dtoa_r+0x474>
 8004c58:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <_dtoa_r+0x5b0>)
 8004c60:	f7fb fc52 	bl	8000508 <__aeabi_dmul>
 8004c64:	2200      	movs	r2, #0
 8004c66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c6e:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <_dtoa_r+0x5b0>)
 8004c70:	f7fb fc4a 	bl	8000508 <__aeabi_dmul>
 8004c74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c78:	e7c3      	b.n	8004c02 <_dtoa_r+0x52a>
 8004c7a:	bf00      	nop
 8004c7c:	08006c20 	.word	0x08006c20
 8004c80:	08006bf8 	.word	0x08006bf8
 8004c84:	3ff00000 	.word	0x3ff00000
 8004c88:	40240000 	.word	0x40240000
 8004c8c:	401c0000 	.word	0x401c0000
 8004c90:	40140000 	.word	0x40140000
 8004c94:	3fe00000 	.word	0x3fe00000
 8004c98:	4630      	mov	r0, r6
 8004c9a:	4639      	mov	r1, r7
 8004c9c:	f7fb fc34 	bl	8000508 <__aeabi_dmul>
 8004ca0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ca2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ca6:	9c03      	ldr	r4, [sp, #12]
 8004ca8:	9314      	str	r3, [sp, #80]	; 0x50
 8004caa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cae:	f7fb fedb 	bl	8000a68 <__aeabi_d2iz>
 8004cb2:	9015      	str	r0, [sp, #84]	; 0x54
 8004cb4:	f7fb fbbe 	bl	8000434 <__aeabi_i2d>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cc0:	f7fb fa6a 	bl	8000198 <__aeabi_dsub>
 8004cc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004cc6:	4606      	mov	r6, r0
 8004cc8:	3330      	adds	r3, #48	; 0x30
 8004cca:	f804 3b01 	strb.w	r3, [r4], #1
 8004cce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004cd0:	460f      	mov	r7, r1
 8004cd2:	429c      	cmp	r4, r3
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	d124      	bne.n	8004d24 <_dtoa_r+0x64c>
 8004cda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004cde:	4bb0      	ldr	r3, [pc, #704]	; (8004fa0 <_dtoa_r+0x8c8>)
 8004ce0:	f7fb fa5c 	bl	800019c <__adddf3>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4630      	mov	r0, r6
 8004cea:	4639      	mov	r1, r7
 8004cec:	f7fb fe9c 	bl	8000a28 <__aeabi_dcmpgt>
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	d163      	bne.n	8004dbc <_dtoa_r+0x6e4>
 8004cf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	49a9      	ldr	r1, [pc, #676]	; (8004fa0 <_dtoa_r+0x8c8>)
 8004cfc:	f7fb fa4c 	bl	8000198 <__aeabi_dsub>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4630      	mov	r0, r6
 8004d06:	4639      	mov	r1, r7
 8004d08:	f7fb fe70 	bl	80009ec <__aeabi_dcmplt>
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	f43f af1d 	beq.w	8004b4c <_dtoa_r+0x474>
 8004d12:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004d14:	1e7b      	subs	r3, r7, #1
 8004d16:	9314      	str	r3, [sp, #80]	; 0x50
 8004d18:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004d1c:	2b30      	cmp	r3, #48	; 0x30
 8004d1e:	d0f8      	beq.n	8004d12 <_dtoa_r+0x63a>
 8004d20:	46c2      	mov	sl, r8
 8004d22:	e03b      	b.n	8004d9c <_dtoa_r+0x6c4>
 8004d24:	4b9f      	ldr	r3, [pc, #636]	; (8004fa4 <_dtoa_r+0x8cc>)
 8004d26:	f7fb fbef 	bl	8000508 <__aeabi_dmul>
 8004d2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d2e:	e7bc      	b.n	8004caa <_dtoa_r+0x5d2>
 8004d30:	9f03      	ldr	r7, [sp, #12]
 8004d32:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004d36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	4649      	mov	r1, r9
 8004d3e:	f7fb fd0d 	bl	800075c <__aeabi_ddiv>
 8004d42:	f7fb fe91 	bl	8000a68 <__aeabi_d2iz>
 8004d46:	4604      	mov	r4, r0
 8004d48:	f7fb fb74 	bl	8000434 <__aeabi_i2d>
 8004d4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d50:	f7fb fbda 	bl	8000508 <__aeabi_dmul>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4640      	mov	r0, r8
 8004d5a:	4649      	mov	r1, r9
 8004d5c:	f7fb fa1c 	bl	8000198 <__aeabi_dsub>
 8004d60:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004d64:	f807 6b01 	strb.w	r6, [r7], #1
 8004d68:	9e03      	ldr	r6, [sp, #12]
 8004d6a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004d6e:	1bbe      	subs	r6, r7, r6
 8004d70:	45b4      	cmp	ip, r6
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	d136      	bne.n	8004de6 <_dtoa_r+0x70e>
 8004d78:	f7fb fa10 	bl	800019c <__adddf3>
 8004d7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d80:	4680      	mov	r8, r0
 8004d82:	4689      	mov	r9, r1
 8004d84:	f7fb fe50 	bl	8000a28 <__aeabi_dcmpgt>
 8004d88:	bb58      	cbnz	r0, 8004de2 <_dtoa_r+0x70a>
 8004d8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d8e:	4640      	mov	r0, r8
 8004d90:	4649      	mov	r1, r9
 8004d92:	f7fb fe21 	bl	80009d8 <__aeabi_dcmpeq>
 8004d96:	b108      	cbz	r0, 8004d9c <_dtoa_r+0x6c4>
 8004d98:	07e1      	lsls	r1, r4, #31
 8004d9a:	d422      	bmi.n	8004de2 <_dtoa_r+0x70a>
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	4659      	mov	r1, fp
 8004da0:	f000 faf0 	bl	8005384 <_Bfree>
 8004da4:	2300      	movs	r3, #0
 8004da6:	703b      	strb	r3, [r7, #0]
 8004da8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004daa:	f10a 0001 	add.w	r0, sl, #1
 8004dae:	6018      	str	r0, [r3, #0]
 8004db0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f43f acde 	beq.w	8004774 <_dtoa_r+0x9c>
 8004db8:	601f      	str	r7, [r3, #0]
 8004dba:	e4db      	b.n	8004774 <_dtoa_r+0x9c>
 8004dbc:	4627      	mov	r7, r4
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	461f      	mov	r7, r3
 8004dc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004dc6:	2a39      	cmp	r2, #57	; 0x39
 8004dc8:	d107      	bne.n	8004dda <_dtoa_r+0x702>
 8004dca:	9a03      	ldr	r2, [sp, #12]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d1f7      	bne.n	8004dc0 <_dtoa_r+0x6e8>
 8004dd0:	2230      	movs	r2, #48	; 0x30
 8004dd2:	9903      	ldr	r1, [sp, #12]
 8004dd4:	f108 0801 	add.w	r8, r8, #1
 8004dd8:	700a      	strb	r2, [r1, #0]
 8004dda:	781a      	ldrb	r2, [r3, #0]
 8004ddc:	3201      	adds	r2, #1
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	e79e      	b.n	8004d20 <_dtoa_r+0x648>
 8004de2:	46d0      	mov	r8, sl
 8004de4:	e7eb      	b.n	8004dbe <_dtoa_r+0x6e6>
 8004de6:	2200      	movs	r2, #0
 8004de8:	4b6e      	ldr	r3, [pc, #440]	; (8004fa4 <_dtoa_r+0x8cc>)
 8004dea:	f7fb fb8d 	bl	8000508 <__aeabi_dmul>
 8004dee:	2200      	movs	r2, #0
 8004df0:	2300      	movs	r3, #0
 8004df2:	4680      	mov	r8, r0
 8004df4:	4689      	mov	r9, r1
 8004df6:	f7fb fdef 	bl	80009d8 <__aeabi_dcmpeq>
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	d09b      	beq.n	8004d36 <_dtoa_r+0x65e>
 8004dfe:	e7cd      	b.n	8004d9c <_dtoa_r+0x6c4>
 8004e00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e02:	2a00      	cmp	r2, #0
 8004e04:	f000 80d0 	beq.w	8004fa8 <_dtoa_r+0x8d0>
 8004e08:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004e0a:	2a01      	cmp	r2, #1
 8004e0c:	f300 80ae 	bgt.w	8004f6c <_dtoa_r+0x894>
 8004e10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004e12:	2a00      	cmp	r2, #0
 8004e14:	f000 80a6 	beq.w	8004f64 <_dtoa_r+0x88c>
 8004e18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004e1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004e1e:	9f06      	ldr	r7, [sp, #24]
 8004e20:	9a06      	ldr	r2, [sp, #24]
 8004e22:	2101      	movs	r1, #1
 8004e24:	441a      	add	r2, r3
 8004e26:	9206      	str	r2, [sp, #24]
 8004e28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	441a      	add	r2, r3
 8004e2e:	9209      	str	r2, [sp, #36]	; 0x24
 8004e30:	f000 fb5e 	bl	80054f0 <__i2b>
 8004e34:	4606      	mov	r6, r0
 8004e36:	2f00      	cmp	r7, #0
 8004e38:	dd0c      	ble.n	8004e54 <_dtoa_r+0x77c>
 8004e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	dd09      	ble.n	8004e54 <_dtoa_r+0x77c>
 8004e40:	42bb      	cmp	r3, r7
 8004e42:	bfa8      	it	ge
 8004e44:	463b      	movge	r3, r7
 8004e46:	9a06      	ldr	r2, [sp, #24]
 8004e48:	1aff      	subs	r7, r7, r3
 8004e4a:	1ad2      	subs	r2, r2, r3
 8004e4c:	9206      	str	r2, [sp, #24]
 8004e4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	9309      	str	r3, [sp, #36]	; 0x24
 8004e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e56:	b1f3      	cbz	r3, 8004e96 <_dtoa_r+0x7be>
 8004e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 80a8 	beq.w	8004fb0 <_dtoa_r+0x8d8>
 8004e60:	2c00      	cmp	r4, #0
 8004e62:	dd10      	ble.n	8004e86 <_dtoa_r+0x7ae>
 8004e64:	4631      	mov	r1, r6
 8004e66:	4622      	mov	r2, r4
 8004e68:	4628      	mov	r0, r5
 8004e6a:	f000 fbff 	bl	800566c <__pow5mult>
 8004e6e:	465a      	mov	r2, fp
 8004e70:	4601      	mov	r1, r0
 8004e72:	4606      	mov	r6, r0
 8004e74:	4628      	mov	r0, r5
 8004e76:	f000 fb51 	bl	800551c <__multiply>
 8004e7a:	4680      	mov	r8, r0
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f000 fa80 	bl	8005384 <_Bfree>
 8004e84:	46c3      	mov	fp, r8
 8004e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e88:	1b1a      	subs	r2, r3, r4
 8004e8a:	d004      	beq.n	8004e96 <_dtoa_r+0x7be>
 8004e8c:	4659      	mov	r1, fp
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 fbec 	bl	800566c <__pow5mult>
 8004e94:	4683      	mov	fp, r0
 8004e96:	2101      	movs	r1, #1
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f000 fb29 	bl	80054f0 <__i2b>
 8004e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f340 8086 	ble.w	8004fb4 <_dtoa_r+0x8dc>
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	4601      	mov	r1, r0
 8004eac:	4628      	mov	r0, r5
 8004eae:	f000 fbdd 	bl	800566c <__pow5mult>
 8004eb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	dd7f      	ble.n	8004fba <_dtoa_r+0x8e2>
 8004eba:	f04f 0800 	mov.w	r8, #0
 8004ebe:	6923      	ldr	r3, [r4, #16]
 8004ec0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004ec4:	6918      	ldr	r0, [r3, #16]
 8004ec6:	f000 fac5 	bl	8005454 <__hi0bits>
 8004eca:	f1c0 0020 	rsb	r0, r0, #32
 8004ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ed0:	4418      	add	r0, r3
 8004ed2:	f010 001f 	ands.w	r0, r0, #31
 8004ed6:	f000 8092 	beq.w	8004ffe <_dtoa_r+0x926>
 8004eda:	f1c0 0320 	rsb	r3, r0, #32
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	f340 808a 	ble.w	8004ff8 <_dtoa_r+0x920>
 8004ee4:	f1c0 001c 	rsb	r0, r0, #28
 8004ee8:	9b06      	ldr	r3, [sp, #24]
 8004eea:	4407      	add	r7, r0
 8004eec:	4403      	add	r3, r0
 8004eee:	9306      	str	r3, [sp, #24]
 8004ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef2:	4403      	add	r3, r0
 8004ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef6:	9b06      	ldr	r3, [sp, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	dd05      	ble.n	8004f08 <_dtoa_r+0x830>
 8004efc:	4659      	mov	r1, fp
 8004efe:	461a      	mov	r2, r3
 8004f00:	4628      	mov	r0, r5
 8004f02:	f000 fc0d 	bl	8005720 <__lshift>
 8004f06:	4683      	mov	fp, r0
 8004f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	dd05      	ble.n	8004f1a <_dtoa_r+0x842>
 8004f0e:	4621      	mov	r1, r4
 8004f10:	461a      	mov	r2, r3
 8004f12:	4628      	mov	r0, r5
 8004f14:	f000 fc04 	bl	8005720 <__lshift>
 8004f18:	4604      	mov	r4, r0
 8004f1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d070      	beq.n	8005002 <_dtoa_r+0x92a>
 8004f20:	4621      	mov	r1, r4
 8004f22:	4658      	mov	r0, fp
 8004f24:	f000 fc6c 	bl	8005800 <__mcmp>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	da6a      	bge.n	8005002 <_dtoa_r+0x92a>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	4659      	mov	r1, fp
 8004f30:	220a      	movs	r2, #10
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 fa48 	bl	80053c8 <__multadd>
 8004f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f3a:	4683      	mov	fp, r0
 8004f3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 8194 	beq.w	800526e <_dtoa_r+0xb96>
 8004f46:	4631      	mov	r1, r6
 8004f48:	2300      	movs	r3, #0
 8004f4a:	220a      	movs	r2, #10
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	f000 fa3b 	bl	80053c8 <__multadd>
 8004f52:	f1b9 0f00 	cmp.w	r9, #0
 8004f56:	4606      	mov	r6, r0
 8004f58:	f300 8093 	bgt.w	8005082 <_dtoa_r+0x9aa>
 8004f5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	dc57      	bgt.n	8005012 <_dtoa_r+0x93a>
 8004f62:	e08e      	b.n	8005082 <_dtoa_r+0x9aa>
 8004f64:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004f66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004f6a:	e757      	b.n	8004e1c <_dtoa_r+0x744>
 8004f6c:	9b08      	ldr	r3, [sp, #32]
 8004f6e:	1e5c      	subs	r4, r3, #1
 8004f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f72:	42a3      	cmp	r3, r4
 8004f74:	bfb7      	itett	lt
 8004f76:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004f78:	1b1c      	subge	r4, r3, r4
 8004f7a:	1ae2      	sublt	r2, r4, r3
 8004f7c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004f7e:	bfbe      	ittt	lt
 8004f80:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004f82:	189b      	addlt	r3, r3, r2
 8004f84:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004f86:	9b08      	ldr	r3, [sp, #32]
 8004f88:	bfb8      	it	lt
 8004f8a:	2400      	movlt	r4, #0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bfbb      	ittet	lt
 8004f90:	9b06      	ldrlt	r3, [sp, #24]
 8004f92:	9a08      	ldrlt	r2, [sp, #32]
 8004f94:	9f06      	ldrge	r7, [sp, #24]
 8004f96:	1a9f      	sublt	r7, r3, r2
 8004f98:	bfac      	ite	ge
 8004f9a:	9b08      	ldrge	r3, [sp, #32]
 8004f9c:	2300      	movlt	r3, #0
 8004f9e:	e73f      	b.n	8004e20 <_dtoa_r+0x748>
 8004fa0:	3fe00000 	.word	0x3fe00000
 8004fa4:	40240000 	.word	0x40240000
 8004fa8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004faa:	9f06      	ldr	r7, [sp, #24]
 8004fac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004fae:	e742      	b.n	8004e36 <_dtoa_r+0x75e>
 8004fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fb2:	e76b      	b.n	8004e8c <_dtoa_r+0x7b4>
 8004fb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	dc19      	bgt.n	8004fee <_dtoa_r+0x916>
 8004fba:	9b04      	ldr	r3, [sp, #16]
 8004fbc:	b9bb      	cbnz	r3, 8004fee <_dtoa_r+0x916>
 8004fbe:	9b05      	ldr	r3, [sp, #20]
 8004fc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fc4:	b99b      	cbnz	r3, 8004fee <_dtoa_r+0x916>
 8004fc6:	9b05      	ldr	r3, [sp, #20]
 8004fc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fcc:	0d1b      	lsrs	r3, r3, #20
 8004fce:	051b      	lsls	r3, r3, #20
 8004fd0:	b183      	cbz	r3, 8004ff4 <_dtoa_r+0x91c>
 8004fd2:	f04f 0801 	mov.w	r8, #1
 8004fd6:	9b06      	ldr	r3, [sp, #24]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	9306      	str	r3, [sp, #24]
 8004fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fde:	3301      	adds	r3, #1
 8004fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8004fe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f47f af6a 	bne.w	8004ebe <_dtoa_r+0x7e6>
 8004fea:	2001      	movs	r0, #1
 8004fec:	e76f      	b.n	8004ece <_dtoa_r+0x7f6>
 8004fee:	f04f 0800 	mov.w	r8, #0
 8004ff2:	e7f6      	b.n	8004fe2 <_dtoa_r+0x90a>
 8004ff4:	4698      	mov	r8, r3
 8004ff6:	e7f4      	b.n	8004fe2 <_dtoa_r+0x90a>
 8004ff8:	f43f af7d 	beq.w	8004ef6 <_dtoa_r+0x81e>
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	301c      	adds	r0, #28
 8005000:	e772      	b.n	8004ee8 <_dtoa_r+0x810>
 8005002:	9b08      	ldr	r3, [sp, #32]
 8005004:	2b00      	cmp	r3, #0
 8005006:	dc36      	bgt.n	8005076 <_dtoa_r+0x99e>
 8005008:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800500a:	2b02      	cmp	r3, #2
 800500c:	dd33      	ble.n	8005076 <_dtoa_r+0x99e>
 800500e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005012:	f1b9 0f00 	cmp.w	r9, #0
 8005016:	d10d      	bne.n	8005034 <_dtoa_r+0x95c>
 8005018:	4621      	mov	r1, r4
 800501a:	464b      	mov	r3, r9
 800501c:	2205      	movs	r2, #5
 800501e:	4628      	mov	r0, r5
 8005020:	f000 f9d2 	bl	80053c8 <__multadd>
 8005024:	4601      	mov	r1, r0
 8005026:	4604      	mov	r4, r0
 8005028:	4658      	mov	r0, fp
 800502a:	f000 fbe9 	bl	8005800 <__mcmp>
 800502e:	2800      	cmp	r0, #0
 8005030:	f73f adb8 	bgt.w	8004ba4 <_dtoa_r+0x4cc>
 8005034:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005036:	9f03      	ldr	r7, [sp, #12]
 8005038:	ea6f 0a03 	mvn.w	sl, r3
 800503c:	f04f 0800 	mov.w	r8, #0
 8005040:	4621      	mov	r1, r4
 8005042:	4628      	mov	r0, r5
 8005044:	f000 f99e 	bl	8005384 <_Bfree>
 8005048:	2e00      	cmp	r6, #0
 800504a:	f43f aea7 	beq.w	8004d9c <_dtoa_r+0x6c4>
 800504e:	f1b8 0f00 	cmp.w	r8, #0
 8005052:	d005      	beq.n	8005060 <_dtoa_r+0x988>
 8005054:	45b0      	cmp	r8, r6
 8005056:	d003      	beq.n	8005060 <_dtoa_r+0x988>
 8005058:	4641      	mov	r1, r8
 800505a:	4628      	mov	r0, r5
 800505c:	f000 f992 	bl	8005384 <_Bfree>
 8005060:	4631      	mov	r1, r6
 8005062:	4628      	mov	r0, r5
 8005064:	f000 f98e 	bl	8005384 <_Bfree>
 8005068:	e698      	b.n	8004d9c <_dtoa_r+0x6c4>
 800506a:	2400      	movs	r4, #0
 800506c:	4626      	mov	r6, r4
 800506e:	e7e1      	b.n	8005034 <_dtoa_r+0x95c>
 8005070:	46c2      	mov	sl, r8
 8005072:	4626      	mov	r6, r4
 8005074:	e596      	b.n	8004ba4 <_dtoa_r+0x4cc>
 8005076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005078:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80fd 	beq.w	800527c <_dtoa_r+0xba4>
 8005082:	2f00      	cmp	r7, #0
 8005084:	dd05      	ble.n	8005092 <_dtoa_r+0x9ba>
 8005086:	4631      	mov	r1, r6
 8005088:	463a      	mov	r2, r7
 800508a:	4628      	mov	r0, r5
 800508c:	f000 fb48 	bl	8005720 <__lshift>
 8005090:	4606      	mov	r6, r0
 8005092:	f1b8 0f00 	cmp.w	r8, #0
 8005096:	d05c      	beq.n	8005152 <_dtoa_r+0xa7a>
 8005098:	4628      	mov	r0, r5
 800509a:	6871      	ldr	r1, [r6, #4]
 800509c:	f000 f932 	bl	8005304 <_Balloc>
 80050a0:	4607      	mov	r7, r0
 80050a2:	b928      	cbnz	r0, 80050b0 <_dtoa_r+0x9d8>
 80050a4:	4602      	mov	r2, r0
 80050a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80050aa:	4b7f      	ldr	r3, [pc, #508]	; (80052a8 <_dtoa_r+0xbd0>)
 80050ac:	f7ff bb28 	b.w	8004700 <_dtoa_r+0x28>
 80050b0:	6932      	ldr	r2, [r6, #16]
 80050b2:	f106 010c 	add.w	r1, r6, #12
 80050b6:	3202      	adds	r2, #2
 80050b8:	0092      	lsls	r2, r2, #2
 80050ba:	300c      	adds	r0, #12
 80050bc:	f000 f914 	bl	80052e8 <memcpy>
 80050c0:	2201      	movs	r2, #1
 80050c2:	4639      	mov	r1, r7
 80050c4:	4628      	mov	r0, r5
 80050c6:	f000 fb2b 	bl	8005720 <__lshift>
 80050ca:	46b0      	mov	r8, r6
 80050cc:	4606      	mov	r6, r0
 80050ce:	9b03      	ldr	r3, [sp, #12]
 80050d0:	3301      	adds	r3, #1
 80050d2:	9308      	str	r3, [sp, #32]
 80050d4:	9b03      	ldr	r3, [sp, #12]
 80050d6:	444b      	add	r3, r9
 80050d8:	930a      	str	r3, [sp, #40]	; 0x28
 80050da:	9b04      	ldr	r3, [sp, #16]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	9309      	str	r3, [sp, #36]	; 0x24
 80050e2:	9b08      	ldr	r3, [sp, #32]
 80050e4:	4621      	mov	r1, r4
 80050e6:	3b01      	subs	r3, #1
 80050e8:	4658      	mov	r0, fp
 80050ea:	9304      	str	r3, [sp, #16]
 80050ec:	f7ff fa66 	bl	80045bc <quorem>
 80050f0:	4603      	mov	r3, r0
 80050f2:	4641      	mov	r1, r8
 80050f4:	3330      	adds	r3, #48	; 0x30
 80050f6:	9006      	str	r0, [sp, #24]
 80050f8:	4658      	mov	r0, fp
 80050fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80050fc:	f000 fb80 	bl	8005800 <__mcmp>
 8005100:	4632      	mov	r2, r6
 8005102:	4681      	mov	r9, r0
 8005104:	4621      	mov	r1, r4
 8005106:	4628      	mov	r0, r5
 8005108:	f000 fb96 	bl	8005838 <__mdiff>
 800510c:	68c2      	ldr	r2, [r0, #12]
 800510e:	4607      	mov	r7, r0
 8005110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005112:	bb02      	cbnz	r2, 8005156 <_dtoa_r+0xa7e>
 8005114:	4601      	mov	r1, r0
 8005116:	4658      	mov	r0, fp
 8005118:	f000 fb72 	bl	8005800 <__mcmp>
 800511c:	4602      	mov	r2, r0
 800511e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005120:	4639      	mov	r1, r7
 8005122:	4628      	mov	r0, r5
 8005124:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005128:	f000 f92c 	bl	8005384 <_Bfree>
 800512c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800512e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005130:	9f08      	ldr	r7, [sp, #32]
 8005132:	ea43 0102 	orr.w	r1, r3, r2
 8005136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005138:	430b      	orrs	r3, r1
 800513a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800513c:	d10d      	bne.n	800515a <_dtoa_r+0xa82>
 800513e:	2b39      	cmp	r3, #57	; 0x39
 8005140:	d029      	beq.n	8005196 <_dtoa_r+0xabe>
 8005142:	f1b9 0f00 	cmp.w	r9, #0
 8005146:	dd01      	ble.n	800514c <_dtoa_r+0xa74>
 8005148:	9b06      	ldr	r3, [sp, #24]
 800514a:	3331      	adds	r3, #49	; 0x31
 800514c:	9a04      	ldr	r2, [sp, #16]
 800514e:	7013      	strb	r3, [r2, #0]
 8005150:	e776      	b.n	8005040 <_dtoa_r+0x968>
 8005152:	4630      	mov	r0, r6
 8005154:	e7b9      	b.n	80050ca <_dtoa_r+0x9f2>
 8005156:	2201      	movs	r2, #1
 8005158:	e7e2      	b.n	8005120 <_dtoa_r+0xa48>
 800515a:	f1b9 0f00 	cmp.w	r9, #0
 800515e:	db06      	blt.n	800516e <_dtoa_r+0xa96>
 8005160:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005162:	ea41 0909 	orr.w	r9, r1, r9
 8005166:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005168:	ea59 0101 	orrs.w	r1, r9, r1
 800516c:	d120      	bne.n	80051b0 <_dtoa_r+0xad8>
 800516e:	2a00      	cmp	r2, #0
 8005170:	ddec      	ble.n	800514c <_dtoa_r+0xa74>
 8005172:	4659      	mov	r1, fp
 8005174:	2201      	movs	r2, #1
 8005176:	4628      	mov	r0, r5
 8005178:	9308      	str	r3, [sp, #32]
 800517a:	f000 fad1 	bl	8005720 <__lshift>
 800517e:	4621      	mov	r1, r4
 8005180:	4683      	mov	fp, r0
 8005182:	f000 fb3d 	bl	8005800 <__mcmp>
 8005186:	2800      	cmp	r0, #0
 8005188:	9b08      	ldr	r3, [sp, #32]
 800518a:	dc02      	bgt.n	8005192 <_dtoa_r+0xaba>
 800518c:	d1de      	bne.n	800514c <_dtoa_r+0xa74>
 800518e:	07da      	lsls	r2, r3, #31
 8005190:	d5dc      	bpl.n	800514c <_dtoa_r+0xa74>
 8005192:	2b39      	cmp	r3, #57	; 0x39
 8005194:	d1d8      	bne.n	8005148 <_dtoa_r+0xa70>
 8005196:	2339      	movs	r3, #57	; 0x39
 8005198:	9a04      	ldr	r2, [sp, #16]
 800519a:	7013      	strb	r3, [r2, #0]
 800519c:	463b      	mov	r3, r7
 800519e:	461f      	mov	r7, r3
 80051a0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80051a4:	3b01      	subs	r3, #1
 80051a6:	2a39      	cmp	r2, #57	; 0x39
 80051a8:	d050      	beq.n	800524c <_dtoa_r+0xb74>
 80051aa:	3201      	adds	r2, #1
 80051ac:	701a      	strb	r2, [r3, #0]
 80051ae:	e747      	b.n	8005040 <_dtoa_r+0x968>
 80051b0:	2a00      	cmp	r2, #0
 80051b2:	dd03      	ble.n	80051bc <_dtoa_r+0xae4>
 80051b4:	2b39      	cmp	r3, #57	; 0x39
 80051b6:	d0ee      	beq.n	8005196 <_dtoa_r+0xabe>
 80051b8:	3301      	adds	r3, #1
 80051ba:	e7c7      	b.n	800514c <_dtoa_r+0xa74>
 80051bc:	9a08      	ldr	r2, [sp, #32]
 80051be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80051c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80051c4:	428a      	cmp	r2, r1
 80051c6:	d02a      	beq.n	800521e <_dtoa_r+0xb46>
 80051c8:	4659      	mov	r1, fp
 80051ca:	2300      	movs	r3, #0
 80051cc:	220a      	movs	r2, #10
 80051ce:	4628      	mov	r0, r5
 80051d0:	f000 f8fa 	bl	80053c8 <__multadd>
 80051d4:	45b0      	cmp	r8, r6
 80051d6:	4683      	mov	fp, r0
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	f04f 020a 	mov.w	r2, #10
 80051e0:	4641      	mov	r1, r8
 80051e2:	4628      	mov	r0, r5
 80051e4:	d107      	bne.n	80051f6 <_dtoa_r+0xb1e>
 80051e6:	f000 f8ef 	bl	80053c8 <__multadd>
 80051ea:	4680      	mov	r8, r0
 80051ec:	4606      	mov	r6, r0
 80051ee:	9b08      	ldr	r3, [sp, #32]
 80051f0:	3301      	adds	r3, #1
 80051f2:	9308      	str	r3, [sp, #32]
 80051f4:	e775      	b.n	80050e2 <_dtoa_r+0xa0a>
 80051f6:	f000 f8e7 	bl	80053c8 <__multadd>
 80051fa:	4631      	mov	r1, r6
 80051fc:	4680      	mov	r8, r0
 80051fe:	2300      	movs	r3, #0
 8005200:	220a      	movs	r2, #10
 8005202:	4628      	mov	r0, r5
 8005204:	f000 f8e0 	bl	80053c8 <__multadd>
 8005208:	4606      	mov	r6, r0
 800520a:	e7f0      	b.n	80051ee <_dtoa_r+0xb16>
 800520c:	f1b9 0f00 	cmp.w	r9, #0
 8005210:	bfcc      	ite	gt
 8005212:	464f      	movgt	r7, r9
 8005214:	2701      	movle	r7, #1
 8005216:	f04f 0800 	mov.w	r8, #0
 800521a:	9a03      	ldr	r2, [sp, #12]
 800521c:	4417      	add	r7, r2
 800521e:	4659      	mov	r1, fp
 8005220:	2201      	movs	r2, #1
 8005222:	4628      	mov	r0, r5
 8005224:	9308      	str	r3, [sp, #32]
 8005226:	f000 fa7b 	bl	8005720 <__lshift>
 800522a:	4621      	mov	r1, r4
 800522c:	4683      	mov	fp, r0
 800522e:	f000 fae7 	bl	8005800 <__mcmp>
 8005232:	2800      	cmp	r0, #0
 8005234:	dcb2      	bgt.n	800519c <_dtoa_r+0xac4>
 8005236:	d102      	bne.n	800523e <_dtoa_r+0xb66>
 8005238:	9b08      	ldr	r3, [sp, #32]
 800523a:	07db      	lsls	r3, r3, #31
 800523c:	d4ae      	bmi.n	800519c <_dtoa_r+0xac4>
 800523e:	463b      	mov	r3, r7
 8005240:	461f      	mov	r7, r3
 8005242:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005246:	2a30      	cmp	r2, #48	; 0x30
 8005248:	d0fa      	beq.n	8005240 <_dtoa_r+0xb68>
 800524a:	e6f9      	b.n	8005040 <_dtoa_r+0x968>
 800524c:	9a03      	ldr	r2, [sp, #12]
 800524e:	429a      	cmp	r2, r3
 8005250:	d1a5      	bne.n	800519e <_dtoa_r+0xac6>
 8005252:	2331      	movs	r3, #49	; 0x31
 8005254:	f10a 0a01 	add.w	sl, sl, #1
 8005258:	e779      	b.n	800514e <_dtoa_r+0xa76>
 800525a:	4b14      	ldr	r3, [pc, #80]	; (80052ac <_dtoa_r+0xbd4>)
 800525c:	f7ff baa8 	b.w	80047b0 <_dtoa_r+0xd8>
 8005260:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005262:	2b00      	cmp	r3, #0
 8005264:	f47f aa81 	bne.w	800476a <_dtoa_r+0x92>
 8005268:	4b11      	ldr	r3, [pc, #68]	; (80052b0 <_dtoa_r+0xbd8>)
 800526a:	f7ff baa1 	b.w	80047b0 <_dtoa_r+0xd8>
 800526e:	f1b9 0f00 	cmp.w	r9, #0
 8005272:	dc03      	bgt.n	800527c <_dtoa_r+0xba4>
 8005274:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005276:	2b02      	cmp	r3, #2
 8005278:	f73f aecb 	bgt.w	8005012 <_dtoa_r+0x93a>
 800527c:	9f03      	ldr	r7, [sp, #12]
 800527e:	4621      	mov	r1, r4
 8005280:	4658      	mov	r0, fp
 8005282:	f7ff f99b 	bl	80045bc <quorem>
 8005286:	9a03      	ldr	r2, [sp, #12]
 8005288:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800528c:	f807 3b01 	strb.w	r3, [r7], #1
 8005290:	1aba      	subs	r2, r7, r2
 8005292:	4591      	cmp	r9, r2
 8005294:	ddba      	ble.n	800520c <_dtoa_r+0xb34>
 8005296:	4659      	mov	r1, fp
 8005298:	2300      	movs	r3, #0
 800529a:	220a      	movs	r2, #10
 800529c:	4628      	mov	r0, r5
 800529e:	f000 f893 	bl	80053c8 <__multadd>
 80052a2:	4683      	mov	fp, r0
 80052a4:	e7eb      	b.n	800527e <_dtoa_r+0xba6>
 80052a6:	bf00      	nop
 80052a8:	08006b8b 	.word	0x08006b8b
 80052ac:	08006ae8 	.word	0x08006ae8
 80052b0:	08006b0c 	.word	0x08006b0c

080052b4 <_localeconv_r>:
 80052b4:	4800      	ldr	r0, [pc, #0]	; (80052b8 <_localeconv_r+0x4>)
 80052b6:	4770      	bx	lr
 80052b8:	20000160 	.word	0x20000160

080052bc <malloc>:
 80052bc:	4b02      	ldr	r3, [pc, #8]	; (80052c8 <malloc+0xc>)
 80052be:	4601      	mov	r1, r0
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	f000 bc1d 	b.w	8005b00 <_malloc_r>
 80052c6:	bf00      	nop
 80052c8:	2000000c 	.word	0x2000000c

080052cc <memchr>:
 80052cc:	4603      	mov	r3, r0
 80052ce:	b510      	push	{r4, lr}
 80052d0:	b2c9      	uxtb	r1, r1
 80052d2:	4402      	add	r2, r0
 80052d4:	4293      	cmp	r3, r2
 80052d6:	4618      	mov	r0, r3
 80052d8:	d101      	bne.n	80052de <memchr+0x12>
 80052da:	2000      	movs	r0, #0
 80052dc:	e003      	b.n	80052e6 <memchr+0x1a>
 80052de:	7804      	ldrb	r4, [r0, #0]
 80052e0:	3301      	adds	r3, #1
 80052e2:	428c      	cmp	r4, r1
 80052e4:	d1f6      	bne.n	80052d4 <memchr+0x8>
 80052e6:	bd10      	pop	{r4, pc}

080052e8 <memcpy>:
 80052e8:	440a      	add	r2, r1
 80052ea:	4291      	cmp	r1, r2
 80052ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80052f0:	d100      	bne.n	80052f4 <memcpy+0xc>
 80052f2:	4770      	bx	lr
 80052f4:	b510      	push	{r4, lr}
 80052f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052fa:	4291      	cmp	r1, r2
 80052fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005300:	d1f9      	bne.n	80052f6 <memcpy+0xe>
 8005302:	bd10      	pop	{r4, pc}

08005304 <_Balloc>:
 8005304:	b570      	push	{r4, r5, r6, lr}
 8005306:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005308:	4604      	mov	r4, r0
 800530a:	460d      	mov	r5, r1
 800530c:	b976      	cbnz	r6, 800532c <_Balloc+0x28>
 800530e:	2010      	movs	r0, #16
 8005310:	f7ff ffd4 	bl	80052bc <malloc>
 8005314:	4602      	mov	r2, r0
 8005316:	6260      	str	r0, [r4, #36]	; 0x24
 8005318:	b920      	cbnz	r0, 8005324 <_Balloc+0x20>
 800531a:	2166      	movs	r1, #102	; 0x66
 800531c:	4b17      	ldr	r3, [pc, #92]	; (800537c <_Balloc+0x78>)
 800531e:	4818      	ldr	r0, [pc, #96]	; (8005380 <_Balloc+0x7c>)
 8005320:	f000 fdce 	bl	8005ec0 <__assert_func>
 8005324:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005328:	6006      	str	r6, [r0, #0]
 800532a:	60c6      	str	r6, [r0, #12]
 800532c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800532e:	68f3      	ldr	r3, [r6, #12]
 8005330:	b183      	cbz	r3, 8005354 <_Balloc+0x50>
 8005332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800533a:	b9b8      	cbnz	r0, 800536c <_Balloc+0x68>
 800533c:	2101      	movs	r1, #1
 800533e:	fa01 f605 	lsl.w	r6, r1, r5
 8005342:	1d72      	adds	r2, r6, #5
 8005344:	4620      	mov	r0, r4
 8005346:	0092      	lsls	r2, r2, #2
 8005348:	f000 fb5e 	bl	8005a08 <_calloc_r>
 800534c:	b160      	cbz	r0, 8005368 <_Balloc+0x64>
 800534e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005352:	e00e      	b.n	8005372 <_Balloc+0x6e>
 8005354:	2221      	movs	r2, #33	; 0x21
 8005356:	2104      	movs	r1, #4
 8005358:	4620      	mov	r0, r4
 800535a:	f000 fb55 	bl	8005a08 <_calloc_r>
 800535e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005360:	60f0      	str	r0, [r6, #12]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e4      	bne.n	8005332 <_Balloc+0x2e>
 8005368:	2000      	movs	r0, #0
 800536a:	bd70      	pop	{r4, r5, r6, pc}
 800536c:	6802      	ldr	r2, [r0, #0]
 800536e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005372:	2300      	movs	r3, #0
 8005374:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005378:	e7f7      	b.n	800536a <_Balloc+0x66>
 800537a:	bf00      	nop
 800537c:	08006b19 	.word	0x08006b19
 8005380:	08006b9c 	.word	0x08006b9c

08005384 <_Bfree>:
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005388:	4605      	mov	r5, r0
 800538a:	460c      	mov	r4, r1
 800538c:	b976      	cbnz	r6, 80053ac <_Bfree+0x28>
 800538e:	2010      	movs	r0, #16
 8005390:	f7ff ff94 	bl	80052bc <malloc>
 8005394:	4602      	mov	r2, r0
 8005396:	6268      	str	r0, [r5, #36]	; 0x24
 8005398:	b920      	cbnz	r0, 80053a4 <_Bfree+0x20>
 800539a:	218a      	movs	r1, #138	; 0x8a
 800539c:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <_Bfree+0x3c>)
 800539e:	4809      	ldr	r0, [pc, #36]	; (80053c4 <_Bfree+0x40>)
 80053a0:	f000 fd8e 	bl	8005ec0 <__assert_func>
 80053a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80053a8:	6006      	str	r6, [r0, #0]
 80053aa:	60c6      	str	r6, [r0, #12]
 80053ac:	b13c      	cbz	r4, 80053be <_Bfree+0x3a>
 80053ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80053b0:	6862      	ldr	r2, [r4, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053b8:	6021      	str	r1, [r4, #0]
 80053ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80053be:	bd70      	pop	{r4, r5, r6, pc}
 80053c0:	08006b19 	.word	0x08006b19
 80053c4:	08006b9c 	.word	0x08006b9c

080053c8 <__multadd>:
 80053c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053cc:	4607      	mov	r7, r0
 80053ce:	460c      	mov	r4, r1
 80053d0:	461e      	mov	r6, r3
 80053d2:	2000      	movs	r0, #0
 80053d4:	690d      	ldr	r5, [r1, #16]
 80053d6:	f101 0c14 	add.w	ip, r1, #20
 80053da:	f8dc 3000 	ldr.w	r3, [ip]
 80053de:	3001      	adds	r0, #1
 80053e0:	b299      	uxth	r1, r3
 80053e2:	fb02 6101 	mla	r1, r2, r1, r6
 80053e6:	0c1e      	lsrs	r6, r3, #16
 80053e8:	0c0b      	lsrs	r3, r1, #16
 80053ea:	fb02 3306 	mla	r3, r2, r6, r3
 80053ee:	b289      	uxth	r1, r1
 80053f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80053f4:	4285      	cmp	r5, r0
 80053f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80053fa:	f84c 1b04 	str.w	r1, [ip], #4
 80053fe:	dcec      	bgt.n	80053da <__multadd+0x12>
 8005400:	b30e      	cbz	r6, 8005446 <__multadd+0x7e>
 8005402:	68a3      	ldr	r3, [r4, #8]
 8005404:	42ab      	cmp	r3, r5
 8005406:	dc19      	bgt.n	800543c <__multadd+0x74>
 8005408:	6861      	ldr	r1, [r4, #4]
 800540a:	4638      	mov	r0, r7
 800540c:	3101      	adds	r1, #1
 800540e:	f7ff ff79 	bl	8005304 <_Balloc>
 8005412:	4680      	mov	r8, r0
 8005414:	b928      	cbnz	r0, 8005422 <__multadd+0x5a>
 8005416:	4602      	mov	r2, r0
 8005418:	21b5      	movs	r1, #181	; 0xb5
 800541a:	4b0c      	ldr	r3, [pc, #48]	; (800544c <__multadd+0x84>)
 800541c:	480c      	ldr	r0, [pc, #48]	; (8005450 <__multadd+0x88>)
 800541e:	f000 fd4f 	bl	8005ec0 <__assert_func>
 8005422:	6922      	ldr	r2, [r4, #16]
 8005424:	f104 010c 	add.w	r1, r4, #12
 8005428:	3202      	adds	r2, #2
 800542a:	0092      	lsls	r2, r2, #2
 800542c:	300c      	adds	r0, #12
 800542e:	f7ff ff5b 	bl	80052e8 <memcpy>
 8005432:	4621      	mov	r1, r4
 8005434:	4638      	mov	r0, r7
 8005436:	f7ff ffa5 	bl	8005384 <_Bfree>
 800543a:	4644      	mov	r4, r8
 800543c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005440:	3501      	adds	r5, #1
 8005442:	615e      	str	r6, [r3, #20]
 8005444:	6125      	str	r5, [r4, #16]
 8005446:	4620      	mov	r0, r4
 8005448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800544c:	08006b8b 	.word	0x08006b8b
 8005450:	08006b9c 	.word	0x08006b9c

08005454 <__hi0bits>:
 8005454:	0c02      	lsrs	r2, r0, #16
 8005456:	0412      	lsls	r2, r2, #16
 8005458:	4603      	mov	r3, r0
 800545a:	b9ca      	cbnz	r2, 8005490 <__hi0bits+0x3c>
 800545c:	0403      	lsls	r3, r0, #16
 800545e:	2010      	movs	r0, #16
 8005460:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005464:	bf04      	itt	eq
 8005466:	021b      	lsleq	r3, r3, #8
 8005468:	3008      	addeq	r0, #8
 800546a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800546e:	bf04      	itt	eq
 8005470:	011b      	lsleq	r3, r3, #4
 8005472:	3004      	addeq	r0, #4
 8005474:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005478:	bf04      	itt	eq
 800547a:	009b      	lsleq	r3, r3, #2
 800547c:	3002      	addeq	r0, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	db05      	blt.n	800548e <__hi0bits+0x3a>
 8005482:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005486:	f100 0001 	add.w	r0, r0, #1
 800548a:	bf08      	it	eq
 800548c:	2020      	moveq	r0, #32
 800548e:	4770      	bx	lr
 8005490:	2000      	movs	r0, #0
 8005492:	e7e5      	b.n	8005460 <__hi0bits+0xc>

08005494 <__lo0bits>:
 8005494:	6803      	ldr	r3, [r0, #0]
 8005496:	4602      	mov	r2, r0
 8005498:	f013 0007 	ands.w	r0, r3, #7
 800549c:	d00b      	beq.n	80054b6 <__lo0bits+0x22>
 800549e:	07d9      	lsls	r1, r3, #31
 80054a0:	d421      	bmi.n	80054e6 <__lo0bits+0x52>
 80054a2:	0798      	lsls	r0, r3, #30
 80054a4:	bf49      	itett	mi
 80054a6:	085b      	lsrmi	r3, r3, #1
 80054a8:	089b      	lsrpl	r3, r3, #2
 80054aa:	2001      	movmi	r0, #1
 80054ac:	6013      	strmi	r3, [r2, #0]
 80054ae:	bf5c      	itt	pl
 80054b0:	2002      	movpl	r0, #2
 80054b2:	6013      	strpl	r3, [r2, #0]
 80054b4:	4770      	bx	lr
 80054b6:	b299      	uxth	r1, r3
 80054b8:	b909      	cbnz	r1, 80054be <__lo0bits+0x2a>
 80054ba:	2010      	movs	r0, #16
 80054bc:	0c1b      	lsrs	r3, r3, #16
 80054be:	b2d9      	uxtb	r1, r3
 80054c0:	b909      	cbnz	r1, 80054c6 <__lo0bits+0x32>
 80054c2:	3008      	adds	r0, #8
 80054c4:	0a1b      	lsrs	r3, r3, #8
 80054c6:	0719      	lsls	r1, r3, #28
 80054c8:	bf04      	itt	eq
 80054ca:	091b      	lsreq	r3, r3, #4
 80054cc:	3004      	addeq	r0, #4
 80054ce:	0799      	lsls	r1, r3, #30
 80054d0:	bf04      	itt	eq
 80054d2:	089b      	lsreq	r3, r3, #2
 80054d4:	3002      	addeq	r0, #2
 80054d6:	07d9      	lsls	r1, r3, #31
 80054d8:	d403      	bmi.n	80054e2 <__lo0bits+0x4e>
 80054da:	085b      	lsrs	r3, r3, #1
 80054dc:	f100 0001 	add.w	r0, r0, #1
 80054e0:	d003      	beq.n	80054ea <__lo0bits+0x56>
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	4770      	bx	lr
 80054e6:	2000      	movs	r0, #0
 80054e8:	4770      	bx	lr
 80054ea:	2020      	movs	r0, #32
 80054ec:	4770      	bx	lr
	...

080054f0 <__i2b>:
 80054f0:	b510      	push	{r4, lr}
 80054f2:	460c      	mov	r4, r1
 80054f4:	2101      	movs	r1, #1
 80054f6:	f7ff ff05 	bl	8005304 <_Balloc>
 80054fa:	4602      	mov	r2, r0
 80054fc:	b928      	cbnz	r0, 800550a <__i2b+0x1a>
 80054fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005502:	4b04      	ldr	r3, [pc, #16]	; (8005514 <__i2b+0x24>)
 8005504:	4804      	ldr	r0, [pc, #16]	; (8005518 <__i2b+0x28>)
 8005506:	f000 fcdb 	bl	8005ec0 <__assert_func>
 800550a:	2301      	movs	r3, #1
 800550c:	6144      	str	r4, [r0, #20]
 800550e:	6103      	str	r3, [r0, #16]
 8005510:	bd10      	pop	{r4, pc}
 8005512:	bf00      	nop
 8005514:	08006b8b 	.word	0x08006b8b
 8005518:	08006b9c 	.word	0x08006b9c

0800551c <__multiply>:
 800551c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005520:	4691      	mov	r9, r2
 8005522:	690a      	ldr	r2, [r1, #16]
 8005524:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005528:	460c      	mov	r4, r1
 800552a:	429a      	cmp	r2, r3
 800552c:	bfbe      	ittt	lt
 800552e:	460b      	movlt	r3, r1
 8005530:	464c      	movlt	r4, r9
 8005532:	4699      	movlt	r9, r3
 8005534:	6927      	ldr	r7, [r4, #16]
 8005536:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800553a:	68a3      	ldr	r3, [r4, #8]
 800553c:	6861      	ldr	r1, [r4, #4]
 800553e:	eb07 060a 	add.w	r6, r7, sl
 8005542:	42b3      	cmp	r3, r6
 8005544:	b085      	sub	sp, #20
 8005546:	bfb8      	it	lt
 8005548:	3101      	addlt	r1, #1
 800554a:	f7ff fedb 	bl	8005304 <_Balloc>
 800554e:	b930      	cbnz	r0, 800555e <__multiply+0x42>
 8005550:	4602      	mov	r2, r0
 8005552:	f240 115d 	movw	r1, #349	; 0x15d
 8005556:	4b43      	ldr	r3, [pc, #268]	; (8005664 <__multiply+0x148>)
 8005558:	4843      	ldr	r0, [pc, #268]	; (8005668 <__multiply+0x14c>)
 800555a:	f000 fcb1 	bl	8005ec0 <__assert_func>
 800555e:	f100 0514 	add.w	r5, r0, #20
 8005562:	462b      	mov	r3, r5
 8005564:	2200      	movs	r2, #0
 8005566:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800556a:	4543      	cmp	r3, r8
 800556c:	d321      	bcc.n	80055b2 <__multiply+0x96>
 800556e:	f104 0314 	add.w	r3, r4, #20
 8005572:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005576:	f109 0314 	add.w	r3, r9, #20
 800557a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800557e:	9202      	str	r2, [sp, #8]
 8005580:	1b3a      	subs	r2, r7, r4
 8005582:	3a15      	subs	r2, #21
 8005584:	f022 0203 	bic.w	r2, r2, #3
 8005588:	3204      	adds	r2, #4
 800558a:	f104 0115 	add.w	r1, r4, #21
 800558e:	428f      	cmp	r7, r1
 8005590:	bf38      	it	cc
 8005592:	2204      	movcc	r2, #4
 8005594:	9201      	str	r2, [sp, #4]
 8005596:	9a02      	ldr	r2, [sp, #8]
 8005598:	9303      	str	r3, [sp, #12]
 800559a:	429a      	cmp	r2, r3
 800559c:	d80c      	bhi.n	80055b8 <__multiply+0x9c>
 800559e:	2e00      	cmp	r6, #0
 80055a0:	dd03      	ble.n	80055aa <__multiply+0x8e>
 80055a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d059      	beq.n	800565e <__multiply+0x142>
 80055aa:	6106      	str	r6, [r0, #16]
 80055ac:	b005      	add	sp, #20
 80055ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b2:	f843 2b04 	str.w	r2, [r3], #4
 80055b6:	e7d8      	b.n	800556a <__multiply+0x4e>
 80055b8:	f8b3 a000 	ldrh.w	sl, [r3]
 80055bc:	f1ba 0f00 	cmp.w	sl, #0
 80055c0:	d023      	beq.n	800560a <__multiply+0xee>
 80055c2:	46a9      	mov	r9, r5
 80055c4:	f04f 0c00 	mov.w	ip, #0
 80055c8:	f104 0e14 	add.w	lr, r4, #20
 80055cc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80055d0:	f8d9 1000 	ldr.w	r1, [r9]
 80055d4:	fa1f fb82 	uxth.w	fp, r2
 80055d8:	b289      	uxth	r1, r1
 80055da:	fb0a 110b 	mla	r1, sl, fp, r1
 80055de:	4461      	add	r1, ip
 80055e0:	f8d9 c000 	ldr.w	ip, [r9]
 80055e4:	0c12      	lsrs	r2, r2, #16
 80055e6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80055ea:	fb0a c202 	mla	r2, sl, r2, ip
 80055ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80055f2:	b289      	uxth	r1, r1
 80055f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80055f8:	4577      	cmp	r7, lr
 80055fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80055fe:	f849 1b04 	str.w	r1, [r9], #4
 8005602:	d8e3      	bhi.n	80055cc <__multiply+0xb0>
 8005604:	9a01      	ldr	r2, [sp, #4]
 8005606:	f845 c002 	str.w	ip, [r5, r2]
 800560a:	9a03      	ldr	r2, [sp, #12]
 800560c:	3304      	adds	r3, #4
 800560e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005612:	f1b9 0f00 	cmp.w	r9, #0
 8005616:	d020      	beq.n	800565a <__multiply+0x13e>
 8005618:	46ae      	mov	lr, r5
 800561a:	f04f 0a00 	mov.w	sl, #0
 800561e:	6829      	ldr	r1, [r5, #0]
 8005620:	f104 0c14 	add.w	ip, r4, #20
 8005624:	f8bc b000 	ldrh.w	fp, [ip]
 8005628:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800562c:	b289      	uxth	r1, r1
 800562e:	fb09 220b 	mla	r2, r9, fp, r2
 8005632:	4492      	add	sl, r2
 8005634:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005638:	f84e 1b04 	str.w	r1, [lr], #4
 800563c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005640:	f8be 1000 	ldrh.w	r1, [lr]
 8005644:	0c12      	lsrs	r2, r2, #16
 8005646:	fb09 1102 	mla	r1, r9, r2, r1
 800564a:	4567      	cmp	r7, ip
 800564c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005650:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005654:	d8e6      	bhi.n	8005624 <__multiply+0x108>
 8005656:	9a01      	ldr	r2, [sp, #4]
 8005658:	50a9      	str	r1, [r5, r2]
 800565a:	3504      	adds	r5, #4
 800565c:	e79b      	b.n	8005596 <__multiply+0x7a>
 800565e:	3e01      	subs	r6, #1
 8005660:	e79d      	b.n	800559e <__multiply+0x82>
 8005662:	bf00      	nop
 8005664:	08006b8b 	.word	0x08006b8b
 8005668:	08006b9c 	.word	0x08006b9c

0800566c <__pow5mult>:
 800566c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005670:	4615      	mov	r5, r2
 8005672:	f012 0203 	ands.w	r2, r2, #3
 8005676:	4606      	mov	r6, r0
 8005678:	460f      	mov	r7, r1
 800567a:	d007      	beq.n	800568c <__pow5mult+0x20>
 800567c:	4c25      	ldr	r4, [pc, #148]	; (8005714 <__pow5mult+0xa8>)
 800567e:	3a01      	subs	r2, #1
 8005680:	2300      	movs	r3, #0
 8005682:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005686:	f7ff fe9f 	bl	80053c8 <__multadd>
 800568a:	4607      	mov	r7, r0
 800568c:	10ad      	asrs	r5, r5, #2
 800568e:	d03d      	beq.n	800570c <__pow5mult+0xa0>
 8005690:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005692:	b97c      	cbnz	r4, 80056b4 <__pow5mult+0x48>
 8005694:	2010      	movs	r0, #16
 8005696:	f7ff fe11 	bl	80052bc <malloc>
 800569a:	4602      	mov	r2, r0
 800569c:	6270      	str	r0, [r6, #36]	; 0x24
 800569e:	b928      	cbnz	r0, 80056ac <__pow5mult+0x40>
 80056a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80056a4:	4b1c      	ldr	r3, [pc, #112]	; (8005718 <__pow5mult+0xac>)
 80056a6:	481d      	ldr	r0, [pc, #116]	; (800571c <__pow5mult+0xb0>)
 80056a8:	f000 fc0a 	bl	8005ec0 <__assert_func>
 80056ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80056b0:	6004      	str	r4, [r0, #0]
 80056b2:	60c4      	str	r4, [r0, #12]
 80056b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80056b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80056bc:	b94c      	cbnz	r4, 80056d2 <__pow5mult+0x66>
 80056be:	f240 2171 	movw	r1, #625	; 0x271
 80056c2:	4630      	mov	r0, r6
 80056c4:	f7ff ff14 	bl	80054f0 <__i2b>
 80056c8:	2300      	movs	r3, #0
 80056ca:	4604      	mov	r4, r0
 80056cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80056d0:	6003      	str	r3, [r0, #0]
 80056d2:	f04f 0900 	mov.w	r9, #0
 80056d6:	07eb      	lsls	r3, r5, #31
 80056d8:	d50a      	bpl.n	80056f0 <__pow5mult+0x84>
 80056da:	4639      	mov	r1, r7
 80056dc:	4622      	mov	r2, r4
 80056de:	4630      	mov	r0, r6
 80056e0:	f7ff ff1c 	bl	800551c <__multiply>
 80056e4:	4680      	mov	r8, r0
 80056e6:	4639      	mov	r1, r7
 80056e8:	4630      	mov	r0, r6
 80056ea:	f7ff fe4b 	bl	8005384 <_Bfree>
 80056ee:	4647      	mov	r7, r8
 80056f0:	106d      	asrs	r5, r5, #1
 80056f2:	d00b      	beq.n	800570c <__pow5mult+0xa0>
 80056f4:	6820      	ldr	r0, [r4, #0]
 80056f6:	b938      	cbnz	r0, 8005708 <__pow5mult+0x9c>
 80056f8:	4622      	mov	r2, r4
 80056fa:	4621      	mov	r1, r4
 80056fc:	4630      	mov	r0, r6
 80056fe:	f7ff ff0d 	bl	800551c <__multiply>
 8005702:	6020      	str	r0, [r4, #0]
 8005704:	f8c0 9000 	str.w	r9, [r0]
 8005708:	4604      	mov	r4, r0
 800570a:	e7e4      	b.n	80056d6 <__pow5mult+0x6a>
 800570c:	4638      	mov	r0, r7
 800570e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005712:	bf00      	nop
 8005714:	08006ce8 	.word	0x08006ce8
 8005718:	08006b19 	.word	0x08006b19
 800571c:	08006b9c 	.word	0x08006b9c

08005720 <__lshift>:
 8005720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005724:	460c      	mov	r4, r1
 8005726:	4607      	mov	r7, r0
 8005728:	4691      	mov	r9, r2
 800572a:	6923      	ldr	r3, [r4, #16]
 800572c:	6849      	ldr	r1, [r1, #4]
 800572e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005732:	68a3      	ldr	r3, [r4, #8]
 8005734:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005738:	f108 0601 	add.w	r6, r8, #1
 800573c:	42b3      	cmp	r3, r6
 800573e:	db0b      	blt.n	8005758 <__lshift+0x38>
 8005740:	4638      	mov	r0, r7
 8005742:	f7ff fddf 	bl	8005304 <_Balloc>
 8005746:	4605      	mov	r5, r0
 8005748:	b948      	cbnz	r0, 800575e <__lshift+0x3e>
 800574a:	4602      	mov	r2, r0
 800574c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005750:	4b29      	ldr	r3, [pc, #164]	; (80057f8 <__lshift+0xd8>)
 8005752:	482a      	ldr	r0, [pc, #168]	; (80057fc <__lshift+0xdc>)
 8005754:	f000 fbb4 	bl	8005ec0 <__assert_func>
 8005758:	3101      	adds	r1, #1
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	e7ee      	b.n	800573c <__lshift+0x1c>
 800575e:	2300      	movs	r3, #0
 8005760:	f100 0114 	add.w	r1, r0, #20
 8005764:	f100 0210 	add.w	r2, r0, #16
 8005768:	4618      	mov	r0, r3
 800576a:	4553      	cmp	r3, sl
 800576c:	db37      	blt.n	80057de <__lshift+0xbe>
 800576e:	6920      	ldr	r0, [r4, #16]
 8005770:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005774:	f104 0314 	add.w	r3, r4, #20
 8005778:	f019 091f 	ands.w	r9, r9, #31
 800577c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005780:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005784:	d02f      	beq.n	80057e6 <__lshift+0xc6>
 8005786:	468a      	mov	sl, r1
 8005788:	f04f 0c00 	mov.w	ip, #0
 800578c:	f1c9 0e20 	rsb	lr, r9, #32
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	fa02 f209 	lsl.w	r2, r2, r9
 8005796:	ea42 020c 	orr.w	r2, r2, ip
 800579a:	f84a 2b04 	str.w	r2, [sl], #4
 800579e:	f853 2b04 	ldr.w	r2, [r3], #4
 80057a2:	4298      	cmp	r0, r3
 80057a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80057a8:	d8f2      	bhi.n	8005790 <__lshift+0x70>
 80057aa:	1b03      	subs	r3, r0, r4
 80057ac:	3b15      	subs	r3, #21
 80057ae:	f023 0303 	bic.w	r3, r3, #3
 80057b2:	3304      	adds	r3, #4
 80057b4:	f104 0215 	add.w	r2, r4, #21
 80057b8:	4290      	cmp	r0, r2
 80057ba:	bf38      	it	cc
 80057bc:	2304      	movcc	r3, #4
 80057be:	f841 c003 	str.w	ip, [r1, r3]
 80057c2:	f1bc 0f00 	cmp.w	ip, #0
 80057c6:	d001      	beq.n	80057cc <__lshift+0xac>
 80057c8:	f108 0602 	add.w	r6, r8, #2
 80057cc:	3e01      	subs	r6, #1
 80057ce:	4638      	mov	r0, r7
 80057d0:	4621      	mov	r1, r4
 80057d2:	612e      	str	r6, [r5, #16]
 80057d4:	f7ff fdd6 	bl	8005384 <_Bfree>
 80057d8:	4628      	mov	r0, r5
 80057da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057de:	f842 0f04 	str.w	r0, [r2, #4]!
 80057e2:	3301      	adds	r3, #1
 80057e4:	e7c1      	b.n	800576a <__lshift+0x4a>
 80057e6:	3904      	subs	r1, #4
 80057e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80057ec:	4298      	cmp	r0, r3
 80057ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80057f2:	d8f9      	bhi.n	80057e8 <__lshift+0xc8>
 80057f4:	e7ea      	b.n	80057cc <__lshift+0xac>
 80057f6:	bf00      	nop
 80057f8:	08006b8b 	.word	0x08006b8b
 80057fc:	08006b9c 	.word	0x08006b9c

08005800 <__mcmp>:
 8005800:	4603      	mov	r3, r0
 8005802:	690a      	ldr	r2, [r1, #16]
 8005804:	6900      	ldr	r0, [r0, #16]
 8005806:	b530      	push	{r4, r5, lr}
 8005808:	1a80      	subs	r0, r0, r2
 800580a:	d10d      	bne.n	8005828 <__mcmp+0x28>
 800580c:	3314      	adds	r3, #20
 800580e:	3114      	adds	r1, #20
 8005810:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005814:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005818:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800581c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005820:	4295      	cmp	r5, r2
 8005822:	d002      	beq.n	800582a <__mcmp+0x2a>
 8005824:	d304      	bcc.n	8005830 <__mcmp+0x30>
 8005826:	2001      	movs	r0, #1
 8005828:	bd30      	pop	{r4, r5, pc}
 800582a:	42a3      	cmp	r3, r4
 800582c:	d3f4      	bcc.n	8005818 <__mcmp+0x18>
 800582e:	e7fb      	b.n	8005828 <__mcmp+0x28>
 8005830:	f04f 30ff 	mov.w	r0, #4294967295
 8005834:	e7f8      	b.n	8005828 <__mcmp+0x28>
	...

08005838 <__mdiff>:
 8005838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583c:	460d      	mov	r5, r1
 800583e:	4607      	mov	r7, r0
 8005840:	4611      	mov	r1, r2
 8005842:	4628      	mov	r0, r5
 8005844:	4614      	mov	r4, r2
 8005846:	f7ff ffdb 	bl	8005800 <__mcmp>
 800584a:	1e06      	subs	r6, r0, #0
 800584c:	d111      	bne.n	8005872 <__mdiff+0x3a>
 800584e:	4631      	mov	r1, r6
 8005850:	4638      	mov	r0, r7
 8005852:	f7ff fd57 	bl	8005304 <_Balloc>
 8005856:	4602      	mov	r2, r0
 8005858:	b928      	cbnz	r0, 8005866 <__mdiff+0x2e>
 800585a:	f240 2132 	movw	r1, #562	; 0x232
 800585e:	4b3a      	ldr	r3, [pc, #232]	; (8005948 <__mdiff+0x110>)
 8005860:	483a      	ldr	r0, [pc, #232]	; (800594c <__mdiff+0x114>)
 8005862:	f000 fb2d 	bl	8005ec0 <__assert_func>
 8005866:	2301      	movs	r3, #1
 8005868:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800586c:	4610      	mov	r0, r2
 800586e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005872:	bfa4      	itt	ge
 8005874:	4623      	movge	r3, r4
 8005876:	462c      	movge	r4, r5
 8005878:	4638      	mov	r0, r7
 800587a:	6861      	ldr	r1, [r4, #4]
 800587c:	bfa6      	itte	ge
 800587e:	461d      	movge	r5, r3
 8005880:	2600      	movge	r6, #0
 8005882:	2601      	movlt	r6, #1
 8005884:	f7ff fd3e 	bl	8005304 <_Balloc>
 8005888:	4602      	mov	r2, r0
 800588a:	b918      	cbnz	r0, 8005894 <__mdiff+0x5c>
 800588c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005890:	4b2d      	ldr	r3, [pc, #180]	; (8005948 <__mdiff+0x110>)
 8005892:	e7e5      	b.n	8005860 <__mdiff+0x28>
 8005894:	f102 0814 	add.w	r8, r2, #20
 8005898:	46c2      	mov	sl, r8
 800589a:	f04f 0c00 	mov.w	ip, #0
 800589e:	6927      	ldr	r7, [r4, #16]
 80058a0:	60c6      	str	r6, [r0, #12]
 80058a2:	692e      	ldr	r6, [r5, #16]
 80058a4:	f104 0014 	add.w	r0, r4, #20
 80058a8:	f105 0914 	add.w	r9, r5, #20
 80058ac:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80058b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80058b4:	3410      	adds	r4, #16
 80058b6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80058ba:	f859 3b04 	ldr.w	r3, [r9], #4
 80058be:	fa1f f18b 	uxth.w	r1, fp
 80058c2:	448c      	add	ip, r1
 80058c4:	b299      	uxth	r1, r3
 80058c6:	0c1b      	lsrs	r3, r3, #16
 80058c8:	ebac 0101 	sub.w	r1, ip, r1
 80058cc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80058d0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80058d4:	b289      	uxth	r1, r1
 80058d6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80058da:	454e      	cmp	r6, r9
 80058dc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80058e0:	f84a 3b04 	str.w	r3, [sl], #4
 80058e4:	d8e7      	bhi.n	80058b6 <__mdiff+0x7e>
 80058e6:	1b73      	subs	r3, r6, r5
 80058e8:	3b15      	subs	r3, #21
 80058ea:	f023 0303 	bic.w	r3, r3, #3
 80058ee:	3515      	adds	r5, #21
 80058f0:	3304      	adds	r3, #4
 80058f2:	42ae      	cmp	r6, r5
 80058f4:	bf38      	it	cc
 80058f6:	2304      	movcc	r3, #4
 80058f8:	4418      	add	r0, r3
 80058fa:	4443      	add	r3, r8
 80058fc:	461e      	mov	r6, r3
 80058fe:	4605      	mov	r5, r0
 8005900:	4575      	cmp	r5, lr
 8005902:	d30e      	bcc.n	8005922 <__mdiff+0xea>
 8005904:	f10e 0103 	add.w	r1, lr, #3
 8005908:	1a09      	subs	r1, r1, r0
 800590a:	f021 0103 	bic.w	r1, r1, #3
 800590e:	3803      	subs	r0, #3
 8005910:	4586      	cmp	lr, r0
 8005912:	bf38      	it	cc
 8005914:	2100      	movcc	r1, #0
 8005916:	4419      	add	r1, r3
 8005918:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800591c:	b18b      	cbz	r3, 8005942 <__mdiff+0x10a>
 800591e:	6117      	str	r7, [r2, #16]
 8005920:	e7a4      	b.n	800586c <__mdiff+0x34>
 8005922:	f855 8b04 	ldr.w	r8, [r5], #4
 8005926:	fa1f f188 	uxth.w	r1, r8
 800592a:	4461      	add	r1, ip
 800592c:	140c      	asrs	r4, r1, #16
 800592e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005932:	b289      	uxth	r1, r1
 8005934:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005938:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800593c:	f846 1b04 	str.w	r1, [r6], #4
 8005940:	e7de      	b.n	8005900 <__mdiff+0xc8>
 8005942:	3f01      	subs	r7, #1
 8005944:	e7e8      	b.n	8005918 <__mdiff+0xe0>
 8005946:	bf00      	nop
 8005948:	08006b8b 	.word	0x08006b8b
 800594c:	08006b9c 	.word	0x08006b9c

08005950 <__d2b>:
 8005950:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005954:	2101      	movs	r1, #1
 8005956:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800595a:	4690      	mov	r8, r2
 800595c:	461d      	mov	r5, r3
 800595e:	f7ff fcd1 	bl	8005304 <_Balloc>
 8005962:	4604      	mov	r4, r0
 8005964:	b930      	cbnz	r0, 8005974 <__d2b+0x24>
 8005966:	4602      	mov	r2, r0
 8005968:	f240 310a 	movw	r1, #778	; 0x30a
 800596c:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <__d2b+0xb0>)
 800596e:	4825      	ldr	r0, [pc, #148]	; (8005a04 <__d2b+0xb4>)
 8005970:	f000 faa6 	bl	8005ec0 <__assert_func>
 8005974:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005978:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800597c:	bb2d      	cbnz	r5, 80059ca <__d2b+0x7a>
 800597e:	9301      	str	r3, [sp, #4]
 8005980:	f1b8 0300 	subs.w	r3, r8, #0
 8005984:	d026      	beq.n	80059d4 <__d2b+0x84>
 8005986:	4668      	mov	r0, sp
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	f7ff fd83 	bl	8005494 <__lo0bits>
 800598e:	9900      	ldr	r1, [sp, #0]
 8005990:	b1f0      	cbz	r0, 80059d0 <__d2b+0x80>
 8005992:	9a01      	ldr	r2, [sp, #4]
 8005994:	f1c0 0320 	rsb	r3, r0, #32
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	430b      	orrs	r3, r1
 800599e:	40c2      	lsrs	r2, r0
 80059a0:	6163      	str	r3, [r4, #20]
 80059a2:	9201      	str	r2, [sp, #4]
 80059a4:	9b01      	ldr	r3, [sp, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	bf14      	ite	ne
 80059aa:	2102      	movne	r1, #2
 80059ac:	2101      	moveq	r1, #1
 80059ae:	61a3      	str	r3, [r4, #24]
 80059b0:	6121      	str	r1, [r4, #16]
 80059b2:	b1c5      	cbz	r5, 80059e6 <__d2b+0x96>
 80059b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80059b8:	4405      	add	r5, r0
 80059ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80059be:	603d      	str	r5, [r7, #0]
 80059c0:	6030      	str	r0, [r6, #0]
 80059c2:	4620      	mov	r0, r4
 80059c4:	b002      	add	sp, #8
 80059c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059ce:	e7d6      	b.n	800597e <__d2b+0x2e>
 80059d0:	6161      	str	r1, [r4, #20]
 80059d2:	e7e7      	b.n	80059a4 <__d2b+0x54>
 80059d4:	a801      	add	r0, sp, #4
 80059d6:	f7ff fd5d 	bl	8005494 <__lo0bits>
 80059da:	2101      	movs	r1, #1
 80059dc:	9b01      	ldr	r3, [sp, #4]
 80059de:	6121      	str	r1, [r4, #16]
 80059e0:	6163      	str	r3, [r4, #20]
 80059e2:	3020      	adds	r0, #32
 80059e4:	e7e5      	b.n	80059b2 <__d2b+0x62>
 80059e6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80059ea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80059ee:	6038      	str	r0, [r7, #0]
 80059f0:	6918      	ldr	r0, [r3, #16]
 80059f2:	f7ff fd2f 	bl	8005454 <__hi0bits>
 80059f6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80059fa:	6031      	str	r1, [r6, #0]
 80059fc:	e7e1      	b.n	80059c2 <__d2b+0x72>
 80059fe:	bf00      	nop
 8005a00:	08006b8b 	.word	0x08006b8b
 8005a04:	08006b9c 	.word	0x08006b9c

08005a08 <_calloc_r>:
 8005a08:	b570      	push	{r4, r5, r6, lr}
 8005a0a:	fba1 5402 	umull	r5, r4, r1, r2
 8005a0e:	b934      	cbnz	r4, 8005a1e <_calloc_r+0x16>
 8005a10:	4629      	mov	r1, r5
 8005a12:	f000 f875 	bl	8005b00 <_malloc_r>
 8005a16:	4606      	mov	r6, r0
 8005a18:	b928      	cbnz	r0, 8005a26 <_calloc_r+0x1e>
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	bd70      	pop	{r4, r5, r6, pc}
 8005a1e:	220c      	movs	r2, #12
 8005a20:	2600      	movs	r6, #0
 8005a22:	6002      	str	r2, [r0, #0]
 8005a24:	e7f9      	b.n	8005a1a <_calloc_r+0x12>
 8005a26:	462a      	mov	r2, r5
 8005a28:	4621      	mov	r1, r4
 8005a2a:	f7fe f93f 	bl	8003cac <memset>
 8005a2e:	e7f4      	b.n	8005a1a <_calloc_r+0x12>

08005a30 <_free_r>:
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	4605      	mov	r5, r0
 8005a34:	2900      	cmp	r1, #0
 8005a36:	d040      	beq.n	8005aba <_free_r+0x8a>
 8005a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a3c:	1f0c      	subs	r4, r1, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	bfb8      	it	lt
 8005a42:	18e4      	addlt	r4, r4, r3
 8005a44:	f000 fa98 	bl	8005f78 <__malloc_lock>
 8005a48:	4a1c      	ldr	r2, [pc, #112]	; (8005abc <_free_r+0x8c>)
 8005a4a:	6813      	ldr	r3, [r2, #0]
 8005a4c:	b933      	cbnz	r3, 8005a5c <_free_r+0x2c>
 8005a4e:	6063      	str	r3, [r4, #4]
 8005a50:	6014      	str	r4, [r2, #0]
 8005a52:	4628      	mov	r0, r5
 8005a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a58:	f000 ba94 	b.w	8005f84 <__malloc_unlock>
 8005a5c:	42a3      	cmp	r3, r4
 8005a5e:	d908      	bls.n	8005a72 <_free_r+0x42>
 8005a60:	6820      	ldr	r0, [r4, #0]
 8005a62:	1821      	adds	r1, r4, r0
 8005a64:	428b      	cmp	r3, r1
 8005a66:	bf01      	itttt	eq
 8005a68:	6819      	ldreq	r1, [r3, #0]
 8005a6a:	685b      	ldreq	r3, [r3, #4]
 8005a6c:	1809      	addeq	r1, r1, r0
 8005a6e:	6021      	streq	r1, [r4, #0]
 8005a70:	e7ed      	b.n	8005a4e <_free_r+0x1e>
 8005a72:	461a      	mov	r2, r3
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	b10b      	cbz	r3, 8005a7c <_free_r+0x4c>
 8005a78:	42a3      	cmp	r3, r4
 8005a7a:	d9fa      	bls.n	8005a72 <_free_r+0x42>
 8005a7c:	6811      	ldr	r1, [r2, #0]
 8005a7e:	1850      	adds	r0, r2, r1
 8005a80:	42a0      	cmp	r0, r4
 8005a82:	d10b      	bne.n	8005a9c <_free_r+0x6c>
 8005a84:	6820      	ldr	r0, [r4, #0]
 8005a86:	4401      	add	r1, r0
 8005a88:	1850      	adds	r0, r2, r1
 8005a8a:	4283      	cmp	r3, r0
 8005a8c:	6011      	str	r1, [r2, #0]
 8005a8e:	d1e0      	bne.n	8005a52 <_free_r+0x22>
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	4401      	add	r1, r0
 8005a96:	6011      	str	r1, [r2, #0]
 8005a98:	6053      	str	r3, [r2, #4]
 8005a9a:	e7da      	b.n	8005a52 <_free_r+0x22>
 8005a9c:	d902      	bls.n	8005aa4 <_free_r+0x74>
 8005a9e:	230c      	movs	r3, #12
 8005aa0:	602b      	str	r3, [r5, #0]
 8005aa2:	e7d6      	b.n	8005a52 <_free_r+0x22>
 8005aa4:	6820      	ldr	r0, [r4, #0]
 8005aa6:	1821      	adds	r1, r4, r0
 8005aa8:	428b      	cmp	r3, r1
 8005aaa:	bf01      	itttt	eq
 8005aac:	6819      	ldreq	r1, [r3, #0]
 8005aae:	685b      	ldreq	r3, [r3, #4]
 8005ab0:	1809      	addeq	r1, r1, r0
 8005ab2:	6021      	streq	r1, [r4, #0]
 8005ab4:	6063      	str	r3, [r4, #4]
 8005ab6:	6054      	str	r4, [r2, #4]
 8005ab8:	e7cb      	b.n	8005a52 <_free_r+0x22>
 8005aba:	bd38      	pop	{r3, r4, r5, pc}
 8005abc:	200003b0 	.word	0x200003b0

08005ac0 <sbrk_aligned>:
 8005ac0:	b570      	push	{r4, r5, r6, lr}
 8005ac2:	4e0e      	ldr	r6, [pc, #56]	; (8005afc <sbrk_aligned+0x3c>)
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	6831      	ldr	r1, [r6, #0]
 8005ac8:	4605      	mov	r5, r0
 8005aca:	b911      	cbnz	r1, 8005ad2 <sbrk_aligned+0x12>
 8005acc:	f000 f9e8 	bl	8005ea0 <_sbrk_r>
 8005ad0:	6030      	str	r0, [r6, #0]
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	f000 f9e3 	bl	8005ea0 <_sbrk_r>
 8005ada:	1c43      	adds	r3, r0, #1
 8005adc:	d00a      	beq.n	8005af4 <sbrk_aligned+0x34>
 8005ade:	1cc4      	adds	r4, r0, #3
 8005ae0:	f024 0403 	bic.w	r4, r4, #3
 8005ae4:	42a0      	cmp	r0, r4
 8005ae6:	d007      	beq.n	8005af8 <sbrk_aligned+0x38>
 8005ae8:	1a21      	subs	r1, r4, r0
 8005aea:	4628      	mov	r0, r5
 8005aec:	f000 f9d8 	bl	8005ea0 <_sbrk_r>
 8005af0:	3001      	adds	r0, #1
 8005af2:	d101      	bne.n	8005af8 <sbrk_aligned+0x38>
 8005af4:	f04f 34ff 	mov.w	r4, #4294967295
 8005af8:	4620      	mov	r0, r4
 8005afa:	bd70      	pop	{r4, r5, r6, pc}
 8005afc:	200003b4 	.word	0x200003b4

08005b00 <_malloc_r>:
 8005b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b04:	1ccd      	adds	r5, r1, #3
 8005b06:	f025 0503 	bic.w	r5, r5, #3
 8005b0a:	3508      	adds	r5, #8
 8005b0c:	2d0c      	cmp	r5, #12
 8005b0e:	bf38      	it	cc
 8005b10:	250c      	movcc	r5, #12
 8005b12:	2d00      	cmp	r5, #0
 8005b14:	4607      	mov	r7, r0
 8005b16:	db01      	blt.n	8005b1c <_malloc_r+0x1c>
 8005b18:	42a9      	cmp	r1, r5
 8005b1a:	d905      	bls.n	8005b28 <_malloc_r+0x28>
 8005b1c:	230c      	movs	r3, #12
 8005b1e:	2600      	movs	r6, #0
 8005b20:	603b      	str	r3, [r7, #0]
 8005b22:	4630      	mov	r0, r6
 8005b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b28:	4e2e      	ldr	r6, [pc, #184]	; (8005be4 <_malloc_r+0xe4>)
 8005b2a:	f000 fa25 	bl	8005f78 <__malloc_lock>
 8005b2e:	6833      	ldr	r3, [r6, #0]
 8005b30:	461c      	mov	r4, r3
 8005b32:	bb34      	cbnz	r4, 8005b82 <_malloc_r+0x82>
 8005b34:	4629      	mov	r1, r5
 8005b36:	4638      	mov	r0, r7
 8005b38:	f7ff ffc2 	bl	8005ac0 <sbrk_aligned>
 8005b3c:	1c43      	adds	r3, r0, #1
 8005b3e:	4604      	mov	r4, r0
 8005b40:	d14d      	bne.n	8005bde <_malloc_r+0xde>
 8005b42:	6834      	ldr	r4, [r6, #0]
 8005b44:	4626      	mov	r6, r4
 8005b46:	2e00      	cmp	r6, #0
 8005b48:	d140      	bne.n	8005bcc <_malloc_r+0xcc>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	4638      	mov	r0, r7
 8005b50:	eb04 0803 	add.w	r8, r4, r3
 8005b54:	f000 f9a4 	bl	8005ea0 <_sbrk_r>
 8005b58:	4580      	cmp	r8, r0
 8005b5a:	d13a      	bne.n	8005bd2 <_malloc_r+0xd2>
 8005b5c:	6821      	ldr	r1, [r4, #0]
 8005b5e:	3503      	adds	r5, #3
 8005b60:	1a6d      	subs	r5, r5, r1
 8005b62:	f025 0503 	bic.w	r5, r5, #3
 8005b66:	3508      	adds	r5, #8
 8005b68:	2d0c      	cmp	r5, #12
 8005b6a:	bf38      	it	cc
 8005b6c:	250c      	movcc	r5, #12
 8005b6e:	4638      	mov	r0, r7
 8005b70:	4629      	mov	r1, r5
 8005b72:	f7ff ffa5 	bl	8005ac0 <sbrk_aligned>
 8005b76:	3001      	adds	r0, #1
 8005b78:	d02b      	beq.n	8005bd2 <_malloc_r+0xd2>
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	442b      	add	r3, r5
 8005b7e:	6023      	str	r3, [r4, #0]
 8005b80:	e00e      	b.n	8005ba0 <_malloc_r+0xa0>
 8005b82:	6822      	ldr	r2, [r4, #0]
 8005b84:	1b52      	subs	r2, r2, r5
 8005b86:	d41e      	bmi.n	8005bc6 <_malloc_r+0xc6>
 8005b88:	2a0b      	cmp	r2, #11
 8005b8a:	d916      	bls.n	8005bba <_malloc_r+0xba>
 8005b8c:	1961      	adds	r1, r4, r5
 8005b8e:	42a3      	cmp	r3, r4
 8005b90:	6025      	str	r5, [r4, #0]
 8005b92:	bf18      	it	ne
 8005b94:	6059      	strne	r1, [r3, #4]
 8005b96:	6863      	ldr	r3, [r4, #4]
 8005b98:	bf08      	it	eq
 8005b9a:	6031      	streq	r1, [r6, #0]
 8005b9c:	5162      	str	r2, [r4, r5]
 8005b9e:	604b      	str	r3, [r1, #4]
 8005ba0:	4638      	mov	r0, r7
 8005ba2:	f104 060b 	add.w	r6, r4, #11
 8005ba6:	f000 f9ed 	bl	8005f84 <__malloc_unlock>
 8005baa:	f026 0607 	bic.w	r6, r6, #7
 8005bae:	1d23      	adds	r3, r4, #4
 8005bb0:	1af2      	subs	r2, r6, r3
 8005bb2:	d0b6      	beq.n	8005b22 <_malloc_r+0x22>
 8005bb4:	1b9b      	subs	r3, r3, r6
 8005bb6:	50a3      	str	r3, [r4, r2]
 8005bb8:	e7b3      	b.n	8005b22 <_malloc_r+0x22>
 8005bba:	6862      	ldr	r2, [r4, #4]
 8005bbc:	42a3      	cmp	r3, r4
 8005bbe:	bf0c      	ite	eq
 8005bc0:	6032      	streq	r2, [r6, #0]
 8005bc2:	605a      	strne	r2, [r3, #4]
 8005bc4:	e7ec      	b.n	8005ba0 <_malloc_r+0xa0>
 8005bc6:	4623      	mov	r3, r4
 8005bc8:	6864      	ldr	r4, [r4, #4]
 8005bca:	e7b2      	b.n	8005b32 <_malloc_r+0x32>
 8005bcc:	4634      	mov	r4, r6
 8005bce:	6876      	ldr	r6, [r6, #4]
 8005bd0:	e7b9      	b.n	8005b46 <_malloc_r+0x46>
 8005bd2:	230c      	movs	r3, #12
 8005bd4:	4638      	mov	r0, r7
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	f000 f9d4 	bl	8005f84 <__malloc_unlock>
 8005bdc:	e7a1      	b.n	8005b22 <_malloc_r+0x22>
 8005bde:	6025      	str	r5, [r4, #0]
 8005be0:	e7de      	b.n	8005ba0 <_malloc_r+0xa0>
 8005be2:	bf00      	nop
 8005be4:	200003b0 	.word	0x200003b0

08005be8 <__ssputs_r>:
 8005be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bec:	688e      	ldr	r6, [r1, #8]
 8005bee:	4682      	mov	sl, r0
 8005bf0:	429e      	cmp	r6, r3
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	4690      	mov	r8, r2
 8005bf6:	461f      	mov	r7, r3
 8005bf8:	d838      	bhi.n	8005c6c <__ssputs_r+0x84>
 8005bfa:	898a      	ldrh	r2, [r1, #12]
 8005bfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c00:	d032      	beq.n	8005c68 <__ssputs_r+0x80>
 8005c02:	6825      	ldr	r5, [r4, #0]
 8005c04:	6909      	ldr	r1, [r1, #16]
 8005c06:	3301      	adds	r3, #1
 8005c08:	eba5 0901 	sub.w	r9, r5, r1
 8005c0c:	6965      	ldr	r5, [r4, #20]
 8005c0e:	444b      	add	r3, r9
 8005c10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c18:	106d      	asrs	r5, r5, #1
 8005c1a:	429d      	cmp	r5, r3
 8005c1c:	bf38      	it	cc
 8005c1e:	461d      	movcc	r5, r3
 8005c20:	0553      	lsls	r3, r2, #21
 8005c22:	d531      	bpl.n	8005c88 <__ssputs_r+0xa0>
 8005c24:	4629      	mov	r1, r5
 8005c26:	f7ff ff6b 	bl	8005b00 <_malloc_r>
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	b950      	cbnz	r0, 8005c44 <__ssputs_r+0x5c>
 8005c2e:	230c      	movs	r3, #12
 8005c30:	f04f 30ff 	mov.w	r0, #4294967295
 8005c34:	f8ca 3000 	str.w	r3, [sl]
 8005c38:	89a3      	ldrh	r3, [r4, #12]
 8005c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c3e:	81a3      	strh	r3, [r4, #12]
 8005c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c44:	464a      	mov	r2, r9
 8005c46:	6921      	ldr	r1, [r4, #16]
 8005c48:	f7ff fb4e 	bl	80052e8 <memcpy>
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c56:	81a3      	strh	r3, [r4, #12]
 8005c58:	6126      	str	r6, [r4, #16]
 8005c5a:	444e      	add	r6, r9
 8005c5c:	6026      	str	r6, [r4, #0]
 8005c5e:	463e      	mov	r6, r7
 8005c60:	6165      	str	r5, [r4, #20]
 8005c62:	eba5 0509 	sub.w	r5, r5, r9
 8005c66:	60a5      	str	r5, [r4, #8]
 8005c68:	42be      	cmp	r6, r7
 8005c6a:	d900      	bls.n	8005c6e <__ssputs_r+0x86>
 8005c6c:	463e      	mov	r6, r7
 8005c6e:	4632      	mov	r2, r6
 8005c70:	4641      	mov	r1, r8
 8005c72:	6820      	ldr	r0, [r4, #0]
 8005c74:	f000 f966 	bl	8005f44 <memmove>
 8005c78:	68a3      	ldr	r3, [r4, #8]
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	1b9b      	subs	r3, r3, r6
 8005c7e:	60a3      	str	r3, [r4, #8]
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	4433      	add	r3, r6
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	e7db      	b.n	8005c40 <__ssputs_r+0x58>
 8005c88:	462a      	mov	r2, r5
 8005c8a:	f000 f981 	bl	8005f90 <_realloc_r>
 8005c8e:	4606      	mov	r6, r0
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d1e1      	bne.n	8005c58 <__ssputs_r+0x70>
 8005c94:	4650      	mov	r0, sl
 8005c96:	6921      	ldr	r1, [r4, #16]
 8005c98:	f7ff feca 	bl	8005a30 <_free_r>
 8005c9c:	e7c7      	b.n	8005c2e <__ssputs_r+0x46>
	...

08005ca0 <_svfiprintf_r>:
 8005ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	4698      	mov	r8, r3
 8005ca6:	898b      	ldrh	r3, [r1, #12]
 8005ca8:	4607      	mov	r7, r0
 8005caa:	061b      	lsls	r3, r3, #24
 8005cac:	460d      	mov	r5, r1
 8005cae:	4614      	mov	r4, r2
 8005cb0:	b09d      	sub	sp, #116	; 0x74
 8005cb2:	d50e      	bpl.n	8005cd2 <_svfiprintf_r+0x32>
 8005cb4:	690b      	ldr	r3, [r1, #16]
 8005cb6:	b963      	cbnz	r3, 8005cd2 <_svfiprintf_r+0x32>
 8005cb8:	2140      	movs	r1, #64	; 0x40
 8005cba:	f7ff ff21 	bl	8005b00 <_malloc_r>
 8005cbe:	6028      	str	r0, [r5, #0]
 8005cc0:	6128      	str	r0, [r5, #16]
 8005cc2:	b920      	cbnz	r0, 8005cce <_svfiprintf_r+0x2e>
 8005cc4:	230c      	movs	r3, #12
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ccc:	e0d1      	b.n	8005e72 <_svfiprintf_r+0x1d2>
 8005cce:	2340      	movs	r3, #64	; 0x40
 8005cd0:	616b      	str	r3, [r5, #20]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8005cd6:	2320      	movs	r3, #32
 8005cd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cdc:	2330      	movs	r3, #48	; 0x30
 8005cde:	f04f 0901 	mov.w	r9, #1
 8005ce2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ce6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005e8c <_svfiprintf_r+0x1ec>
 8005cea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cee:	4623      	mov	r3, r4
 8005cf0:	469a      	mov	sl, r3
 8005cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cf6:	b10a      	cbz	r2, 8005cfc <_svfiprintf_r+0x5c>
 8005cf8:	2a25      	cmp	r2, #37	; 0x25
 8005cfa:	d1f9      	bne.n	8005cf0 <_svfiprintf_r+0x50>
 8005cfc:	ebba 0b04 	subs.w	fp, sl, r4
 8005d00:	d00b      	beq.n	8005d1a <_svfiprintf_r+0x7a>
 8005d02:	465b      	mov	r3, fp
 8005d04:	4622      	mov	r2, r4
 8005d06:	4629      	mov	r1, r5
 8005d08:	4638      	mov	r0, r7
 8005d0a:	f7ff ff6d 	bl	8005be8 <__ssputs_r>
 8005d0e:	3001      	adds	r0, #1
 8005d10:	f000 80aa 	beq.w	8005e68 <_svfiprintf_r+0x1c8>
 8005d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d16:	445a      	add	r2, fp
 8005d18:	9209      	str	r2, [sp, #36]	; 0x24
 8005d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 80a2 	beq.w	8005e68 <_svfiprintf_r+0x1c8>
 8005d24:	2300      	movs	r3, #0
 8005d26:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d2e:	f10a 0a01 	add.w	sl, sl, #1
 8005d32:	9304      	str	r3, [sp, #16]
 8005d34:	9307      	str	r3, [sp, #28]
 8005d36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d3a:	931a      	str	r3, [sp, #104]	; 0x68
 8005d3c:	4654      	mov	r4, sl
 8005d3e:	2205      	movs	r2, #5
 8005d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d44:	4851      	ldr	r0, [pc, #324]	; (8005e8c <_svfiprintf_r+0x1ec>)
 8005d46:	f7ff fac1 	bl	80052cc <memchr>
 8005d4a:	9a04      	ldr	r2, [sp, #16]
 8005d4c:	b9d8      	cbnz	r0, 8005d86 <_svfiprintf_r+0xe6>
 8005d4e:	06d0      	lsls	r0, r2, #27
 8005d50:	bf44      	itt	mi
 8005d52:	2320      	movmi	r3, #32
 8005d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d58:	0711      	lsls	r1, r2, #28
 8005d5a:	bf44      	itt	mi
 8005d5c:	232b      	movmi	r3, #43	; 0x2b
 8005d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d62:	f89a 3000 	ldrb.w	r3, [sl]
 8005d66:	2b2a      	cmp	r3, #42	; 0x2a
 8005d68:	d015      	beq.n	8005d96 <_svfiprintf_r+0xf6>
 8005d6a:	4654      	mov	r4, sl
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	f04f 0c0a 	mov.w	ip, #10
 8005d72:	9a07      	ldr	r2, [sp, #28]
 8005d74:	4621      	mov	r1, r4
 8005d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d7a:	3b30      	subs	r3, #48	; 0x30
 8005d7c:	2b09      	cmp	r3, #9
 8005d7e:	d94e      	bls.n	8005e1e <_svfiprintf_r+0x17e>
 8005d80:	b1b0      	cbz	r0, 8005db0 <_svfiprintf_r+0x110>
 8005d82:	9207      	str	r2, [sp, #28]
 8005d84:	e014      	b.n	8005db0 <_svfiprintf_r+0x110>
 8005d86:	eba0 0308 	sub.w	r3, r0, r8
 8005d8a:	fa09 f303 	lsl.w	r3, r9, r3
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	46a2      	mov	sl, r4
 8005d92:	9304      	str	r3, [sp, #16]
 8005d94:	e7d2      	b.n	8005d3c <_svfiprintf_r+0x9c>
 8005d96:	9b03      	ldr	r3, [sp, #12]
 8005d98:	1d19      	adds	r1, r3, #4
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	9103      	str	r1, [sp, #12]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	bfbb      	ittet	lt
 8005da2:	425b      	neglt	r3, r3
 8005da4:	f042 0202 	orrlt.w	r2, r2, #2
 8005da8:	9307      	strge	r3, [sp, #28]
 8005daa:	9307      	strlt	r3, [sp, #28]
 8005dac:	bfb8      	it	lt
 8005dae:	9204      	strlt	r2, [sp, #16]
 8005db0:	7823      	ldrb	r3, [r4, #0]
 8005db2:	2b2e      	cmp	r3, #46	; 0x2e
 8005db4:	d10c      	bne.n	8005dd0 <_svfiprintf_r+0x130>
 8005db6:	7863      	ldrb	r3, [r4, #1]
 8005db8:	2b2a      	cmp	r3, #42	; 0x2a
 8005dba:	d135      	bne.n	8005e28 <_svfiprintf_r+0x188>
 8005dbc:	9b03      	ldr	r3, [sp, #12]
 8005dbe:	3402      	adds	r4, #2
 8005dc0:	1d1a      	adds	r2, r3, #4
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	9203      	str	r2, [sp, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	bfb8      	it	lt
 8005dca:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dce:	9305      	str	r3, [sp, #20]
 8005dd0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005e90 <_svfiprintf_r+0x1f0>
 8005dd4:	2203      	movs	r2, #3
 8005dd6:	4650      	mov	r0, sl
 8005dd8:	7821      	ldrb	r1, [r4, #0]
 8005dda:	f7ff fa77 	bl	80052cc <memchr>
 8005dde:	b140      	cbz	r0, 8005df2 <_svfiprintf_r+0x152>
 8005de0:	2340      	movs	r3, #64	; 0x40
 8005de2:	eba0 000a 	sub.w	r0, r0, sl
 8005de6:	fa03 f000 	lsl.w	r0, r3, r0
 8005dea:	9b04      	ldr	r3, [sp, #16]
 8005dec:	3401      	adds	r4, #1
 8005dee:	4303      	orrs	r3, r0
 8005df0:	9304      	str	r3, [sp, #16]
 8005df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005df6:	2206      	movs	r2, #6
 8005df8:	4826      	ldr	r0, [pc, #152]	; (8005e94 <_svfiprintf_r+0x1f4>)
 8005dfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dfe:	f7ff fa65 	bl	80052cc <memchr>
 8005e02:	2800      	cmp	r0, #0
 8005e04:	d038      	beq.n	8005e78 <_svfiprintf_r+0x1d8>
 8005e06:	4b24      	ldr	r3, [pc, #144]	; (8005e98 <_svfiprintf_r+0x1f8>)
 8005e08:	bb1b      	cbnz	r3, 8005e52 <_svfiprintf_r+0x1b2>
 8005e0a:	9b03      	ldr	r3, [sp, #12]
 8005e0c:	3307      	adds	r3, #7
 8005e0e:	f023 0307 	bic.w	r3, r3, #7
 8005e12:	3308      	adds	r3, #8
 8005e14:	9303      	str	r3, [sp, #12]
 8005e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e18:	4433      	add	r3, r6
 8005e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e1c:	e767      	b.n	8005cee <_svfiprintf_r+0x4e>
 8005e1e:	460c      	mov	r4, r1
 8005e20:	2001      	movs	r0, #1
 8005e22:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e26:	e7a5      	b.n	8005d74 <_svfiprintf_r+0xd4>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f04f 0c0a 	mov.w	ip, #10
 8005e2e:	4619      	mov	r1, r3
 8005e30:	3401      	adds	r4, #1
 8005e32:	9305      	str	r3, [sp, #20]
 8005e34:	4620      	mov	r0, r4
 8005e36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e3a:	3a30      	subs	r2, #48	; 0x30
 8005e3c:	2a09      	cmp	r2, #9
 8005e3e:	d903      	bls.n	8005e48 <_svfiprintf_r+0x1a8>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d0c5      	beq.n	8005dd0 <_svfiprintf_r+0x130>
 8005e44:	9105      	str	r1, [sp, #20]
 8005e46:	e7c3      	b.n	8005dd0 <_svfiprintf_r+0x130>
 8005e48:	4604      	mov	r4, r0
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e50:	e7f0      	b.n	8005e34 <_svfiprintf_r+0x194>
 8005e52:	ab03      	add	r3, sp, #12
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	462a      	mov	r2, r5
 8005e58:	4638      	mov	r0, r7
 8005e5a:	4b10      	ldr	r3, [pc, #64]	; (8005e9c <_svfiprintf_r+0x1fc>)
 8005e5c:	a904      	add	r1, sp, #16
 8005e5e:	f7fd ffcb 	bl	8003df8 <_printf_float>
 8005e62:	1c42      	adds	r2, r0, #1
 8005e64:	4606      	mov	r6, r0
 8005e66:	d1d6      	bne.n	8005e16 <_svfiprintf_r+0x176>
 8005e68:	89ab      	ldrh	r3, [r5, #12]
 8005e6a:	065b      	lsls	r3, r3, #25
 8005e6c:	f53f af2c 	bmi.w	8005cc8 <_svfiprintf_r+0x28>
 8005e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e72:	b01d      	add	sp, #116	; 0x74
 8005e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e78:	ab03      	add	r3, sp, #12
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	462a      	mov	r2, r5
 8005e7e:	4638      	mov	r0, r7
 8005e80:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <_svfiprintf_r+0x1fc>)
 8005e82:	a904      	add	r1, sp, #16
 8005e84:	f7fe fa54 	bl	8004330 <_printf_i>
 8005e88:	e7eb      	b.n	8005e62 <_svfiprintf_r+0x1c2>
 8005e8a:	bf00      	nop
 8005e8c:	08006cf4 	.word	0x08006cf4
 8005e90:	08006cfa 	.word	0x08006cfa
 8005e94:	08006cfe 	.word	0x08006cfe
 8005e98:	08003df9 	.word	0x08003df9
 8005e9c:	08005be9 	.word	0x08005be9

08005ea0 <_sbrk_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	4d05      	ldr	r5, [pc, #20]	; (8005ebc <_sbrk_r+0x1c>)
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	602b      	str	r3, [r5, #0]
 8005eac:	f7fb fd54 	bl	8001958 <_sbrk>
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	d102      	bne.n	8005eba <_sbrk_r+0x1a>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	b103      	cbz	r3, 8005eba <_sbrk_r+0x1a>
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	200003b8 	.word	0x200003b8

08005ec0 <__assert_func>:
 8005ec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ec2:	4614      	mov	r4, r2
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	4b09      	ldr	r3, [pc, #36]	; (8005eec <__assert_func+0x2c>)
 8005ec8:	4605      	mov	r5, r0
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68d8      	ldr	r0, [r3, #12]
 8005ece:	b14c      	cbz	r4, 8005ee4 <__assert_func+0x24>
 8005ed0:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <__assert_func+0x30>)
 8005ed2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ed6:	9100      	str	r1, [sp, #0]
 8005ed8:	462b      	mov	r3, r5
 8005eda:	4906      	ldr	r1, [pc, #24]	; (8005ef4 <__assert_func+0x34>)
 8005edc:	f000 f80e 	bl	8005efc <fiprintf>
 8005ee0:	f000 faaa 	bl	8006438 <abort>
 8005ee4:	4b04      	ldr	r3, [pc, #16]	; (8005ef8 <__assert_func+0x38>)
 8005ee6:	461c      	mov	r4, r3
 8005ee8:	e7f3      	b.n	8005ed2 <__assert_func+0x12>
 8005eea:	bf00      	nop
 8005eec:	2000000c 	.word	0x2000000c
 8005ef0:	08006d05 	.word	0x08006d05
 8005ef4:	08006d12 	.word	0x08006d12
 8005ef8:	08006d40 	.word	0x08006d40

08005efc <fiprintf>:
 8005efc:	b40e      	push	{r1, r2, r3}
 8005efe:	b503      	push	{r0, r1, lr}
 8005f00:	4601      	mov	r1, r0
 8005f02:	ab03      	add	r3, sp, #12
 8005f04:	4805      	ldr	r0, [pc, #20]	; (8005f1c <fiprintf+0x20>)
 8005f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f0a:	6800      	ldr	r0, [r0, #0]
 8005f0c:	9301      	str	r3, [sp, #4]
 8005f0e:	f000 f895 	bl	800603c <_vfiprintf_r>
 8005f12:	b002      	add	sp, #8
 8005f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f18:	b003      	add	sp, #12
 8005f1a:	4770      	bx	lr
 8005f1c:	2000000c 	.word	0x2000000c

08005f20 <__ascii_mbtowc>:
 8005f20:	b082      	sub	sp, #8
 8005f22:	b901      	cbnz	r1, 8005f26 <__ascii_mbtowc+0x6>
 8005f24:	a901      	add	r1, sp, #4
 8005f26:	b142      	cbz	r2, 8005f3a <__ascii_mbtowc+0x1a>
 8005f28:	b14b      	cbz	r3, 8005f3e <__ascii_mbtowc+0x1e>
 8005f2a:	7813      	ldrb	r3, [r2, #0]
 8005f2c:	600b      	str	r3, [r1, #0]
 8005f2e:	7812      	ldrb	r2, [r2, #0]
 8005f30:	1e10      	subs	r0, r2, #0
 8005f32:	bf18      	it	ne
 8005f34:	2001      	movne	r0, #1
 8005f36:	b002      	add	sp, #8
 8005f38:	4770      	bx	lr
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	e7fb      	b.n	8005f36 <__ascii_mbtowc+0x16>
 8005f3e:	f06f 0001 	mvn.w	r0, #1
 8005f42:	e7f8      	b.n	8005f36 <__ascii_mbtowc+0x16>

08005f44 <memmove>:
 8005f44:	4288      	cmp	r0, r1
 8005f46:	b510      	push	{r4, lr}
 8005f48:	eb01 0402 	add.w	r4, r1, r2
 8005f4c:	d902      	bls.n	8005f54 <memmove+0x10>
 8005f4e:	4284      	cmp	r4, r0
 8005f50:	4623      	mov	r3, r4
 8005f52:	d807      	bhi.n	8005f64 <memmove+0x20>
 8005f54:	1e43      	subs	r3, r0, #1
 8005f56:	42a1      	cmp	r1, r4
 8005f58:	d008      	beq.n	8005f6c <memmove+0x28>
 8005f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f62:	e7f8      	b.n	8005f56 <memmove+0x12>
 8005f64:	4601      	mov	r1, r0
 8005f66:	4402      	add	r2, r0
 8005f68:	428a      	cmp	r2, r1
 8005f6a:	d100      	bne.n	8005f6e <memmove+0x2a>
 8005f6c:	bd10      	pop	{r4, pc}
 8005f6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f76:	e7f7      	b.n	8005f68 <memmove+0x24>

08005f78 <__malloc_lock>:
 8005f78:	4801      	ldr	r0, [pc, #4]	; (8005f80 <__malloc_lock+0x8>)
 8005f7a:	f000 bc19 	b.w	80067b0 <__retarget_lock_acquire_recursive>
 8005f7e:	bf00      	nop
 8005f80:	200003bc 	.word	0x200003bc

08005f84 <__malloc_unlock>:
 8005f84:	4801      	ldr	r0, [pc, #4]	; (8005f8c <__malloc_unlock+0x8>)
 8005f86:	f000 bc14 	b.w	80067b2 <__retarget_lock_release_recursive>
 8005f8a:	bf00      	nop
 8005f8c:	200003bc 	.word	0x200003bc

08005f90 <_realloc_r>:
 8005f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f94:	4680      	mov	r8, r0
 8005f96:	4614      	mov	r4, r2
 8005f98:	460e      	mov	r6, r1
 8005f9a:	b921      	cbnz	r1, 8005fa6 <_realloc_r+0x16>
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa2:	f7ff bdad 	b.w	8005b00 <_malloc_r>
 8005fa6:	b92a      	cbnz	r2, 8005fb4 <_realloc_r+0x24>
 8005fa8:	f7ff fd42 	bl	8005a30 <_free_r>
 8005fac:	4625      	mov	r5, r4
 8005fae:	4628      	mov	r0, r5
 8005fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fb4:	f000 fc64 	bl	8006880 <_malloc_usable_size_r>
 8005fb8:	4284      	cmp	r4, r0
 8005fba:	4607      	mov	r7, r0
 8005fbc:	d802      	bhi.n	8005fc4 <_realloc_r+0x34>
 8005fbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005fc2:	d812      	bhi.n	8005fea <_realloc_r+0x5a>
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	4640      	mov	r0, r8
 8005fc8:	f7ff fd9a 	bl	8005b00 <_malloc_r>
 8005fcc:	4605      	mov	r5, r0
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	d0ed      	beq.n	8005fae <_realloc_r+0x1e>
 8005fd2:	42bc      	cmp	r4, r7
 8005fd4:	4622      	mov	r2, r4
 8005fd6:	4631      	mov	r1, r6
 8005fd8:	bf28      	it	cs
 8005fda:	463a      	movcs	r2, r7
 8005fdc:	f7ff f984 	bl	80052e8 <memcpy>
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	f7ff fd24 	bl	8005a30 <_free_r>
 8005fe8:	e7e1      	b.n	8005fae <_realloc_r+0x1e>
 8005fea:	4635      	mov	r5, r6
 8005fec:	e7df      	b.n	8005fae <_realloc_r+0x1e>

08005fee <__sfputc_r>:
 8005fee:	6893      	ldr	r3, [r2, #8]
 8005ff0:	b410      	push	{r4}
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	6093      	str	r3, [r2, #8]
 8005ff8:	da07      	bge.n	800600a <__sfputc_r+0x1c>
 8005ffa:	6994      	ldr	r4, [r2, #24]
 8005ffc:	42a3      	cmp	r3, r4
 8005ffe:	db01      	blt.n	8006004 <__sfputc_r+0x16>
 8006000:	290a      	cmp	r1, #10
 8006002:	d102      	bne.n	800600a <__sfputc_r+0x1c>
 8006004:	bc10      	pop	{r4}
 8006006:	f000 b949 	b.w	800629c <__swbuf_r>
 800600a:	6813      	ldr	r3, [r2, #0]
 800600c:	1c58      	adds	r0, r3, #1
 800600e:	6010      	str	r0, [r2, #0]
 8006010:	7019      	strb	r1, [r3, #0]
 8006012:	4608      	mov	r0, r1
 8006014:	bc10      	pop	{r4}
 8006016:	4770      	bx	lr

08006018 <__sfputs_r>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	4606      	mov	r6, r0
 800601c:	460f      	mov	r7, r1
 800601e:	4614      	mov	r4, r2
 8006020:	18d5      	adds	r5, r2, r3
 8006022:	42ac      	cmp	r4, r5
 8006024:	d101      	bne.n	800602a <__sfputs_r+0x12>
 8006026:	2000      	movs	r0, #0
 8006028:	e007      	b.n	800603a <__sfputs_r+0x22>
 800602a:	463a      	mov	r2, r7
 800602c:	4630      	mov	r0, r6
 800602e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006032:	f7ff ffdc 	bl	8005fee <__sfputc_r>
 8006036:	1c43      	adds	r3, r0, #1
 8006038:	d1f3      	bne.n	8006022 <__sfputs_r+0xa>
 800603a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800603c <_vfiprintf_r>:
 800603c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006040:	460d      	mov	r5, r1
 8006042:	4614      	mov	r4, r2
 8006044:	4698      	mov	r8, r3
 8006046:	4606      	mov	r6, r0
 8006048:	b09d      	sub	sp, #116	; 0x74
 800604a:	b118      	cbz	r0, 8006054 <_vfiprintf_r+0x18>
 800604c:	6983      	ldr	r3, [r0, #24]
 800604e:	b90b      	cbnz	r3, 8006054 <_vfiprintf_r+0x18>
 8006050:	f000 fb10 	bl	8006674 <__sinit>
 8006054:	4b89      	ldr	r3, [pc, #548]	; (800627c <_vfiprintf_r+0x240>)
 8006056:	429d      	cmp	r5, r3
 8006058:	d11b      	bne.n	8006092 <_vfiprintf_r+0x56>
 800605a:	6875      	ldr	r5, [r6, #4]
 800605c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800605e:	07d9      	lsls	r1, r3, #31
 8006060:	d405      	bmi.n	800606e <_vfiprintf_r+0x32>
 8006062:	89ab      	ldrh	r3, [r5, #12]
 8006064:	059a      	lsls	r2, r3, #22
 8006066:	d402      	bmi.n	800606e <_vfiprintf_r+0x32>
 8006068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800606a:	f000 fba1 	bl	80067b0 <__retarget_lock_acquire_recursive>
 800606e:	89ab      	ldrh	r3, [r5, #12]
 8006070:	071b      	lsls	r3, r3, #28
 8006072:	d501      	bpl.n	8006078 <_vfiprintf_r+0x3c>
 8006074:	692b      	ldr	r3, [r5, #16]
 8006076:	b9eb      	cbnz	r3, 80060b4 <_vfiprintf_r+0x78>
 8006078:	4629      	mov	r1, r5
 800607a:	4630      	mov	r0, r6
 800607c:	f000 f96e 	bl	800635c <__swsetup_r>
 8006080:	b1c0      	cbz	r0, 80060b4 <_vfiprintf_r+0x78>
 8006082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006084:	07dc      	lsls	r4, r3, #31
 8006086:	d50e      	bpl.n	80060a6 <_vfiprintf_r+0x6a>
 8006088:	f04f 30ff 	mov.w	r0, #4294967295
 800608c:	b01d      	add	sp, #116	; 0x74
 800608e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006092:	4b7b      	ldr	r3, [pc, #492]	; (8006280 <_vfiprintf_r+0x244>)
 8006094:	429d      	cmp	r5, r3
 8006096:	d101      	bne.n	800609c <_vfiprintf_r+0x60>
 8006098:	68b5      	ldr	r5, [r6, #8]
 800609a:	e7df      	b.n	800605c <_vfiprintf_r+0x20>
 800609c:	4b79      	ldr	r3, [pc, #484]	; (8006284 <_vfiprintf_r+0x248>)
 800609e:	429d      	cmp	r5, r3
 80060a0:	bf08      	it	eq
 80060a2:	68f5      	ldreq	r5, [r6, #12]
 80060a4:	e7da      	b.n	800605c <_vfiprintf_r+0x20>
 80060a6:	89ab      	ldrh	r3, [r5, #12]
 80060a8:	0598      	lsls	r0, r3, #22
 80060aa:	d4ed      	bmi.n	8006088 <_vfiprintf_r+0x4c>
 80060ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060ae:	f000 fb80 	bl	80067b2 <__retarget_lock_release_recursive>
 80060b2:	e7e9      	b.n	8006088 <_vfiprintf_r+0x4c>
 80060b4:	2300      	movs	r3, #0
 80060b6:	9309      	str	r3, [sp, #36]	; 0x24
 80060b8:	2320      	movs	r3, #32
 80060ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060be:	2330      	movs	r3, #48	; 0x30
 80060c0:	f04f 0901 	mov.w	r9, #1
 80060c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80060c8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006288 <_vfiprintf_r+0x24c>
 80060cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060d0:	4623      	mov	r3, r4
 80060d2:	469a      	mov	sl, r3
 80060d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060d8:	b10a      	cbz	r2, 80060de <_vfiprintf_r+0xa2>
 80060da:	2a25      	cmp	r2, #37	; 0x25
 80060dc:	d1f9      	bne.n	80060d2 <_vfiprintf_r+0x96>
 80060de:	ebba 0b04 	subs.w	fp, sl, r4
 80060e2:	d00b      	beq.n	80060fc <_vfiprintf_r+0xc0>
 80060e4:	465b      	mov	r3, fp
 80060e6:	4622      	mov	r2, r4
 80060e8:	4629      	mov	r1, r5
 80060ea:	4630      	mov	r0, r6
 80060ec:	f7ff ff94 	bl	8006018 <__sfputs_r>
 80060f0:	3001      	adds	r0, #1
 80060f2:	f000 80aa 	beq.w	800624a <_vfiprintf_r+0x20e>
 80060f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060f8:	445a      	add	r2, fp
 80060fa:	9209      	str	r2, [sp, #36]	; 0x24
 80060fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80a2 	beq.w	800624a <_vfiprintf_r+0x20e>
 8006106:	2300      	movs	r3, #0
 8006108:	f04f 32ff 	mov.w	r2, #4294967295
 800610c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006110:	f10a 0a01 	add.w	sl, sl, #1
 8006114:	9304      	str	r3, [sp, #16]
 8006116:	9307      	str	r3, [sp, #28]
 8006118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800611c:	931a      	str	r3, [sp, #104]	; 0x68
 800611e:	4654      	mov	r4, sl
 8006120:	2205      	movs	r2, #5
 8006122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006126:	4858      	ldr	r0, [pc, #352]	; (8006288 <_vfiprintf_r+0x24c>)
 8006128:	f7ff f8d0 	bl	80052cc <memchr>
 800612c:	9a04      	ldr	r2, [sp, #16]
 800612e:	b9d8      	cbnz	r0, 8006168 <_vfiprintf_r+0x12c>
 8006130:	06d1      	lsls	r1, r2, #27
 8006132:	bf44      	itt	mi
 8006134:	2320      	movmi	r3, #32
 8006136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800613a:	0713      	lsls	r3, r2, #28
 800613c:	bf44      	itt	mi
 800613e:	232b      	movmi	r3, #43	; 0x2b
 8006140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006144:	f89a 3000 	ldrb.w	r3, [sl]
 8006148:	2b2a      	cmp	r3, #42	; 0x2a
 800614a:	d015      	beq.n	8006178 <_vfiprintf_r+0x13c>
 800614c:	4654      	mov	r4, sl
 800614e:	2000      	movs	r0, #0
 8006150:	f04f 0c0a 	mov.w	ip, #10
 8006154:	9a07      	ldr	r2, [sp, #28]
 8006156:	4621      	mov	r1, r4
 8006158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800615c:	3b30      	subs	r3, #48	; 0x30
 800615e:	2b09      	cmp	r3, #9
 8006160:	d94e      	bls.n	8006200 <_vfiprintf_r+0x1c4>
 8006162:	b1b0      	cbz	r0, 8006192 <_vfiprintf_r+0x156>
 8006164:	9207      	str	r2, [sp, #28]
 8006166:	e014      	b.n	8006192 <_vfiprintf_r+0x156>
 8006168:	eba0 0308 	sub.w	r3, r0, r8
 800616c:	fa09 f303 	lsl.w	r3, r9, r3
 8006170:	4313      	orrs	r3, r2
 8006172:	46a2      	mov	sl, r4
 8006174:	9304      	str	r3, [sp, #16]
 8006176:	e7d2      	b.n	800611e <_vfiprintf_r+0xe2>
 8006178:	9b03      	ldr	r3, [sp, #12]
 800617a:	1d19      	adds	r1, r3, #4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	9103      	str	r1, [sp, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	bfbb      	ittet	lt
 8006184:	425b      	neglt	r3, r3
 8006186:	f042 0202 	orrlt.w	r2, r2, #2
 800618a:	9307      	strge	r3, [sp, #28]
 800618c:	9307      	strlt	r3, [sp, #28]
 800618e:	bfb8      	it	lt
 8006190:	9204      	strlt	r2, [sp, #16]
 8006192:	7823      	ldrb	r3, [r4, #0]
 8006194:	2b2e      	cmp	r3, #46	; 0x2e
 8006196:	d10c      	bne.n	80061b2 <_vfiprintf_r+0x176>
 8006198:	7863      	ldrb	r3, [r4, #1]
 800619a:	2b2a      	cmp	r3, #42	; 0x2a
 800619c:	d135      	bne.n	800620a <_vfiprintf_r+0x1ce>
 800619e:	9b03      	ldr	r3, [sp, #12]
 80061a0:	3402      	adds	r4, #2
 80061a2:	1d1a      	adds	r2, r3, #4
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	9203      	str	r2, [sp, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	bfb8      	it	lt
 80061ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80061b0:	9305      	str	r3, [sp, #20]
 80061b2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800628c <_vfiprintf_r+0x250>
 80061b6:	2203      	movs	r2, #3
 80061b8:	4650      	mov	r0, sl
 80061ba:	7821      	ldrb	r1, [r4, #0]
 80061bc:	f7ff f886 	bl	80052cc <memchr>
 80061c0:	b140      	cbz	r0, 80061d4 <_vfiprintf_r+0x198>
 80061c2:	2340      	movs	r3, #64	; 0x40
 80061c4:	eba0 000a 	sub.w	r0, r0, sl
 80061c8:	fa03 f000 	lsl.w	r0, r3, r0
 80061cc:	9b04      	ldr	r3, [sp, #16]
 80061ce:	3401      	adds	r4, #1
 80061d0:	4303      	orrs	r3, r0
 80061d2:	9304      	str	r3, [sp, #16]
 80061d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d8:	2206      	movs	r2, #6
 80061da:	482d      	ldr	r0, [pc, #180]	; (8006290 <_vfiprintf_r+0x254>)
 80061dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061e0:	f7ff f874 	bl	80052cc <memchr>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d03f      	beq.n	8006268 <_vfiprintf_r+0x22c>
 80061e8:	4b2a      	ldr	r3, [pc, #168]	; (8006294 <_vfiprintf_r+0x258>)
 80061ea:	bb1b      	cbnz	r3, 8006234 <_vfiprintf_r+0x1f8>
 80061ec:	9b03      	ldr	r3, [sp, #12]
 80061ee:	3307      	adds	r3, #7
 80061f0:	f023 0307 	bic.w	r3, r3, #7
 80061f4:	3308      	adds	r3, #8
 80061f6:	9303      	str	r3, [sp, #12]
 80061f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061fa:	443b      	add	r3, r7
 80061fc:	9309      	str	r3, [sp, #36]	; 0x24
 80061fe:	e767      	b.n	80060d0 <_vfiprintf_r+0x94>
 8006200:	460c      	mov	r4, r1
 8006202:	2001      	movs	r0, #1
 8006204:	fb0c 3202 	mla	r2, ip, r2, r3
 8006208:	e7a5      	b.n	8006156 <_vfiprintf_r+0x11a>
 800620a:	2300      	movs	r3, #0
 800620c:	f04f 0c0a 	mov.w	ip, #10
 8006210:	4619      	mov	r1, r3
 8006212:	3401      	adds	r4, #1
 8006214:	9305      	str	r3, [sp, #20]
 8006216:	4620      	mov	r0, r4
 8006218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800621c:	3a30      	subs	r2, #48	; 0x30
 800621e:	2a09      	cmp	r2, #9
 8006220:	d903      	bls.n	800622a <_vfiprintf_r+0x1ee>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0c5      	beq.n	80061b2 <_vfiprintf_r+0x176>
 8006226:	9105      	str	r1, [sp, #20]
 8006228:	e7c3      	b.n	80061b2 <_vfiprintf_r+0x176>
 800622a:	4604      	mov	r4, r0
 800622c:	2301      	movs	r3, #1
 800622e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006232:	e7f0      	b.n	8006216 <_vfiprintf_r+0x1da>
 8006234:	ab03      	add	r3, sp, #12
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	462a      	mov	r2, r5
 800623a:	4630      	mov	r0, r6
 800623c:	4b16      	ldr	r3, [pc, #88]	; (8006298 <_vfiprintf_r+0x25c>)
 800623e:	a904      	add	r1, sp, #16
 8006240:	f7fd fdda 	bl	8003df8 <_printf_float>
 8006244:	4607      	mov	r7, r0
 8006246:	1c78      	adds	r0, r7, #1
 8006248:	d1d6      	bne.n	80061f8 <_vfiprintf_r+0x1bc>
 800624a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800624c:	07d9      	lsls	r1, r3, #31
 800624e:	d405      	bmi.n	800625c <_vfiprintf_r+0x220>
 8006250:	89ab      	ldrh	r3, [r5, #12]
 8006252:	059a      	lsls	r2, r3, #22
 8006254:	d402      	bmi.n	800625c <_vfiprintf_r+0x220>
 8006256:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006258:	f000 faab 	bl	80067b2 <__retarget_lock_release_recursive>
 800625c:	89ab      	ldrh	r3, [r5, #12]
 800625e:	065b      	lsls	r3, r3, #25
 8006260:	f53f af12 	bmi.w	8006088 <_vfiprintf_r+0x4c>
 8006264:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006266:	e711      	b.n	800608c <_vfiprintf_r+0x50>
 8006268:	ab03      	add	r3, sp, #12
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	462a      	mov	r2, r5
 800626e:	4630      	mov	r0, r6
 8006270:	4b09      	ldr	r3, [pc, #36]	; (8006298 <_vfiprintf_r+0x25c>)
 8006272:	a904      	add	r1, sp, #16
 8006274:	f7fe f85c 	bl	8004330 <_printf_i>
 8006278:	e7e4      	b.n	8006244 <_vfiprintf_r+0x208>
 800627a:	bf00      	nop
 800627c:	08006e6c 	.word	0x08006e6c
 8006280:	08006e8c 	.word	0x08006e8c
 8006284:	08006e4c 	.word	0x08006e4c
 8006288:	08006cf4 	.word	0x08006cf4
 800628c:	08006cfa 	.word	0x08006cfa
 8006290:	08006cfe 	.word	0x08006cfe
 8006294:	08003df9 	.word	0x08003df9
 8006298:	08006019 	.word	0x08006019

0800629c <__swbuf_r>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	460e      	mov	r6, r1
 80062a0:	4614      	mov	r4, r2
 80062a2:	4605      	mov	r5, r0
 80062a4:	b118      	cbz	r0, 80062ae <__swbuf_r+0x12>
 80062a6:	6983      	ldr	r3, [r0, #24]
 80062a8:	b90b      	cbnz	r3, 80062ae <__swbuf_r+0x12>
 80062aa:	f000 f9e3 	bl	8006674 <__sinit>
 80062ae:	4b21      	ldr	r3, [pc, #132]	; (8006334 <__swbuf_r+0x98>)
 80062b0:	429c      	cmp	r4, r3
 80062b2:	d12b      	bne.n	800630c <__swbuf_r+0x70>
 80062b4:	686c      	ldr	r4, [r5, #4]
 80062b6:	69a3      	ldr	r3, [r4, #24]
 80062b8:	60a3      	str	r3, [r4, #8]
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	071a      	lsls	r2, r3, #28
 80062be:	d52f      	bpl.n	8006320 <__swbuf_r+0x84>
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	b36b      	cbz	r3, 8006320 <__swbuf_r+0x84>
 80062c4:	6923      	ldr	r3, [r4, #16]
 80062c6:	6820      	ldr	r0, [r4, #0]
 80062c8:	b2f6      	uxtb	r6, r6
 80062ca:	1ac0      	subs	r0, r0, r3
 80062cc:	6963      	ldr	r3, [r4, #20]
 80062ce:	4637      	mov	r7, r6
 80062d0:	4283      	cmp	r3, r0
 80062d2:	dc04      	bgt.n	80062de <__swbuf_r+0x42>
 80062d4:	4621      	mov	r1, r4
 80062d6:	4628      	mov	r0, r5
 80062d8:	f000 f938 	bl	800654c <_fflush_r>
 80062dc:	bb30      	cbnz	r0, 800632c <__swbuf_r+0x90>
 80062de:	68a3      	ldr	r3, [r4, #8]
 80062e0:	3001      	adds	r0, #1
 80062e2:	3b01      	subs	r3, #1
 80062e4:	60a3      	str	r3, [r4, #8]
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	6022      	str	r2, [r4, #0]
 80062ec:	701e      	strb	r6, [r3, #0]
 80062ee:	6963      	ldr	r3, [r4, #20]
 80062f0:	4283      	cmp	r3, r0
 80062f2:	d004      	beq.n	80062fe <__swbuf_r+0x62>
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	07db      	lsls	r3, r3, #31
 80062f8:	d506      	bpl.n	8006308 <__swbuf_r+0x6c>
 80062fa:	2e0a      	cmp	r6, #10
 80062fc:	d104      	bne.n	8006308 <__swbuf_r+0x6c>
 80062fe:	4621      	mov	r1, r4
 8006300:	4628      	mov	r0, r5
 8006302:	f000 f923 	bl	800654c <_fflush_r>
 8006306:	b988      	cbnz	r0, 800632c <__swbuf_r+0x90>
 8006308:	4638      	mov	r0, r7
 800630a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800630c:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <__swbuf_r+0x9c>)
 800630e:	429c      	cmp	r4, r3
 8006310:	d101      	bne.n	8006316 <__swbuf_r+0x7a>
 8006312:	68ac      	ldr	r4, [r5, #8]
 8006314:	e7cf      	b.n	80062b6 <__swbuf_r+0x1a>
 8006316:	4b09      	ldr	r3, [pc, #36]	; (800633c <__swbuf_r+0xa0>)
 8006318:	429c      	cmp	r4, r3
 800631a:	bf08      	it	eq
 800631c:	68ec      	ldreq	r4, [r5, #12]
 800631e:	e7ca      	b.n	80062b6 <__swbuf_r+0x1a>
 8006320:	4621      	mov	r1, r4
 8006322:	4628      	mov	r0, r5
 8006324:	f000 f81a 	bl	800635c <__swsetup_r>
 8006328:	2800      	cmp	r0, #0
 800632a:	d0cb      	beq.n	80062c4 <__swbuf_r+0x28>
 800632c:	f04f 37ff 	mov.w	r7, #4294967295
 8006330:	e7ea      	b.n	8006308 <__swbuf_r+0x6c>
 8006332:	bf00      	nop
 8006334:	08006e6c 	.word	0x08006e6c
 8006338:	08006e8c 	.word	0x08006e8c
 800633c:	08006e4c 	.word	0x08006e4c

08006340 <__ascii_wctomb>:
 8006340:	4603      	mov	r3, r0
 8006342:	4608      	mov	r0, r1
 8006344:	b141      	cbz	r1, 8006358 <__ascii_wctomb+0x18>
 8006346:	2aff      	cmp	r2, #255	; 0xff
 8006348:	d904      	bls.n	8006354 <__ascii_wctomb+0x14>
 800634a:	228a      	movs	r2, #138	; 0x8a
 800634c:	f04f 30ff 	mov.w	r0, #4294967295
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	4770      	bx	lr
 8006354:	2001      	movs	r0, #1
 8006356:	700a      	strb	r2, [r1, #0]
 8006358:	4770      	bx	lr
	...

0800635c <__swsetup_r>:
 800635c:	4b32      	ldr	r3, [pc, #200]	; (8006428 <__swsetup_r+0xcc>)
 800635e:	b570      	push	{r4, r5, r6, lr}
 8006360:	681d      	ldr	r5, [r3, #0]
 8006362:	4606      	mov	r6, r0
 8006364:	460c      	mov	r4, r1
 8006366:	b125      	cbz	r5, 8006372 <__swsetup_r+0x16>
 8006368:	69ab      	ldr	r3, [r5, #24]
 800636a:	b913      	cbnz	r3, 8006372 <__swsetup_r+0x16>
 800636c:	4628      	mov	r0, r5
 800636e:	f000 f981 	bl	8006674 <__sinit>
 8006372:	4b2e      	ldr	r3, [pc, #184]	; (800642c <__swsetup_r+0xd0>)
 8006374:	429c      	cmp	r4, r3
 8006376:	d10f      	bne.n	8006398 <__swsetup_r+0x3c>
 8006378:	686c      	ldr	r4, [r5, #4]
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006380:	0719      	lsls	r1, r3, #28
 8006382:	d42c      	bmi.n	80063de <__swsetup_r+0x82>
 8006384:	06dd      	lsls	r5, r3, #27
 8006386:	d411      	bmi.n	80063ac <__swsetup_r+0x50>
 8006388:	2309      	movs	r3, #9
 800638a:	6033      	str	r3, [r6, #0]
 800638c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006390:	f04f 30ff 	mov.w	r0, #4294967295
 8006394:	81a3      	strh	r3, [r4, #12]
 8006396:	e03e      	b.n	8006416 <__swsetup_r+0xba>
 8006398:	4b25      	ldr	r3, [pc, #148]	; (8006430 <__swsetup_r+0xd4>)
 800639a:	429c      	cmp	r4, r3
 800639c:	d101      	bne.n	80063a2 <__swsetup_r+0x46>
 800639e:	68ac      	ldr	r4, [r5, #8]
 80063a0:	e7eb      	b.n	800637a <__swsetup_r+0x1e>
 80063a2:	4b24      	ldr	r3, [pc, #144]	; (8006434 <__swsetup_r+0xd8>)
 80063a4:	429c      	cmp	r4, r3
 80063a6:	bf08      	it	eq
 80063a8:	68ec      	ldreq	r4, [r5, #12]
 80063aa:	e7e6      	b.n	800637a <__swsetup_r+0x1e>
 80063ac:	0758      	lsls	r0, r3, #29
 80063ae:	d512      	bpl.n	80063d6 <__swsetup_r+0x7a>
 80063b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063b2:	b141      	cbz	r1, 80063c6 <__swsetup_r+0x6a>
 80063b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063b8:	4299      	cmp	r1, r3
 80063ba:	d002      	beq.n	80063c2 <__swsetup_r+0x66>
 80063bc:	4630      	mov	r0, r6
 80063be:	f7ff fb37 	bl	8005a30 <_free_r>
 80063c2:	2300      	movs	r3, #0
 80063c4:	6363      	str	r3, [r4, #52]	; 0x34
 80063c6:	89a3      	ldrh	r3, [r4, #12]
 80063c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063cc:	81a3      	strh	r3, [r4, #12]
 80063ce:	2300      	movs	r3, #0
 80063d0:	6063      	str	r3, [r4, #4]
 80063d2:	6923      	ldr	r3, [r4, #16]
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	f043 0308 	orr.w	r3, r3, #8
 80063dc:	81a3      	strh	r3, [r4, #12]
 80063de:	6923      	ldr	r3, [r4, #16]
 80063e0:	b94b      	cbnz	r3, 80063f6 <__swsetup_r+0x9a>
 80063e2:	89a3      	ldrh	r3, [r4, #12]
 80063e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ec:	d003      	beq.n	80063f6 <__swsetup_r+0x9a>
 80063ee:	4621      	mov	r1, r4
 80063f0:	4630      	mov	r0, r6
 80063f2:	f000 fa05 	bl	8006800 <__smakebuf_r>
 80063f6:	89a0      	ldrh	r0, [r4, #12]
 80063f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063fc:	f010 0301 	ands.w	r3, r0, #1
 8006400:	d00a      	beq.n	8006418 <__swsetup_r+0xbc>
 8006402:	2300      	movs	r3, #0
 8006404:	60a3      	str	r3, [r4, #8]
 8006406:	6963      	ldr	r3, [r4, #20]
 8006408:	425b      	negs	r3, r3
 800640a:	61a3      	str	r3, [r4, #24]
 800640c:	6923      	ldr	r3, [r4, #16]
 800640e:	b943      	cbnz	r3, 8006422 <__swsetup_r+0xc6>
 8006410:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006414:	d1ba      	bne.n	800638c <__swsetup_r+0x30>
 8006416:	bd70      	pop	{r4, r5, r6, pc}
 8006418:	0781      	lsls	r1, r0, #30
 800641a:	bf58      	it	pl
 800641c:	6963      	ldrpl	r3, [r4, #20]
 800641e:	60a3      	str	r3, [r4, #8]
 8006420:	e7f4      	b.n	800640c <__swsetup_r+0xb0>
 8006422:	2000      	movs	r0, #0
 8006424:	e7f7      	b.n	8006416 <__swsetup_r+0xba>
 8006426:	bf00      	nop
 8006428:	2000000c 	.word	0x2000000c
 800642c:	08006e6c 	.word	0x08006e6c
 8006430:	08006e8c 	.word	0x08006e8c
 8006434:	08006e4c 	.word	0x08006e4c

08006438 <abort>:
 8006438:	2006      	movs	r0, #6
 800643a:	b508      	push	{r3, lr}
 800643c:	f000 fa50 	bl	80068e0 <raise>
 8006440:	2001      	movs	r0, #1
 8006442:	f7fb fa15 	bl	8001870 <_exit>
	...

08006448 <__sflush_r>:
 8006448:	898a      	ldrh	r2, [r1, #12]
 800644a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644c:	4605      	mov	r5, r0
 800644e:	0710      	lsls	r0, r2, #28
 8006450:	460c      	mov	r4, r1
 8006452:	d457      	bmi.n	8006504 <__sflush_r+0xbc>
 8006454:	684b      	ldr	r3, [r1, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	dc04      	bgt.n	8006464 <__sflush_r+0x1c>
 800645a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800645c:	2b00      	cmp	r3, #0
 800645e:	dc01      	bgt.n	8006464 <__sflush_r+0x1c>
 8006460:	2000      	movs	r0, #0
 8006462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006464:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006466:	2e00      	cmp	r6, #0
 8006468:	d0fa      	beq.n	8006460 <__sflush_r+0x18>
 800646a:	2300      	movs	r3, #0
 800646c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006470:	682f      	ldr	r7, [r5, #0]
 8006472:	602b      	str	r3, [r5, #0]
 8006474:	d032      	beq.n	80064dc <__sflush_r+0x94>
 8006476:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006478:	89a3      	ldrh	r3, [r4, #12]
 800647a:	075a      	lsls	r2, r3, #29
 800647c:	d505      	bpl.n	800648a <__sflush_r+0x42>
 800647e:	6863      	ldr	r3, [r4, #4]
 8006480:	1ac0      	subs	r0, r0, r3
 8006482:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006484:	b10b      	cbz	r3, 800648a <__sflush_r+0x42>
 8006486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006488:	1ac0      	subs	r0, r0, r3
 800648a:	2300      	movs	r3, #0
 800648c:	4602      	mov	r2, r0
 800648e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006490:	4628      	mov	r0, r5
 8006492:	6a21      	ldr	r1, [r4, #32]
 8006494:	47b0      	blx	r6
 8006496:	1c43      	adds	r3, r0, #1
 8006498:	89a3      	ldrh	r3, [r4, #12]
 800649a:	d106      	bne.n	80064aa <__sflush_r+0x62>
 800649c:	6829      	ldr	r1, [r5, #0]
 800649e:	291d      	cmp	r1, #29
 80064a0:	d82c      	bhi.n	80064fc <__sflush_r+0xb4>
 80064a2:	4a29      	ldr	r2, [pc, #164]	; (8006548 <__sflush_r+0x100>)
 80064a4:	40ca      	lsrs	r2, r1
 80064a6:	07d6      	lsls	r6, r2, #31
 80064a8:	d528      	bpl.n	80064fc <__sflush_r+0xb4>
 80064aa:	2200      	movs	r2, #0
 80064ac:	6062      	str	r2, [r4, #4]
 80064ae:	6922      	ldr	r2, [r4, #16]
 80064b0:	04d9      	lsls	r1, r3, #19
 80064b2:	6022      	str	r2, [r4, #0]
 80064b4:	d504      	bpl.n	80064c0 <__sflush_r+0x78>
 80064b6:	1c42      	adds	r2, r0, #1
 80064b8:	d101      	bne.n	80064be <__sflush_r+0x76>
 80064ba:	682b      	ldr	r3, [r5, #0]
 80064bc:	b903      	cbnz	r3, 80064c0 <__sflush_r+0x78>
 80064be:	6560      	str	r0, [r4, #84]	; 0x54
 80064c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064c2:	602f      	str	r7, [r5, #0]
 80064c4:	2900      	cmp	r1, #0
 80064c6:	d0cb      	beq.n	8006460 <__sflush_r+0x18>
 80064c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064cc:	4299      	cmp	r1, r3
 80064ce:	d002      	beq.n	80064d6 <__sflush_r+0x8e>
 80064d0:	4628      	mov	r0, r5
 80064d2:	f7ff faad 	bl	8005a30 <_free_r>
 80064d6:	2000      	movs	r0, #0
 80064d8:	6360      	str	r0, [r4, #52]	; 0x34
 80064da:	e7c2      	b.n	8006462 <__sflush_r+0x1a>
 80064dc:	6a21      	ldr	r1, [r4, #32]
 80064de:	2301      	movs	r3, #1
 80064e0:	4628      	mov	r0, r5
 80064e2:	47b0      	blx	r6
 80064e4:	1c41      	adds	r1, r0, #1
 80064e6:	d1c7      	bne.n	8006478 <__sflush_r+0x30>
 80064e8:	682b      	ldr	r3, [r5, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d0c4      	beq.n	8006478 <__sflush_r+0x30>
 80064ee:	2b1d      	cmp	r3, #29
 80064f0:	d001      	beq.n	80064f6 <__sflush_r+0xae>
 80064f2:	2b16      	cmp	r3, #22
 80064f4:	d101      	bne.n	80064fa <__sflush_r+0xb2>
 80064f6:	602f      	str	r7, [r5, #0]
 80064f8:	e7b2      	b.n	8006460 <__sflush_r+0x18>
 80064fa:	89a3      	ldrh	r3, [r4, #12]
 80064fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006500:	81a3      	strh	r3, [r4, #12]
 8006502:	e7ae      	b.n	8006462 <__sflush_r+0x1a>
 8006504:	690f      	ldr	r7, [r1, #16]
 8006506:	2f00      	cmp	r7, #0
 8006508:	d0aa      	beq.n	8006460 <__sflush_r+0x18>
 800650a:	0793      	lsls	r3, r2, #30
 800650c:	bf18      	it	ne
 800650e:	2300      	movne	r3, #0
 8006510:	680e      	ldr	r6, [r1, #0]
 8006512:	bf08      	it	eq
 8006514:	694b      	ldreq	r3, [r1, #20]
 8006516:	1bf6      	subs	r6, r6, r7
 8006518:	600f      	str	r7, [r1, #0]
 800651a:	608b      	str	r3, [r1, #8]
 800651c:	2e00      	cmp	r6, #0
 800651e:	dd9f      	ble.n	8006460 <__sflush_r+0x18>
 8006520:	4633      	mov	r3, r6
 8006522:	463a      	mov	r2, r7
 8006524:	4628      	mov	r0, r5
 8006526:	6a21      	ldr	r1, [r4, #32]
 8006528:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800652c:	47e0      	blx	ip
 800652e:	2800      	cmp	r0, #0
 8006530:	dc06      	bgt.n	8006540 <__sflush_r+0xf8>
 8006532:	89a3      	ldrh	r3, [r4, #12]
 8006534:	f04f 30ff 	mov.w	r0, #4294967295
 8006538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800653c:	81a3      	strh	r3, [r4, #12]
 800653e:	e790      	b.n	8006462 <__sflush_r+0x1a>
 8006540:	4407      	add	r7, r0
 8006542:	1a36      	subs	r6, r6, r0
 8006544:	e7ea      	b.n	800651c <__sflush_r+0xd4>
 8006546:	bf00      	nop
 8006548:	20400001 	.word	0x20400001

0800654c <_fflush_r>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	690b      	ldr	r3, [r1, #16]
 8006550:	4605      	mov	r5, r0
 8006552:	460c      	mov	r4, r1
 8006554:	b913      	cbnz	r3, 800655c <_fflush_r+0x10>
 8006556:	2500      	movs	r5, #0
 8006558:	4628      	mov	r0, r5
 800655a:	bd38      	pop	{r3, r4, r5, pc}
 800655c:	b118      	cbz	r0, 8006566 <_fflush_r+0x1a>
 800655e:	6983      	ldr	r3, [r0, #24]
 8006560:	b90b      	cbnz	r3, 8006566 <_fflush_r+0x1a>
 8006562:	f000 f887 	bl	8006674 <__sinit>
 8006566:	4b14      	ldr	r3, [pc, #80]	; (80065b8 <_fflush_r+0x6c>)
 8006568:	429c      	cmp	r4, r3
 800656a:	d11b      	bne.n	80065a4 <_fflush_r+0x58>
 800656c:	686c      	ldr	r4, [r5, #4]
 800656e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0ef      	beq.n	8006556 <_fflush_r+0xa>
 8006576:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006578:	07d0      	lsls	r0, r2, #31
 800657a:	d404      	bmi.n	8006586 <_fflush_r+0x3a>
 800657c:	0599      	lsls	r1, r3, #22
 800657e:	d402      	bmi.n	8006586 <_fflush_r+0x3a>
 8006580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006582:	f000 f915 	bl	80067b0 <__retarget_lock_acquire_recursive>
 8006586:	4628      	mov	r0, r5
 8006588:	4621      	mov	r1, r4
 800658a:	f7ff ff5d 	bl	8006448 <__sflush_r>
 800658e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006590:	4605      	mov	r5, r0
 8006592:	07da      	lsls	r2, r3, #31
 8006594:	d4e0      	bmi.n	8006558 <_fflush_r+0xc>
 8006596:	89a3      	ldrh	r3, [r4, #12]
 8006598:	059b      	lsls	r3, r3, #22
 800659a:	d4dd      	bmi.n	8006558 <_fflush_r+0xc>
 800659c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800659e:	f000 f908 	bl	80067b2 <__retarget_lock_release_recursive>
 80065a2:	e7d9      	b.n	8006558 <_fflush_r+0xc>
 80065a4:	4b05      	ldr	r3, [pc, #20]	; (80065bc <_fflush_r+0x70>)
 80065a6:	429c      	cmp	r4, r3
 80065a8:	d101      	bne.n	80065ae <_fflush_r+0x62>
 80065aa:	68ac      	ldr	r4, [r5, #8]
 80065ac:	e7df      	b.n	800656e <_fflush_r+0x22>
 80065ae:	4b04      	ldr	r3, [pc, #16]	; (80065c0 <_fflush_r+0x74>)
 80065b0:	429c      	cmp	r4, r3
 80065b2:	bf08      	it	eq
 80065b4:	68ec      	ldreq	r4, [r5, #12]
 80065b6:	e7da      	b.n	800656e <_fflush_r+0x22>
 80065b8:	08006e6c 	.word	0x08006e6c
 80065bc:	08006e8c 	.word	0x08006e8c
 80065c0:	08006e4c 	.word	0x08006e4c

080065c4 <std>:
 80065c4:	2300      	movs	r3, #0
 80065c6:	b510      	push	{r4, lr}
 80065c8:	4604      	mov	r4, r0
 80065ca:	e9c0 3300 	strd	r3, r3, [r0]
 80065ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065d2:	6083      	str	r3, [r0, #8]
 80065d4:	8181      	strh	r1, [r0, #12]
 80065d6:	6643      	str	r3, [r0, #100]	; 0x64
 80065d8:	81c2      	strh	r2, [r0, #14]
 80065da:	6183      	str	r3, [r0, #24]
 80065dc:	4619      	mov	r1, r3
 80065de:	2208      	movs	r2, #8
 80065e0:	305c      	adds	r0, #92	; 0x5c
 80065e2:	f7fd fb63 	bl	8003cac <memset>
 80065e6:	4b05      	ldr	r3, [pc, #20]	; (80065fc <std+0x38>)
 80065e8:	6224      	str	r4, [r4, #32]
 80065ea:	6263      	str	r3, [r4, #36]	; 0x24
 80065ec:	4b04      	ldr	r3, [pc, #16]	; (8006600 <std+0x3c>)
 80065ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80065f0:	4b04      	ldr	r3, [pc, #16]	; (8006604 <std+0x40>)
 80065f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065f4:	4b04      	ldr	r3, [pc, #16]	; (8006608 <std+0x44>)
 80065f6:	6323      	str	r3, [r4, #48]	; 0x30
 80065f8:	bd10      	pop	{r4, pc}
 80065fa:	bf00      	nop
 80065fc:	08006919 	.word	0x08006919
 8006600:	0800693b 	.word	0x0800693b
 8006604:	08006973 	.word	0x08006973
 8006608:	08006997 	.word	0x08006997

0800660c <_cleanup_r>:
 800660c:	4901      	ldr	r1, [pc, #4]	; (8006614 <_cleanup_r+0x8>)
 800660e:	f000 b8af 	b.w	8006770 <_fwalk_reent>
 8006612:	bf00      	nop
 8006614:	0800654d 	.word	0x0800654d

08006618 <__sfmoreglue>:
 8006618:	2268      	movs	r2, #104	; 0x68
 800661a:	b570      	push	{r4, r5, r6, lr}
 800661c:	1e4d      	subs	r5, r1, #1
 800661e:	4355      	muls	r5, r2
 8006620:	460e      	mov	r6, r1
 8006622:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006626:	f7ff fa6b 	bl	8005b00 <_malloc_r>
 800662a:	4604      	mov	r4, r0
 800662c:	b140      	cbz	r0, 8006640 <__sfmoreglue+0x28>
 800662e:	2100      	movs	r1, #0
 8006630:	e9c0 1600 	strd	r1, r6, [r0]
 8006634:	300c      	adds	r0, #12
 8006636:	60a0      	str	r0, [r4, #8]
 8006638:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800663c:	f7fd fb36 	bl	8003cac <memset>
 8006640:	4620      	mov	r0, r4
 8006642:	bd70      	pop	{r4, r5, r6, pc}

08006644 <__sfp_lock_acquire>:
 8006644:	4801      	ldr	r0, [pc, #4]	; (800664c <__sfp_lock_acquire+0x8>)
 8006646:	f000 b8b3 	b.w	80067b0 <__retarget_lock_acquire_recursive>
 800664a:	bf00      	nop
 800664c:	200003bd 	.word	0x200003bd

08006650 <__sfp_lock_release>:
 8006650:	4801      	ldr	r0, [pc, #4]	; (8006658 <__sfp_lock_release+0x8>)
 8006652:	f000 b8ae 	b.w	80067b2 <__retarget_lock_release_recursive>
 8006656:	bf00      	nop
 8006658:	200003bd 	.word	0x200003bd

0800665c <__sinit_lock_acquire>:
 800665c:	4801      	ldr	r0, [pc, #4]	; (8006664 <__sinit_lock_acquire+0x8>)
 800665e:	f000 b8a7 	b.w	80067b0 <__retarget_lock_acquire_recursive>
 8006662:	bf00      	nop
 8006664:	200003be 	.word	0x200003be

08006668 <__sinit_lock_release>:
 8006668:	4801      	ldr	r0, [pc, #4]	; (8006670 <__sinit_lock_release+0x8>)
 800666a:	f000 b8a2 	b.w	80067b2 <__retarget_lock_release_recursive>
 800666e:	bf00      	nop
 8006670:	200003be 	.word	0x200003be

08006674 <__sinit>:
 8006674:	b510      	push	{r4, lr}
 8006676:	4604      	mov	r4, r0
 8006678:	f7ff fff0 	bl	800665c <__sinit_lock_acquire>
 800667c:	69a3      	ldr	r3, [r4, #24]
 800667e:	b11b      	cbz	r3, 8006688 <__sinit+0x14>
 8006680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006684:	f7ff bff0 	b.w	8006668 <__sinit_lock_release>
 8006688:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800668c:	6523      	str	r3, [r4, #80]	; 0x50
 800668e:	4b13      	ldr	r3, [pc, #76]	; (80066dc <__sinit+0x68>)
 8006690:	4a13      	ldr	r2, [pc, #76]	; (80066e0 <__sinit+0x6c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	62a2      	str	r2, [r4, #40]	; 0x28
 8006696:	42a3      	cmp	r3, r4
 8006698:	bf08      	it	eq
 800669a:	2301      	moveq	r3, #1
 800669c:	4620      	mov	r0, r4
 800669e:	bf08      	it	eq
 80066a0:	61a3      	streq	r3, [r4, #24]
 80066a2:	f000 f81f 	bl	80066e4 <__sfp>
 80066a6:	6060      	str	r0, [r4, #4]
 80066a8:	4620      	mov	r0, r4
 80066aa:	f000 f81b 	bl	80066e4 <__sfp>
 80066ae:	60a0      	str	r0, [r4, #8]
 80066b0:	4620      	mov	r0, r4
 80066b2:	f000 f817 	bl	80066e4 <__sfp>
 80066b6:	2200      	movs	r2, #0
 80066b8:	2104      	movs	r1, #4
 80066ba:	60e0      	str	r0, [r4, #12]
 80066bc:	6860      	ldr	r0, [r4, #4]
 80066be:	f7ff ff81 	bl	80065c4 <std>
 80066c2:	2201      	movs	r2, #1
 80066c4:	2109      	movs	r1, #9
 80066c6:	68a0      	ldr	r0, [r4, #8]
 80066c8:	f7ff ff7c 	bl	80065c4 <std>
 80066cc:	2202      	movs	r2, #2
 80066ce:	2112      	movs	r1, #18
 80066d0:	68e0      	ldr	r0, [r4, #12]
 80066d2:	f7ff ff77 	bl	80065c4 <std>
 80066d6:	2301      	movs	r3, #1
 80066d8:	61a3      	str	r3, [r4, #24]
 80066da:	e7d1      	b.n	8006680 <__sinit+0xc>
 80066dc:	08006ad4 	.word	0x08006ad4
 80066e0:	0800660d 	.word	0x0800660d

080066e4 <__sfp>:
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	4607      	mov	r7, r0
 80066e8:	f7ff ffac 	bl	8006644 <__sfp_lock_acquire>
 80066ec:	4b1e      	ldr	r3, [pc, #120]	; (8006768 <__sfp+0x84>)
 80066ee:	681e      	ldr	r6, [r3, #0]
 80066f0:	69b3      	ldr	r3, [r6, #24]
 80066f2:	b913      	cbnz	r3, 80066fa <__sfp+0x16>
 80066f4:	4630      	mov	r0, r6
 80066f6:	f7ff ffbd 	bl	8006674 <__sinit>
 80066fa:	3648      	adds	r6, #72	; 0x48
 80066fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006700:	3b01      	subs	r3, #1
 8006702:	d503      	bpl.n	800670c <__sfp+0x28>
 8006704:	6833      	ldr	r3, [r6, #0]
 8006706:	b30b      	cbz	r3, 800674c <__sfp+0x68>
 8006708:	6836      	ldr	r6, [r6, #0]
 800670a:	e7f7      	b.n	80066fc <__sfp+0x18>
 800670c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006710:	b9d5      	cbnz	r5, 8006748 <__sfp+0x64>
 8006712:	4b16      	ldr	r3, [pc, #88]	; (800676c <__sfp+0x88>)
 8006714:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006718:	60e3      	str	r3, [r4, #12]
 800671a:	6665      	str	r5, [r4, #100]	; 0x64
 800671c:	f000 f847 	bl	80067ae <__retarget_lock_init_recursive>
 8006720:	f7ff ff96 	bl	8006650 <__sfp_lock_release>
 8006724:	2208      	movs	r2, #8
 8006726:	4629      	mov	r1, r5
 8006728:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800672c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006730:	6025      	str	r5, [r4, #0]
 8006732:	61a5      	str	r5, [r4, #24]
 8006734:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006738:	f7fd fab8 	bl	8003cac <memset>
 800673c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006740:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006744:	4620      	mov	r0, r4
 8006746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006748:	3468      	adds	r4, #104	; 0x68
 800674a:	e7d9      	b.n	8006700 <__sfp+0x1c>
 800674c:	2104      	movs	r1, #4
 800674e:	4638      	mov	r0, r7
 8006750:	f7ff ff62 	bl	8006618 <__sfmoreglue>
 8006754:	4604      	mov	r4, r0
 8006756:	6030      	str	r0, [r6, #0]
 8006758:	2800      	cmp	r0, #0
 800675a:	d1d5      	bne.n	8006708 <__sfp+0x24>
 800675c:	f7ff ff78 	bl	8006650 <__sfp_lock_release>
 8006760:	230c      	movs	r3, #12
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	e7ee      	b.n	8006744 <__sfp+0x60>
 8006766:	bf00      	nop
 8006768:	08006ad4 	.word	0x08006ad4
 800676c:	ffff0001 	.word	0xffff0001

08006770 <_fwalk_reent>:
 8006770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006774:	4606      	mov	r6, r0
 8006776:	4688      	mov	r8, r1
 8006778:	2700      	movs	r7, #0
 800677a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800677e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006782:	f1b9 0901 	subs.w	r9, r9, #1
 8006786:	d505      	bpl.n	8006794 <_fwalk_reent+0x24>
 8006788:	6824      	ldr	r4, [r4, #0]
 800678a:	2c00      	cmp	r4, #0
 800678c:	d1f7      	bne.n	800677e <_fwalk_reent+0xe>
 800678e:	4638      	mov	r0, r7
 8006790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006794:	89ab      	ldrh	r3, [r5, #12]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d907      	bls.n	80067aa <_fwalk_reent+0x3a>
 800679a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800679e:	3301      	adds	r3, #1
 80067a0:	d003      	beq.n	80067aa <_fwalk_reent+0x3a>
 80067a2:	4629      	mov	r1, r5
 80067a4:	4630      	mov	r0, r6
 80067a6:	47c0      	blx	r8
 80067a8:	4307      	orrs	r7, r0
 80067aa:	3568      	adds	r5, #104	; 0x68
 80067ac:	e7e9      	b.n	8006782 <_fwalk_reent+0x12>

080067ae <__retarget_lock_init_recursive>:
 80067ae:	4770      	bx	lr

080067b0 <__retarget_lock_acquire_recursive>:
 80067b0:	4770      	bx	lr

080067b2 <__retarget_lock_release_recursive>:
 80067b2:	4770      	bx	lr

080067b4 <__swhatbuf_r>:
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	460e      	mov	r6, r1
 80067b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067bc:	4614      	mov	r4, r2
 80067be:	2900      	cmp	r1, #0
 80067c0:	461d      	mov	r5, r3
 80067c2:	b096      	sub	sp, #88	; 0x58
 80067c4:	da08      	bge.n	80067d8 <__swhatbuf_r+0x24>
 80067c6:	2200      	movs	r2, #0
 80067c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80067cc:	602a      	str	r2, [r5, #0]
 80067ce:	061a      	lsls	r2, r3, #24
 80067d0:	d410      	bmi.n	80067f4 <__swhatbuf_r+0x40>
 80067d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067d6:	e00e      	b.n	80067f6 <__swhatbuf_r+0x42>
 80067d8:	466a      	mov	r2, sp
 80067da:	f000 f903 	bl	80069e4 <_fstat_r>
 80067de:	2800      	cmp	r0, #0
 80067e0:	dbf1      	blt.n	80067c6 <__swhatbuf_r+0x12>
 80067e2:	9a01      	ldr	r2, [sp, #4]
 80067e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067ec:	425a      	negs	r2, r3
 80067ee:	415a      	adcs	r2, r3
 80067f0:	602a      	str	r2, [r5, #0]
 80067f2:	e7ee      	b.n	80067d2 <__swhatbuf_r+0x1e>
 80067f4:	2340      	movs	r3, #64	; 0x40
 80067f6:	2000      	movs	r0, #0
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	b016      	add	sp, #88	; 0x58
 80067fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006800 <__smakebuf_r>:
 8006800:	898b      	ldrh	r3, [r1, #12]
 8006802:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006804:	079d      	lsls	r5, r3, #30
 8006806:	4606      	mov	r6, r0
 8006808:	460c      	mov	r4, r1
 800680a:	d507      	bpl.n	800681c <__smakebuf_r+0x1c>
 800680c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	6123      	str	r3, [r4, #16]
 8006814:	2301      	movs	r3, #1
 8006816:	6163      	str	r3, [r4, #20]
 8006818:	b002      	add	sp, #8
 800681a:	bd70      	pop	{r4, r5, r6, pc}
 800681c:	466a      	mov	r2, sp
 800681e:	ab01      	add	r3, sp, #4
 8006820:	f7ff ffc8 	bl	80067b4 <__swhatbuf_r>
 8006824:	9900      	ldr	r1, [sp, #0]
 8006826:	4605      	mov	r5, r0
 8006828:	4630      	mov	r0, r6
 800682a:	f7ff f969 	bl	8005b00 <_malloc_r>
 800682e:	b948      	cbnz	r0, 8006844 <__smakebuf_r+0x44>
 8006830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006834:	059a      	lsls	r2, r3, #22
 8006836:	d4ef      	bmi.n	8006818 <__smakebuf_r+0x18>
 8006838:	f023 0303 	bic.w	r3, r3, #3
 800683c:	f043 0302 	orr.w	r3, r3, #2
 8006840:	81a3      	strh	r3, [r4, #12]
 8006842:	e7e3      	b.n	800680c <__smakebuf_r+0xc>
 8006844:	4b0d      	ldr	r3, [pc, #52]	; (800687c <__smakebuf_r+0x7c>)
 8006846:	62b3      	str	r3, [r6, #40]	; 0x28
 8006848:	89a3      	ldrh	r3, [r4, #12]
 800684a:	6020      	str	r0, [r4, #0]
 800684c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006850:	81a3      	strh	r3, [r4, #12]
 8006852:	9b00      	ldr	r3, [sp, #0]
 8006854:	6120      	str	r0, [r4, #16]
 8006856:	6163      	str	r3, [r4, #20]
 8006858:	9b01      	ldr	r3, [sp, #4]
 800685a:	b15b      	cbz	r3, 8006874 <__smakebuf_r+0x74>
 800685c:	4630      	mov	r0, r6
 800685e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006862:	f000 f8d1 	bl	8006a08 <_isatty_r>
 8006866:	b128      	cbz	r0, 8006874 <__smakebuf_r+0x74>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	f023 0303 	bic.w	r3, r3, #3
 800686e:	f043 0301 	orr.w	r3, r3, #1
 8006872:	81a3      	strh	r3, [r4, #12]
 8006874:	89a0      	ldrh	r0, [r4, #12]
 8006876:	4305      	orrs	r5, r0
 8006878:	81a5      	strh	r5, [r4, #12]
 800687a:	e7cd      	b.n	8006818 <__smakebuf_r+0x18>
 800687c:	0800660d 	.word	0x0800660d

08006880 <_malloc_usable_size_r>:
 8006880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006884:	1f18      	subs	r0, r3, #4
 8006886:	2b00      	cmp	r3, #0
 8006888:	bfbc      	itt	lt
 800688a:	580b      	ldrlt	r3, [r1, r0]
 800688c:	18c0      	addlt	r0, r0, r3
 800688e:	4770      	bx	lr

08006890 <_raise_r>:
 8006890:	291f      	cmp	r1, #31
 8006892:	b538      	push	{r3, r4, r5, lr}
 8006894:	4604      	mov	r4, r0
 8006896:	460d      	mov	r5, r1
 8006898:	d904      	bls.n	80068a4 <_raise_r+0x14>
 800689a:	2316      	movs	r3, #22
 800689c:	6003      	str	r3, [r0, #0]
 800689e:	f04f 30ff 	mov.w	r0, #4294967295
 80068a2:	bd38      	pop	{r3, r4, r5, pc}
 80068a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80068a6:	b112      	cbz	r2, 80068ae <_raise_r+0x1e>
 80068a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068ac:	b94b      	cbnz	r3, 80068c2 <_raise_r+0x32>
 80068ae:	4620      	mov	r0, r4
 80068b0:	f000 f830 	bl	8006914 <_getpid_r>
 80068b4:	462a      	mov	r2, r5
 80068b6:	4601      	mov	r1, r0
 80068b8:	4620      	mov	r0, r4
 80068ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068be:	f000 b817 	b.w	80068f0 <_kill_r>
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d00a      	beq.n	80068dc <_raise_r+0x4c>
 80068c6:	1c59      	adds	r1, r3, #1
 80068c8:	d103      	bne.n	80068d2 <_raise_r+0x42>
 80068ca:	2316      	movs	r3, #22
 80068cc:	6003      	str	r3, [r0, #0]
 80068ce:	2001      	movs	r0, #1
 80068d0:	e7e7      	b.n	80068a2 <_raise_r+0x12>
 80068d2:	2400      	movs	r4, #0
 80068d4:	4628      	mov	r0, r5
 80068d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80068da:	4798      	blx	r3
 80068dc:	2000      	movs	r0, #0
 80068de:	e7e0      	b.n	80068a2 <_raise_r+0x12>

080068e0 <raise>:
 80068e0:	4b02      	ldr	r3, [pc, #8]	; (80068ec <raise+0xc>)
 80068e2:	4601      	mov	r1, r0
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	f7ff bfd3 	b.w	8006890 <_raise_r>
 80068ea:	bf00      	nop
 80068ec:	2000000c 	.word	0x2000000c

080068f0 <_kill_r>:
 80068f0:	b538      	push	{r3, r4, r5, lr}
 80068f2:	2300      	movs	r3, #0
 80068f4:	4d06      	ldr	r5, [pc, #24]	; (8006910 <_kill_r+0x20>)
 80068f6:	4604      	mov	r4, r0
 80068f8:	4608      	mov	r0, r1
 80068fa:	4611      	mov	r1, r2
 80068fc:	602b      	str	r3, [r5, #0]
 80068fe:	f7fa ffa7 	bl	8001850 <_kill>
 8006902:	1c43      	adds	r3, r0, #1
 8006904:	d102      	bne.n	800690c <_kill_r+0x1c>
 8006906:	682b      	ldr	r3, [r5, #0]
 8006908:	b103      	cbz	r3, 800690c <_kill_r+0x1c>
 800690a:	6023      	str	r3, [r4, #0]
 800690c:	bd38      	pop	{r3, r4, r5, pc}
 800690e:	bf00      	nop
 8006910:	200003b8 	.word	0x200003b8

08006914 <_getpid_r>:
 8006914:	f7fa bf95 	b.w	8001842 <_getpid>

08006918 <__sread>:
 8006918:	b510      	push	{r4, lr}
 800691a:	460c      	mov	r4, r1
 800691c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006920:	f000 f894 	bl	8006a4c <_read_r>
 8006924:	2800      	cmp	r0, #0
 8006926:	bfab      	itete	ge
 8006928:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800692a:	89a3      	ldrhlt	r3, [r4, #12]
 800692c:	181b      	addge	r3, r3, r0
 800692e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006932:	bfac      	ite	ge
 8006934:	6563      	strge	r3, [r4, #84]	; 0x54
 8006936:	81a3      	strhlt	r3, [r4, #12]
 8006938:	bd10      	pop	{r4, pc}

0800693a <__swrite>:
 800693a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800693e:	461f      	mov	r7, r3
 8006940:	898b      	ldrh	r3, [r1, #12]
 8006942:	4605      	mov	r5, r0
 8006944:	05db      	lsls	r3, r3, #23
 8006946:	460c      	mov	r4, r1
 8006948:	4616      	mov	r6, r2
 800694a:	d505      	bpl.n	8006958 <__swrite+0x1e>
 800694c:	2302      	movs	r3, #2
 800694e:	2200      	movs	r2, #0
 8006950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006954:	f000 f868 	bl	8006a28 <_lseek_r>
 8006958:	89a3      	ldrh	r3, [r4, #12]
 800695a:	4632      	mov	r2, r6
 800695c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006960:	81a3      	strh	r3, [r4, #12]
 8006962:	4628      	mov	r0, r5
 8006964:	463b      	mov	r3, r7
 8006966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800696a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800696e:	f000 b817 	b.w	80069a0 <_write_r>

08006972 <__sseek>:
 8006972:	b510      	push	{r4, lr}
 8006974:	460c      	mov	r4, r1
 8006976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800697a:	f000 f855 	bl	8006a28 <_lseek_r>
 800697e:	1c43      	adds	r3, r0, #1
 8006980:	89a3      	ldrh	r3, [r4, #12]
 8006982:	bf15      	itete	ne
 8006984:	6560      	strne	r0, [r4, #84]	; 0x54
 8006986:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800698a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800698e:	81a3      	strheq	r3, [r4, #12]
 8006990:	bf18      	it	ne
 8006992:	81a3      	strhne	r3, [r4, #12]
 8006994:	bd10      	pop	{r4, pc}

08006996 <__sclose>:
 8006996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800699a:	f000 b813 	b.w	80069c4 <_close_r>
	...

080069a0 <_write_r>:
 80069a0:	b538      	push	{r3, r4, r5, lr}
 80069a2:	4604      	mov	r4, r0
 80069a4:	4608      	mov	r0, r1
 80069a6:	4611      	mov	r1, r2
 80069a8:	2200      	movs	r2, #0
 80069aa:	4d05      	ldr	r5, [pc, #20]	; (80069c0 <_write_r+0x20>)
 80069ac:	602a      	str	r2, [r5, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	f7fa ff85 	bl	80018be <_write>
 80069b4:	1c43      	adds	r3, r0, #1
 80069b6:	d102      	bne.n	80069be <_write_r+0x1e>
 80069b8:	682b      	ldr	r3, [r5, #0]
 80069ba:	b103      	cbz	r3, 80069be <_write_r+0x1e>
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	bd38      	pop	{r3, r4, r5, pc}
 80069c0:	200003b8 	.word	0x200003b8

080069c4 <_close_r>:
 80069c4:	b538      	push	{r3, r4, r5, lr}
 80069c6:	2300      	movs	r3, #0
 80069c8:	4d05      	ldr	r5, [pc, #20]	; (80069e0 <_close_r+0x1c>)
 80069ca:	4604      	mov	r4, r0
 80069cc:	4608      	mov	r0, r1
 80069ce:	602b      	str	r3, [r5, #0]
 80069d0:	f7fa ff91 	bl	80018f6 <_close>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	d102      	bne.n	80069de <_close_r+0x1a>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	b103      	cbz	r3, 80069de <_close_r+0x1a>
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	bd38      	pop	{r3, r4, r5, pc}
 80069e0:	200003b8 	.word	0x200003b8

080069e4 <_fstat_r>:
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	2300      	movs	r3, #0
 80069e8:	4d06      	ldr	r5, [pc, #24]	; (8006a04 <_fstat_r+0x20>)
 80069ea:	4604      	mov	r4, r0
 80069ec:	4608      	mov	r0, r1
 80069ee:	4611      	mov	r1, r2
 80069f0:	602b      	str	r3, [r5, #0]
 80069f2:	f7fa ff8b 	bl	800190c <_fstat>
 80069f6:	1c43      	adds	r3, r0, #1
 80069f8:	d102      	bne.n	8006a00 <_fstat_r+0x1c>
 80069fa:	682b      	ldr	r3, [r5, #0]
 80069fc:	b103      	cbz	r3, 8006a00 <_fstat_r+0x1c>
 80069fe:	6023      	str	r3, [r4, #0]
 8006a00:	bd38      	pop	{r3, r4, r5, pc}
 8006a02:	bf00      	nop
 8006a04:	200003b8 	.word	0x200003b8

08006a08 <_isatty_r>:
 8006a08:	b538      	push	{r3, r4, r5, lr}
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	4d05      	ldr	r5, [pc, #20]	; (8006a24 <_isatty_r+0x1c>)
 8006a0e:	4604      	mov	r4, r0
 8006a10:	4608      	mov	r0, r1
 8006a12:	602b      	str	r3, [r5, #0]
 8006a14:	f7fa ff89 	bl	800192a <_isatty>
 8006a18:	1c43      	adds	r3, r0, #1
 8006a1a:	d102      	bne.n	8006a22 <_isatty_r+0x1a>
 8006a1c:	682b      	ldr	r3, [r5, #0]
 8006a1e:	b103      	cbz	r3, 8006a22 <_isatty_r+0x1a>
 8006a20:	6023      	str	r3, [r4, #0]
 8006a22:	bd38      	pop	{r3, r4, r5, pc}
 8006a24:	200003b8 	.word	0x200003b8

08006a28 <_lseek_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	4608      	mov	r0, r1
 8006a2e:	4611      	mov	r1, r2
 8006a30:	2200      	movs	r2, #0
 8006a32:	4d05      	ldr	r5, [pc, #20]	; (8006a48 <_lseek_r+0x20>)
 8006a34:	602a      	str	r2, [r5, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	f7fa ff81 	bl	800193e <_lseek>
 8006a3c:	1c43      	adds	r3, r0, #1
 8006a3e:	d102      	bne.n	8006a46 <_lseek_r+0x1e>
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	b103      	cbz	r3, 8006a46 <_lseek_r+0x1e>
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	bd38      	pop	{r3, r4, r5, pc}
 8006a48:	200003b8 	.word	0x200003b8

08006a4c <_read_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	4604      	mov	r4, r0
 8006a50:	4608      	mov	r0, r1
 8006a52:	4611      	mov	r1, r2
 8006a54:	2200      	movs	r2, #0
 8006a56:	4d05      	ldr	r5, [pc, #20]	; (8006a6c <_read_r+0x20>)
 8006a58:	602a      	str	r2, [r5, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f7fa ff12 	bl	8001884 <_read>
 8006a60:	1c43      	adds	r3, r0, #1
 8006a62:	d102      	bne.n	8006a6a <_read_r+0x1e>
 8006a64:	682b      	ldr	r3, [r5, #0]
 8006a66:	b103      	cbz	r3, 8006a6a <_read_r+0x1e>
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	bd38      	pop	{r3, r4, r5, pc}
 8006a6c:	200003b8 	.word	0x200003b8

08006a70 <_init>:
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a72:	bf00      	nop
 8006a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a76:	bc08      	pop	{r3}
 8006a78:	469e      	mov	lr, r3
 8006a7a:	4770      	bx	lr

08006a7c <_fini>:
 8006a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7e:	bf00      	nop
 8006a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a82:	bc08      	pop	{r3}
 8006a84:	469e      	mov	lr, r3
 8006a86:	4770      	bx	lr
