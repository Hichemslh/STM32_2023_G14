
bmp280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008180  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  080082c0  080082c0  000182c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800871c  0800871c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800871c  0800871c  0001871c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008724  08008724  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008724  08008724  00018724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008728  08008728  00018728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800872c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  200001dc  08008908  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08008908  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad15  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f55  00000000  00000000  0002af1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002ce70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002d910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fe3  00000000  00000000  0002e2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d41f  00000000  00000000  000452d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088b68  00000000  00000000  000526f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db25a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d18  00000000  00000000  000db2ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001dc 	.word	0x200001dc
 800015c:	00000000 	.word	0x00000000
 8000160:	080082a8 	.word	0x080082a8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e0 	.word	0x200001e0
 800017c:	080082a8 	.word	0x080082a8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	; 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d26:	2afd      	cmp	r2, #253	; 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	; 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	; 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__aeabi_ldivmod>:
 8000f74:	b97b      	cbnz	r3, 8000f96 <__aeabi_ldivmod+0x22>
 8000f76:	b972      	cbnz	r2, 8000f96 <__aeabi_ldivmod+0x22>
 8000f78:	2900      	cmp	r1, #0
 8000f7a:	bfbe      	ittt	lt
 8000f7c:	2000      	movlt	r0, #0
 8000f7e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000f82:	e006      	blt.n	8000f92 <__aeabi_ldivmod+0x1e>
 8000f84:	bf08      	it	eq
 8000f86:	2800      	cmpeq	r0, #0
 8000f88:	bf1c      	itt	ne
 8000f8a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000f8e:	f04f 30ff 	movne.w	r0, #4294967295
 8000f92:	f000 b9c1 	b.w	8001318 <__aeabi_idiv0>
 8000f96:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f9a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f9e:	2900      	cmp	r1, #0
 8000fa0:	db09      	blt.n	8000fb6 <__aeabi_ldivmod+0x42>
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db1a      	blt.n	8000fdc <__aeabi_ldivmod+0x68>
 8000fa6:	f000 f84d 	bl	8001044 <__udivmoddi4>
 8000faa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb2:	b004      	add	sp, #16
 8000fb4:	4770      	bx	lr
 8000fb6:	4240      	negs	r0, r0
 8000fb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db1b      	blt.n	8000ff8 <__aeabi_ldivmod+0x84>
 8000fc0:	f000 f840 	bl	8001044 <__udivmoddi4>
 8000fc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fcc:	b004      	add	sp, #16
 8000fce:	4240      	negs	r0, r0
 8000fd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fd4:	4252      	negs	r2, r2
 8000fd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fda:	4770      	bx	lr
 8000fdc:	4252      	negs	r2, r2
 8000fde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fe2:	f000 f82f 	bl	8001044 <__udivmoddi4>
 8000fe6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fee:	b004      	add	sp, #16
 8000ff0:	4240      	negs	r0, r0
 8000ff2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ff6:	4770      	bx	lr
 8000ff8:	4252      	negs	r2, r2
 8000ffa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ffe:	f000 f821 	bl	8001044 <__udivmoddi4>
 8001002:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001006:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800100a:	b004      	add	sp, #16
 800100c:	4252      	negs	r2, r2
 800100e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001012:	4770      	bx	lr

08001014 <__aeabi_uldivmod>:
 8001014:	b953      	cbnz	r3, 800102c <__aeabi_uldivmod+0x18>
 8001016:	b94a      	cbnz	r2, 800102c <__aeabi_uldivmod+0x18>
 8001018:	2900      	cmp	r1, #0
 800101a:	bf08      	it	eq
 800101c:	2800      	cmpeq	r0, #0
 800101e:	bf1c      	itt	ne
 8001020:	f04f 31ff 	movne.w	r1, #4294967295
 8001024:	f04f 30ff 	movne.w	r0, #4294967295
 8001028:	f000 b976 	b.w	8001318 <__aeabi_idiv0>
 800102c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001030:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001034:	f000 f806 	bl	8001044 <__udivmoddi4>
 8001038:	f8dd e004 	ldr.w	lr, [sp, #4]
 800103c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001040:	b004      	add	sp, #16
 8001042:	4770      	bx	lr

08001044 <__udivmoddi4>:
 8001044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001048:	9e08      	ldr	r6, [sp, #32]
 800104a:	460d      	mov	r5, r1
 800104c:	4604      	mov	r4, r0
 800104e:	4688      	mov	r8, r1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d14d      	bne.n	80010f0 <__udivmoddi4+0xac>
 8001054:	428a      	cmp	r2, r1
 8001056:	4694      	mov	ip, r2
 8001058:	d968      	bls.n	800112c <__udivmoddi4+0xe8>
 800105a:	fab2 f282 	clz	r2, r2
 800105e:	b152      	cbz	r2, 8001076 <__udivmoddi4+0x32>
 8001060:	fa01 f302 	lsl.w	r3, r1, r2
 8001064:	f1c2 0120 	rsb	r1, r2, #32
 8001068:	fa20 f101 	lsr.w	r1, r0, r1
 800106c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001070:	ea41 0803 	orr.w	r8, r1, r3
 8001074:	4094      	lsls	r4, r2
 8001076:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800107a:	fbb8 f7f1 	udiv	r7, r8, r1
 800107e:	fa1f fe8c 	uxth.w	lr, ip
 8001082:	fb01 8817 	mls	r8, r1, r7, r8
 8001086:	fb07 f00e 	mul.w	r0, r7, lr
 800108a:	0c23      	lsrs	r3, r4, #16
 800108c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001090:	4298      	cmp	r0, r3
 8001092:	d90a      	bls.n	80010aa <__udivmoddi4+0x66>
 8001094:	eb1c 0303 	adds.w	r3, ip, r3
 8001098:	f107 35ff 	add.w	r5, r7, #4294967295
 800109c:	f080 811e 	bcs.w	80012dc <__udivmoddi4+0x298>
 80010a0:	4298      	cmp	r0, r3
 80010a2:	f240 811b 	bls.w	80012dc <__udivmoddi4+0x298>
 80010a6:	3f02      	subs	r7, #2
 80010a8:	4463      	add	r3, ip
 80010aa:	1a1b      	subs	r3, r3, r0
 80010ac:	fbb3 f0f1 	udiv	r0, r3, r1
 80010b0:	fb01 3310 	mls	r3, r1, r0, r3
 80010b4:	fb00 fe0e 	mul.w	lr, r0, lr
 80010b8:	b2a4      	uxth	r4, r4
 80010ba:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010be:	45a6      	cmp	lr, r4
 80010c0:	d90a      	bls.n	80010d8 <__udivmoddi4+0x94>
 80010c2:	eb1c 0404 	adds.w	r4, ip, r4
 80010c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80010ca:	f080 8109 	bcs.w	80012e0 <__udivmoddi4+0x29c>
 80010ce:	45a6      	cmp	lr, r4
 80010d0:	f240 8106 	bls.w	80012e0 <__udivmoddi4+0x29c>
 80010d4:	4464      	add	r4, ip
 80010d6:	3802      	subs	r0, #2
 80010d8:	2100      	movs	r1, #0
 80010da:	eba4 040e 	sub.w	r4, r4, lr
 80010de:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80010e2:	b11e      	cbz	r6, 80010ec <__udivmoddi4+0xa8>
 80010e4:	2300      	movs	r3, #0
 80010e6:	40d4      	lsrs	r4, r2
 80010e8:	e9c6 4300 	strd	r4, r3, [r6]
 80010ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010f0:	428b      	cmp	r3, r1
 80010f2:	d908      	bls.n	8001106 <__udivmoddi4+0xc2>
 80010f4:	2e00      	cmp	r6, #0
 80010f6:	f000 80ee 	beq.w	80012d6 <__udivmoddi4+0x292>
 80010fa:	2100      	movs	r1, #0
 80010fc:	e9c6 0500 	strd	r0, r5, [r6]
 8001100:	4608      	mov	r0, r1
 8001102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001106:	fab3 f183 	clz	r1, r3
 800110a:	2900      	cmp	r1, #0
 800110c:	d14a      	bne.n	80011a4 <__udivmoddi4+0x160>
 800110e:	42ab      	cmp	r3, r5
 8001110:	d302      	bcc.n	8001118 <__udivmoddi4+0xd4>
 8001112:	4282      	cmp	r2, r0
 8001114:	f200 80fc 	bhi.w	8001310 <__udivmoddi4+0x2cc>
 8001118:	1a84      	subs	r4, r0, r2
 800111a:	eb65 0303 	sbc.w	r3, r5, r3
 800111e:	2001      	movs	r0, #1
 8001120:	4698      	mov	r8, r3
 8001122:	2e00      	cmp	r6, #0
 8001124:	d0e2      	beq.n	80010ec <__udivmoddi4+0xa8>
 8001126:	e9c6 4800 	strd	r4, r8, [r6]
 800112a:	e7df      	b.n	80010ec <__udivmoddi4+0xa8>
 800112c:	b902      	cbnz	r2, 8001130 <__udivmoddi4+0xec>
 800112e:	deff      	udf	#255	; 0xff
 8001130:	fab2 f282 	clz	r2, r2
 8001134:	2a00      	cmp	r2, #0
 8001136:	f040 8091 	bne.w	800125c <__udivmoddi4+0x218>
 800113a:	eba1 000c 	sub.w	r0, r1, ip
 800113e:	2101      	movs	r1, #1
 8001140:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001144:	fa1f fe8c 	uxth.w	lr, ip
 8001148:	fbb0 f3f7 	udiv	r3, r0, r7
 800114c:	fb07 0013 	mls	r0, r7, r3, r0
 8001150:	0c25      	lsrs	r5, r4, #16
 8001152:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001156:	fb0e f003 	mul.w	r0, lr, r3
 800115a:	42a8      	cmp	r0, r5
 800115c:	d908      	bls.n	8001170 <__udivmoddi4+0x12c>
 800115e:	eb1c 0505 	adds.w	r5, ip, r5
 8001162:	f103 38ff 	add.w	r8, r3, #4294967295
 8001166:	d202      	bcs.n	800116e <__udivmoddi4+0x12a>
 8001168:	42a8      	cmp	r0, r5
 800116a:	f200 80ce 	bhi.w	800130a <__udivmoddi4+0x2c6>
 800116e:	4643      	mov	r3, r8
 8001170:	1a2d      	subs	r5, r5, r0
 8001172:	fbb5 f0f7 	udiv	r0, r5, r7
 8001176:	fb07 5510 	mls	r5, r7, r0, r5
 800117a:	fb0e fe00 	mul.w	lr, lr, r0
 800117e:	b2a4      	uxth	r4, r4
 8001180:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001184:	45a6      	cmp	lr, r4
 8001186:	d908      	bls.n	800119a <__udivmoddi4+0x156>
 8001188:	eb1c 0404 	adds.w	r4, ip, r4
 800118c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001190:	d202      	bcs.n	8001198 <__udivmoddi4+0x154>
 8001192:	45a6      	cmp	lr, r4
 8001194:	f200 80b6 	bhi.w	8001304 <__udivmoddi4+0x2c0>
 8001198:	4628      	mov	r0, r5
 800119a:	eba4 040e 	sub.w	r4, r4, lr
 800119e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80011a2:	e79e      	b.n	80010e2 <__udivmoddi4+0x9e>
 80011a4:	f1c1 0720 	rsb	r7, r1, #32
 80011a8:	408b      	lsls	r3, r1
 80011aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80011ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80011b2:	fa25 fa07 	lsr.w	sl, r5, r7
 80011b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80011ba:	fbba f8f9 	udiv	r8, sl, r9
 80011be:	fa20 f307 	lsr.w	r3, r0, r7
 80011c2:	fb09 aa18 	mls	sl, r9, r8, sl
 80011c6:	408d      	lsls	r5, r1
 80011c8:	fa1f fe8c 	uxth.w	lr, ip
 80011cc:	431d      	orrs	r5, r3
 80011ce:	fa00 f301 	lsl.w	r3, r0, r1
 80011d2:	fb08 f00e 	mul.w	r0, r8, lr
 80011d6:	0c2c      	lsrs	r4, r5, #16
 80011d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80011dc:	42a0      	cmp	r0, r4
 80011de:	fa02 f201 	lsl.w	r2, r2, r1
 80011e2:	d90b      	bls.n	80011fc <__udivmoddi4+0x1b8>
 80011e4:	eb1c 0404 	adds.w	r4, ip, r4
 80011e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80011ec:	f080 8088 	bcs.w	8001300 <__udivmoddi4+0x2bc>
 80011f0:	42a0      	cmp	r0, r4
 80011f2:	f240 8085 	bls.w	8001300 <__udivmoddi4+0x2bc>
 80011f6:	f1a8 0802 	sub.w	r8, r8, #2
 80011fa:	4464      	add	r4, ip
 80011fc:	1a24      	subs	r4, r4, r0
 80011fe:	fbb4 f0f9 	udiv	r0, r4, r9
 8001202:	fb09 4410 	mls	r4, r9, r0, r4
 8001206:	fb00 fe0e 	mul.w	lr, r0, lr
 800120a:	b2ad      	uxth	r5, r5
 800120c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001210:	45a6      	cmp	lr, r4
 8001212:	d908      	bls.n	8001226 <__udivmoddi4+0x1e2>
 8001214:	eb1c 0404 	adds.w	r4, ip, r4
 8001218:	f100 35ff 	add.w	r5, r0, #4294967295
 800121c:	d26c      	bcs.n	80012f8 <__udivmoddi4+0x2b4>
 800121e:	45a6      	cmp	lr, r4
 8001220:	d96a      	bls.n	80012f8 <__udivmoddi4+0x2b4>
 8001222:	3802      	subs	r0, #2
 8001224:	4464      	add	r4, ip
 8001226:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800122a:	fba0 9502 	umull	r9, r5, r0, r2
 800122e:	eba4 040e 	sub.w	r4, r4, lr
 8001232:	42ac      	cmp	r4, r5
 8001234:	46c8      	mov	r8, r9
 8001236:	46ae      	mov	lr, r5
 8001238:	d356      	bcc.n	80012e8 <__udivmoddi4+0x2a4>
 800123a:	d053      	beq.n	80012e4 <__udivmoddi4+0x2a0>
 800123c:	2e00      	cmp	r6, #0
 800123e:	d069      	beq.n	8001314 <__udivmoddi4+0x2d0>
 8001240:	ebb3 0208 	subs.w	r2, r3, r8
 8001244:	eb64 040e 	sbc.w	r4, r4, lr
 8001248:	fa22 f301 	lsr.w	r3, r2, r1
 800124c:	fa04 f707 	lsl.w	r7, r4, r7
 8001250:	431f      	orrs	r7, r3
 8001252:	40cc      	lsrs	r4, r1
 8001254:	e9c6 7400 	strd	r7, r4, [r6]
 8001258:	2100      	movs	r1, #0
 800125a:	e747      	b.n	80010ec <__udivmoddi4+0xa8>
 800125c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001260:	f1c2 0120 	rsb	r1, r2, #32
 8001264:	fa25 f301 	lsr.w	r3, r5, r1
 8001268:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800126c:	fa20 f101 	lsr.w	r1, r0, r1
 8001270:	4095      	lsls	r5, r2
 8001272:	430d      	orrs	r5, r1
 8001274:	fbb3 f1f7 	udiv	r1, r3, r7
 8001278:	fb07 3311 	mls	r3, r7, r1, r3
 800127c:	fa1f fe8c 	uxth.w	lr, ip
 8001280:	0c28      	lsrs	r0, r5, #16
 8001282:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001286:	fb01 f30e 	mul.w	r3, r1, lr
 800128a:	4283      	cmp	r3, r0
 800128c:	fa04 f402 	lsl.w	r4, r4, r2
 8001290:	d908      	bls.n	80012a4 <__udivmoddi4+0x260>
 8001292:	eb1c 0000 	adds.w	r0, ip, r0
 8001296:	f101 38ff 	add.w	r8, r1, #4294967295
 800129a:	d22f      	bcs.n	80012fc <__udivmoddi4+0x2b8>
 800129c:	4283      	cmp	r3, r0
 800129e:	d92d      	bls.n	80012fc <__udivmoddi4+0x2b8>
 80012a0:	3902      	subs	r1, #2
 80012a2:	4460      	add	r0, ip
 80012a4:	1ac0      	subs	r0, r0, r3
 80012a6:	fbb0 f3f7 	udiv	r3, r0, r7
 80012aa:	fb07 0013 	mls	r0, r7, r3, r0
 80012ae:	b2ad      	uxth	r5, r5
 80012b0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80012b4:	fb03 f00e 	mul.w	r0, r3, lr
 80012b8:	42a8      	cmp	r0, r5
 80012ba:	d908      	bls.n	80012ce <__udivmoddi4+0x28a>
 80012bc:	eb1c 0505 	adds.w	r5, ip, r5
 80012c0:	f103 38ff 	add.w	r8, r3, #4294967295
 80012c4:	d216      	bcs.n	80012f4 <__udivmoddi4+0x2b0>
 80012c6:	42a8      	cmp	r0, r5
 80012c8:	d914      	bls.n	80012f4 <__udivmoddi4+0x2b0>
 80012ca:	3b02      	subs	r3, #2
 80012cc:	4465      	add	r5, ip
 80012ce:	1a28      	subs	r0, r5, r0
 80012d0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80012d4:	e738      	b.n	8001148 <__udivmoddi4+0x104>
 80012d6:	4631      	mov	r1, r6
 80012d8:	4630      	mov	r0, r6
 80012da:	e707      	b.n	80010ec <__udivmoddi4+0xa8>
 80012dc:	462f      	mov	r7, r5
 80012de:	e6e4      	b.n	80010aa <__udivmoddi4+0x66>
 80012e0:	4618      	mov	r0, r3
 80012e2:	e6f9      	b.n	80010d8 <__udivmoddi4+0x94>
 80012e4:	454b      	cmp	r3, r9
 80012e6:	d2a9      	bcs.n	800123c <__udivmoddi4+0x1f8>
 80012e8:	ebb9 0802 	subs.w	r8, r9, r2
 80012ec:	eb65 0e0c 	sbc.w	lr, r5, ip
 80012f0:	3801      	subs	r0, #1
 80012f2:	e7a3      	b.n	800123c <__udivmoddi4+0x1f8>
 80012f4:	4643      	mov	r3, r8
 80012f6:	e7ea      	b.n	80012ce <__udivmoddi4+0x28a>
 80012f8:	4628      	mov	r0, r5
 80012fa:	e794      	b.n	8001226 <__udivmoddi4+0x1e2>
 80012fc:	4641      	mov	r1, r8
 80012fe:	e7d1      	b.n	80012a4 <__udivmoddi4+0x260>
 8001300:	46d0      	mov	r8, sl
 8001302:	e77b      	b.n	80011fc <__udivmoddi4+0x1b8>
 8001304:	4464      	add	r4, ip
 8001306:	3802      	subs	r0, #2
 8001308:	e747      	b.n	800119a <__udivmoddi4+0x156>
 800130a:	3b02      	subs	r3, #2
 800130c:	4465      	add	r5, ip
 800130e:	e72f      	b.n	8001170 <__udivmoddi4+0x12c>
 8001310:	4608      	mov	r0, r1
 8001312:	e706      	b.n	8001122 <__udivmoddi4+0xde>
 8001314:	4631      	mov	r1, r6
 8001316:	e6e9      	b.n	80010ec <__udivmoddi4+0xa8>

08001318 <__aeabi_idiv0>:
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop

0800131c <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2203      	movs	r2, #3
 8001328:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2203      	movs	r2, #3
 8001334:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2203      	movs	r2, #3
 800133a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2203      	movs	r2, #3
 8001340:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2203      	movs	r2, #3
 8001346:	715a      	strb	r2, [r3, #5]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr

08001352 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001352:	b580      	push	{r7, lr}
 8001354:	b08a      	sub	sp, #40	; 0x28
 8001356:	af04      	add	r7, sp, #16
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	460b      	mov	r3, r1
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800136c:	7afb      	ldrb	r3, [r7, #11]
 800136e:	b29a      	uxth	r2, r3
 8001370:	8af9      	ldrh	r1, [r7, #22]
 8001372:	f241 3388 	movw	r3, #5000	; 0x1388
 8001376:	9302      	str	r3, [sp, #8]
 8001378:	2302      	movs	r3, #2
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	f002 f950 	bl	8003628 <HAL_I2C_Mem_Read>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10b      	bne.n	80013a6 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800138e:	7d7b      	ldrb	r3, [r7, #21]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	b21a      	sxth	r2, r3
 8001394:	7d3b      	ldrb	r3, [r7, #20]
 8001396:	b21b      	sxth	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	b21b      	sxth	r3, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	801a      	strh	r2, [r3, #0]
		return true;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <read_register16+0x56>
	} else
		return false;
 80013a6:	2300      	movs	r3, #0

}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b08b      	sub	sp, #44	; 0x2c
 80013b4:	af04      	add	r7, sp, #16
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	461a      	mov	r2, r3
 80013bc:	460b      	mov	r3, r1
 80013be:	72fb      	strb	r3, [r7, #11]
 80013c0:	4613      	mov	r3, r2
 80013c2:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80013d0:	7afb      	ldrb	r3, [r7, #11]
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	7abb      	ldrb	r3, [r7, #10]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	8af9      	ldrh	r1, [r7, #22]
 80013da:	f241 3488 	movw	r4, #5000	; 0x1388
 80013de:	9402      	str	r4, [sp, #8]
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2301      	movs	r3, #1
 80013e8:	f002 f91e 	bl	8003628 <HAL_I2C_Mem_Read>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <read_data+0x46>
		return 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e000      	b.n	80013f8 <read_data+0x48>
	else
		return 1;
 80013f6:	2301      	movs	r3, #1

}
 80013f8:	4618      	mov	r0, r3
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd90      	pop	{r4, r7, pc}

08001400 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	461a      	mov	r2, r3
 800140c:	2188      	movs	r1, #136	; 0x88
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ff9f 	bl	8001352 <read_register16>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d06f      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3302      	adds	r3, #2
 800141e:	461a      	mov	r2, r3
 8001420:	218a      	movs	r1, #138	; 0x8a
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff95 	bl	8001352 <read_register16>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d065      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3304      	adds	r3, #4
 8001432:	461a      	mov	r2, r3
 8001434:	218c      	movs	r1, #140	; 0x8c
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff8b 	bl	8001352 <read_register16>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d05b      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3306      	adds	r3, #6
 8001446:	461a      	mov	r2, r3
 8001448:	218e      	movs	r1, #142	; 0x8e
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ff81 	bl	8001352 <read_register16>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d051      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3308      	adds	r3, #8
 800145a:	461a      	mov	r2, r3
 800145c:	2190      	movs	r1, #144	; 0x90
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ff77 	bl	8001352 <read_register16>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d047      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	330a      	adds	r3, #10
 800146e:	461a      	mov	r2, r3
 8001470:	2192      	movs	r1, #146	; 0x92
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ff6d 	bl	8001352 <read_register16>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d03d      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	330c      	adds	r3, #12
 8001482:	461a      	mov	r2, r3
 8001484:	2194      	movs	r1, #148	; 0x94
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ff63 	bl	8001352 <read_register16>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d033      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	330e      	adds	r3, #14
 8001496:	461a      	mov	r2, r3
 8001498:	2196      	movs	r1, #150	; 0x96
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ff59 	bl	8001352 <read_register16>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d029      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3310      	adds	r3, #16
 80014aa:	461a      	mov	r2, r3
 80014ac:	2198      	movs	r1, #152	; 0x98
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ff4f 	bl	8001352 <read_register16>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d01f      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3312      	adds	r3, #18
 80014be:	461a      	mov	r2, r3
 80014c0:	219a      	movs	r1, #154	; 0x9a
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ff45 	bl	8001352 <read_register16>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d015      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3314      	adds	r3, #20
 80014d2:	461a      	mov	r2, r3
 80014d4:	219c      	movs	r1, #156	; 0x9c
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ff3b 	bl	8001352 <read_register16>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80014e6:	461a      	mov	r2, r3
 80014e8:	219e      	movs	r1, #158	; 0x9e
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff31 	bl	8001352 <read_register16>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <read_calibration_data+0xfa>

		return true;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <read_calibration_data+0xfc>
	}

	return false;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f103 0218 	add.w	r2, r3, #24
 8001512:	2301      	movs	r3, #1
 8001514:	21a1      	movs	r1, #161	; 0xa1
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ff4a 	bl	80013b0 <read_data>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d14b      	bne.n	80015ba <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	331a      	adds	r3, #26
 8001526:	461a      	mov	r2, r3
 8001528:	21e1      	movs	r1, #225	; 0xe1
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff11 	bl	8001352 <read_register16>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d041      	beq.n	80015ba <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f103 021c 	add.w	r2, r3, #28
 800153c:	2301      	movs	r3, #1
 800153e:	21e3      	movs	r1, #227	; 0xe3
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff35 	bl	80013b0 <read_data>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d136      	bne.n	80015ba <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800154c:	f107 030e 	add.w	r3, r7, #14
 8001550:	461a      	mov	r2, r3
 8001552:	21e4      	movs	r1, #228	; 0xe4
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff fefc 	bl	8001352 <read_register16>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d02c      	beq.n	80015ba <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	461a      	mov	r2, r3
 8001566:	21e5      	movs	r1, #229	; 0xe5
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fef2 	bl	8001352 <read_register16>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d022      	beq.n	80015ba <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800157a:	2301      	movs	r3, #1
 800157c:	21e7      	movs	r1, #231	; 0xe7
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ff16 	bl	80013b0 <read_data>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d117      	bne.n	80015ba <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800158a:	89fb      	ldrh	r3, [r7, #14]
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	b21b      	sxth	r3, r3
 8001590:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001594:	b21a      	sxth	r2, r3
 8001596:	89fb      	ldrh	r3, [r7, #14]
 8001598:	121b      	asrs	r3, r3, #8
 800159a:	b21b      	sxth	r3, r3
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80015aa:	89bb      	ldrh	r3, [r7, #12]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	841a      	strh	r2, [r3, #32]

		return true;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <read_hum_calibration_data+0xb8>
	}

	return false;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af04      	add	r7, sp, #16
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	70fb      	strb	r3, [r7, #3]
 80015d0:	4613      	mov	r3, r2
 80015d2:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	89f9      	ldrh	r1, [r7, #14]
 80015e6:	f242 7310 	movw	r3, #10000	; 0x2710
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	2301      	movs	r3, #1
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	1cbb      	adds	r3, r7, #2
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2301      	movs	r3, #1
 80015f6:	f001 ff1d 	bl	8003434 <HAL_I2C_Mem_Write>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <write_register8+0x40>
		return false;
 8001600:	2300      	movs	r3, #0
 8001602:	e000      	b.n	8001606 <write_register8+0x42>
	else
		return true;
 8001604:	2301      	movs	r3, #1
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800161c:	2b76      	cmp	r3, #118	; 0x76
 800161e:	d005      	beq.n	800162c <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001624:	2b77      	cmp	r3, #119	; 0x77
 8001626:	d001      	beq.n	800162c <bmp280_init+0x1e>

		return false;
 8001628:	2300      	movs	r3, #0
 800162a:	e099      	b.n	8001760 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001632:	2301      	movs	r3, #1
 8001634:	21d0      	movs	r1, #208	; 0xd0
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff feba 	bl	80013b0 <read_data>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <bmp280_init+0x38>
		return false;
 8001642:	2300      	movs	r3, #0
 8001644:	e08c      	b.n	8001760 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800164c:	2b58      	cmp	r3, #88	; 0x58
 800164e:	d006      	beq.n	800165e <bmp280_init+0x50>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001656:	2b60      	cmp	r3, #96	; 0x60
 8001658:	d001      	beq.n	800165e <bmp280_init+0x50>

		return false;
 800165a:	2300      	movs	r3, #0
 800165c:	e080      	b.n	8001760 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800165e:	22b6      	movs	r2, #182	; 0xb6
 8001660:	21e0      	movs	r1, #224	; 0xe0
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffae 	bl	80015c4 <write_register8>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <bmp280_init+0x64>
		return false;
 800166e:	2300      	movs	r3, #0
 8001670:	e076      	b.n	8001760 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001672:	f107 020c 	add.w	r2, r7, #12
 8001676:	2301      	movs	r3, #1
 8001678:	21f3      	movs	r1, #243	; 0xf3
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fe98 	bl	80013b0 <read_data>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f5      	bne.n	8001672 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001686:	7b3b      	ldrb	r3, [r7, #12]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f0      	bne.n	8001672 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff feb5 	bl	8001400 <read_calibration_data>
 8001696:	4603      	mov	r3, r0
 8001698:	f083 0301 	eor.w	r3, r3, #1
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d100      	bne.n	80016a4 <bmp280_init+0x96>
 80016a2:	e001      	b.n	80016a8 <bmp280_init+0x9a>
		return false;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e05b      	b.n	8001760 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80016ae:	2b60      	cmp	r3, #96	; 0x60
 80016b0:	d10a      	bne.n	80016c8 <bmp280_init+0xba>
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ff26 	bl	8001504 <read_hum_calibration_data>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f083 0301 	eor.w	r3, r3, #1
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <bmp280_init+0xba>
		return false;
 80016c4:	2300      	movs	r3, #0
 80016c6:	e04b      	b.n	8001760 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	795b      	ldrb	r3, [r3, #5]
 80016cc:	015b      	lsls	r3, r3, #5
 80016ce:	b25a      	sxtb	r2, r3
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	785b      	ldrb	r3, [r3, #1]
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	461a      	mov	r2, r3
 80016e2:	21f5      	movs	r1, #245	; 0xf5
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff6d 	bl	80015c4 <write_register8>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <bmp280_init+0xe6>
		return false;
 80016f0:	2300      	movs	r3, #0
 80016f2:	e035      	b.n	8001760 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d102      	bne.n	8001702 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	78db      	ldrb	r3, [r3, #3]
 8001706:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001708:	b25a      	sxtb	r2, r3
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	789b      	ldrb	r3, [r3, #2]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	b25b      	sxtb	r3, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	b25a      	sxtb	r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b25b      	sxtb	r3, r3
 800171c:	4313      	orrs	r3, r2
 800171e:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001720:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001728:	2b60      	cmp	r3, #96	; 0x60
 800172a:	d10d      	bne.n	8001748 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	791b      	ldrb	r3, [r3, #4]
 8001730:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001732:	7b7b      	ldrb	r3, [r7, #13]
 8001734:	461a      	mov	r2, r3
 8001736:	21f2      	movs	r1, #242	; 0xf2
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff43 	bl	80015c4 <write_register8>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <bmp280_init+0x13a>
			return false;
 8001744:	2300      	movs	r3, #0
 8001746:	e00b      	b.n	8001760 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001748:	7bbb      	ldrb	r3, [r7, #14]
 800174a:	461a      	mov	r2, r3
 800174c:	21f4      	movs	r1, #244	; 0xf4
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ff38 	bl	80015c4 <write_register8>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <bmp280_init+0x150>
		return false;
 800175a:	2300      	movs	r3, #0
 800175c:	e000      	b.n	8001760 <bmp280_init+0x152>
	}

	return true;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	10da      	asrs	r2, r3, #3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001786:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800178a:	12db      	asrs	r3, r3, #11
 800178c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	111b      	asrs	r3, r3, #4
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	8812      	ldrh	r2, [r2, #0]
 8001796:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	1112      	asrs	r2, r2, #4
 800179c:	68f9      	ldr	r1, [r7, #12]
 800179e:	8809      	ldrh	r1, [r1, #0]
 80017a0:	1a52      	subs	r2, r2, r1
 80017a2:	fb02 f303 	mul.w	r3, r2, r3
 80017a6:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80017ae:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80017b2:	139b      	asrs	r3, r3, #14
 80017b4:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	441a      	add	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	3380      	adds	r3, #128	; 0x80
 80017cc:	121b      	asrs	r3, r3, #8
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	371c      	adds	r7, #28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80017d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017dc:	b0cc      	sub	sp, #304	; 0x130
 80017de:	af00      	add	r7, sp, #0
 80017e0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 80017e4:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80017e8:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80017ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017f0:	17da      	asrs	r2, r3, #31
 80017f2:	461c      	mov	r4, r3
 80017f4:	4615      	mov	r5, r2
 80017f6:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80017fa:	f145 3bff 	adc.w	fp, r5, #4294967295
 80017fe:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001802:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001806:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800180a:	fb03 f102 	mul.w	r1, r3, r2
 800180e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001812:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001816:	fb02 f303 	mul.w	r3, r2, r3
 800181a:	18ca      	adds	r2, r1, r3
 800181c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001820:	fba3 8903 	umull	r8, r9, r3, r3
 8001824:	eb02 0309 	add.w	r3, r2, r9
 8001828:	4699      	mov	r9, r3
 800182a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800182e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001832:	b21b      	sxth	r3, r3
 8001834:	17da      	asrs	r2, r3, #31
 8001836:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800183a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800183e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001842:	4603      	mov	r3, r0
 8001844:	fb03 f209 	mul.w	r2, r3, r9
 8001848:	460b      	mov	r3, r1
 800184a:	fb08 f303 	mul.w	r3, r8, r3
 800184e:	4413      	add	r3, r2
 8001850:	4602      	mov	r2, r0
 8001852:	fba8 2102 	umull	r2, r1, r8, r2
 8001856:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 800185a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800185e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001862:	4413      	add	r3, r2
 8001864:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001868:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800186c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8001870:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001878:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800187c:	b21b      	sxth	r3, r3
 800187e:	17da      	asrs	r2, r3, #31
 8001880:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001884:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001888:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800188c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001890:	462a      	mov	r2, r5
 8001892:	fb02 f203 	mul.w	r2, r2, r3
 8001896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800189a:	4621      	mov	r1, r4
 800189c:	fb01 f303 	mul.w	r3, r1, r3
 80018a0:	441a      	add	r2, r3
 80018a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018a6:	4621      	mov	r1, r4
 80018a8:	fba3 3101 	umull	r3, r1, r3, r1
 80018ac:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 80018b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80018b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80018b8:	18d3      	adds	r3, r2, r3
 80018ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018be:	f04f 0000 	mov.w	r0, #0
 80018c2:	f04f 0100 	mov.w	r1, #0
 80018c6:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80018ca:	462b      	mov	r3, r5
 80018cc:	0459      	lsls	r1, r3, #17
 80018ce:	4622      	mov	r2, r4
 80018d0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80018d4:	4623      	mov	r3, r4
 80018d6:	0458      	lsls	r0, r3, #17
 80018d8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80018dc:	1814      	adds	r4, r2, r0
 80018de:	643c      	str	r4, [r7, #64]	; 0x40
 80018e0:	414b      	adcs	r3, r1
 80018e2:	647b      	str	r3, [r7, #68]	; 0x44
 80018e4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80018e8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80018ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018f0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	17da      	asrs	r2, r3, #31
 80018f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80018fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001900:	f04f 0000 	mov.w	r0, #0
 8001904:	f04f 0100 	mov.w	r1, #0
 8001908:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800190c:	00d9      	lsls	r1, r3, #3
 800190e:	2000      	movs	r0, #0
 8001910:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001914:	1814      	adds	r4, r2, r0
 8001916:	63bc      	str	r4, [r7, #56]	; 0x38
 8001918:	414b      	adcs	r3, r1
 800191a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800191c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001920:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001924:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001928:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800192c:	fb03 f102 	mul.w	r1, r3, r2
 8001930:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001934:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001938:	fb02 f303 	mul.w	r3, r2, r3
 800193c:	18ca      	adds	r2, r1, r3
 800193e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001942:	fba3 3103 	umull	r3, r1, r3, r3
 8001946:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 800194a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800194e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001952:	18d3      	adds	r3, r2, r3
 8001954:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800195c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001960:	b21b      	sxth	r3, r3
 8001962:	17da      	asrs	r2, r3, #31
 8001964:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001968:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800196c:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8001970:	4622      	mov	r2, r4
 8001972:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001976:	4641      	mov	r1, r8
 8001978:	fb01 f202 	mul.w	r2, r1, r2
 800197c:	464d      	mov	r5, r9
 800197e:	4618      	mov	r0, r3
 8001980:	4621      	mov	r1, r4
 8001982:	4603      	mov	r3, r0
 8001984:	fb03 f305 	mul.w	r3, r3, r5
 8001988:	4413      	add	r3, r2
 800198a:	4602      	mov	r2, r0
 800198c:	4641      	mov	r1, r8
 800198e:	fba2 2101 	umull	r2, r1, r2, r1
 8001992:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001996:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800199a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800199e:	4413      	add	r3, r2
 80019a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80019a4:	f04f 0000 	mov.w	r0, #0
 80019a8:	f04f 0100 	mov.w	r1, #0
 80019ac:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80019b0:	4623      	mov	r3, r4
 80019b2:	0a18      	lsrs	r0, r3, #8
 80019b4:	462a      	mov	r2, r5
 80019b6:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80019ba:	462b      	mov	r3, r5
 80019bc:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80019be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	17da      	asrs	r2, r3, #31
 80019ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80019ce:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80019d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019d6:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80019da:	464a      	mov	r2, r9
 80019dc:	fb02 f203 	mul.w	r2, r2, r3
 80019e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80019e4:	4644      	mov	r4, r8
 80019e6:	fb04 f303 	mul.w	r3, r4, r3
 80019ea:	441a      	add	r2, r3
 80019ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019f0:	4644      	mov	r4, r8
 80019f2:	fba3 3404 	umull	r3, r4, r3, r4
 80019f6:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 80019fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80019fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001a02:	18d3      	adds	r3, r2, r3
 8001a04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001a14:	464c      	mov	r4, r9
 8001a16:	0323      	lsls	r3, r4, #12
 8001a18:	46c4      	mov	ip, r8
 8001a1a:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001a1e:	4644      	mov	r4, r8
 8001a20:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001a22:	1884      	adds	r4, r0, r2
 8001a24:	633c      	str	r4, [r7, #48]	; 0x30
 8001a26:	eb41 0303 	adc.w	r3, r1, r3
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a2c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001a30:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001a34:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001a38:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001a3c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001a40:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a48:	88db      	ldrh	r3, [r3, #6]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a52:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001a56:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001a5a:	4622      	mov	r2, r4
 8001a5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001a60:	4641      	mov	r1, r8
 8001a62:	fb01 f202 	mul.w	r2, r1, r2
 8001a66:	464d      	mov	r5, r9
 8001a68:	4618      	mov	r0, r3
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	fb03 f305 	mul.w	r3, r3, r5
 8001a72:	4413      	add	r3, r2
 8001a74:	4602      	mov	r2, r0
 8001a76:	4641      	mov	r1, r8
 8001a78:	fba2 2101 	umull	r2, r1, r2, r1
 8001a7c:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001a80:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001a84:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001a88:	4413      	add	r3, r2
 8001a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	104a      	asrs	r2, r1, #1
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	17cb      	asrs	r3, r1, #31
 8001aa2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001aa6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	d101      	bne.n	8001ab2 <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e146      	b.n	8001d40 <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 8001ab2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ab6:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001aba:	17da      	asrs	r2, r3, #31
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001abe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ac0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001ac4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001ac8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001acc:	105b      	asrs	r3, r3, #1
 8001ace:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ad2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001ad6:	07db      	lsls	r3, r3, #31
 8001ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001adc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001ae0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001ae4:	4604      	mov	r4, r0
 8001ae6:	1aa4      	subs	r4, r4, r2
 8001ae8:	67bc      	str	r4, [r7, #120]	; 0x78
 8001aea:	eb61 0303 	sbc.w	r3, r1, r3
 8001aee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001af0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001af4:	4622      	mov	r2, r4
 8001af6:	462b      	mov	r3, r5
 8001af8:	1891      	adds	r1, r2, r2
 8001afa:	6239      	str	r1, [r7, #32]
 8001afc:	415b      	adcs	r3, r3
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
 8001b00:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b04:	4621      	mov	r1, r4
 8001b06:	1851      	adds	r1, r2, r1
 8001b08:	61b9      	str	r1, [r7, #24]
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	414b      	adcs	r3, r1
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001b1c:	4649      	mov	r1, r9
 8001b1e:	018b      	lsls	r3, r1, #6
 8001b20:	4641      	mov	r1, r8
 8001b22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b26:	4641      	mov	r1, r8
 8001b28:	018a      	lsls	r2, r1, #6
 8001b2a:	4641      	mov	r1, r8
 8001b2c:	1889      	adds	r1, r1, r2
 8001b2e:	6139      	str	r1, [r7, #16]
 8001b30:	4649      	mov	r1, r9
 8001b32:	eb43 0101 	adc.w	r1, r3, r1
 8001b36:	6179      	str	r1, [r7, #20]
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001b44:	4649      	mov	r1, r9
 8001b46:	008b      	lsls	r3, r1, #2
 8001b48:	46c4      	mov	ip, r8
 8001b4a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001b4e:	4641      	mov	r1, r8
 8001b50:	008a      	lsls	r2, r1, #2
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	4622      	mov	r2, r4
 8001b5a:	189b      	adds	r3, r3, r2
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	462a      	mov	r2, r5
 8001b62:	eb42 0303 	adc.w	r3, r2, r3
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001b74:	4649      	mov	r1, r9
 8001b76:	008b      	lsls	r3, r1, #2
 8001b78:	46c4      	mov	ip, r8
 8001b7a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001b7e:	4641      	mov	r1, r8
 8001b80:	008a      	lsls	r2, r1, #2
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	4603      	mov	r3, r0
 8001b88:	4622      	mov	r2, r4
 8001b8a:	189b      	adds	r3, r3, r2
 8001b8c:	673b      	str	r3, [r7, #112]	; 0x70
 8001b8e:	462b      	mov	r3, r5
 8001b90:	460a      	mov	r2, r1
 8001b92:	eb42 0303 	adc.w	r3, r2, r3
 8001b96:	677b      	str	r3, [r7, #116]	; 0x74
 8001b98:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001b9c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001ba0:	f7ff f9e8 	bl	8000f74 <__aeabi_ldivmod>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bb0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	17da      	asrs	r2, r3, #31
 8001bb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8001bba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001bbc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001bc0:	f04f 0000 	mov.w	r0, #0
 8001bc4:	f04f 0100 	mov.w	r1, #0
 8001bc8:	0b50      	lsrs	r0, r2, #13
 8001bca:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001bce:	1359      	asrs	r1, r3, #13
 8001bd0:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001bd4:	462b      	mov	r3, r5
 8001bd6:	fb00 f203 	mul.w	r2, r0, r3
 8001bda:	4623      	mov	r3, r4
 8001bdc:	fb03 f301 	mul.w	r3, r3, r1
 8001be0:	4413      	add	r3, r2
 8001be2:	4622      	mov	r2, r4
 8001be4:	fba2 2100 	umull	r2, r1, r2, r0
 8001be8:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8001bec:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001bf0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001bfa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001bfe:	f04f 0000 	mov.w	r0, #0
 8001c02:	f04f 0100 	mov.w	r1, #0
 8001c06:	0b50      	lsrs	r0, r2, #13
 8001c08:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001c0c:	1359      	asrs	r1, r3, #13
 8001c0e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001c12:	462b      	mov	r3, r5
 8001c14:	fb00 f203 	mul.w	r2, r0, r3
 8001c18:	4623      	mov	r3, r4
 8001c1a:	fb03 f301 	mul.w	r3, r3, r1
 8001c1e:	4413      	add	r3, r2
 8001c20:	4622      	mov	r2, r4
 8001c22:	fba2 2100 	umull	r2, r1, r2, r0
 8001c26:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8001c2a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001c2e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001c32:	4413      	add	r3, r2
 8001c34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001c44:	4621      	mov	r1, r4
 8001c46:	0e4a      	lsrs	r2, r1, #25
 8001c48:	4620      	mov	r0, r4
 8001c4a:	4629      	mov	r1, r5
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001c52:	164b      	asrs	r3, r1, #25
 8001c54:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c5c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	17da      	asrs	r2, r3, #31
 8001c64:	663b      	str	r3, [r7, #96]	; 0x60
 8001c66:	667a      	str	r2, [r7, #100]	; 0x64
 8001c68:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001c6c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001c70:	462a      	mov	r2, r5
 8001c72:	fb02 f203 	mul.w	r2, r2, r3
 8001c76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	fb01 f303 	mul.w	r3, r1, r3
 8001c80:	4413      	add	r3, r2
 8001c82:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c86:	4621      	mov	r1, r4
 8001c88:	fba2 2101 	umull	r2, r1, r2, r1
 8001c8c:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8001c90:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001c94:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001c98:	4413      	add	r3, r2
 8001c9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001caa:	4621      	mov	r1, r4
 8001cac:	0cca      	lsrs	r2, r1, #19
 8001cae:	4620      	mov	r0, r4
 8001cb0:	4629      	mov	r1, r5
 8001cb2:	460c      	mov	r4, r1
 8001cb4:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001cb8:	14cb      	asrs	r3, r1, #19
 8001cba:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001cbe:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001cc2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001cc6:	1884      	adds	r4, r0, r2
 8001cc8:	65bc      	str	r4, [r7, #88]	; 0x58
 8001cca:	eb41 0303 	adc.w	r3, r1, r3
 8001cce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cd0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001cd4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001cd8:	4621      	mov	r1, r4
 8001cda:	1889      	adds	r1, r1, r2
 8001cdc:	6539      	str	r1, [r7, #80]	; 0x50
 8001cde:	4629      	mov	r1, r5
 8001ce0:	eb43 0101 	adc.w	r1, r3, r1
 8001ce4:	6579      	str	r1, [r7, #84]	; 0x54
 8001ce6:	f04f 0000 	mov.w	r0, #0
 8001cea:	f04f 0100 	mov.w	r1, #0
 8001cee:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001cf2:	4623      	mov	r3, r4
 8001cf4:	0a18      	lsrs	r0, r3, #8
 8001cf6:	462a      	mov	r2, r5
 8001cf8:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001cfc:	462b      	mov	r3, r5
 8001cfe:	1219      	asrs	r1, r3, #8
 8001d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d04:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	17da      	asrs	r2, r3, #31
 8001d0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d0e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001d1c:	464c      	mov	r4, r9
 8001d1e:	0123      	lsls	r3, r4, #4
 8001d20:	46c4      	mov	ip, r8
 8001d22:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001d26:	4644      	mov	r4, r8
 8001d28:	0122      	lsls	r2, r4, #4
 8001d2a:	1884      	adds	r4, r0, r2
 8001d2c:	603c      	str	r4, [r7, #0]
 8001d2e:	eb41 0303 	adc.w	r3, r1, r3
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001d38:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001d3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001d46:	46bd      	mov	sp, r7
 8001d48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001d4c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001d5e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	039a      	lsls	r2, r3, #14
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001d6a:	051b      	lsls	r3, r3, #20
 8001d6c:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001d74:	4619      	mov	r1, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001d82:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	fb01 f202 	mul.w	r2, r1, r2
 8001d92:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001d94:	68f9      	ldr	r1, [r7, #12]
 8001d96:	7f09      	ldrb	r1, [r1, #28]
 8001d98:	4608      	mov	r0, r1
 8001d9a:	6979      	ldr	r1, [r7, #20]
 8001d9c:	fb00 f101 	mul.w	r1, r0, r1
 8001da0:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001da2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001da6:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001daa:	1292      	asrs	r2, r2, #10
 8001dac:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001db0:	68f9      	ldr	r1, [r7, #12]
 8001db2:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001db6:	fb01 f202 	mul.w	r2, r1, r2
 8001dba:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001dbe:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	13db      	asrs	r3, r3, #15
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	13d2      	asrs	r2, r2, #15
 8001dce:	fb02 f303 	mul.w	r3, r2, r3
 8001dd2:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	7e12      	ldrb	r2, [r2, #24]
 8001dd8:	fb02 f303 	mul.w	r3, r2, r3
 8001ddc:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001dea:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001df2:	bfa8      	it	ge
 8001df4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001df8:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	131b      	asrs	r3, r3, #12
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	371c      	adds	r7, #28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08c      	sub	sp, #48	; 0x30
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001e1c:	2b60      	cmp	r3, #96	; 0x60
 8001e1e:	d007      	beq.n	8001e30 <bmp280_read_fixed+0x28>
		if (humidity)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <bmp280_read_fixed+0x32>
 8001e36:	2308      	movs	r3, #8
 8001e38:	e000      	b.n	8001e3c <bmp280_read_fixed+0x34>
 8001e3a:	2306      	movs	r3, #6
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	f107 0218 	add.w	r2, r7, #24
 8001e46:	21f7      	movs	r1, #247	; 0xf7
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f7ff fab1 	bl	80013b0 <read_data>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <bmp280_read_fixed+0x50>
		return false;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e038      	b.n	8001eca <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001e58:	7e3b      	ldrb	r3, [r7, #24]
 8001e5a:	031a      	lsls	r2, r3, #12
 8001e5c:	7e7b      	ldrb	r3, [r7, #25]
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	4313      	orrs	r3, r2
 8001e62:	7eba      	ldrb	r2, [r7, #26]
 8001e64:	0912      	lsrs	r2, r2, #4
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001e6c:	7efb      	ldrb	r3, [r7, #27]
 8001e6e:	031a      	lsls	r2, r3, #12
 8001e70:	7f3b      	ldrb	r3, [r7, #28]
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	4313      	orrs	r3, r2
 8001e76:	7f7a      	ldrb	r2, [r7, #29]
 8001e78:	0912      	lsrs	r2, r2, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	461a      	mov	r2, r3
 8001e86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7ff fc6d 	bl	8001768 <compensate_temperature>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	461a      	mov	r2, r3
 8001e98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f7ff fc9c 	bl	80017d8 <compensate_pressure>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00d      	beq.n	8001ec8 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001eac:	7fbb      	ldrb	r3, [r7, #30]
 8001eae:	021b      	lsls	r3, r3, #8
 8001eb0:	7ffa      	ldrb	r2, [r7, #31]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	6a39      	ldr	r1, [r7, #32]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f7ff ff45 	bl	8001d4c <compensate_humidity>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001ec8:	2301      	movs	r3, #1
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3730      	adds	r7, #48	; 0x30
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <bmp280_read_float+0x1a>
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	e000      	b.n	8001ef0 <bmp280_read_float+0x1c>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f107 0218 	add.w	r2, r7, #24
 8001ef4:	f107 011c 	add.w	r1, r7, #28
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f7ff ff85 	bl	8001e08 <bmp280_read_fixed>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d02d      	beq.n	8001f60 <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fe90 	bl	8000c2c <__aeabi_i2f>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4917      	ldr	r1, [pc, #92]	; (8001f6c <bmp280_read_float+0x98>)
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe ff93 	bl	8000e3c <__aeabi_fdiv>
 8001f16:	4603      	mov	r3, r0
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fe7f 	bl	8000c24 <__aeabi_ui2f>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe ff85 	bl	8000e3c <__aeabi_fdiv>
 8001f32:	4603      	mov	r3, r0
 8001f34:	461a      	mov	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	601a      	str	r2, [r3, #0]
		if (humidity)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00d      	beq.n	8001f5c <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fe6e 	bl	8000c24 <__aeabi_ui2f>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe ff74 	bl	8000e3c <__aeabi_fdiv>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	601a      	str	r2, [r3, #0]
		return true;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <bmp280_read_float+0x8e>
	}

	return false;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3720      	adds	r7, #32
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	42c80000 	.word	0x42c80000

08001f70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f86:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <MX_GPIO_Init+0xc0>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4a29      	ldr	r2, [pc, #164]	; (8002030 <MX_GPIO_Init+0xc0>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	61d3      	str	r3, [r2, #28]
 8001f92:	4b27      	ldr	r3, [pc, #156]	; (8002030 <MX_GPIO_Init+0xc0>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <MX_GPIO_Init+0xc0>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	4a23      	ldr	r2, [pc, #140]	; (8002030 <MX_GPIO_Init+0xc0>)
 8001fa4:	f043 0320 	orr.w	r3, r3, #32
 8001fa8:	61d3      	str	r3, [r2, #28]
 8001faa:	4b21      	ldr	r3, [pc, #132]	; (8002030 <MX_GPIO_Init+0xc0>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <MX_GPIO_Init+0xc0>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <MX_GPIO_Init+0xc0>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	61d3      	str	r3, [r2, #28]
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <MX_GPIO_Init+0xc0>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	4b18      	ldr	r3, [pc, #96]	; (8002030 <MX_GPIO_Init+0xc0>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	4a17      	ldr	r2, [pc, #92]	; (8002030 <MX_GPIO_Init+0xc0>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	61d3      	str	r3, [r2, #28]
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <MX_GPIO_Init+0xc0>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2120      	movs	r1, #32
 8001fea:	4812      	ldr	r0, [pc, #72]	; (8002034 <MX_GPIO_Init+0xc4>)
 8001fec:	f000 ffc8 	bl	8002f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ff0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ff6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	4619      	mov	r1, r3
 8002006:	480c      	ldr	r0, [pc, #48]	; (8002038 <MX_GPIO_Init+0xc8>)
 8002008:	f000 fe2a 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800200c:	2320      	movs	r3, #32
 800200e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002010:	2301      	movs	r3, #1
 8002012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002018:	2300      	movs	r3, #0
 800201a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	4619      	mov	r1, r3
 8002022:	4804      	ldr	r0, [pc, #16]	; (8002034 <MX_GPIO_Init+0xc4>)
 8002024:	f000 fe1c 	bl	8002c60 <HAL_GPIO_Init>

}
 8002028:	bf00      	nop
 800202a:	3728      	adds	r7, #40	; 0x28
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40023800 	.word	0x40023800
 8002034:	40020000 	.word	0x40020000
 8002038:	40020800 	.word	0x40020800

0800203c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <MX_I2C1_Init+0x50>)
 8002042:	4a13      	ldr	r2, [pc, #76]	; (8002090 <MX_I2C1_Init+0x54>)
 8002044:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <MX_I2C1_Init+0x50>)
 8002048:	4a12      	ldr	r2, [pc, #72]	; (8002094 <MX_I2C1_Init+0x58>)
 800204a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <MX_I2C1_Init+0x50>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <MX_I2C1_Init+0x50>)
 8002054:	2200      	movs	r2, #0
 8002056:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <MX_I2C1_Init+0x50>)
 800205a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800205e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <MX_I2C1_Init+0x50>)
 8002062:	2200      	movs	r2, #0
 8002064:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <MX_I2C1_Init+0x50>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800206c:	4b07      	ldr	r3, [pc, #28]	; (800208c <MX_I2C1_Init+0x50>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <MX_I2C1_Init+0x50>)
 8002074:	2200      	movs	r2, #0
 8002076:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002078:	4804      	ldr	r0, [pc, #16]	; (800208c <MX_I2C1_Init+0x50>)
 800207a:	f000 ff99 	bl	8002fb0 <HAL_I2C_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002084:	f000 fac0 	bl	8002608 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}
 800208c:	200001f8 	.word	0x200001f8
 8002090:	40005400 	.word	0x40005400
 8002094:	000186a0 	.word	0x000186a0

08002098 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a17      	ldr	r2, [pc, #92]	; (8002114 <HAL_I2C_MspInit+0x7c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d128      	bne.n	800210c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ba:	4b17      	ldr	r3, [pc, #92]	; (8002118 <HAL_I2C_MspInit+0x80>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4a16      	ldr	r2, [pc, #88]	; (8002118 <HAL_I2C_MspInit+0x80>)
 80020c0:	f043 0302 	orr.w	r3, r3, #2
 80020c4:	61d3      	str	r3, [r2, #28]
 80020c6:	4b14      	ldr	r3, [pc, #80]	; (8002118 <HAL_I2C_MspInit+0x80>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d8:	2312      	movs	r3, #18
 80020da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020e4:	2304      	movs	r3, #4
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	4619      	mov	r1, r3
 80020ee:	480b      	ldr	r0, [pc, #44]	; (800211c <HAL_I2C_MspInit+0x84>)
 80020f0:	f000 fdb6 	bl	8002c60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_I2C_MspInit+0x80>)
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	4a07      	ldr	r2, [pc, #28]	; (8002118 <HAL_I2C_MspInit+0x80>)
 80020fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020fe:	6253      	str	r3, [r2, #36]	; 0x24
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_I2C_MspInit+0x80>)
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800210c:	bf00      	nop
 800210e:	3728      	adds	r7, #40	; 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40005400 	.word	0x40005400
 8002118:	40023800 	.word	0x40023800
 800211c:	40020400 	.word	0x40020400

08002120 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af02      	add	r7, sp, #8
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	f043 030c 	orr.w	r3, r3, #12
 8002136:	b2da      	uxtb	r2, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	f043 0320 	orr.w	r3, r3, #32
 8002148:	b2db      	uxtb	r3, r3
 800214a:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 800214c:	f107 0118 	add.w	r1, r7, #24
 8002150:	230a      	movs	r3, #10
 8002152:	2202      	movs	r2, #2
 8002154:	486c      	ldr	r0, [pc, #432]	; (8002308 <lcd_init+0x1e8>)
 8002156:	f002 ffda 	bl	800510e <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800215a:	f640 230d 	movw	r3, #2573	; 0xa0d
 800215e:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8002160:	f107 0114 	add.w	r1, r7, #20
 8002164:	230a      	movs	r3, #10
 8002166:	2202      	movs	r2, #2
 8002168:	4867      	ldr	r0, [pc, #412]	; (8002308 <lcd_init+0x1e8>)
 800216a:	f002 ffd0 	bl	800510e <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 800216e:	2364      	movs	r3, #100	; 0x64
 8002170:	2205      	movs	r2, #5
 8002172:	217c      	movs	r1, #124	; 0x7c
 8002174:	69f8      	ldr	r0, [r7, #28]
 8002176:	f001 fc7d 	bl	8003a74 <HAL_I2C_IsDeviceReady>
 800217a:	4603      	mov	r3, r0
 800217c:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 800217e:	f107 0113 	add.w	r1, r7, #19
 8002182:	230a      	movs	r3, #10
 8002184:	2201      	movs	r2, #1
 8002186:	4860      	ldr	r0, [pc, #384]	; (8002308 <lcd_init+0x1e8>)
 8002188:	f002 ffc1 	bl	800510e <HAL_UART_Transmit>
	HAL_Delay(50);
 800218c:	2032      	movs	r0, #50	; 0x32
 800218e:	f000 fc61 	bl	8002a54 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8002192:	f107 0218 	add.w	r2, r7, #24
 8002196:	f241 3388 	movw	r3, #5000	; 0x1388
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	2302      	movs	r3, #2
 800219e:	217c      	movs	r1, #124	; 0x7c
 80021a0:	69f8      	ldr	r0, [r7, #28]
 80021a2:	f001 f849 	bl	8003238 <HAL_I2C_Master_Transmit>
 80021a6:	4603      	mov	r3, r0
 80021a8:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 80021aa:	f107 0112 	add.w	r1, r7, #18
 80021ae:	230a      	movs	r3, #10
 80021b0:	2201      	movs	r2, #1
 80021b2:	4855      	ldr	r0, [pc, #340]	; (8002308 <lcd_init+0x1e8>)
 80021b4:	f002 ffab 	bl	800510e <HAL_UART_Transmit>
	HAL_Delay(50);
 80021b8:	2032      	movs	r0, #50	; 0x32
 80021ba:	f000 fc4b 	bl	8002a54 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80021be:	f107 0218 	add.w	r2, r7, #24
 80021c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2302      	movs	r3, #2
 80021ca:	217c      	movs	r1, #124	; 0x7c
 80021cc:	69f8      	ldr	r0, [r7, #28]
 80021ce:	f001 f833 	bl	8003238 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80021d2:	2005      	movs	r0, #5
 80021d4:	f000 fc3e 	bl	8002a54 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80021d8:	f107 0218 	add.w	r2, r7, #24
 80021dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2302      	movs	r3, #2
 80021e4:	217c      	movs	r1, #124	; 0x7c
 80021e6:	69f8      	ldr	r0, [r7, #28]
 80021e8:	f001 f826 	bl	8003238 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	2204      	movs	r2, #4
 80021f0:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	785b      	ldrb	r3, [r3, #1]
 80021f6:	f043 0308 	orr.w	r3, r3, #8
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 80021fe:	f107 0218 	add.w	r2, r7, #24
 8002202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	2302      	movs	r3, #2
 800220a:	217c      	movs	r1, #124	; 0x7c
 800220c:	69f8      	ldr	r0, [r7, #28]
 800220e:	f001 f813 	bl	8003238 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8002212:	2301      	movs	r3, #1
 8002214:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8002216:	f107 0218 	add.w	r2, r7, #24
 800221a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	2302      	movs	r3, #2
 8002222:	217c      	movs	r1, #124	; 0x7c
 8002224:	69f8      	ldr	r0, [r7, #28]
 8002226:	f001 f807 	bl	8003238 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800222a:	2002      	movs	r0, #2
 800222c:	f000 fc12 	bl	8002a54 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	2202      	movs	r2, #2
 8002234:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	789b      	ldrb	r3, [r3, #2]
 800223a:	f043 0304 	orr.w	r3, r3, #4
 800223e:	b2db      	uxtb	r3, r3
 8002240:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8002242:	f107 0218 	add.w	r2, r7, #24
 8002246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	2302      	movs	r3, #2
 800224e:	217c      	movs	r1, #124	; 0x7c
 8002250:	69f8      	ldr	r0, [r7, #28]
 8002252:	f000 fff1 	bl	8003238 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8002256:	2300      	movs	r3, #0
 8002258:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800225e:	f107 0210 	add.w	r2, r7, #16
 8002262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2302      	movs	r3, #2
 800226a:	21c4      	movs	r1, #196	; 0xc4
 800226c:	69f8      	ldr	r0, [r7, #28]
 800226e:	f000 ffe3 	bl	8003238 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8002272:	2308      	movs	r3, #8
 8002274:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 8002276:	23ff      	movs	r3, #255	; 0xff
 8002278:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800227a:	f107 0210 	add.w	r2, r7, #16
 800227e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	2302      	movs	r3, #2
 8002286:	21c4      	movs	r1, #196	; 0xc4
 8002288:	69f8      	ldr	r0, [r7, #28]
 800228a:	f000 ffd5 	bl	8003238 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 800228e:	2301      	movs	r3, #1
 8002290:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8002292:	2320      	movs	r3, #32
 8002294:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8002296:	f107 0210 	add.w	r2, r7, #16
 800229a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	2302      	movs	r3, #2
 80022a2:	21c4      	movs	r1, #196	; 0xc4
 80022a4:	69f8      	ldr	r0, [r7, #28]
 80022a6:	f000 ffc7 	bl	8003238 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 80022aa:	2304      	movs	r3, #4
 80022ac:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80022ae:	23ff      	movs	r3, #255	; 0xff
 80022b0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80022b2:	f107 020c 	add.w	r2, r7, #12
 80022b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	2302      	movs	r3, #2
 80022be:	21c4      	movs	r1, #196	; 0xc4
 80022c0:	69f8      	ldr	r0, [r7, #28]
 80022c2:	f000 ffb9 	bl	8003238 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 80022c6:	2303      	movs	r3, #3
 80022c8:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80022ca:	23ff      	movs	r3, #255	; 0xff
 80022cc:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80022ce:	f107 020c 	add.w	r2, r7, #12
 80022d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	2302      	movs	r3, #2
 80022da:	21c4      	movs	r1, #196	; 0xc4
 80022dc:	69f8      	ldr	r0, [r7, #28]
 80022de:	f000 ffab 	bl	8003238 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 80022e2:	2302      	movs	r3, #2
 80022e4:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80022e6:	23ff      	movs	r3, #255	; 0xff
 80022e8:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80022ea:	f107 020c 	add.w	r2, r7, #12
 80022ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2302      	movs	r3, #2
 80022f6:	21c4      	movs	r1, #196	; 0xc4
 80022f8:	69f8      	ldr	r0, [r7, #28]
 80022fa:	f000 ff9d 	bl	8003238 <HAL_I2C_Master_Transmit>


}
 80022fe:	bf00      	nop
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000398 	.word	0x20000398

0800230c <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af02      	add	r7, sp, #8
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 800231a:	2340      	movs	r3, #64	; 0x40
 800231c:	733b      	strb	r3, [r7, #12]
    int i=0;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8002322:	e011      	b.n	8002348 <lcd_print+0x3c>
    {
            data[1] = str[i];
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	4413      	add	r3, r2
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 800232e:	f107 020c 	add.w	r2, r7, #12
 8002332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2302      	movs	r3, #2
 800233a:	217c      	movs	r1, #124	; 0x7c
 800233c:	6938      	ldr	r0, [r7, #16]
 800233e:	f000 ff7b 	bl	8003238 <HAL_I2C_Master_Transmit>
            i++;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	3301      	adds	r3, #1
 8002346:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	4413      	add	r3, r2
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e7      	bne.n	8002324 <lcd_print+0x18>
   }
}
 8002354:	bf00      	nop
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af02      	add	r7, sp, #8
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	460b      	mov	r3, r1
 8002368:	70fb      	strb	r3, [r7, #3]
 800236a:	4613      	mov	r3, r2
 800236c:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8002372:	78bb      	ldrb	r3, [r7, #2]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d104      	bne.n	8002382 <lcd_position+0x24>
    {
        col = col | 0x80;
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800237e:	70fb      	strb	r3, [r7, #3]
 8002380:	e003      	b.n	800238a <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002388:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8002392:	f107 0208 	add.w	r2, r7, #8
 8002396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	2302      	movs	r3, #2
 800239e:	217c      	movs	r1, #124	; 0x7c
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 ff49 	bl	8003238 <HAL_I2C_Master_Transmit>
}
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b4:	f000 fadf 	bl	8002976 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023b8:	f000 f8d8 	bl	800256c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023bc:	f7ff fdd8 	bl	8001f70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80023c0:	f000 fa46 	bl	8002850 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80023c4:	f7ff fe3a 	bl	800203c <MX_I2C1_Init>
  lcd_init(&hi2c1, &var);
 80023c8:	4957      	ldr	r1, [pc, #348]	; (8002528 <main+0x178>)
 80023ca:	4858      	ldr	r0, [pc, #352]	; (800252c <main+0x17c>)
 80023cc:	f7ff fea8 	bl	8002120 <lcd_init>
  lcd_position(&hi2c1,0,0);
 80023d0:	2200      	movs	r2, #0
 80023d2:	2100      	movs	r1, #0
 80023d4:	4855      	ldr	r0, [pc, #340]	; (800252c <main+0x17c>)
 80023d6:	f7ff ffc2 	bl	800235e <lcd_position>
//  lcd_print(&hi2c1,"Temp:  ");


  /* USER CODE BEGIN 2 */
  bmp280_init_default_params(&bmp280.params);
 80023da:	4855      	ldr	r0, [pc, #340]	; (8002530 <main+0x180>)
 80023dc:	f7fe ff9e 	bl	800131c <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_1;
 80023e0:	4b54      	ldr	r3, [pc, #336]	; (8002534 <main+0x184>)
 80023e2:	2277      	movs	r2, #119	; 0x77
 80023e4:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 80023e6:	4b53      	ldr	r3, [pc, #332]	; (8002534 <main+0x184>)
 80023e8:	4a50      	ldr	r2, [pc, #320]	; (800252c <main+0x17c>)
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bmp280_init(&bmp280, &bmp280.params);
 80023ec:	4950      	ldr	r1, [pc, #320]	; (8002530 <main+0x180>)
 80023ee:	4851      	ldr	r0, [pc, #324]	; (8002534 <main+0x184>)
 80023f0:	f7ff f90d 	bl	800160e <bmp280_init>
  while (1)
  {
    /* USER CODE END WHILE */
	  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 80023f4:	e013      	b.n	800241e <main+0x6e>
	  			size = sprintf((char *)Data,"Temperature/pressure reading failed\n\r");
 80023f6:	4950      	ldr	r1, [pc, #320]	; (8002538 <main+0x188>)
 80023f8:	4850      	ldr	r0, [pc, #320]	; (800253c <main+0x18c>)
 80023fa:	f003 fcdb 	bl	8005db4 <siprintf>
 80023fe:	4603      	mov	r3, r0
 8002400:	b29a      	uxth	r2, r3
 8002402:	4b4f      	ldr	r3, [pc, #316]	; (8002540 <main+0x190>)
 8002404:	801a      	strh	r2, [r3, #0]
	  			HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002406:	4b4e      	ldr	r3, [pc, #312]	; (8002540 <main+0x190>)
 8002408:	881a      	ldrh	r2, [r3, #0]
 800240a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240e:	494b      	ldr	r1, [pc, #300]	; (800253c <main+0x18c>)
 8002410:	484c      	ldr	r0, [pc, #304]	; (8002544 <main+0x194>)
 8002412:	f002 fe7c 	bl	800510e <HAL_UART_Transmit>
	  			HAL_Delay(2000);
 8002416:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800241a:	f000 fb1b 	bl	8002a54 <HAL_Delay>
	  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 800241e:	4b4a      	ldr	r3, [pc, #296]	; (8002548 <main+0x198>)
 8002420:	4a4a      	ldr	r2, [pc, #296]	; (800254c <main+0x19c>)
 8002422:	494b      	ldr	r1, [pc, #300]	; (8002550 <main+0x1a0>)
 8002424:	4843      	ldr	r0, [pc, #268]	; (8002534 <main+0x184>)
 8002426:	f7ff fd55 	bl	8001ed4 <bmp280_read_float>
 800242a:	4603      	mov	r3, r0
 800242c:	f083 0301 	eor.w	r3, r3, #1
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1df      	bne.n	80023f6 <main+0x46>
	  		}
	  size = sprintf((char *)Data,"%.f C", temperature);
 8002436:	4b46      	ldr	r3, [pc, #280]	; (8002550 <main+0x1a0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe f80c 	bl	8000458 <__aeabi_f2d>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4943      	ldr	r1, [pc, #268]	; (8002554 <main+0x1a4>)
 8002446:	483d      	ldr	r0, [pc, #244]	; (800253c <main+0x18c>)
 8002448:	f003 fcb4 	bl	8005db4 <siprintf>
 800244c:	4603      	mov	r3, r0
 800244e:	b29a      	uxth	r2, r3
 8002450:	4b3b      	ldr	r3, [pc, #236]	; (8002540 <main+0x190>)
 8002452:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002454:	4b3a      	ldr	r3, [pc, #232]	; (8002540 <main+0x190>)
 8002456:	881a      	ldrh	r2, [r3, #0]
 8002458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245c:	4937      	ldr	r1, [pc, #220]	; (800253c <main+0x18c>)
 800245e:	4839      	ldr	r0, [pc, #228]	; (8002544 <main+0x194>)
 8002460:	f002 fe55 	bl	800510e <HAL_UART_Transmit>
	  lcd_position(&hi2c1,0,0);
 8002464:	2200      	movs	r2, #0
 8002466:	2100      	movs	r1, #0
 8002468:	4830      	ldr	r0, [pc, #192]	; (800252c <main+0x17c>)
 800246a:	f7ff ff78 	bl	800235e <lcd_position>
	  lcd_print(&hi2c1,"Temp:  ");
 800246e:	493a      	ldr	r1, [pc, #232]	; (8002558 <main+0x1a8>)
 8002470:	482e      	ldr	r0, [pc, #184]	; (800252c <main+0x17c>)
 8002472:	f7ff ff4b 	bl	800230c <lcd_print>
	  lcd_position(&hi2c1,6,0);
 8002476:	2200      	movs	r2, #0
 8002478:	2106      	movs	r1, #6
 800247a:	482c      	ldr	r0, [pc, #176]	; (800252c <main+0x17c>)
 800247c:	f7ff ff6f 	bl	800235e <lcd_position>
	  lcd_print(&hi2c1,Data);
 8002480:	492e      	ldr	r1, [pc, #184]	; (800253c <main+0x18c>)
 8002482:	482a      	ldr	r0, [pc, #168]	; (800252c <main+0x17c>)
 8002484:	f7ff ff42 	bl	800230c <lcd_print>
	  pressure=pressure/100.;
 8002488:	4b30      	ldr	r3, [pc, #192]	; (800254c <main+0x19c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4933      	ldr	r1, [pc, #204]	; (800255c <main+0x1ac>)
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fcd4 	bl	8000e3c <__aeabi_fdiv>
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	4b2c      	ldr	r3, [pc, #176]	; (800254c <main+0x19c>)
 800249a:	601a      	str	r2, [r3, #0]
	  size = sprintf((char *)Data,"%.f hPa", pressure);
 800249c:	4b2b      	ldr	r3, [pc, #172]	; (800254c <main+0x19c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fd ffd9 	bl	8000458 <__aeabi_f2d>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	492d      	ldr	r1, [pc, #180]	; (8002560 <main+0x1b0>)
 80024ac:	4823      	ldr	r0, [pc, #140]	; (800253c <main+0x18c>)
 80024ae:	f003 fc81 	bl	8005db4 <siprintf>
 80024b2:	4603      	mov	r3, r0
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	4b22      	ldr	r3, [pc, #136]	; (8002540 <main+0x190>)
 80024b8:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, Data, size, 1000);
 80024ba:	4b21      	ldr	r3, [pc, #132]	; (8002540 <main+0x190>)
 80024bc:	881a      	ldrh	r2, [r3, #0]
 80024be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c2:	491e      	ldr	r1, [pc, #120]	; (800253c <main+0x18c>)
 80024c4:	481f      	ldr	r0, [pc, #124]	; (8002544 <main+0x194>)
 80024c6:	f002 fe22 	bl	800510e <HAL_UART_Transmit>
	  lcd_position(&hi2c1,0,1);
 80024ca:	2201      	movs	r2, #1
 80024cc:	2100      	movs	r1, #0
 80024ce:	4817      	ldr	r0, [pc, #92]	; (800252c <main+0x17c>)
 80024d0:	f7ff ff45 	bl	800235e <lcd_position>
	  lcd_print(&hi2c1,"Pres: ");
 80024d4:	4923      	ldr	r1, [pc, #140]	; (8002564 <main+0x1b4>)
 80024d6:	4815      	ldr	r0, [pc, #84]	; (800252c <main+0x17c>)
 80024d8:	f7ff ff18 	bl	800230c <lcd_print>
	  lcd_position(&hi2c1,6,1);
 80024dc:	2201      	movs	r2, #1
 80024de:	2106      	movs	r1, #6
 80024e0:	4812      	ldr	r0, [pc, #72]	; (800252c <main+0x17c>)
 80024e2:	f7ff ff3c 	bl	800235e <lcd_position>
	  lcd_print(&hi2c1,Data);
 80024e6:	4915      	ldr	r1, [pc, #84]	; (800253c <main+0x18c>)
 80024e8:	4810      	ldr	r0, [pc, #64]	; (800252c <main+0x17c>)
 80024ea:	f7ff ff0f 	bl	800230c <lcd_print>
	  size = sprintf((char *)Data,", Humidity: %.2f\n\r", humidity);
 80024ee:	4b16      	ldr	r3, [pc, #88]	; (8002548 <main+0x198>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fd ffb0 	bl	8000458 <__aeabi_f2d>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	491a      	ldr	r1, [pc, #104]	; (8002568 <main+0x1b8>)
 80024fe:	480f      	ldr	r0, [pc, #60]	; (800253c <main+0x18c>)
 8002500:	f003 fc58 	bl	8005db4 <siprintf>
 8002504:	4603      	mov	r3, r0
 8002506:	b29a      	uxth	r2, r3
 8002508:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <main+0x190>)
 800250a:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, Data, size, 1000);
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <main+0x190>)
 800250e:	881a      	ldrh	r2, [r3, #0]
 8002510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002514:	4909      	ldr	r1, [pc, #36]	; (800253c <main+0x18c>)
 8002516:	480b      	ldr	r0, [pc, #44]	; (8002544 <main+0x194>)
 8002518:	f002 fdf9 	bl	800510e <HAL_UART_Transmit>
    /* USER CODE BEGIN 3 */
	  HAL_Delay(2000);
 800251c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002520:	f000 fa98 	bl	8002a54 <HAL_Delay>
	  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8002524:	e77b      	b.n	800241e <main+0x6e>
 8002526:	bf00      	nop
 8002528:	2000024c 	.word	0x2000024c
 800252c:	200001f8 	.word	0x200001f8
 8002530:	2000027c 	.word	0x2000027c
 8002534:	20000250 	.word	0x20000250
 8002538:	080082c0 	.word	0x080082c0
 800253c:	20000294 	.word	0x20000294
 8002540:	20000290 	.word	0x20000290
 8002544:	20000398 	.word	0x20000398
 8002548:	2000028c 	.word	0x2000028c
 800254c:	20000284 	.word	0x20000284
 8002550:	20000288 	.word	0x20000288
 8002554:	080082e8 	.word	0x080082e8
 8002558:	080082f0 	.word	0x080082f0
 800255c:	42c80000 	.word	0x42c80000
 8002560:	080082f8 	.word	0x080082f8
 8002564:	08008300 	.word	0x08008300
 8002568:	08008308 	.word	0x08008308

0800256c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b092      	sub	sp, #72	; 0x48
 8002570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002572:	f107 0314 	add.w	r3, r7, #20
 8002576:	2234      	movs	r2, #52	; 0x34
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f002 ffb2 	bl	80054e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002580:	463b      	mov	r3, r7
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	60da      	str	r2, [r3, #12]
 800258c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800258e:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <SystemClock_Config+0x98>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002596:	4a1b      	ldr	r2, [pc, #108]	; (8002604 <SystemClock_Config+0x98>)
 8002598:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800259c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800259e:	2302      	movs	r3, #2
 80025a0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025a2:	2301      	movs	r3, #1
 80025a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025a6:	2310      	movs	r3, #16
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025aa:	2302      	movs	r3, #2
 80025ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025ae:	2300      	movs	r3, #0
 80025b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80025b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80025b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80025b8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80025bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025be:	f107 0314 	add.w	r3, r7, #20
 80025c2:	4618      	mov	r0, r3
 80025c4:	f001 ff60 	bl	8004488 <HAL_RCC_OscConfig>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80025ce:	f000 f81b 	bl	8002608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025d2:	230f      	movs	r3, #15
 80025d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025d6:	2303      	movs	r3, #3
 80025d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80025e6:	463b      	mov	r3, r7
 80025e8:	2101      	movs	r1, #1
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 fa7c 	bl	8004ae8 <HAL_RCC_ClockConfig>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80025f6:	f000 f807 	bl	8002608 <Error_Handler>
  }
}
 80025fa:	bf00      	nop
 80025fc:	3748      	adds	r7, #72	; 0x48
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40007000 	.word	0x40007000

08002608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800260c:	b672      	cpsid	i
}
 800260e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002610:	e7fe      	b.n	8002610 <Error_Handler+0x8>
	...

08002614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_MspInit+0x5c>)
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	4a14      	ldr	r2, [pc, #80]	; (8002670 <HAL_MspInit+0x5c>)
 8002620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002624:	6253      	str	r3, [r2, #36]	; 0x24
 8002626:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_MspInit+0x5c>)
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002632:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <HAL_MspInit+0x5c>)
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	4a0e      	ldr	r2, [pc, #56]	; (8002670 <HAL_MspInit+0x5c>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6213      	str	r3, [r2, #32]
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <HAL_MspInit+0x5c>)
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_MspInit+0x5c>)
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	4a08      	ldr	r2, [pc, #32]	; (8002670 <HAL_MspInit+0x5c>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	6253      	str	r3, [r2, #36]	; 0x24
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_MspInit+0x5c>)
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002662:	2007      	movs	r0, #7
 8002664:	f000 fac8 	bl	8002bf8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002668:	bf00      	nop
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40023800 	.word	0x40023800

08002674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002678:	e7fe      	b.n	8002678 <NMI_Handler+0x4>

0800267a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800267a:	b480      	push	{r7}
 800267c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800267e:	e7fe      	b.n	800267e <HardFault_Handler+0x4>

08002680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002684:	e7fe      	b.n	8002684 <MemManage_Handler+0x4>

08002686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002686:	b480      	push	{r7}
 8002688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800268a:	e7fe      	b.n	800268a <BusFault_Handler+0x4>

0800268c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002690:	e7fe      	b.n	8002690 <UsageFault_Handler+0x4>

08002692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr

080026aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026aa:	b480      	push	{r7}
 80026ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr

080026b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ba:	f000 f9af 	bl	8002a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0
  return 1;
 80026c6:	2301      	movs	r3, #1
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <_kill>:

int _kill(int pid, int sig)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026da:	f002 fed9 	bl	8005490 <__errno>
 80026de:	4603      	mov	r3, r0
 80026e0:	2216      	movs	r2, #22
 80026e2:	601a      	str	r2, [r3, #0]
  return -1;
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <_exit>:

void _exit (int status)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026f8:	f04f 31ff 	mov.w	r1, #4294967295
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ffe7 	bl	80026d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002702:	e7fe      	b.n	8002702 <_exit+0x12>

08002704 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	e00a      	b.n	800272c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002716:	f3af 8000 	nop.w
 800271a:	4601      	mov	r1, r0
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	60ba      	str	r2, [r7, #8]
 8002722:	b2ca      	uxtb	r2, r1
 8002724:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	3301      	adds	r3, #1
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	429a      	cmp	r2, r3
 8002732:	dbf0      	blt.n	8002716 <_read+0x12>
  }

  return len;
 8002734:	687b      	ldr	r3, [r7, #4]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b086      	sub	sp, #24
 8002742:	af00      	add	r7, sp, #0
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	e009      	b.n	8002764 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	60ba      	str	r2, [r7, #8]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3301      	adds	r3, #1
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	429a      	cmp	r2, r3
 800276a:	dbf1      	blt.n	8002750 <_write+0x12>
  }
  return len;
 800276c:	687b      	ldr	r3, [r7, #4]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <_close>:

int _close(int file)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800279c:	605a      	str	r2, [r3, #4]
  return 0;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr

080027aa <_isatty>:

int _isatty(int file)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027b2:	2301      	movs	r3, #1
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027be:	b480      	push	{r7}
 80027c0:	b085      	sub	sp, #20
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
	...

080027d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e0:	4a14      	ldr	r2, [pc, #80]	; (8002834 <_sbrk+0x5c>)
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <_sbrk+0x60>)
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027ec:	4b13      	ldr	r3, [pc, #76]	; (800283c <_sbrk+0x64>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027f4:	4b11      	ldr	r3, [pc, #68]	; (800283c <_sbrk+0x64>)
 80027f6:	4a12      	ldr	r2, [pc, #72]	; (8002840 <_sbrk+0x68>)
 80027f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <_sbrk+0x64>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	429a      	cmp	r2, r3
 8002806:	d207      	bcs.n	8002818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002808:	f002 fe42 	bl	8005490 <__errno>
 800280c:	4603      	mov	r3, r0
 800280e:	220c      	movs	r2, #12
 8002810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	e009      	b.n	800282c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <_sbrk+0x64>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <_sbrk+0x64>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	4a05      	ldr	r2, [pc, #20]	; (800283c <_sbrk+0x64>)
 8002828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800282a:	68fb      	ldr	r3, [r7, #12]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20014000 	.word	0x20014000
 8002838:	00000400 	.word	0x00000400
 800283c:	20000394 	.word	0x20000394
 8002840:	200003f0 	.word	0x200003f0

08002844 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <MX_USART2_UART_Init+0x4c>)
 8002856:	4a12      	ldr	r2, [pc, #72]	; (80028a0 <MX_USART2_UART_Init+0x50>)
 8002858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800285a:	4b10      	ldr	r3, [pc, #64]	; (800289c <MX_USART2_UART_Init+0x4c>)
 800285c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <MX_USART2_UART_Init+0x4c>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <MX_USART2_UART_Init+0x4c>)
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <MX_USART2_UART_Init+0x4c>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002874:	4b09      	ldr	r3, [pc, #36]	; (800289c <MX_USART2_UART_Init+0x4c>)
 8002876:	220c      	movs	r2, #12
 8002878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <MX_USART2_UART_Init+0x4c>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <MX_USART2_UART_Init+0x4c>)
 8002882:	2200      	movs	r2, #0
 8002884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002886:	4805      	ldr	r0, [pc, #20]	; (800289c <MX_USART2_UART_Init+0x4c>)
 8002888:	f002 fbf4 	bl	8005074 <HAL_UART_Init>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002892:	f7ff feb9 	bl	8002608 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000398 	.word	0x20000398
 80028a0:	40004400 	.word	0x40004400

080028a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08a      	sub	sp, #40	; 0x28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a17      	ldr	r2, [pc, #92]	; (8002920 <HAL_UART_MspInit+0x7c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d127      	bne.n	8002916 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <HAL_UART_MspInit+0x80>)
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	4a16      	ldr	r2, [pc, #88]	; (8002924 <HAL_UART_MspInit+0x80>)
 80028cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d0:	6253      	str	r3, [r2, #36]	; 0x24
 80028d2:	4b14      	ldr	r3, [pc, #80]	; (8002924 <HAL_UART_MspInit+0x80>)
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_UART_MspInit+0x80>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	4a10      	ldr	r2, [pc, #64]	; (8002924 <HAL_UART_MspInit+0x80>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	61d3      	str	r3, [r2, #28]
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_UART_MspInit+0x80>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80028f6:	230c      	movs	r3, #12
 80028f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	2302      	movs	r3, #2
 80028fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002902:	2303      	movs	r3, #3
 8002904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002906:	2307      	movs	r3, #7
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	4619      	mov	r1, r3
 8002910:	4805      	ldr	r0, [pc, #20]	; (8002928 <HAL_UART_MspInit+0x84>)
 8002912:	f000 f9a5 	bl	8002c60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002916:	bf00      	nop
 8002918:	3728      	adds	r7, #40	; 0x28
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40004400 	.word	0x40004400
 8002924:	40023800 	.word	0x40023800
 8002928:	40020000 	.word	0x40020000

0800292c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800292c:	480c      	ldr	r0, [pc, #48]	; (8002960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800292e:	490d      	ldr	r1, [pc, #52]	; (8002964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002930:	4a0d      	ldr	r2, [pc, #52]	; (8002968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002934:	e002      	b.n	800293c <LoopCopyDataInit>

08002936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293a:	3304      	adds	r3, #4

0800293c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800293c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002940:	d3f9      	bcc.n	8002936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002942:	4a0a      	ldr	r2, [pc, #40]	; (800296c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002944:	4c0a      	ldr	r4, [pc, #40]	; (8002970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002948:	e001      	b.n	800294e <LoopFillZerobss>

0800294a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800294c:	3204      	adds	r2, #4

0800294e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002950:	d3fb      	bcc.n	800294a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002952:	f7ff ff77 	bl	8002844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002956:	f002 fda1 	bl	800549c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800295a:	f7ff fd29 	bl	80023b0 <main>
  bx lr
 800295e:	4770      	bx	lr
  ldr r0, =_sdata
 8002960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002964:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002968:	0800872c 	.word	0x0800872c
  ldr r2, =_sbss
 800296c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002970:	200003f0 	.word	0x200003f0

08002974 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002974:	e7fe      	b.n	8002974 <ADC1_IRQHandler>

08002976 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002980:	2003      	movs	r0, #3
 8002982:	f000 f939 	bl	8002bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002986:	2000      	movs	r0, #0
 8002988:	f000 f80e 	bl	80029a8 <HAL_InitTick>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	71fb      	strb	r3, [r7, #7]
 8002996:	e001      	b.n	800299c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002998:	f7ff fe3c 	bl	8002614 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800299c:	79fb      	ldrb	r3, [r7, #7]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80029b4:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <HAL_InitTick+0x68>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d022      	beq.n	8002a02 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80029bc:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <HAL_InitTick+0x6c>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <HAL_InitTick+0x68>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 f938 	bl	8002c46 <HAL_SYSTICK_Config>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10f      	bne.n	80029fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b0f      	cmp	r3, #15
 80029e0:	d809      	bhi.n	80029f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e2:	2200      	movs	r2, #0
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	f04f 30ff 	mov.w	r0, #4294967295
 80029ea:	f000 f910 	bl	8002c0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029ee:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <HAL_InitTick+0x70>)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	e007      	b.n	8002a06 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
 80029fa:	e004      	b.n	8002a06 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
 8002a00:	e001      	b.n	8002a06 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	20000008 	.word	0x20000008
 8002a14:	20000000 	.word	0x20000000
 8002a18:	20000004 	.word	0x20000004

08002a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a20:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_IncTick+0x1c>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <HAL_IncTick+0x20>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4413      	add	r3, r2
 8002a2a:	4a03      	ldr	r2, [pc, #12]	; (8002a38 <HAL_IncTick+0x1c>)
 8002a2c:	6013      	str	r3, [r2, #0]
}
 8002a2e:	bf00      	nop
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	200003dc 	.word	0x200003dc
 8002a3c:	20000008 	.word	0x20000008

08002a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return uwTick;
 8002a44:	4b02      	ldr	r3, [pc, #8]	; (8002a50 <HAL_GetTick+0x10>)
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr
 8002a50:	200003dc 	.word	0x200003dc

08002a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a5c:	f7ff fff0 	bl	8002a40 <HAL_GetTick>
 8002a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d004      	beq.n	8002a78 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_Delay+0x40>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4413      	add	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a78:	bf00      	nop
 8002a7a:	f7ff ffe1 	bl	8002a40 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d8f7      	bhi.n	8002a7a <HAL_Delay+0x26>
  {
  }
}
 8002a8a:	bf00      	nop
 8002a8c:	bf00      	nop
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000008 	.word	0x20000008

08002a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <__NVIC_SetPriorityGrouping+0x44>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aca:	4a04      	ldr	r2, [pc, #16]	; (8002adc <__NVIC_SetPriorityGrouping+0x44>)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	60d3      	str	r3, [r2, #12]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	f003 0307 	and.w	r3, r3, #7
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	6039      	str	r1, [r7, #0]
 8002b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	db0a      	blt.n	8002b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	490c      	ldr	r1, [pc, #48]	; (8002b48 <__NVIC_SetPriority+0x4c>)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	0112      	lsls	r2, r2, #4
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	440b      	add	r3, r1
 8002b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b24:	e00a      	b.n	8002b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	4908      	ldr	r1, [pc, #32]	; (8002b4c <__NVIC_SetPriority+0x50>)
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	3b04      	subs	r3, #4
 8002b34:	0112      	lsls	r2, r2, #4
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	440b      	add	r3, r1
 8002b3a:	761a      	strb	r2, [r3, #24]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e000e100 	.word	0xe000e100
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b089      	sub	sp, #36	; 0x24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f1c3 0307 	rsb	r3, r3, #7
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	bf28      	it	cs
 8002b6e:	2304      	movcs	r3, #4
 8002b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3304      	adds	r3, #4
 8002b76:	2b06      	cmp	r3, #6
 8002b78:	d902      	bls.n	8002b80 <NVIC_EncodePriority+0x30>
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3b03      	subs	r3, #3
 8002b7e:	e000      	b.n	8002b82 <NVIC_EncodePriority+0x32>
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b84:	f04f 32ff 	mov.w	r2, #4294967295
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43da      	mvns	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	401a      	ands	r2, r3
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b98:	f04f 31ff 	mov.w	r1, #4294967295
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	43d9      	mvns	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba8:	4313      	orrs	r3, r2
         );
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3724      	adds	r7, #36	; 0x24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bc4:	d301      	bcc.n	8002bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e00f      	b.n	8002bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bca:	4a0a      	ldr	r2, [pc, #40]	; (8002bf4 <SysTick_Config+0x40>)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bd2:	210f      	movs	r1, #15
 8002bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd8:	f7ff ff90 	bl	8002afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <SysTick_Config+0x40>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002be2:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <SysTick_Config+0x40>)
 8002be4:	2207      	movs	r2, #7
 8002be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	e000e010 	.word	0xe000e010

08002bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff ff49 	bl	8002a98 <__NVIC_SetPriorityGrouping>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	4603      	mov	r3, r0
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c20:	f7ff ff5e 	bl	8002ae0 <__NVIC_GetPriorityGrouping>
 8002c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	6978      	ldr	r0, [r7, #20]
 8002c2c:	f7ff ff90 	bl	8002b50 <NVIC_EncodePriority>
 8002c30:	4602      	mov	r2, r0
 8002c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c36:	4611      	mov	r1, r2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ff5f 	bl	8002afc <__NVIC_SetPriority>
}
 8002c3e:	bf00      	nop
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff ffb0 	bl	8002bb4 <SysTick_Config>
 8002c54:	4603      	mov	r3, r0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002c76:	e160      	b.n	8002f3a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	4013      	ands	r3, r2
 8002c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8152 	beq.w	8002f34 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d005      	beq.n	8002ca8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d130      	bne.n	8002d0a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002cde:	2201      	movs	r2, #1
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	f003 0201 	and.w	r2, r3, #1
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d017      	beq.n	8002d46 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	2203      	movs	r2, #3
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d123      	bne.n	8002d9a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	08da      	lsrs	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3208      	adds	r2, #8
 8002d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	220f      	movs	r2, #15
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	08da      	lsrs	r2, r3, #3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3208      	adds	r2, #8
 8002d94:	6939      	ldr	r1, [r7, #16]
 8002d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	2203      	movs	r2, #3
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 0203 	and.w	r2, r3, #3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 80ac 	beq.w	8002f34 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ddc:	4b5e      	ldr	r3, [pc, #376]	; (8002f58 <HAL_GPIO_Init+0x2f8>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	4a5d      	ldr	r2, [pc, #372]	; (8002f58 <HAL_GPIO_Init+0x2f8>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6213      	str	r3, [r2, #32]
 8002de8:	4b5b      	ldr	r3, [pc, #364]	; (8002f58 <HAL_GPIO_Init+0x2f8>)
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002df4:	4a59      	ldr	r2, [pc, #356]	; (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a51      	ldr	r2, [pc, #324]	; (8002f60 <HAL_GPIO_Init+0x300>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d025      	beq.n	8002e6c <HAL_GPIO_Init+0x20c>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a50      	ldr	r2, [pc, #320]	; (8002f64 <HAL_GPIO_Init+0x304>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d01f      	beq.n	8002e68 <HAL_GPIO_Init+0x208>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a4f      	ldr	r2, [pc, #316]	; (8002f68 <HAL_GPIO_Init+0x308>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d019      	beq.n	8002e64 <HAL_GPIO_Init+0x204>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a4e      	ldr	r2, [pc, #312]	; (8002f6c <HAL_GPIO_Init+0x30c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d013      	beq.n	8002e60 <HAL_GPIO_Init+0x200>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a4d      	ldr	r2, [pc, #308]	; (8002f70 <HAL_GPIO_Init+0x310>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00d      	beq.n	8002e5c <HAL_GPIO_Init+0x1fc>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a4c      	ldr	r2, [pc, #304]	; (8002f74 <HAL_GPIO_Init+0x314>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d007      	beq.n	8002e58 <HAL_GPIO_Init+0x1f8>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a4b      	ldr	r2, [pc, #300]	; (8002f78 <HAL_GPIO_Init+0x318>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d101      	bne.n	8002e54 <HAL_GPIO_Init+0x1f4>
 8002e50:	2306      	movs	r3, #6
 8002e52:	e00c      	b.n	8002e6e <HAL_GPIO_Init+0x20e>
 8002e54:	2307      	movs	r3, #7
 8002e56:	e00a      	b.n	8002e6e <HAL_GPIO_Init+0x20e>
 8002e58:	2305      	movs	r3, #5
 8002e5a:	e008      	b.n	8002e6e <HAL_GPIO_Init+0x20e>
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	e006      	b.n	8002e6e <HAL_GPIO_Init+0x20e>
 8002e60:	2303      	movs	r3, #3
 8002e62:	e004      	b.n	8002e6e <HAL_GPIO_Init+0x20e>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e002      	b.n	8002e6e <HAL_GPIO_Init+0x20e>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_GPIO_Init+0x20e>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	f002 0203 	and.w	r2, r2, #3
 8002e74:	0092      	lsls	r2, r2, #2
 8002e76:	4093      	lsls	r3, r2
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e7e:	4937      	ldr	r1, [pc, #220]	; (8002f5c <HAL_GPIO_Init+0x2fc>)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	089b      	lsrs	r3, r3, #2
 8002e84:	3302      	adds	r3, #2
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e8c:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <HAL_GPIO_Init+0x31c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002eb0:	4a32      	ldr	r2, [pc, #200]	; (8002f7c <HAL_GPIO_Init+0x31c>)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002eb6:	4b31      	ldr	r3, [pc, #196]	; (8002f7c <HAL_GPIO_Init+0x31c>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002eda:	4a28      	ldr	r2, [pc, #160]	; (8002f7c <HAL_GPIO_Init+0x31c>)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ee0:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <HAL_GPIO_Init+0x31c>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f04:	4a1d      	ldr	r2, [pc, #116]	; (8002f7c <HAL_GPIO_Init+0x31c>)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <HAL_GPIO_Init+0x31c>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	43db      	mvns	r3, r3
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4013      	ands	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f2e:	4a13      	ldr	r2, [pc, #76]	; (8002f7c <HAL_GPIO_Init+0x31c>)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	3301      	adds	r3, #1
 8002f38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f47f ae97 	bne.w	8002c78 <HAL_GPIO_Init+0x18>
  }
}
 8002f4a:	bf00      	nop
 8002f4c:	bf00      	nop
 8002f4e:	371c      	adds	r7, #28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40010000 	.word	0x40010000
 8002f60:	40020000 	.word	0x40020000
 8002f64:	40020400 	.word	0x40020400
 8002f68:	40020800 	.word	0x40020800
 8002f6c:	40020c00 	.word	0x40020c00
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40021400 	.word	0x40021400
 8002f78:	40021800 	.word	0x40021800
 8002f7c:	40010400 	.word	0x40010400

08002f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f90:	787b      	ldrb	r3, [r7, #1]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f96:	887a      	ldrh	r2, [r7, #2]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002f9c:	e003      	b.n	8002fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002f9e:	887b      	ldrh	r3, [r7, #2]
 8002fa0:	041a      	lsls	r2, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	619a      	str	r2, [r3, #24]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e12b      	b.n	800321a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff f85e 	bl	8002098 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2224      	movs	r2, #36	; 0x24
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0201 	bic.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003002:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003012:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003014:	f001 ffa6 	bl	8004f64 <HAL_RCC_GetPCLK1Freq>
 8003018:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4a81      	ldr	r2, [pc, #516]	; (8003224 <HAL_I2C_Init+0x274>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d807      	bhi.n	8003034 <HAL_I2C_Init+0x84>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a80      	ldr	r2, [pc, #512]	; (8003228 <HAL_I2C_Init+0x278>)
 8003028:	4293      	cmp	r3, r2
 800302a:	bf94      	ite	ls
 800302c:	2301      	movls	r3, #1
 800302e:	2300      	movhi	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e006      	b.n	8003042 <HAL_I2C_Init+0x92>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a7d      	ldr	r2, [pc, #500]	; (800322c <HAL_I2C_Init+0x27c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	bf94      	ite	ls
 800303c:	2301      	movls	r3, #1
 800303e:	2300      	movhi	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e0e7      	b.n	800321a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4a78      	ldr	r2, [pc, #480]	; (8003230 <HAL_I2C_Init+0x280>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0c9b      	lsrs	r3, r3, #18
 8003054:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a6a      	ldr	r2, [pc, #424]	; (8003224 <HAL_I2C_Init+0x274>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d802      	bhi.n	8003084 <HAL_I2C_Init+0xd4>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	3301      	adds	r3, #1
 8003082:	e009      	b.n	8003098 <HAL_I2C_Init+0xe8>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	4a69      	ldr	r2, [pc, #420]	; (8003234 <HAL_I2C_Init+0x284>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	3301      	adds	r3, #1
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	430b      	orrs	r3, r1
 800309e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	495c      	ldr	r1, [pc, #368]	; (8003224 <HAL_I2C_Init+0x274>)
 80030b4:	428b      	cmp	r3, r1
 80030b6:	d819      	bhi.n	80030ec <HAL_I2C_Init+0x13c>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1e59      	subs	r1, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c6:	1c59      	adds	r1, r3, #1
 80030c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030cc:	400b      	ands	r3, r1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_I2C_Init+0x138>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	1e59      	subs	r1, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e0:	3301      	adds	r3, #1
 80030e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e6:	e051      	b.n	800318c <HAL_I2C_Init+0x1dc>
 80030e8:	2304      	movs	r3, #4
 80030ea:	e04f      	b.n	800318c <HAL_I2C_Init+0x1dc>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d111      	bne.n	8003118 <HAL_I2C_Init+0x168>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1e58      	subs	r0, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6859      	ldr	r1, [r3, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	440b      	add	r3, r1
 8003102:	fbb0 f3f3 	udiv	r3, r0, r3
 8003106:	3301      	adds	r3, #1
 8003108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e012      	b.n	800313e <HAL_I2C_Init+0x18e>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	1e58      	subs	r0, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	0099      	lsls	r1, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	fbb0 f3f3 	udiv	r3, r0, r3
 800312e:	3301      	adds	r3, #1
 8003130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf0c      	ite	eq
 8003138:	2301      	moveq	r3, #1
 800313a:	2300      	movne	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_I2C_Init+0x196>
 8003142:	2301      	movs	r3, #1
 8003144:	e022      	b.n	800318c <HAL_I2C_Init+0x1dc>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10e      	bne.n	800316c <HAL_I2C_Init+0x1bc>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1e58      	subs	r0, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6859      	ldr	r1, [r3, #4]
 8003156:	460b      	mov	r3, r1
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	440b      	add	r3, r1
 800315c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003160:	3301      	adds	r3, #1
 8003162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800316a:	e00f      	b.n	800318c <HAL_I2C_Init+0x1dc>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1e58      	subs	r0, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	0099      	lsls	r1, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003182:	3301      	adds	r3, #1
 8003184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003188:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	6809      	ldr	r1, [r1, #0]
 8003190:	4313      	orrs	r3, r2
 8003192:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69da      	ldr	r2, [r3, #28]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6911      	ldr	r1, [r2, #16]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68d2      	ldr	r2, [r2, #12]
 80031c6:	4311      	orrs	r1, r2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	000186a0 	.word	0x000186a0
 8003228:	001e847f 	.word	0x001e847f
 800322c:	003d08ff 	.word	0x003d08ff
 8003230:	431bde83 	.word	0x431bde83
 8003234:	10624dd3 	.word	0x10624dd3

08003238 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	461a      	mov	r2, r3
 8003244:	460b      	mov	r3, r1
 8003246:	817b      	strh	r3, [r7, #10]
 8003248:	4613      	mov	r3, r2
 800324a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800324c:	f7ff fbf8 	bl	8002a40 <HAL_GetTick>
 8003250:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b20      	cmp	r3, #32
 800325c:	f040 80e0 	bne.w	8003420 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	2319      	movs	r3, #25
 8003266:	2201      	movs	r2, #1
 8003268:	4970      	ldr	r1, [pc, #448]	; (800342c <HAL_I2C_Master_Transmit+0x1f4>)
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 ff30 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003276:	2302      	movs	r3, #2
 8003278:	e0d3      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_I2C_Master_Transmit+0x50>
 8003284:	2302      	movs	r3, #2
 8003286:	e0cc      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1ea>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b01      	cmp	r3, #1
 800329c:	d007      	beq.n	80032ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2221      	movs	r2, #33	; 0x21
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2210      	movs	r2, #16
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	893a      	ldrh	r2, [r7, #8]
 80032de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4a50      	ldr	r2, [pc, #320]	; (8003430 <HAL_I2C_Master_Transmit+0x1f8>)
 80032ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032f0:	8979      	ldrh	r1, [r7, #10]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	6a3a      	ldr	r2, [r7, #32]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fcea 	bl	8003cd0 <I2C_MasterRequestWrite>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e08d      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800331c:	e066      	b.n	80033ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	6a39      	ldr	r1, [r7, #32]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 ffaa 	bl	800427c <I2C_WaitOnTXEFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00d      	beq.n	800334a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	2b04      	cmp	r3, #4
 8003334:	d107      	bne.n	8003346 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003344:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e06b      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b04      	cmp	r3, #4
 8003386:	d11b      	bne.n	80033c0 <HAL_I2C_Master_Transmit+0x188>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338c:	2b00      	cmp	r3, #0
 800338e:	d017      	beq.n	80033c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	781a      	ldrb	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	6a39      	ldr	r1, [r7, #32]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 ff9a 	bl	80042fe <I2C_WaitOnBTFFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00d      	beq.n	80033ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d107      	bne.n	80033e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e01a      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d194      	bne.n	800331e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e000      	b.n	8003422 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
  }
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	00100002 	.word	0x00100002
 8003430:	ffff0000 	.word	0xffff0000

08003434 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	4608      	mov	r0, r1
 800343e:	4611      	mov	r1, r2
 8003440:	461a      	mov	r2, r3
 8003442:	4603      	mov	r3, r0
 8003444:	817b      	strh	r3, [r7, #10]
 8003446:	460b      	mov	r3, r1
 8003448:	813b      	strh	r3, [r7, #8]
 800344a:	4613      	mov	r3, r2
 800344c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800344e:	f7ff faf7 	bl	8002a40 <HAL_GetTick>
 8003452:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b20      	cmp	r3, #32
 800345e:	f040 80d9 	bne.w	8003614 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	2319      	movs	r3, #25
 8003468:	2201      	movs	r2, #1
 800346a:	496d      	ldr	r1, [pc, #436]	; (8003620 <HAL_I2C_Mem_Write+0x1ec>)
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 fe2f 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003478:	2302      	movs	r3, #2
 800347a:	e0cc      	b.n	8003616 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_I2C_Mem_Write+0x56>
 8003486:	2302      	movs	r3, #2
 8003488:	e0c5      	b.n	8003616 <HAL_I2C_Mem_Write+0x1e2>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b01      	cmp	r3, #1
 800349e:	d007      	beq.n	80034b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2221      	movs	r2, #33	; 0x21
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2240      	movs	r2, #64	; 0x40
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a3a      	ldr	r2, [r7, #32]
 80034da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4a4d      	ldr	r2, [pc, #308]	; (8003624 <HAL_I2C_Mem_Write+0x1f0>)
 80034f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034f2:	88f8      	ldrh	r0, [r7, #6]
 80034f4:	893a      	ldrh	r2, [r7, #8]
 80034f6:	8979      	ldrh	r1, [r7, #10]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	9301      	str	r3, [sp, #4]
 80034fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	4603      	mov	r3, r0
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fc66 	bl	8003dd4 <I2C_RequestMemoryWrite>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d052      	beq.n	80035b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e081      	b.n	8003616 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 feb0 	bl	800427c <I2C_WaitOnTXEFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00d      	beq.n	800353e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	2b04      	cmp	r3, #4
 8003528:	d107      	bne.n	800353a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003538:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e06b      	b.n	8003616 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	781a      	ldrb	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b04      	cmp	r3, #4
 800357a:	d11b      	bne.n	80035b4 <HAL_I2C_Mem_Write+0x180>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003580:	2b00      	cmp	r3, #0
 8003582:	d017      	beq.n	80035b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	781a      	ldrb	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1aa      	bne.n	8003512 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 fe9c 	bl	80042fe <I2C_WaitOnBTFFlagUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00d      	beq.n	80035e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d107      	bne.n	80035e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e016      	b.n	8003616 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	e000      	b.n	8003616 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003614:	2302      	movs	r3, #2
  }
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	00100002 	.word	0x00100002
 8003624:	ffff0000 	.word	0xffff0000

08003628 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08c      	sub	sp, #48	; 0x30
 800362c:	af02      	add	r7, sp, #8
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	4608      	mov	r0, r1
 8003632:	4611      	mov	r1, r2
 8003634:	461a      	mov	r2, r3
 8003636:	4603      	mov	r3, r0
 8003638:	817b      	strh	r3, [r7, #10]
 800363a:	460b      	mov	r3, r1
 800363c:	813b      	strh	r3, [r7, #8]
 800363e:	4613      	mov	r3, r2
 8003640:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003642:	f7ff f9fd 	bl	8002a40 <HAL_GetTick>
 8003646:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b20      	cmp	r3, #32
 8003652:	f040 8208 	bne.w	8003a66 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	2319      	movs	r3, #25
 800365c:	2201      	movs	r2, #1
 800365e:	497b      	ldr	r1, [pc, #492]	; (800384c <HAL_I2C_Mem_Read+0x224>)
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fd35 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
 800366e:	e1fb      	b.n	8003a68 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_I2C_Mem_Read+0x56>
 800367a:	2302      	movs	r3, #2
 800367c:	e1f4      	b.n	8003a68 <HAL_I2C_Mem_Read+0x440>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b01      	cmp	r3, #1
 8003692:	d007      	beq.n	80036a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2222      	movs	r2, #34	; 0x22
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2240      	movs	r2, #64	; 0x40
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80036d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a5b      	ldr	r2, [pc, #364]	; (8003850 <HAL_I2C_Mem_Read+0x228>)
 80036e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036e6:	88f8      	ldrh	r0, [r7, #6]
 80036e8:	893a      	ldrh	r2, [r7, #8]
 80036ea:	8979      	ldrh	r1, [r7, #10]
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	9301      	str	r3, [sp, #4]
 80036f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	4603      	mov	r3, r0
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fc02 	bl	8003f00 <I2C_RequestMemoryRead>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e1b0      	b.n	8003a68 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370a:	2b00      	cmp	r3, #0
 800370c:	d113      	bne.n	8003736 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370e:	2300      	movs	r3, #0
 8003710:	623b      	str	r3, [r7, #32]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	623b      	str	r3, [r7, #32]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	623b      	str	r3, [r7, #32]
 8003722:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	e184      	b.n	8003a40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373a:	2b01      	cmp	r3, #1
 800373c:	d11b      	bne.n	8003776 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800374c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	e164      	b.n	8003a40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377a:	2b02      	cmp	r3, #2
 800377c:	d11b      	bne.n	80037b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800378c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800379c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800379e:	2300      	movs	r3, #0
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	61bb      	str	r3, [r7, #24]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	e144      	b.n	8003a40 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037cc:	e138      	b.n	8003a40 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	f200 80f1 	bhi.w	80039ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d123      	bne.n	8003828 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 fdcb 	bl	8004380 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e139      	b.n	8003a68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003826:	e10b      	b.n	8003a40 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382c:	2b02      	cmp	r3, #2
 800382e:	d14e      	bne.n	80038ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003836:	2200      	movs	r2, #0
 8003838:	4906      	ldr	r1, [pc, #24]	; (8003854 <HAL_I2C_Mem_Read+0x22c>)
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 fc48 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e10e      	b.n	8003a68 <HAL_I2C_Mem_Read+0x440>
 800384a:	bf00      	nop
 800384c:	00100002 	.word	0x00100002
 8003850:	ffff0000 	.word	0xffff0000
 8003854:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691a      	ldr	r2, [r3, #16]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038cc:	e0b8      	b.n	8003a40 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d4:	2200      	movs	r2, #0
 80038d6:	4966      	ldr	r1, [pc, #408]	; (8003a70 <HAL_I2C_Mem_Read+0x448>)
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fbf9 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0bf      	b.n	8003a68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003930:	2200      	movs	r2, #0
 8003932:	494f      	ldr	r1, [pc, #316]	; (8003a70 <HAL_I2C_Mem_Read+0x448>)
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 fbcb 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e091      	b.n	8003a68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003952:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039b8:	e042      	b.n	8003a40 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fcde 	bl	8004380 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e04c      	b.n	8003a68 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d118      	bne.n	8003a40 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f47f aec2 	bne.w	80037ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e000      	b.n	8003a68 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a66:	2302      	movs	r3, #2
  }
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3728      	adds	r7, #40	; 0x28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	00010004 	.word	0x00010004

08003a74 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08a      	sub	sp, #40	; 0x28
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	607a      	str	r2, [r7, #4]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	460b      	mov	r3, r1
 8003a82:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003a84:	f7fe ffdc 	bl	8002a40 <HAL_GetTick>
 8003a88:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	f040 8111 	bne.w	8003cbe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	2319      	movs	r3, #25
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	4988      	ldr	r1, [pc, #544]	; (8003cc8 <HAL_I2C_IsDeviceReady+0x254>)
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fb12 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e104      	b.n	8003cc0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_I2C_IsDeviceReady+0x50>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e0fd      	b.n	8003cc0 <HAL_I2C_IsDeviceReady+0x24c>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d007      	beq.n	8003aea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2224      	movs	r2, #36	; 0x24
 8003afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4a70      	ldr	r2, [pc, #448]	; (8003ccc <HAL_I2C_IsDeviceReady+0x258>)
 8003b0c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b1c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 fad0 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00d      	beq.n	8003b52 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b44:	d103      	bne.n	8003b4e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e0b6      	b.n	8003cc0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b52:	897b      	ldrh	r3, [r7, #10]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b60:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003b62:	f7fe ff6d 	bl	8002a40 <HAL_GetTick>
 8003b66:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	bf0c      	ite	eq
 8003b76:	2301      	moveq	r3, #1
 8003b78:	2300      	movne	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	2300      	movne	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b96:	e025      	b.n	8003be4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b98:	f7fe ff52 	bl	8002a40 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d302      	bcc.n	8003bae <HAL_I2C_IsDeviceReady+0x13a>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	22a0      	movs	r2, #160	; 0xa0
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2ba0      	cmp	r3, #160	; 0xa0
 8003bee:	d005      	beq.n	8003bfc <HAL_I2C_IsDeviceReady+0x188>
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d102      	bne.n	8003bfc <HAL_I2C_IsDeviceReady+0x188>
 8003bf6:	7dbb      	ldrb	r3, [r7, #22]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0cd      	beq.n	8003b98 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d129      	bne.n	8003c66 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c20:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	2319      	movs	r3, #25
 8003c3e:	2201      	movs	r2, #1
 8003c40:	4921      	ldr	r1, [pc, #132]	; (8003cc8 <HAL_I2C_IsDeviceReady+0x254>)
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 fa44 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e036      	b.n	8003cc0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	e02c      	b.n	8003cc0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c74:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c7e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2319      	movs	r3, #25
 8003c86:	2201      	movs	r2, #1
 8003c88:	490f      	ldr	r1, [pc, #60]	; (8003cc8 <HAL_I2C_IsDeviceReady+0x254>)
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 fa20 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e012      	b.n	8003cc0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	f4ff af32 	bcc.w	8003b0e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
  }
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3720      	adds	r7, #32
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	00100002 	.word	0x00100002
 8003ccc:	ffff0000 	.word	0xffff0000

08003cd0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d006      	beq.n	8003cfa <I2C_MasterRequestWrite+0x2a>
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d003      	beq.n	8003cfa <I2C_MasterRequestWrite+0x2a>
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cf8:	d108      	bne.n	8003d0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	e00b      	b.n	8003d24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	2b12      	cmp	r3, #18
 8003d12:	d107      	bne.n	8003d24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f9cd 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00d      	beq.n	8003d58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d4a:	d103      	bne.n	8003d54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e035      	b.n	8003dc4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d60:	d108      	bne.n	8003d74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d62:	897b      	ldrh	r3, [r7, #10]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d70:	611a      	str	r2, [r3, #16]
 8003d72:	e01b      	b.n	8003dac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d74:	897b      	ldrh	r3, [r7, #10]
 8003d76:	11db      	asrs	r3, r3, #7
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f003 0306 	and.w	r3, r3, #6
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f063 030f 	orn	r3, r3, #15
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	490e      	ldr	r1, [pc, #56]	; (8003dcc <I2C_MasterRequestWrite+0xfc>)
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f9f3 	bl	800417e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e010      	b.n	8003dc4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003da2:	897b      	ldrh	r3, [r7, #10]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	4907      	ldr	r1, [pc, #28]	; (8003dd0 <I2C_MasterRequestWrite+0x100>)
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 f9e3 	bl	800417e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	00010008 	.word	0x00010008
 8003dd0:	00010002 	.word	0x00010002

08003dd4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	4608      	mov	r0, r1
 8003dde:	4611      	mov	r1, r2
 8003de0:	461a      	mov	r2, r3
 8003de2:	4603      	mov	r3, r0
 8003de4:	817b      	strh	r3, [r7, #10]
 8003de6:	460b      	mov	r3, r1
 8003de8:	813b      	strh	r3, [r7, #8]
 8003dea:	4613      	mov	r3, r2
 8003dec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f960 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00d      	beq.n	8003e32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e24:	d103      	bne.n	8003e2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e05f      	b.n	8003ef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e32:	897b      	ldrh	r3, [r7, #10]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	461a      	mov	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	6a3a      	ldr	r2, [r7, #32]
 8003e46:	492d      	ldr	r1, [pc, #180]	; (8003efc <I2C_RequestMemoryWrite+0x128>)
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f998 	bl	800417e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e04c      	b.n	8003ef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e70:	6a39      	ldr	r1, [r7, #32]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fa02 	bl	800427c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00d      	beq.n	8003e9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d107      	bne.n	8003e96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e02b      	b.n	8003ef2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d105      	bne.n	8003eac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ea0:	893b      	ldrh	r3, [r7, #8]
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	611a      	str	r2, [r3, #16]
 8003eaa:	e021      	b.n	8003ef0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003eac:	893b      	ldrh	r3, [r7, #8]
 8003eae:	0a1b      	lsrs	r3, r3, #8
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebc:	6a39      	ldr	r1, [r7, #32]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f9dc 	bl	800427c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d107      	bne.n	8003ee2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e005      	b.n	8003ef2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ee6:	893b      	ldrh	r3, [r7, #8]
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	00010002 	.word	0x00010002

08003f00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	4608      	mov	r0, r1
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4603      	mov	r3, r0
 8003f10:	817b      	strh	r3, [r7, #10]
 8003f12:	460b      	mov	r3, r1
 8003f14:	813b      	strh	r3, [r7, #8]
 8003f16:	4613      	mov	r3, r2
 8003f18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f8c2 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00d      	beq.n	8003f6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f60:	d103      	bne.n	8003f6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e0aa      	b.n	80040c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f6e:	897b      	ldrh	r3, [r7, #10]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	6a3a      	ldr	r2, [r7, #32]
 8003f82:	4952      	ldr	r1, [pc, #328]	; (80040cc <I2C_RequestMemoryRead+0x1cc>)
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f8fa 	bl	800417e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e097      	b.n	80040c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fac:	6a39      	ldr	r1, [r7, #32]
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f964 	bl	800427c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00d      	beq.n	8003fd6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d107      	bne.n	8003fd2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e076      	b.n	80040c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d105      	bne.n	8003fe8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fdc:	893b      	ldrh	r3, [r7, #8]
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	611a      	str	r2, [r3, #16]
 8003fe6:	e021      	b.n	800402c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fe8:	893b      	ldrh	r3, [r7, #8]
 8003fea:	0a1b      	lsrs	r3, r3, #8
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff8:	6a39      	ldr	r1, [r7, #32]
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f93e 	bl	800427c <I2C_WaitOnTXEFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00d      	beq.n	8004022 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	2b04      	cmp	r3, #4
 800400c:	d107      	bne.n	800401e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e050      	b.n	80040c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004022:	893b      	ldrh	r3, [r7, #8]
 8004024:	b2da      	uxtb	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800402c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402e:	6a39      	ldr	r1, [r7, #32]
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f923 	bl	800427c <I2C_WaitOnTXEFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00d      	beq.n	8004058 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	2b04      	cmp	r3, #4
 8004042:	d107      	bne.n	8004054 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004052:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e035      	b.n	80040c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004066:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	2200      	movs	r2, #0
 8004070:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f82b 	bl	80040d0 <I2C_WaitOnFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00d      	beq.n	800409c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408e:	d103      	bne.n	8004098 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004096:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e013      	b.n	80040c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800409c:	897b      	ldrh	r3, [r7, #10]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	6a3a      	ldr	r2, [r7, #32]
 80040b0:	4906      	ldr	r1, [pc, #24]	; (80040cc <I2C_RequestMemoryRead+0x1cc>)
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f863 	bl	800417e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	00010002 	.word	0x00010002

080040d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040e0:	e025      	b.n	800412e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e8:	d021      	beq.n	800412e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ea:	f7fe fca9 	bl	8002a40 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d302      	bcc.n	8004100 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d116      	bne.n	800412e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f043 0220 	orr.w	r2, r3, #32
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e023      	b.n	8004176 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	0c1b      	lsrs	r3, r3, #16
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b01      	cmp	r3, #1
 8004136:	d10d      	bne.n	8004154 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	43da      	mvns	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4013      	ands	r3, r2
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	bf0c      	ite	eq
 800414a:	2301      	moveq	r3, #1
 800414c:	2300      	movne	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	e00c      	b.n	800416e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	43da      	mvns	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4013      	ands	r3, r2
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	bf0c      	ite	eq
 8004166:	2301      	moveq	r3, #1
 8004168:	2300      	movne	r3, #0
 800416a:	b2db      	uxtb	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	429a      	cmp	r2, r3
 8004172:	d0b6      	beq.n	80040e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
 800418a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800418c:	e051      	b.n	8004232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419c:	d123      	bne.n	80041e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f043 0204 	orr.w	r2, r3, #4
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e046      	b.n	8004274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ec:	d021      	beq.n	8004232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ee:	f7fe fc27 	bl	8002a40 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d302      	bcc.n	8004204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d116      	bne.n	8004232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	f043 0220 	orr.w	r2, r3, #32
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e020      	b.n	8004274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	0c1b      	lsrs	r3, r3, #16
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	d10c      	bne.n	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	43da      	mvns	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4013      	ands	r3, r2
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	bf14      	ite	ne
 800424e:	2301      	movne	r3, #1
 8004250:	2300      	moveq	r3, #0
 8004252:	b2db      	uxtb	r3, r3
 8004254:	e00b      	b.n	800426e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	43da      	mvns	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4013      	ands	r3, r2
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	bf14      	ite	ne
 8004268:	2301      	movne	r3, #1
 800426a:	2300      	moveq	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d18d      	bne.n	800418e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004288:	e02d      	b.n	80042e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f8ce 	bl	800442c <I2C_IsAcknowledgeFailed>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e02d      	b.n	80042f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a0:	d021      	beq.n	80042e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a2:	f7fe fbcd 	bl	8002a40 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d302      	bcc.n	80042b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d116      	bne.n	80042e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	f043 0220 	orr.w	r2, r3, #32
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e007      	b.n	80042f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f0:	2b80      	cmp	r3, #128	; 0x80
 80042f2:	d1ca      	bne.n	800428a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800430a:	e02d      	b.n	8004368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f88d 	bl	800442c <I2C_IsAcknowledgeFailed>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e02d      	b.n	8004378 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004322:	d021      	beq.n	8004368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004324:	f7fe fb8c 	bl	8002a40 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	429a      	cmp	r2, r3
 8004332:	d302      	bcc.n	800433a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d116      	bne.n	8004368 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	f043 0220 	orr.w	r2, r3, #32
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e007      	b.n	8004378 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b04      	cmp	r3, #4
 8004374:	d1ca      	bne.n	800430c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800438c:	e042      	b.n	8004414 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b10      	cmp	r3, #16
 800439a:	d119      	bne.n	80043d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0210 	mvn.w	r2, #16
 80043a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e029      	b.n	8004424 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d0:	f7fe fb36 	bl	8002a40 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d302      	bcc.n	80043e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d116      	bne.n	8004414 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	f043 0220 	orr.w	r2, r3, #32
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e007      	b.n	8004424 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441e:	2b40      	cmp	r3, #64	; 0x40
 8004420:	d1b5      	bne.n	800438e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004442:	d11b      	bne.n	800447c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800444c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	f043 0204 	orr.w	r2, r3, #4
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr

08004488 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e31d      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800449a:	4b94      	ldr	r3, [pc, #592]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044a4:	4b91      	ldr	r3, [pc, #580]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ac:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d07b      	beq.n	80045b2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d006      	beq.n	80044ce <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	2b0c      	cmp	r3, #12
 80044c4:	d10f      	bne.n	80044e6 <HAL_RCC_OscConfig+0x5e>
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044cc:	d10b      	bne.n	80044e6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ce:	4b87      	ldr	r3, [pc, #540]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d06a      	beq.n	80045b0 <HAL_RCC_OscConfig+0x128>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d166      	bne.n	80045b0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e2f7      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d106      	bne.n	80044fc <HAL_RCC_OscConfig+0x74>
 80044ee:	4b7f      	ldr	r3, [pc, #508]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a7e      	ldr	r2, [pc, #504]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 80044f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e02d      	b.n	8004558 <HAL_RCC_OscConfig+0xd0>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10c      	bne.n	800451e <HAL_RCC_OscConfig+0x96>
 8004504:	4b79      	ldr	r3, [pc, #484]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a78      	ldr	r2, [pc, #480]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 800450a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	4b76      	ldr	r3, [pc, #472]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a75      	ldr	r2, [pc, #468]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 8004516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	e01c      	b.n	8004558 <HAL_RCC_OscConfig+0xd0>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b05      	cmp	r3, #5
 8004524:	d10c      	bne.n	8004540 <HAL_RCC_OscConfig+0xb8>
 8004526:	4b71      	ldr	r3, [pc, #452]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a70      	ldr	r2, [pc, #448]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 800452c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	4b6e      	ldr	r3, [pc, #440]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a6d      	ldr	r2, [pc, #436]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 8004538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	e00b      	b.n	8004558 <HAL_RCC_OscConfig+0xd0>
 8004540:	4b6a      	ldr	r3, [pc, #424]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a69      	ldr	r2, [pc, #420]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 8004546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	4b67      	ldr	r3, [pc, #412]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a66      	ldr	r2, [pc, #408]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 8004552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d013      	beq.n	8004588 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004560:	f7fe fa6e 	bl	8002a40 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004568:	f7fe fa6a 	bl	8002a40 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b64      	cmp	r3, #100	; 0x64
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e2ad      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800457a:	4b5c      	ldr	r3, [pc, #368]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCC_OscConfig+0xe0>
 8004586:	e014      	b.n	80045b2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004588:	f7fe fa5a 	bl	8002a40 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004590:	f7fe fa56 	bl	8002a40 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b64      	cmp	r3, #100	; 0x64
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e299      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045a2:	4b52      	ldr	r3, [pc, #328]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x108>
 80045ae:	e000      	b.n	80045b2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d05a      	beq.n	8004674 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b0c      	cmp	r3, #12
 80045c8:	d119      	bne.n	80045fe <HAL_RCC_OscConfig+0x176>
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d116      	bne.n	80045fe <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d0:	4b46      	ldr	r3, [pc, #280]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_OscConfig+0x160>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d001      	beq.n	80045e8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e276      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e8:	4b40      	ldr	r3, [pc, #256]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	493d      	ldr	r1, [pc, #244]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fc:	e03a      	b.n	8004674 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d020      	beq.n	8004648 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004606:	4b3a      	ldr	r3, [pc, #232]	; (80046f0 <HAL_RCC_OscConfig+0x268>)
 8004608:	2201      	movs	r2, #1
 800460a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460c:	f7fe fa18 	bl	8002a40 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004614:	f7fe fa14 	bl	8002a40 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e257      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004626:	4b31      	ldr	r3, [pc, #196]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004632:	4b2e      	ldr	r3, [pc, #184]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	492a      	ldr	r1, [pc, #168]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 8004642:	4313      	orrs	r3, r2
 8004644:	604b      	str	r3, [r1, #4]
 8004646:	e015      	b.n	8004674 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004648:	4b29      	ldr	r3, [pc, #164]	; (80046f0 <HAL_RCC_OscConfig+0x268>)
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464e:	f7fe f9f7 	bl	8002a40 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004656:	f7fe f9f3 	bl	8002a40 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e236      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004668:	4b20      	ldr	r3, [pc, #128]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f0      	bne.n	8004656 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80b8 	beq.w	80047f2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d170      	bne.n	800476a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004688:	4b18      	ldr	r3, [pc, #96]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <HAL_RCC_OscConfig+0x218>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e21a      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a1a      	ldr	r2, [r3, #32]
 80046a4:	4b11      	ldr	r3, [pc, #68]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d921      	bls.n	80046f4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fc7d 	bl	8004fb4 <RCC_SetFlashLatencyFromMSIRange>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e208      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046c4:	4b09      	ldr	r3, [pc, #36]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	4906      	ldr	r1, [pc, #24]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046d6:	4b05      	ldr	r3, [pc, #20]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	061b      	lsls	r3, r3, #24
 80046e4:	4901      	ldr	r1, [pc, #4]	; (80046ec <HAL_RCC_OscConfig+0x264>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	604b      	str	r3, [r1, #4]
 80046ea:	e020      	b.n	800472e <HAL_RCC_OscConfig+0x2a6>
 80046ec:	40023800 	.word	0x40023800
 80046f0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046f4:	4b99      	ldr	r3, [pc, #612]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	4996      	ldr	r1, [pc, #600]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 8004702:	4313      	orrs	r3, r2
 8004704:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004706:	4b95      	ldr	r3, [pc, #596]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	061b      	lsls	r3, r3, #24
 8004714:	4991      	ldr	r1, [pc, #580]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 8004716:	4313      	orrs	r3, r2
 8004718:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fc48 	bl	8004fb4 <RCC_SetFlashLatencyFromMSIRange>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e1d3      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	0b5b      	lsrs	r3, r3, #13
 8004734:	3301      	adds	r3, #1
 8004736:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800473e:	4a87      	ldr	r2, [pc, #540]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 8004740:	6892      	ldr	r2, [r2, #8]
 8004742:	0912      	lsrs	r2, r2, #4
 8004744:	f002 020f 	and.w	r2, r2, #15
 8004748:	4985      	ldr	r1, [pc, #532]	; (8004960 <HAL_RCC_OscConfig+0x4d8>)
 800474a:	5c8a      	ldrb	r2, [r1, r2]
 800474c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800474e:	4a85      	ldr	r2, [pc, #532]	; (8004964 <HAL_RCC_OscConfig+0x4dc>)
 8004750:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004752:	4b85      	ldr	r3, [pc, #532]	; (8004968 <HAL_RCC_OscConfig+0x4e0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7fe f926 	bl	80029a8 <HAL_InitTick>
 800475c:	4603      	mov	r3, r0
 800475e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004760:	7bfb      	ldrb	r3, [r7, #15]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d045      	beq.n	80047f2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	e1b5      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d029      	beq.n	80047c6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004772:	4b7e      	ldr	r3, [pc, #504]	; (800496c <HAL_RCC_OscConfig+0x4e4>)
 8004774:	2201      	movs	r2, #1
 8004776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004778:	f7fe f962 	bl	8002a40 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004780:	f7fe f95e 	bl	8002a40 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e1a1      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004792:	4b72      	ldr	r3, [pc, #456]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800479e:	4b6f      	ldr	r3, [pc, #444]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	496c      	ldr	r1, [pc, #432]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047b0:	4b6a      	ldr	r3, [pc, #424]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	061b      	lsls	r3, r3, #24
 80047be:	4967      	ldr	r1, [pc, #412]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	604b      	str	r3, [r1, #4]
 80047c4:	e015      	b.n	80047f2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047c6:	4b69      	ldr	r3, [pc, #420]	; (800496c <HAL_RCC_OscConfig+0x4e4>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047cc:	f7fe f938 	bl	8002a40 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047d4:	f7fe f934 	bl	8002a40 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e177      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80047e6:	4b5d      	ldr	r3, [pc, #372]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d030      	beq.n	8004860 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d016      	beq.n	8004834 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004806:	4b5a      	ldr	r3, [pc, #360]	; (8004970 <HAL_RCC_OscConfig+0x4e8>)
 8004808:	2201      	movs	r2, #1
 800480a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480c:	f7fe f918 	bl	8002a40 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004814:	f7fe f914 	bl	8002a40 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e157      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004826:	4b4d      	ldr	r3, [pc, #308]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 8004828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x38c>
 8004832:	e015      	b.n	8004860 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004834:	4b4e      	ldr	r3, [pc, #312]	; (8004970 <HAL_RCC_OscConfig+0x4e8>)
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800483a:	f7fe f901 	bl	8002a40 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004842:	f7fe f8fd 	bl	8002a40 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e140      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004854:	4b41      	ldr	r3, [pc, #260]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 8004856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f0      	bne.n	8004842 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 80b5 	beq.w	80049d8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800486e:	2300      	movs	r3, #0
 8004870:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004872:	4b3a      	ldr	r3, [pc, #232]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10d      	bne.n	800489a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800487e:	4b37      	ldr	r3, [pc, #220]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	4a36      	ldr	r2, [pc, #216]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 8004884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004888:	6253      	str	r3, [r2, #36]	; 0x24
 800488a:	4b34      	ldr	r3, [pc, #208]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004892:	60bb      	str	r3, [r7, #8]
 8004894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004896:	2301      	movs	r3, #1
 8004898:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489a:	4b36      	ldr	r3, [pc, #216]	; (8004974 <HAL_RCC_OscConfig+0x4ec>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d118      	bne.n	80048d8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048a6:	4b33      	ldr	r3, [pc, #204]	; (8004974 <HAL_RCC_OscConfig+0x4ec>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a32      	ldr	r2, [pc, #200]	; (8004974 <HAL_RCC_OscConfig+0x4ec>)
 80048ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048b2:	f7fe f8c5 	bl	8002a40 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ba:	f7fe f8c1 	bl	8002a40 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b64      	cmp	r3, #100	; 0x64
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e104      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048cc:	4b29      	ldr	r3, [pc, #164]	; (8004974 <HAL_RCC_OscConfig+0x4ec>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0f0      	beq.n	80048ba <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d106      	bne.n	80048ee <HAL_RCC_OscConfig+0x466>
 80048e0:	4b1e      	ldr	r3, [pc, #120]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 80048e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e4:	4a1d      	ldr	r2, [pc, #116]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 80048e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ea:	6353      	str	r3, [r2, #52]	; 0x34
 80048ec:	e02d      	b.n	800494a <HAL_RCC_OscConfig+0x4c2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10c      	bne.n	8004910 <HAL_RCC_OscConfig+0x488>
 80048f6:	4b19      	ldr	r3, [pc, #100]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 80048f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fa:	4a18      	ldr	r2, [pc, #96]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 80048fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004900:	6353      	str	r3, [r2, #52]	; 0x34
 8004902:	4b16      	ldr	r3, [pc, #88]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 8004904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004906:	4a15      	ldr	r2, [pc, #84]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 8004908:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800490c:	6353      	str	r3, [r2, #52]	; 0x34
 800490e:	e01c      	b.n	800494a <HAL_RCC_OscConfig+0x4c2>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b05      	cmp	r3, #5
 8004916:	d10c      	bne.n	8004932 <HAL_RCC_OscConfig+0x4aa>
 8004918:	4b10      	ldr	r3, [pc, #64]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 800491a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491c:	4a0f      	ldr	r2, [pc, #60]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 800491e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004922:	6353      	str	r3, [r2, #52]	; 0x34
 8004924:	4b0d      	ldr	r3, [pc, #52]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 8004926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004928:	4a0c      	ldr	r2, [pc, #48]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 800492a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492e:	6353      	str	r3, [r2, #52]	; 0x34
 8004930:	e00b      	b.n	800494a <HAL_RCC_OscConfig+0x4c2>
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 8004934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004936:	4a09      	ldr	r2, [pc, #36]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 8004938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800493c:	6353      	str	r3, [r2, #52]	; 0x34
 800493e:	4b07      	ldr	r3, [pc, #28]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 8004940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004942:	4a06      	ldr	r2, [pc, #24]	; (800495c <HAL_RCC_OscConfig+0x4d4>)
 8004944:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004948:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d024      	beq.n	800499c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004952:	f7fe f875 	bl	8002a40 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004958:	e019      	b.n	800498e <HAL_RCC_OscConfig+0x506>
 800495a:	bf00      	nop
 800495c:	40023800 	.word	0x40023800
 8004960:	08008328 	.word	0x08008328
 8004964:	20000000 	.word	0x20000000
 8004968:	20000004 	.word	0x20000004
 800496c:	42470020 	.word	0x42470020
 8004970:	42470680 	.word	0x42470680
 8004974:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004978:	f7fe f862 	bl	8002a40 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f241 3288 	movw	r2, #5000	; 0x1388
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e0a3      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800498e:	4b54      	ldr	r3, [pc, #336]	; (8004ae0 <HAL_RCC_OscConfig+0x658>)
 8004990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0ee      	beq.n	8004978 <HAL_RCC_OscConfig+0x4f0>
 800499a:	e014      	b.n	80049c6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800499c:	f7fe f850 	bl	8002a40 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049a2:	e00a      	b.n	80049ba <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a4:	f7fe f84c 	bl	8002a40 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e08d      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049ba:	4b49      	ldr	r3, [pc, #292]	; (8004ae0 <HAL_RCC_OscConfig+0x658>)
 80049bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1ee      	bne.n	80049a4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049c6:	7ffb      	ldrb	r3, [r7, #31]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d105      	bne.n	80049d8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049cc:	4b44      	ldr	r3, [pc, #272]	; (8004ae0 <HAL_RCC_OscConfig+0x658>)
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	4a43      	ldr	r2, [pc, #268]	; (8004ae0 <HAL_RCC_OscConfig+0x658>)
 80049d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049d6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d079      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	2b0c      	cmp	r3, #12
 80049e4:	d056      	beq.n	8004a94 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d13b      	bne.n	8004a66 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ee:	4b3d      	ldr	r3, [pc, #244]	; (8004ae4 <HAL_RCC_OscConfig+0x65c>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f4:	f7fe f824 	bl	8002a40 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049fc:	f7fe f820 	bl	8002a40 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e063      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a0e:	4b34      	ldr	r3, [pc, #208]	; (8004ae0 <HAL_RCC_OscConfig+0x658>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a1a:	4b31      	ldr	r3, [pc, #196]	; (8004ae0 <HAL_RCC_OscConfig+0x658>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	4319      	orrs	r1, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a30:	430b      	orrs	r3, r1
 8004a32:	492b      	ldr	r1, [pc, #172]	; (8004ae0 <HAL_RCC_OscConfig+0x658>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a38:	4b2a      	ldr	r3, [pc, #168]	; (8004ae4 <HAL_RCC_OscConfig+0x65c>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3e:	f7fd ffff 	bl	8002a40 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a46:	f7fd fffb 	bl	8002a40 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e03e      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a58:	4b21      	ldr	r3, [pc, #132]	; (8004ae0 <HAL_RCC_OscConfig+0x658>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCC_OscConfig+0x5be>
 8004a64:	e036      	b.n	8004ad4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a66:	4b1f      	ldr	r3, [pc, #124]	; (8004ae4 <HAL_RCC_OscConfig+0x65c>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6c:	f7fd ffe8 	bl	8002a40 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a74:	f7fd ffe4 	bl	8002a40 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e027      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a86:	4b16      	ldr	r3, [pc, #88]	; (8004ae0 <HAL_RCC_OscConfig+0x658>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x5ec>
 8004a92:	e01f      	b.n	8004ad4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e01a      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004aa0:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <HAL_RCC_OscConfig+0x658>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d10d      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d106      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e000      	b.n	8004ad6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3720      	adds	r7, #32
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	42470060 	.word	0x42470060

08004ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e11a      	b.n	8004d32 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004afc:	4b8f      	ldr	r3, [pc, #572]	; (8004d3c <HAL_RCC_ClockConfig+0x254>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d919      	bls.n	8004b3e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d105      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x34>
 8004b10:	4b8a      	ldr	r3, [pc, #552]	; (8004d3c <HAL_RCC_ClockConfig+0x254>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a89      	ldr	r2, [pc, #548]	; (8004d3c <HAL_RCC_ClockConfig+0x254>)
 8004b16:	f043 0304 	orr.w	r3, r3, #4
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	4b87      	ldr	r3, [pc, #540]	; (8004d3c <HAL_RCC_ClockConfig+0x254>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f023 0201 	bic.w	r2, r3, #1
 8004b24:	4985      	ldr	r1, [pc, #532]	; (8004d3c <HAL_RCC_ClockConfig+0x254>)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2c:	4b83      	ldr	r3, [pc, #524]	; (8004d3c <HAL_RCC_ClockConfig+0x254>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d001      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e0f9      	b.n	8004d32 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d008      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b4a:	4b7d      	ldr	r3, [pc, #500]	; (8004d40 <HAL_RCC_ClockConfig+0x258>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	497a      	ldr	r1, [pc, #488]	; (8004d40 <HAL_RCC_ClockConfig+0x258>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 808e 	beq.w	8004c86 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d107      	bne.n	8004b82 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b72:	4b73      	ldr	r3, [pc, #460]	; (8004d40 <HAL_RCC_ClockConfig+0x258>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d121      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e0d7      	b.n	8004d32 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d107      	bne.n	8004b9a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b8a:	4b6d      	ldr	r3, [pc, #436]	; (8004d40 <HAL_RCC_ClockConfig+0x258>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d115      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e0cb      	b.n	8004d32 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d107      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ba2:	4b67      	ldr	r3, [pc, #412]	; (8004d40 <HAL_RCC_ClockConfig+0x258>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d109      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e0bf      	b.n	8004d32 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004bb2:	4b63      	ldr	r3, [pc, #396]	; (8004d40 <HAL_RCC_ClockConfig+0x258>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e0b7      	b.n	8004d32 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bc2:	4b5f      	ldr	r3, [pc, #380]	; (8004d40 <HAL_RCC_ClockConfig+0x258>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f023 0203 	bic.w	r2, r3, #3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	495c      	ldr	r1, [pc, #368]	; (8004d40 <HAL_RCC_ClockConfig+0x258>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bd4:	f7fd ff34 	bl	8002a40 <HAL_GetTick>
 8004bd8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d112      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004be2:	e00a      	b.n	8004bfa <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be4:	f7fd ff2c 	bl	8002a40 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e09b      	b.n	8004d32 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004bfa:	4b51      	ldr	r3, [pc, #324]	; (8004d40 <HAL_RCC_ClockConfig+0x258>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 030c 	and.w	r3, r3, #12
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d1ee      	bne.n	8004be4 <HAL_RCC_ClockConfig+0xfc>
 8004c06:	e03e      	b.n	8004c86 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d112      	bne.n	8004c36 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c10:	e00a      	b.n	8004c28 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c12:	f7fd ff15 	bl	8002a40 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e084      	b.n	8004d32 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c28:	4b45      	ldr	r3, [pc, #276]	; (8004d40 <HAL_RCC_ClockConfig+0x258>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 030c 	and.w	r3, r3, #12
 8004c30:	2b0c      	cmp	r3, #12
 8004c32:	d1ee      	bne.n	8004c12 <HAL_RCC_ClockConfig+0x12a>
 8004c34:	e027      	b.n	8004c86 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d11d      	bne.n	8004c7a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c3e:	e00a      	b.n	8004c56 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c40:	f7fd fefe 	bl	8002a40 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e06d      	b.n	8004d32 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c56:	4b3a      	ldr	r3, [pc, #232]	; (8004d40 <HAL_RCC_ClockConfig+0x258>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 030c 	and.w	r3, r3, #12
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	d1ee      	bne.n	8004c40 <HAL_RCC_ClockConfig+0x158>
 8004c62:	e010      	b.n	8004c86 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c64:	f7fd feec 	bl	8002a40 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e05b      	b.n	8004d32 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c7a:	4b31      	ldr	r3, [pc, #196]	; (8004d40 <HAL_RCC_ClockConfig+0x258>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1ee      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c86:	4b2d      	ldr	r3, [pc, #180]	; (8004d3c <HAL_RCC_ClockConfig+0x254>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d219      	bcs.n	8004cc8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d105      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0x1be>
 8004c9a:	4b28      	ldr	r3, [pc, #160]	; (8004d3c <HAL_RCC_ClockConfig+0x254>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a27      	ldr	r2, [pc, #156]	; (8004d3c <HAL_RCC_ClockConfig+0x254>)
 8004ca0:	f043 0304 	orr.w	r3, r3, #4
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	4b25      	ldr	r3, [pc, #148]	; (8004d3c <HAL_RCC_ClockConfig+0x254>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f023 0201 	bic.w	r2, r3, #1
 8004cae:	4923      	ldr	r1, [pc, #140]	; (8004d3c <HAL_RCC_ClockConfig+0x254>)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb6:	4b21      	ldr	r3, [pc, #132]	; (8004d3c <HAL_RCC_ClockConfig+0x254>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e034      	b.n	8004d32 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd4:	4b1a      	ldr	r3, [pc, #104]	; (8004d40 <HAL_RCC_ClockConfig+0x258>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4917      	ldr	r1, [pc, #92]	; (8004d40 <HAL_RCC_ClockConfig+0x258>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d009      	beq.n	8004d06 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cf2:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <HAL_RCC_ClockConfig+0x258>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	490f      	ldr	r1, [pc, #60]	; (8004d40 <HAL_RCC_ClockConfig+0x258>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d06:	f000 f823 	bl	8004d50 <HAL_RCC_GetSysClockFreq>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <HAL_RCC_ClockConfig+0x258>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	091b      	lsrs	r3, r3, #4
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	490b      	ldr	r1, [pc, #44]	; (8004d44 <HAL_RCC_ClockConfig+0x25c>)
 8004d18:	5ccb      	ldrb	r3, [r1, r3]
 8004d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d1e:	4a0a      	ldr	r2, [pc, #40]	; (8004d48 <HAL_RCC_ClockConfig+0x260>)
 8004d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d22:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <HAL_RCC_ClockConfig+0x264>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fd fe3e 	bl	80029a8 <HAL_InitTick>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d30:	7afb      	ldrb	r3, [r7, #11]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40023c00 	.word	0x40023c00
 8004d40:	40023800 	.word	0x40023800
 8004d44:	08008328 	.word	0x08008328
 8004d48:	20000000 	.word	0x20000000
 8004d4c:	20000004 	.word	0x20000004

08004d50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d54:	b092      	sub	sp, #72	; 0x48
 8004d56:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004d58:	4b79      	ldr	r3, [pc, #484]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d60:	f003 030c 	and.w	r3, r3, #12
 8004d64:	2b0c      	cmp	r3, #12
 8004d66:	d00d      	beq.n	8004d84 <HAL_RCC_GetSysClockFreq+0x34>
 8004d68:	2b0c      	cmp	r3, #12
 8004d6a:	f200 80d5 	bhi.w	8004f18 <HAL_RCC_GetSysClockFreq+0x1c8>
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d002      	beq.n	8004d78 <HAL_RCC_GetSysClockFreq+0x28>
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	d003      	beq.n	8004d7e <HAL_RCC_GetSysClockFreq+0x2e>
 8004d76:	e0cf      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d78:	4b72      	ldr	r3, [pc, #456]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004d7a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004d7c:	e0da      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d7e:	4b72      	ldr	r3, [pc, #456]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004d80:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004d82:	e0d7      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d86:	0c9b      	lsrs	r3, r3, #18
 8004d88:	f003 020f 	and.w	r2, r3, #15
 8004d8c:	4b6f      	ldr	r3, [pc, #444]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004d8e:	5c9b      	ldrb	r3, [r3, r2]
 8004d90:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d94:	0d9b      	lsrs	r3, r3, #22
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d9e:	4b68      	ldr	r3, [pc, #416]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d05d      	beq.n	8004e66 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	2200      	movs	r2, #0
 8004dae:	4618      	mov	r0, r3
 8004db0:	4611      	mov	r1, r2
 8004db2:	4604      	mov	r4, r0
 8004db4:	460d      	mov	r5, r1
 8004db6:	4622      	mov	r2, r4
 8004db8:	462b      	mov	r3, r5
 8004dba:	f04f 0000 	mov.w	r0, #0
 8004dbe:	f04f 0100 	mov.w	r1, #0
 8004dc2:	0159      	lsls	r1, r3, #5
 8004dc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dc8:	0150      	lsls	r0, r2, #5
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4621      	mov	r1, r4
 8004dd0:	1a51      	subs	r1, r2, r1
 8004dd2:	6139      	str	r1, [r7, #16]
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004de8:	4659      	mov	r1, fp
 8004dea:	018b      	lsls	r3, r1, #6
 8004dec:	4651      	mov	r1, sl
 8004dee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004df2:	4651      	mov	r1, sl
 8004df4:	018a      	lsls	r2, r1, #6
 8004df6:	46d4      	mov	ip, sl
 8004df8:	ebb2 080c 	subs.w	r8, r2, ip
 8004dfc:	4659      	mov	r1, fp
 8004dfe:	eb63 0901 	sbc.w	r9, r3, r1
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e16:	4690      	mov	r8, r2
 8004e18:	4699      	mov	r9, r3
 8004e1a:	4623      	mov	r3, r4
 8004e1c:	eb18 0303 	adds.w	r3, r8, r3
 8004e20:	60bb      	str	r3, [r7, #8]
 8004e22:	462b      	mov	r3, r5
 8004e24:	eb49 0303 	adc.w	r3, r9, r3
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e36:	4629      	mov	r1, r5
 8004e38:	024b      	lsls	r3, r1, #9
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	4604      	mov	r4, r0
 8004e40:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004e44:	4601      	mov	r1, r0
 8004e46:	024a      	lsls	r2, r1, #9
 8004e48:	4610      	mov	r0, r2
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4e:	2200      	movs	r2, #0
 8004e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e58:	f7fc f8dc 	bl	8001014 <__aeabi_uldivmod>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	4613      	mov	r3, r2
 8004e62:	647b      	str	r3, [r7, #68]	; 0x44
 8004e64:	e055      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	2200      	movs	r2, #0
 8004e6a:	623b      	str	r3, [r7, #32]
 8004e6c:	627a      	str	r2, [r7, #36]	; 0x24
 8004e6e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e72:	4642      	mov	r2, r8
 8004e74:	464b      	mov	r3, r9
 8004e76:	f04f 0000 	mov.w	r0, #0
 8004e7a:	f04f 0100 	mov.w	r1, #0
 8004e7e:	0159      	lsls	r1, r3, #5
 8004e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e84:	0150      	lsls	r0, r2, #5
 8004e86:	4602      	mov	r2, r0
 8004e88:	460b      	mov	r3, r1
 8004e8a:	46c4      	mov	ip, r8
 8004e8c:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004e90:	4640      	mov	r0, r8
 8004e92:	4649      	mov	r1, r9
 8004e94:	468c      	mov	ip, r1
 8004e96:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ea6:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004eaa:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004eae:	ebb2 040a 	subs.w	r4, r2, sl
 8004eb2:	eb63 050b 	sbc.w	r5, r3, fp
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	00eb      	lsls	r3, r5, #3
 8004ec0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ec4:	00e2      	lsls	r2, r4, #3
 8004ec6:	4614      	mov	r4, r2
 8004ec8:	461d      	mov	r5, r3
 8004eca:	4603      	mov	r3, r0
 8004ecc:	18e3      	adds	r3, r4, r3
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	eb45 0303 	adc.w	r3, r5, r3
 8004ed6:	607b      	str	r3, [r7, #4]
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	028b      	lsls	r3, r1, #10
 8004ee8:	4620      	mov	r0, r4
 8004eea:	4629      	mov	r1, r5
 8004eec:	4604      	mov	r4, r0
 8004eee:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004ef2:	4601      	mov	r1, r0
 8004ef4:	028a      	lsls	r2, r1, #10
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	4619      	mov	r1, r3
 8004efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efc:	2200      	movs	r2, #0
 8004efe:	61bb      	str	r3, [r7, #24]
 8004f00:	61fa      	str	r2, [r7, #28]
 8004f02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f06:	f7fc f885 	bl	8001014 <__aeabi_uldivmod>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4613      	mov	r3, r2
 8004f10:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8004f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f14:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004f16:	e00d      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004f18:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	0b5b      	lsrs	r3, r3, #13
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f26:	3301      	adds	r3, #1
 8004f28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8004f32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3748      	adds	r7, #72	; 0x48
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f40:	40023800 	.word	0x40023800
 8004f44:	00f42400 	.word	0x00f42400
 8004f48:	007a1200 	.word	0x007a1200
 8004f4c:	0800831c 	.word	0x0800831c

08004f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f54:	4b02      	ldr	r3, [pc, #8]	; (8004f60 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f56:	681b      	ldr	r3, [r3, #0]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr
 8004f60:	20000000 	.word	0x20000000

08004f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f68:	f7ff fff2 	bl	8004f50 <HAL_RCC_GetHCLKFreq>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	0a1b      	lsrs	r3, r3, #8
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	4903      	ldr	r1, [pc, #12]	; (8004f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f7a:	5ccb      	ldrb	r3, [r1, r3]
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40023800 	.word	0x40023800
 8004f88:	08008338 	.word	0x08008338

08004f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f90:	f7ff ffde 	bl	8004f50 <HAL_RCC_GetHCLKFreq>
 8004f94:	4602      	mov	r2, r0
 8004f96:	4b05      	ldr	r3, [pc, #20]	; (8004fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	0adb      	lsrs	r3, r3, #11
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	4903      	ldr	r1, [pc, #12]	; (8004fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fa2:	5ccb      	ldrb	r3, [r1, r3]
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	08008338 	.word	0x08008338

08004fb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004fc0:	4b29      	ldr	r3, [pc, #164]	; (8005068 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d12c      	bne.n	8005026 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004fcc:	4b26      	ldr	r3, [pc, #152]	; (8005068 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004fd8:	4b24      	ldr	r3, [pc, #144]	; (800506c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	e016      	b.n	8005012 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fe4:	4b20      	ldr	r3, [pc, #128]	; (8005068 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	4a1f      	ldr	r2, [pc, #124]	; (8005068 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fee:	6253      	str	r3, [r2, #36]	; 0x24
 8004ff0:	4b1d      	ldr	r3, [pc, #116]	; (8005068 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004ffc:	4b1b      	ldr	r3, [pc, #108]	; (800506c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005004:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005006:	4b18      	ldr	r3, [pc, #96]	; (8005068 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	4a17      	ldr	r2, [pc, #92]	; (8005068 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800500c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005010:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005018:	d105      	bne.n	8005026 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005020:	d101      	bne.n	8005026 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005022:	2301      	movs	r3, #1
 8005024:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d105      	bne.n	8005038 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800502c:	4b10      	ldr	r3, [pc, #64]	; (8005070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a0f      	ldr	r2, [pc, #60]	; (8005070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005032:	f043 0304 	orr.w	r3, r3, #4
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f023 0201 	bic.w	r2, r3, #1
 8005040:	490b      	ldr	r1, [pc, #44]	; (8005070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005048:	4b09      	ldr	r3, [pc, #36]	; (8005070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	429a      	cmp	r2, r3
 8005054:	d001      	beq.n	800505a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	371c      	adds	r7, #28
 8005060:	46bd      	mov	sp, r7
 8005062:	bc80      	pop	{r7}
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40023800 	.word	0x40023800
 800506c:	40007000 	.word	0x40007000
 8005070:	40023c00 	.word	0x40023c00

08005074 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e03f      	b.n	8005106 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fd fc02 	bl	80028a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2224      	movs	r2, #36	; 0x24
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f905 	bl	80052c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	691a      	ldr	r2, [r3, #16]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695a      	ldr	r2, [r3, #20]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2220      	movs	r2, #32
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b08a      	sub	sp, #40	; 0x28
 8005112:	af02      	add	r7, sp, #8
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	603b      	str	r3, [r7, #0]
 800511a:	4613      	mov	r3, r2
 800511c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b20      	cmp	r3, #32
 800512c:	d17c      	bne.n	8005228 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_UART_Transmit+0x2c>
 8005134:	88fb      	ldrh	r3, [r7, #6]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e075      	b.n	800522a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_UART_Transmit+0x3e>
 8005148:	2302      	movs	r3, #2
 800514a:	e06e      	b.n	800522a <HAL_UART_Transmit+0x11c>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2221      	movs	r2, #33	; 0x21
 800515e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005162:	f7fd fc6d 	bl	8002a40 <HAL_GetTick>
 8005166:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	88fa      	ldrh	r2, [r7, #6]
 800516c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	88fa      	ldrh	r2, [r7, #6]
 8005172:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800517c:	d108      	bne.n	8005190 <HAL_UART_Transmit+0x82>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d104      	bne.n	8005190 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005186:	2300      	movs	r3, #0
 8005188:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	e003      	b.n	8005198 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005194:	2300      	movs	r3, #0
 8005196:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80051a0:	e02a      	b.n	80051f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2200      	movs	r2, #0
 80051aa:	2180      	movs	r1, #128	; 0x80
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 f840 	bl	8005232 <UART_WaitOnFlagUntilTimeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e036      	b.n	800522a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10b      	bne.n	80051da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	3302      	adds	r3, #2
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	e007      	b.n	80051ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	781a      	ldrb	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	3301      	adds	r3, #1
 80051e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1cf      	bne.n	80051a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2200      	movs	r2, #0
 800520a:	2140      	movs	r1, #64	; 0x40
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 f810 	bl	8005232 <UART_WaitOnFlagUntilTimeout>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e006      	b.n	800522a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	e000      	b.n	800522a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005228:	2302      	movs	r3, #2
  }
}
 800522a:	4618      	mov	r0, r3
 800522c:	3720      	adds	r7, #32
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	60f8      	str	r0, [r7, #12]
 800523a:	60b9      	str	r1, [r7, #8]
 800523c:	603b      	str	r3, [r7, #0]
 800523e:	4613      	mov	r3, r2
 8005240:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005242:	e02c      	b.n	800529e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524a:	d028      	beq.n	800529e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d007      	beq.n	8005262 <UART_WaitOnFlagUntilTimeout+0x30>
 8005252:	f7fd fbf5 	bl	8002a40 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	429a      	cmp	r2, r3
 8005260:	d21d      	bcs.n	800529e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005270:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695a      	ldr	r2, [r3, #20]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0201 	bic.w	r2, r2, #1
 8005280:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2220      	movs	r2, #32
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2220      	movs	r2, #32
 800528e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e00f      	b.n	80052be <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4013      	ands	r3, r2
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	bf0c      	ite	eq
 80052ae:	2301      	moveq	r3, #1
 80052b0:	2300      	movne	r3, #0
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d0c3      	beq.n	8005244 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005308:	f023 030c 	bic.w	r3, r3, #12
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	68b9      	ldr	r1, [r7, #8]
 8005312:	430b      	orrs	r3, r1
 8005314:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699a      	ldr	r2, [r3, #24]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a55      	ldr	r2, [pc, #340]	; (8005488 <UART_SetConfig+0x1c0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d103      	bne.n	800533e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005336:	f7ff fe29 	bl	8004f8c <HAL_RCC_GetPCLK2Freq>
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	e002      	b.n	8005344 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800533e:	f7ff fe11 	bl	8004f64 <HAL_RCC_GetPCLK1Freq>
 8005342:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800534c:	d14c      	bne.n	80053e8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	009a      	lsls	r2, r3, #2
 8005358:	441a      	add	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	fbb2 f3f3 	udiv	r3, r2, r3
 8005364:	4a49      	ldr	r2, [pc, #292]	; (800548c <UART_SetConfig+0x1c4>)
 8005366:	fba2 2303 	umull	r2, r3, r2, r3
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	0119      	lsls	r1, r3, #4
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	009a      	lsls	r2, r3, #2
 8005378:	441a      	add	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	fbb2 f2f3 	udiv	r2, r2, r3
 8005384:	4b41      	ldr	r3, [pc, #260]	; (800548c <UART_SetConfig+0x1c4>)
 8005386:	fba3 0302 	umull	r0, r3, r3, r2
 800538a:	095b      	lsrs	r3, r3, #5
 800538c:	2064      	movs	r0, #100	; 0x64
 800538e:	fb00 f303 	mul.w	r3, r0, r3
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	3332      	adds	r3, #50	; 0x32
 8005398:	4a3c      	ldr	r2, [pc, #240]	; (800548c <UART_SetConfig+0x1c4>)
 800539a:	fba2 2303 	umull	r2, r3, r2, r3
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053a6:	4419      	add	r1, r3
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	009a      	lsls	r2, r3, #2
 80053b2:	441a      	add	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80053be:	4b33      	ldr	r3, [pc, #204]	; (800548c <UART_SetConfig+0x1c4>)
 80053c0:	fba3 0302 	umull	r0, r3, r3, r2
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	2064      	movs	r0, #100	; 0x64
 80053c8:	fb00 f303 	mul.w	r3, r0, r3
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	3332      	adds	r3, #50	; 0x32
 80053d2:	4a2e      	ldr	r2, [pc, #184]	; (800548c <UART_SetConfig+0x1c4>)
 80053d4:	fba2 2303 	umull	r2, r3, r2, r3
 80053d8:	095b      	lsrs	r3, r3, #5
 80053da:	f003 0207 	and.w	r2, r3, #7
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	440a      	add	r2, r1
 80053e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053e6:	e04a      	b.n	800547e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4613      	mov	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	009a      	lsls	r2, r3, #2
 80053f2:	441a      	add	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	4a23      	ldr	r2, [pc, #140]	; (800548c <UART_SetConfig+0x1c4>)
 8005400:	fba2 2303 	umull	r2, r3, r2, r3
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	0119      	lsls	r1, r3, #4
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	009a      	lsls	r2, r3, #2
 8005412:	441a      	add	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	fbb2 f2f3 	udiv	r2, r2, r3
 800541e:	4b1b      	ldr	r3, [pc, #108]	; (800548c <UART_SetConfig+0x1c4>)
 8005420:	fba3 0302 	umull	r0, r3, r3, r2
 8005424:	095b      	lsrs	r3, r3, #5
 8005426:	2064      	movs	r0, #100	; 0x64
 8005428:	fb00 f303 	mul.w	r3, r0, r3
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	3332      	adds	r3, #50	; 0x32
 8005432:	4a16      	ldr	r2, [pc, #88]	; (800548c <UART_SetConfig+0x1c4>)
 8005434:	fba2 2303 	umull	r2, r3, r2, r3
 8005438:	095b      	lsrs	r3, r3, #5
 800543a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800543e:	4419      	add	r1, r3
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	009a      	lsls	r2, r3, #2
 800544a:	441a      	add	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	fbb2 f2f3 	udiv	r2, r2, r3
 8005456:	4b0d      	ldr	r3, [pc, #52]	; (800548c <UART_SetConfig+0x1c4>)
 8005458:	fba3 0302 	umull	r0, r3, r3, r2
 800545c:	095b      	lsrs	r3, r3, #5
 800545e:	2064      	movs	r0, #100	; 0x64
 8005460:	fb00 f303 	mul.w	r3, r0, r3
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	3332      	adds	r3, #50	; 0x32
 800546a:	4a08      	ldr	r2, [pc, #32]	; (800548c <UART_SetConfig+0x1c4>)
 800546c:	fba2 2303 	umull	r2, r3, r2, r3
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	f003 020f 	and.w	r2, r3, #15
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	440a      	add	r2, r1
 800547c:	609a      	str	r2, [r3, #8]
}
 800547e:	bf00      	nop
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40013800 	.word	0x40013800
 800548c:	51eb851f 	.word	0x51eb851f

08005490 <__errno>:
 8005490:	4b01      	ldr	r3, [pc, #4]	; (8005498 <__errno+0x8>)
 8005492:	6818      	ldr	r0, [r3, #0]
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	2000000c 	.word	0x2000000c

0800549c <__libc_init_array>:
 800549c:	b570      	push	{r4, r5, r6, lr}
 800549e:	2600      	movs	r6, #0
 80054a0:	4d0c      	ldr	r5, [pc, #48]	; (80054d4 <__libc_init_array+0x38>)
 80054a2:	4c0d      	ldr	r4, [pc, #52]	; (80054d8 <__libc_init_array+0x3c>)
 80054a4:	1b64      	subs	r4, r4, r5
 80054a6:	10a4      	asrs	r4, r4, #2
 80054a8:	42a6      	cmp	r6, r4
 80054aa:	d109      	bne.n	80054c0 <__libc_init_array+0x24>
 80054ac:	f002 fefc 	bl	80082a8 <_init>
 80054b0:	2600      	movs	r6, #0
 80054b2:	4d0a      	ldr	r5, [pc, #40]	; (80054dc <__libc_init_array+0x40>)
 80054b4:	4c0a      	ldr	r4, [pc, #40]	; (80054e0 <__libc_init_array+0x44>)
 80054b6:	1b64      	subs	r4, r4, r5
 80054b8:	10a4      	asrs	r4, r4, #2
 80054ba:	42a6      	cmp	r6, r4
 80054bc:	d105      	bne.n	80054ca <__libc_init_array+0x2e>
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c4:	4798      	blx	r3
 80054c6:	3601      	adds	r6, #1
 80054c8:	e7ee      	b.n	80054a8 <__libc_init_array+0xc>
 80054ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ce:	4798      	blx	r3
 80054d0:	3601      	adds	r6, #1
 80054d2:	e7f2      	b.n	80054ba <__libc_init_array+0x1e>
 80054d4:	08008724 	.word	0x08008724
 80054d8:	08008724 	.word	0x08008724
 80054dc:	08008724 	.word	0x08008724
 80054e0:	08008728 	.word	0x08008728

080054e4 <memset>:
 80054e4:	4603      	mov	r3, r0
 80054e6:	4402      	add	r2, r0
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d100      	bne.n	80054ee <memset+0xa>
 80054ec:	4770      	bx	lr
 80054ee:	f803 1b01 	strb.w	r1, [r3], #1
 80054f2:	e7f9      	b.n	80054e8 <memset+0x4>

080054f4 <__cvt>:
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054fa:	461f      	mov	r7, r3
 80054fc:	bfbb      	ittet	lt
 80054fe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005502:	461f      	movlt	r7, r3
 8005504:	2300      	movge	r3, #0
 8005506:	232d      	movlt	r3, #45	; 0x2d
 8005508:	b088      	sub	sp, #32
 800550a:	4614      	mov	r4, r2
 800550c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800550e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005510:	7013      	strb	r3, [r2, #0]
 8005512:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005514:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005518:	f023 0820 	bic.w	r8, r3, #32
 800551c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005520:	d005      	beq.n	800552e <__cvt+0x3a>
 8005522:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005526:	d100      	bne.n	800552a <__cvt+0x36>
 8005528:	3501      	adds	r5, #1
 800552a:	2302      	movs	r3, #2
 800552c:	e000      	b.n	8005530 <__cvt+0x3c>
 800552e:	2303      	movs	r3, #3
 8005530:	aa07      	add	r2, sp, #28
 8005532:	9204      	str	r2, [sp, #16]
 8005534:	aa06      	add	r2, sp, #24
 8005536:	e9cd a202 	strd	sl, r2, [sp, #8]
 800553a:	e9cd 3500 	strd	r3, r5, [sp]
 800553e:	4622      	mov	r2, r4
 8005540:	463b      	mov	r3, r7
 8005542:	f000 fce5 	bl	8005f10 <_dtoa_r>
 8005546:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800554a:	4606      	mov	r6, r0
 800554c:	d102      	bne.n	8005554 <__cvt+0x60>
 800554e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005550:	07db      	lsls	r3, r3, #31
 8005552:	d522      	bpl.n	800559a <__cvt+0xa6>
 8005554:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005558:	eb06 0905 	add.w	r9, r6, r5
 800555c:	d110      	bne.n	8005580 <__cvt+0x8c>
 800555e:	7833      	ldrb	r3, [r6, #0]
 8005560:	2b30      	cmp	r3, #48	; 0x30
 8005562:	d10a      	bne.n	800557a <__cvt+0x86>
 8005564:	2200      	movs	r2, #0
 8005566:	2300      	movs	r3, #0
 8005568:	4620      	mov	r0, r4
 800556a:	4639      	mov	r1, r7
 800556c:	f7fb fa34 	bl	80009d8 <__aeabi_dcmpeq>
 8005570:	b918      	cbnz	r0, 800557a <__cvt+0x86>
 8005572:	f1c5 0501 	rsb	r5, r5, #1
 8005576:	f8ca 5000 	str.w	r5, [sl]
 800557a:	f8da 3000 	ldr.w	r3, [sl]
 800557e:	4499      	add	r9, r3
 8005580:	2200      	movs	r2, #0
 8005582:	2300      	movs	r3, #0
 8005584:	4620      	mov	r0, r4
 8005586:	4639      	mov	r1, r7
 8005588:	f7fb fa26 	bl	80009d8 <__aeabi_dcmpeq>
 800558c:	b108      	cbz	r0, 8005592 <__cvt+0x9e>
 800558e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005592:	2230      	movs	r2, #48	; 0x30
 8005594:	9b07      	ldr	r3, [sp, #28]
 8005596:	454b      	cmp	r3, r9
 8005598:	d307      	bcc.n	80055aa <__cvt+0xb6>
 800559a:	4630      	mov	r0, r6
 800559c:	9b07      	ldr	r3, [sp, #28]
 800559e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80055a0:	1b9b      	subs	r3, r3, r6
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	b008      	add	sp, #32
 80055a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055aa:	1c59      	adds	r1, r3, #1
 80055ac:	9107      	str	r1, [sp, #28]
 80055ae:	701a      	strb	r2, [r3, #0]
 80055b0:	e7f0      	b.n	8005594 <__cvt+0xa0>

080055b2 <__exponent>:
 80055b2:	4603      	mov	r3, r0
 80055b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055b6:	2900      	cmp	r1, #0
 80055b8:	f803 2b02 	strb.w	r2, [r3], #2
 80055bc:	bfb6      	itet	lt
 80055be:	222d      	movlt	r2, #45	; 0x2d
 80055c0:	222b      	movge	r2, #43	; 0x2b
 80055c2:	4249      	neglt	r1, r1
 80055c4:	2909      	cmp	r1, #9
 80055c6:	7042      	strb	r2, [r0, #1]
 80055c8:	dd2b      	ble.n	8005622 <__exponent+0x70>
 80055ca:	f10d 0407 	add.w	r4, sp, #7
 80055ce:	46a4      	mov	ip, r4
 80055d0:	270a      	movs	r7, #10
 80055d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80055d6:	460a      	mov	r2, r1
 80055d8:	46a6      	mov	lr, r4
 80055da:	fb07 1516 	mls	r5, r7, r6, r1
 80055de:	2a63      	cmp	r2, #99	; 0x63
 80055e0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80055e4:	4631      	mov	r1, r6
 80055e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80055ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80055ee:	dcf0      	bgt.n	80055d2 <__exponent+0x20>
 80055f0:	3130      	adds	r1, #48	; 0x30
 80055f2:	f1ae 0502 	sub.w	r5, lr, #2
 80055f6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80055fa:	4629      	mov	r1, r5
 80055fc:	1c44      	adds	r4, r0, #1
 80055fe:	4561      	cmp	r1, ip
 8005600:	d30a      	bcc.n	8005618 <__exponent+0x66>
 8005602:	f10d 0209 	add.w	r2, sp, #9
 8005606:	eba2 020e 	sub.w	r2, r2, lr
 800560a:	4565      	cmp	r5, ip
 800560c:	bf88      	it	hi
 800560e:	2200      	movhi	r2, #0
 8005610:	4413      	add	r3, r2
 8005612:	1a18      	subs	r0, r3, r0
 8005614:	b003      	add	sp, #12
 8005616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005618:	f811 2b01 	ldrb.w	r2, [r1], #1
 800561c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005620:	e7ed      	b.n	80055fe <__exponent+0x4c>
 8005622:	2330      	movs	r3, #48	; 0x30
 8005624:	3130      	adds	r1, #48	; 0x30
 8005626:	7083      	strb	r3, [r0, #2]
 8005628:	70c1      	strb	r1, [r0, #3]
 800562a:	1d03      	adds	r3, r0, #4
 800562c:	e7f1      	b.n	8005612 <__exponent+0x60>
	...

08005630 <_printf_float>:
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005634:	b091      	sub	sp, #68	; 0x44
 8005636:	460c      	mov	r4, r1
 8005638:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800563c:	4616      	mov	r6, r2
 800563e:	461f      	mov	r7, r3
 8005640:	4605      	mov	r5, r0
 8005642:	f001 fa53 	bl	8006aec <_localeconv_r>
 8005646:	6803      	ldr	r3, [r0, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	9309      	str	r3, [sp, #36]	; 0x24
 800564c:	f7fa fd98 	bl	8000180 <strlen>
 8005650:	2300      	movs	r3, #0
 8005652:	930e      	str	r3, [sp, #56]	; 0x38
 8005654:	f8d8 3000 	ldr.w	r3, [r8]
 8005658:	900a      	str	r0, [sp, #40]	; 0x28
 800565a:	3307      	adds	r3, #7
 800565c:	f023 0307 	bic.w	r3, r3, #7
 8005660:	f103 0208 	add.w	r2, r3, #8
 8005664:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005668:	f8d4 b000 	ldr.w	fp, [r4]
 800566c:	f8c8 2000 	str.w	r2, [r8]
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005678:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800567c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005680:	930b      	str	r3, [sp, #44]	; 0x2c
 8005682:	f04f 32ff 	mov.w	r2, #4294967295
 8005686:	4640      	mov	r0, r8
 8005688:	4b9c      	ldr	r3, [pc, #624]	; (80058fc <_printf_float+0x2cc>)
 800568a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800568c:	f7fb f9d6 	bl	8000a3c <__aeabi_dcmpun>
 8005690:	bb70      	cbnz	r0, 80056f0 <_printf_float+0xc0>
 8005692:	f04f 32ff 	mov.w	r2, #4294967295
 8005696:	4640      	mov	r0, r8
 8005698:	4b98      	ldr	r3, [pc, #608]	; (80058fc <_printf_float+0x2cc>)
 800569a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800569c:	f7fb f9b0 	bl	8000a00 <__aeabi_dcmple>
 80056a0:	bb30      	cbnz	r0, 80056f0 <_printf_float+0xc0>
 80056a2:	2200      	movs	r2, #0
 80056a4:	2300      	movs	r3, #0
 80056a6:	4640      	mov	r0, r8
 80056a8:	4651      	mov	r1, sl
 80056aa:	f7fb f99f 	bl	80009ec <__aeabi_dcmplt>
 80056ae:	b110      	cbz	r0, 80056b6 <_printf_float+0x86>
 80056b0:	232d      	movs	r3, #45	; 0x2d
 80056b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056b6:	4b92      	ldr	r3, [pc, #584]	; (8005900 <_printf_float+0x2d0>)
 80056b8:	4892      	ldr	r0, [pc, #584]	; (8005904 <_printf_float+0x2d4>)
 80056ba:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80056be:	bf94      	ite	ls
 80056c0:	4698      	movls	r8, r3
 80056c2:	4680      	movhi	r8, r0
 80056c4:	2303      	movs	r3, #3
 80056c6:	f04f 0a00 	mov.w	sl, #0
 80056ca:	6123      	str	r3, [r4, #16]
 80056cc:	f02b 0304 	bic.w	r3, fp, #4
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	4633      	mov	r3, r6
 80056d4:	4621      	mov	r1, r4
 80056d6:	4628      	mov	r0, r5
 80056d8:	9700      	str	r7, [sp, #0]
 80056da:	aa0f      	add	r2, sp, #60	; 0x3c
 80056dc:	f000 f9d4 	bl	8005a88 <_printf_common>
 80056e0:	3001      	adds	r0, #1
 80056e2:	f040 8090 	bne.w	8005806 <_printf_float+0x1d6>
 80056e6:	f04f 30ff 	mov.w	r0, #4294967295
 80056ea:	b011      	add	sp, #68	; 0x44
 80056ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f0:	4642      	mov	r2, r8
 80056f2:	4653      	mov	r3, sl
 80056f4:	4640      	mov	r0, r8
 80056f6:	4651      	mov	r1, sl
 80056f8:	f7fb f9a0 	bl	8000a3c <__aeabi_dcmpun>
 80056fc:	b148      	cbz	r0, 8005712 <_printf_float+0xe2>
 80056fe:	f1ba 0f00 	cmp.w	sl, #0
 8005702:	bfb8      	it	lt
 8005704:	232d      	movlt	r3, #45	; 0x2d
 8005706:	4880      	ldr	r0, [pc, #512]	; (8005908 <_printf_float+0x2d8>)
 8005708:	bfb8      	it	lt
 800570a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800570e:	4b7f      	ldr	r3, [pc, #508]	; (800590c <_printf_float+0x2dc>)
 8005710:	e7d3      	b.n	80056ba <_printf_float+0x8a>
 8005712:	6863      	ldr	r3, [r4, #4]
 8005714:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	d142      	bne.n	80057a2 <_printf_float+0x172>
 800571c:	2306      	movs	r3, #6
 800571e:	6063      	str	r3, [r4, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	9206      	str	r2, [sp, #24]
 8005724:	aa0e      	add	r2, sp, #56	; 0x38
 8005726:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800572a:	aa0d      	add	r2, sp, #52	; 0x34
 800572c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005730:	9203      	str	r2, [sp, #12]
 8005732:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005736:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800573a:	6023      	str	r3, [r4, #0]
 800573c:	6863      	ldr	r3, [r4, #4]
 800573e:	4642      	mov	r2, r8
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	4628      	mov	r0, r5
 8005744:	4653      	mov	r3, sl
 8005746:	910b      	str	r1, [sp, #44]	; 0x2c
 8005748:	f7ff fed4 	bl	80054f4 <__cvt>
 800574c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800574e:	4680      	mov	r8, r0
 8005750:	2947      	cmp	r1, #71	; 0x47
 8005752:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005754:	d108      	bne.n	8005768 <_printf_float+0x138>
 8005756:	1cc8      	adds	r0, r1, #3
 8005758:	db02      	blt.n	8005760 <_printf_float+0x130>
 800575a:	6863      	ldr	r3, [r4, #4]
 800575c:	4299      	cmp	r1, r3
 800575e:	dd40      	ble.n	80057e2 <_printf_float+0x1b2>
 8005760:	f1a9 0902 	sub.w	r9, r9, #2
 8005764:	fa5f f989 	uxtb.w	r9, r9
 8005768:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800576c:	d81f      	bhi.n	80057ae <_printf_float+0x17e>
 800576e:	464a      	mov	r2, r9
 8005770:	3901      	subs	r1, #1
 8005772:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005776:	910d      	str	r1, [sp, #52]	; 0x34
 8005778:	f7ff ff1b 	bl	80055b2 <__exponent>
 800577c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800577e:	4682      	mov	sl, r0
 8005780:	1813      	adds	r3, r2, r0
 8005782:	2a01      	cmp	r2, #1
 8005784:	6123      	str	r3, [r4, #16]
 8005786:	dc02      	bgt.n	800578e <_printf_float+0x15e>
 8005788:	6822      	ldr	r2, [r4, #0]
 800578a:	07d2      	lsls	r2, r2, #31
 800578c:	d501      	bpl.n	8005792 <_printf_float+0x162>
 800578e:	3301      	adds	r3, #1
 8005790:	6123      	str	r3, [r4, #16]
 8005792:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005796:	2b00      	cmp	r3, #0
 8005798:	d09b      	beq.n	80056d2 <_printf_float+0xa2>
 800579a:	232d      	movs	r3, #45	; 0x2d
 800579c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057a0:	e797      	b.n	80056d2 <_printf_float+0xa2>
 80057a2:	2947      	cmp	r1, #71	; 0x47
 80057a4:	d1bc      	bne.n	8005720 <_printf_float+0xf0>
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1ba      	bne.n	8005720 <_printf_float+0xf0>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e7b7      	b.n	800571e <_printf_float+0xee>
 80057ae:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80057b2:	d118      	bne.n	80057e6 <_printf_float+0x1b6>
 80057b4:	2900      	cmp	r1, #0
 80057b6:	6863      	ldr	r3, [r4, #4]
 80057b8:	dd0b      	ble.n	80057d2 <_printf_float+0x1a2>
 80057ba:	6121      	str	r1, [r4, #16]
 80057bc:	b913      	cbnz	r3, 80057c4 <_printf_float+0x194>
 80057be:	6822      	ldr	r2, [r4, #0]
 80057c0:	07d0      	lsls	r0, r2, #31
 80057c2:	d502      	bpl.n	80057ca <_printf_float+0x19a>
 80057c4:	3301      	adds	r3, #1
 80057c6:	440b      	add	r3, r1
 80057c8:	6123      	str	r3, [r4, #16]
 80057ca:	f04f 0a00 	mov.w	sl, #0
 80057ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80057d0:	e7df      	b.n	8005792 <_printf_float+0x162>
 80057d2:	b913      	cbnz	r3, 80057da <_printf_float+0x1aa>
 80057d4:	6822      	ldr	r2, [r4, #0]
 80057d6:	07d2      	lsls	r2, r2, #31
 80057d8:	d501      	bpl.n	80057de <_printf_float+0x1ae>
 80057da:	3302      	adds	r3, #2
 80057dc:	e7f4      	b.n	80057c8 <_printf_float+0x198>
 80057de:	2301      	movs	r3, #1
 80057e0:	e7f2      	b.n	80057c8 <_printf_float+0x198>
 80057e2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80057e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057e8:	4299      	cmp	r1, r3
 80057ea:	db05      	blt.n	80057f8 <_printf_float+0x1c8>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	6121      	str	r1, [r4, #16]
 80057f0:	07d8      	lsls	r0, r3, #31
 80057f2:	d5ea      	bpl.n	80057ca <_printf_float+0x19a>
 80057f4:	1c4b      	adds	r3, r1, #1
 80057f6:	e7e7      	b.n	80057c8 <_printf_float+0x198>
 80057f8:	2900      	cmp	r1, #0
 80057fa:	bfcc      	ite	gt
 80057fc:	2201      	movgt	r2, #1
 80057fe:	f1c1 0202 	rsble	r2, r1, #2
 8005802:	4413      	add	r3, r2
 8005804:	e7e0      	b.n	80057c8 <_printf_float+0x198>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	055a      	lsls	r2, r3, #21
 800580a:	d407      	bmi.n	800581c <_printf_float+0x1ec>
 800580c:	6923      	ldr	r3, [r4, #16]
 800580e:	4642      	mov	r2, r8
 8005810:	4631      	mov	r1, r6
 8005812:	4628      	mov	r0, r5
 8005814:	47b8      	blx	r7
 8005816:	3001      	adds	r0, #1
 8005818:	d12b      	bne.n	8005872 <_printf_float+0x242>
 800581a:	e764      	b.n	80056e6 <_printf_float+0xb6>
 800581c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005820:	f240 80dd 	bls.w	80059de <_printf_float+0x3ae>
 8005824:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005828:	2200      	movs	r2, #0
 800582a:	2300      	movs	r3, #0
 800582c:	f7fb f8d4 	bl	80009d8 <__aeabi_dcmpeq>
 8005830:	2800      	cmp	r0, #0
 8005832:	d033      	beq.n	800589c <_printf_float+0x26c>
 8005834:	2301      	movs	r3, #1
 8005836:	4631      	mov	r1, r6
 8005838:	4628      	mov	r0, r5
 800583a:	4a35      	ldr	r2, [pc, #212]	; (8005910 <_printf_float+0x2e0>)
 800583c:	47b8      	blx	r7
 800583e:	3001      	adds	r0, #1
 8005840:	f43f af51 	beq.w	80056e6 <_printf_float+0xb6>
 8005844:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005848:	429a      	cmp	r2, r3
 800584a:	db02      	blt.n	8005852 <_printf_float+0x222>
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	07d8      	lsls	r0, r3, #31
 8005850:	d50f      	bpl.n	8005872 <_printf_float+0x242>
 8005852:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005856:	4631      	mov	r1, r6
 8005858:	4628      	mov	r0, r5
 800585a:	47b8      	blx	r7
 800585c:	3001      	adds	r0, #1
 800585e:	f43f af42 	beq.w	80056e6 <_printf_float+0xb6>
 8005862:	f04f 0800 	mov.w	r8, #0
 8005866:	f104 091a 	add.w	r9, r4, #26
 800586a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800586c:	3b01      	subs	r3, #1
 800586e:	4543      	cmp	r3, r8
 8005870:	dc09      	bgt.n	8005886 <_printf_float+0x256>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	079b      	lsls	r3, r3, #30
 8005876:	f100 8102 	bmi.w	8005a7e <_printf_float+0x44e>
 800587a:	68e0      	ldr	r0, [r4, #12]
 800587c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800587e:	4298      	cmp	r0, r3
 8005880:	bfb8      	it	lt
 8005882:	4618      	movlt	r0, r3
 8005884:	e731      	b.n	80056ea <_printf_float+0xba>
 8005886:	2301      	movs	r3, #1
 8005888:	464a      	mov	r2, r9
 800588a:	4631      	mov	r1, r6
 800588c:	4628      	mov	r0, r5
 800588e:	47b8      	blx	r7
 8005890:	3001      	adds	r0, #1
 8005892:	f43f af28 	beq.w	80056e6 <_printf_float+0xb6>
 8005896:	f108 0801 	add.w	r8, r8, #1
 800589a:	e7e6      	b.n	800586a <_printf_float+0x23a>
 800589c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800589e:	2b00      	cmp	r3, #0
 80058a0:	dc38      	bgt.n	8005914 <_printf_float+0x2e4>
 80058a2:	2301      	movs	r3, #1
 80058a4:	4631      	mov	r1, r6
 80058a6:	4628      	mov	r0, r5
 80058a8:	4a19      	ldr	r2, [pc, #100]	; (8005910 <_printf_float+0x2e0>)
 80058aa:	47b8      	blx	r7
 80058ac:	3001      	adds	r0, #1
 80058ae:	f43f af1a 	beq.w	80056e6 <_printf_float+0xb6>
 80058b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80058b6:	4313      	orrs	r3, r2
 80058b8:	d102      	bne.n	80058c0 <_printf_float+0x290>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	07d9      	lsls	r1, r3, #31
 80058be:	d5d8      	bpl.n	8005872 <_printf_float+0x242>
 80058c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058c4:	4631      	mov	r1, r6
 80058c6:	4628      	mov	r0, r5
 80058c8:	47b8      	blx	r7
 80058ca:	3001      	adds	r0, #1
 80058cc:	f43f af0b 	beq.w	80056e6 <_printf_float+0xb6>
 80058d0:	f04f 0900 	mov.w	r9, #0
 80058d4:	f104 0a1a 	add.w	sl, r4, #26
 80058d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058da:	425b      	negs	r3, r3
 80058dc:	454b      	cmp	r3, r9
 80058de:	dc01      	bgt.n	80058e4 <_printf_float+0x2b4>
 80058e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058e2:	e794      	b.n	800580e <_printf_float+0x1de>
 80058e4:	2301      	movs	r3, #1
 80058e6:	4652      	mov	r2, sl
 80058e8:	4631      	mov	r1, r6
 80058ea:	4628      	mov	r0, r5
 80058ec:	47b8      	blx	r7
 80058ee:	3001      	adds	r0, #1
 80058f0:	f43f aef9 	beq.w	80056e6 <_printf_float+0xb6>
 80058f4:	f109 0901 	add.w	r9, r9, #1
 80058f8:	e7ee      	b.n	80058d8 <_printf_float+0x2a8>
 80058fa:	bf00      	nop
 80058fc:	7fefffff 	.word	0x7fefffff
 8005900:	08008344 	.word	0x08008344
 8005904:	08008348 	.word	0x08008348
 8005908:	08008350 	.word	0x08008350
 800590c:	0800834c 	.word	0x0800834c
 8005910:	08008354 	.word	0x08008354
 8005914:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005916:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005918:	429a      	cmp	r2, r3
 800591a:	bfa8      	it	ge
 800591c:	461a      	movge	r2, r3
 800591e:	2a00      	cmp	r2, #0
 8005920:	4691      	mov	r9, r2
 8005922:	dc37      	bgt.n	8005994 <_printf_float+0x364>
 8005924:	f04f 0b00 	mov.w	fp, #0
 8005928:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800592c:	f104 021a 	add.w	r2, r4, #26
 8005930:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005934:	ebaa 0309 	sub.w	r3, sl, r9
 8005938:	455b      	cmp	r3, fp
 800593a:	dc33      	bgt.n	80059a4 <_printf_float+0x374>
 800593c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005940:	429a      	cmp	r2, r3
 8005942:	db3b      	blt.n	80059bc <_printf_float+0x38c>
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	07da      	lsls	r2, r3, #31
 8005948:	d438      	bmi.n	80059bc <_printf_float+0x38c>
 800594a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800594c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800594e:	eba3 020a 	sub.w	r2, r3, sl
 8005952:	eba3 0901 	sub.w	r9, r3, r1
 8005956:	4591      	cmp	r9, r2
 8005958:	bfa8      	it	ge
 800595a:	4691      	movge	r9, r2
 800595c:	f1b9 0f00 	cmp.w	r9, #0
 8005960:	dc34      	bgt.n	80059cc <_printf_float+0x39c>
 8005962:	f04f 0800 	mov.w	r8, #0
 8005966:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800596a:	f104 0a1a 	add.w	sl, r4, #26
 800596e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005972:	1a9b      	subs	r3, r3, r2
 8005974:	eba3 0309 	sub.w	r3, r3, r9
 8005978:	4543      	cmp	r3, r8
 800597a:	f77f af7a 	ble.w	8005872 <_printf_float+0x242>
 800597e:	2301      	movs	r3, #1
 8005980:	4652      	mov	r2, sl
 8005982:	4631      	mov	r1, r6
 8005984:	4628      	mov	r0, r5
 8005986:	47b8      	blx	r7
 8005988:	3001      	adds	r0, #1
 800598a:	f43f aeac 	beq.w	80056e6 <_printf_float+0xb6>
 800598e:	f108 0801 	add.w	r8, r8, #1
 8005992:	e7ec      	b.n	800596e <_printf_float+0x33e>
 8005994:	4613      	mov	r3, r2
 8005996:	4631      	mov	r1, r6
 8005998:	4642      	mov	r2, r8
 800599a:	4628      	mov	r0, r5
 800599c:	47b8      	blx	r7
 800599e:	3001      	adds	r0, #1
 80059a0:	d1c0      	bne.n	8005924 <_printf_float+0x2f4>
 80059a2:	e6a0      	b.n	80056e6 <_printf_float+0xb6>
 80059a4:	2301      	movs	r3, #1
 80059a6:	4631      	mov	r1, r6
 80059a8:	4628      	mov	r0, r5
 80059aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80059ac:	47b8      	blx	r7
 80059ae:	3001      	adds	r0, #1
 80059b0:	f43f ae99 	beq.w	80056e6 <_printf_float+0xb6>
 80059b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059b6:	f10b 0b01 	add.w	fp, fp, #1
 80059ba:	e7b9      	b.n	8005930 <_printf_float+0x300>
 80059bc:	4631      	mov	r1, r6
 80059be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059c2:	4628      	mov	r0, r5
 80059c4:	47b8      	blx	r7
 80059c6:	3001      	adds	r0, #1
 80059c8:	d1bf      	bne.n	800594a <_printf_float+0x31a>
 80059ca:	e68c      	b.n	80056e6 <_printf_float+0xb6>
 80059cc:	464b      	mov	r3, r9
 80059ce:	4631      	mov	r1, r6
 80059d0:	4628      	mov	r0, r5
 80059d2:	eb08 020a 	add.w	r2, r8, sl
 80059d6:	47b8      	blx	r7
 80059d8:	3001      	adds	r0, #1
 80059da:	d1c2      	bne.n	8005962 <_printf_float+0x332>
 80059dc:	e683      	b.n	80056e6 <_printf_float+0xb6>
 80059de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059e0:	2a01      	cmp	r2, #1
 80059e2:	dc01      	bgt.n	80059e8 <_printf_float+0x3b8>
 80059e4:	07db      	lsls	r3, r3, #31
 80059e6:	d537      	bpl.n	8005a58 <_printf_float+0x428>
 80059e8:	2301      	movs	r3, #1
 80059ea:	4642      	mov	r2, r8
 80059ec:	4631      	mov	r1, r6
 80059ee:	4628      	mov	r0, r5
 80059f0:	47b8      	blx	r7
 80059f2:	3001      	adds	r0, #1
 80059f4:	f43f ae77 	beq.w	80056e6 <_printf_float+0xb6>
 80059f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059fc:	4631      	mov	r1, r6
 80059fe:	4628      	mov	r0, r5
 8005a00:	47b8      	blx	r7
 8005a02:	3001      	adds	r0, #1
 8005a04:	f43f ae6f 	beq.w	80056e6 <_printf_float+0xb6>
 8005a08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f7fa ffe2 	bl	80009d8 <__aeabi_dcmpeq>
 8005a14:	b9d8      	cbnz	r0, 8005a4e <_printf_float+0x41e>
 8005a16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a18:	f108 0201 	add.w	r2, r8, #1
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	4631      	mov	r1, r6
 8005a20:	4628      	mov	r0, r5
 8005a22:	47b8      	blx	r7
 8005a24:	3001      	adds	r0, #1
 8005a26:	d10e      	bne.n	8005a46 <_printf_float+0x416>
 8005a28:	e65d      	b.n	80056e6 <_printf_float+0xb6>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	464a      	mov	r2, r9
 8005a2e:	4631      	mov	r1, r6
 8005a30:	4628      	mov	r0, r5
 8005a32:	47b8      	blx	r7
 8005a34:	3001      	adds	r0, #1
 8005a36:	f43f ae56 	beq.w	80056e6 <_printf_float+0xb6>
 8005a3a:	f108 0801 	add.w	r8, r8, #1
 8005a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a40:	3b01      	subs	r3, #1
 8005a42:	4543      	cmp	r3, r8
 8005a44:	dcf1      	bgt.n	8005a2a <_printf_float+0x3fa>
 8005a46:	4653      	mov	r3, sl
 8005a48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a4c:	e6e0      	b.n	8005810 <_printf_float+0x1e0>
 8005a4e:	f04f 0800 	mov.w	r8, #0
 8005a52:	f104 091a 	add.w	r9, r4, #26
 8005a56:	e7f2      	b.n	8005a3e <_printf_float+0x40e>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	4642      	mov	r2, r8
 8005a5c:	e7df      	b.n	8005a1e <_printf_float+0x3ee>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	464a      	mov	r2, r9
 8005a62:	4631      	mov	r1, r6
 8005a64:	4628      	mov	r0, r5
 8005a66:	47b8      	blx	r7
 8005a68:	3001      	adds	r0, #1
 8005a6a:	f43f ae3c 	beq.w	80056e6 <_printf_float+0xb6>
 8005a6e:	f108 0801 	add.w	r8, r8, #1
 8005a72:	68e3      	ldr	r3, [r4, #12]
 8005a74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005a76:	1a5b      	subs	r3, r3, r1
 8005a78:	4543      	cmp	r3, r8
 8005a7a:	dcf0      	bgt.n	8005a5e <_printf_float+0x42e>
 8005a7c:	e6fd      	b.n	800587a <_printf_float+0x24a>
 8005a7e:	f04f 0800 	mov.w	r8, #0
 8005a82:	f104 0919 	add.w	r9, r4, #25
 8005a86:	e7f4      	b.n	8005a72 <_printf_float+0x442>

08005a88 <_printf_common>:
 8005a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a8c:	4616      	mov	r6, r2
 8005a8e:	4699      	mov	r9, r3
 8005a90:	688a      	ldr	r2, [r1, #8]
 8005a92:	690b      	ldr	r3, [r1, #16]
 8005a94:	4607      	mov	r7, r0
 8005a96:	4293      	cmp	r3, r2
 8005a98:	bfb8      	it	lt
 8005a9a:	4613      	movlt	r3, r2
 8005a9c:	6033      	str	r3, [r6, #0]
 8005a9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005aa8:	b10a      	cbz	r2, 8005aae <_printf_common+0x26>
 8005aaa:	3301      	adds	r3, #1
 8005aac:	6033      	str	r3, [r6, #0]
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	0699      	lsls	r1, r3, #26
 8005ab2:	bf42      	ittt	mi
 8005ab4:	6833      	ldrmi	r3, [r6, #0]
 8005ab6:	3302      	addmi	r3, #2
 8005ab8:	6033      	strmi	r3, [r6, #0]
 8005aba:	6825      	ldr	r5, [r4, #0]
 8005abc:	f015 0506 	ands.w	r5, r5, #6
 8005ac0:	d106      	bne.n	8005ad0 <_printf_common+0x48>
 8005ac2:	f104 0a19 	add.w	sl, r4, #25
 8005ac6:	68e3      	ldr	r3, [r4, #12]
 8005ac8:	6832      	ldr	r2, [r6, #0]
 8005aca:	1a9b      	subs	r3, r3, r2
 8005acc:	42ab      	cmp	r3, r5
 8005ace:	dc28      	bgt.n	8005b22 <_printf_common+0x9a>
 8005ad0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ad4:	1e13      	subs	r3, r2, #0
 8005ad6:	6822      	ldr	r2, [r4, #0]
 8005ad8:	bf18      	it	ne
 8005ada:	2301      	movne	r3, #1
 8005adc:	0692      	lsls	r2, r2, #26
 8005ade:	d42d      	bmi.n	8005b3c <_printf_common+0xb4>
 8005ae0:	4649      	mov	r1, r9
 8005ae2:	4638      	mov	r0, r7
 8005ae4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ae8:	47c0      	blx	r8
 8005aea:	3001      	adds	r0, #1
 8005aec:	d020      	beq.n	8005b30 <_printf_common+0xa8>
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	68e5      	ldr	r5, [r4, #12]
 8005af2:	f003 0306 	and.w	r3, r3, #6
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	bf18      	it	ne
 8005afa:	2500      	movne	r5, #0
 8005afc:	6832      	ldr	r2, [r6, #0]
 8005afe:	f04f 0600 	mov.w	r6, #0
 8005b02:	68a3      	ldr	r3, [r4, #8]
 8005b04:	bf08      	it	eq
 8005b06:	1aad      	subeq	r5, r5, r2
 8005b08:	6922      	ldr	r2, [r4, #16]
 8005b0a:	bf08      	it	eq
 8005b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b10:	4293      	cmp	r3, r2
 8005b12:	bfc4      	itt	gt
 8005b14:	1a9b      	subgt	r3, r3, r2
 8005b16:	18ed      	addgt	r5, r5, r3
 8005b18:	341a      	adds	r4, #26
 8005b1a:	42b5      	cmp	r5, r6
 8005b1c:	d11a      	bne.n	8005b54 <_printf_common+0xcc>
 8005b1e:	2000      	movs	r0, #0
 8005b20:	e008      	b.n	8005b34 <_printf_common+0xac>
 8005b22:	2301      	movs	r3, #1
 8005b24:	4652      	mov	r2, sl
 8005b26:	4649      	mov	r1, r9
 8005b28:	4638      	mov	r0, r7
 8005b2a:	47c0      	blx	r8
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d103      	bne.n	8005b38 <_printf_common+0xb0>
 8005b30:	f04f 30ff 	mov.w	r0, #4294967295
 8005b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b38:	3501      	adds	r5, #1
 8005b3a:	e7c4      	b.n	8005ac6 <_printf_common+0x3e>
 8005b3c:	2030      	movs	r0, #48	; 0x30
 8005b3e:	18e1      	adds	r1, r4, r3
 8005b40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b4a:	4422      	add	r2, r4
 8005b4c:	3302      	adds	r3, #2
 8005b4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b52:	e7c5      	b.n	8005ae0 <_printf_common+0x58>
 8005b54:	2301      	movs	r3, #1
 8005b56:	4622      	mov	r2, r4
 8005b58:	4649      	mov	r1, r9
 8005b5a:	4638      	mov	r0, r7
 8005b5c:	47c0      	blx	r8
 8005b5e:	3001      	adds	r0, #1
 8005b60:	d0e6      	beq.n	8005b30 <_printf_common+0xa8>
 8005b62:	3601      	adds	r6, #1
 8005b64:	e7d9      	b.n	8005b1a <_printf_common+0x92>
	...

08005b68 <_printf_i>:
 8005b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b6c:	7e0f      	ldrb	r7, [r1, #24]
 8005b6e:	4691      	mov	r9, r2
 8005b70:	2f78      	cmp	r7, #120	; 0x78
 8005b72:	4680      	mov	r8, r0
 8005b74:	460c      	mov	r4, r1
 8005b76:	469a      	mov	sl, r3
 8005b78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b7e:	d807      	bhi.n	8005b90 <_printf_i+0x28>
 8005b80:	2f62      	cmp	r7, #98	; 0x62
 8005b82:	d80a      	bhi.n	8005b9a <_printf_i+0x32>
 8005b84:	2f00      	cmp	r7, #0
 8005b86:	f000 80d9 	beq.w	8005d3c <_printf_i+0x1d4>
 8005b8a:	2f58      	cmp	r7, #88	; 0x58
 8005b8c:	f000 80a4 	beq.w	8005cd8 <_printf_i+0x170>
 8005b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b98:	e03a      	b.n	8005c10 <_printf_i+0xa8>
 8005b9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b9e:	2b15      	cmp	r3, #21
 8005ba0:	d8f6      	bhi.n	8005b90 <_printf_i+0x28>
 8005ba2:	a101      	add	r1, pc, #4	; (adr r1, 8005ba8 <_printf_i+0x40>)
 8005ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ba8:	08005c01 	.word	0x08005c01
 8005bac:	08005c15 	.word	0x08005c15
 8005bb0:	08005b91 	.word	0x08005b91
 8005bb4:	08005b91 	.word	0x08005b91
 8005bb8:	08005b91 	.word	0x08005b91
 8005bbc:	08005b91 	.word	0x08005b91
 8005bc0:	08005c15 	.word	0x08005c15
 8005bc4:	08005b91 	.word	0x08005b91
 8005bc8:	08005b91 	.word	0x08005b91
 8005bcc:	08005b91 	.word	0x08005b91
 8005bd0:	08005b91 	.word	0x08005b91
 8005bd4:	08005d23 	.word	0x08005d23
 8005bd8:	08005c45 	.word	0x08005c45
 8005bdc:	08005d05 	.word	0x08005d05
 8005be0:	08005b91 	.word	0x08005b91
 8005be4:	08005b91 	.word	0x08005b91
 8005be8:	08005d45 	.word	0x08005d45
 8005bec:	08005b91 	.word	0x08005b91
 8005bf0:	08005c45 	.word	0x08005c45
 8005bf4:	08005b91 	.word	0x08005b91
 8005bf8:	08005b91 	.word	0x08005b91
 8005bfc:	08005d0d 	.word	0x08005d0d
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	1d1a      	adds	r2, r3, #4
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	602a      	str	r2, [r5, #0]
 8005c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c10:	2301      	movs	r3, #1
 8005c12:	e0a4      	b.n	8005d5e <_printf_i+0x1f6>
 8005c14:	6820      	ldr	r0, [r4, #0]
 8005c16:	6829      	ldr	r1, [r5, #0]
 8005c18:	0606      	lsls	r6, r0, #24
 8005c1a:	f101 0304 	add.w	r3, r1, #4
 8005c1e:	d50a      	bpl.n	8005c36 <_printf_i+0xce>
 8005c20:	680e      	ldr	r6, [r1, #0]
 8005c22:	602b      	str	r3, [r5, #0]
 8005c24:	2e00      	cmp	r6, #0
 8005c26:	da03      	bge.n	8005c30 <_printf_i+0xc8>
 8005c28:	232d      	movs	r3, #45	; 0x2d
 8005c2a:	4276      	negs	r6, r6
 8005c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c30:	230a      	movs	r3, #10
 8005c32:	485e      	ldr	r0, [pc, #376]	; (8005dac <_printf_i+0x244>)
 8005c34:	e019      	b.n	8005c6a <_printf_i+0x102>
 8005c36:	680e      	ldr	r6, [r1, #0]
 8005c38:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c3c:	602b      	str	r3, [r5, #0]
 8005c3e:	bf18      	it	ne
 8005c40:	b236      	sxthne	r6, r6
 8005c42:	e7ef      	b.n	8005c24 <_printf_i+0xbc>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	6820      	ldr	r0, [r4, #0]
 8005c48:	1d19      	adds	r1, r3, #4
 8005c4a:	6029      	str	r1, [r5, #0]
 8005c4c:	0601      	lsls	r1, r0, #24
 8005c4e:	d501      	bpl.n	8005c54 <_printf_i+0xec>
 8005c50:	681e      	ldr	r6, [r3, #0]
 8005c52:	e002      	b.n	8005c5a <_printf_i+0xf2>
 8005c54:	0646      	lsls	r6, r0, #25
 8005c56:	d5fb      	bpl.n	8005c50 <_printf_i+0xe8>
 8005c58:	881e      	ldrh	r6, [r3, #0]
 8005c5a:	2f6f      	cmp	r7, #111	; 0x6f
 8005c5c:	bf0c      	ite	eq
 8005c5e:	2308      	moveq	r3, #8
 8005c60:	230a      	movne	r3, #10
 8005c62:	4852      	ldr	r0, [pc, #328]	; (8005dac <_printf_i+0x244>)
 8005c64:	2100      	movs	r1, #0
 8005c66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c6a:	6865      	ldr	r5, [r4, #4]
 8005c6c:	2d00      	cmp	r5, #0
 8005c6e:	bfa8      	it	ge
 8005c70:	6821      	ldrge	r1, [r4, #0]
 8005c72:	60a5      	str	r5, [r4, #8]
 8005c74:	bfa4      	itt	ge
 8005c76:	f021 0104 	bicge.w	r1, r1, #4
 8005c7a:	6021      	strge	r1, [r4, #0]
 8005c7c:	b90e      	cbnz	r6, 8005c82 <_printf_i+0x11a>
 8005c7e:	2d00      	cmp	r5, #0
 8005c80:	d04d      	beq.n	8005d1e <_printf_i+0x1b6>
 8005c82:	4615      	mov	r5, r2
 8005c84:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c88:	fb03 6711 	mls	r7, r3, r1, r6
 8005c8c:	5dc7      	ldrb	r7, [r0, r7]
 8005c8e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c92:	4637      	mov	r7, r6
 8005c94:	42bb      	cmp	r3, r7
 8005c96:	460e      	mov	r6, r1
 8005c98:	d9f4      	bls.n	8005c84 <_printf_i+0x11c>
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d10b      	bne.n	8005cb6 <_printf_i+0x14e>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	07de      	lsls	r6, r3, #31
 8005ca2:	d508      	bpl.n	8005cb6 <_printf_i+0x14e>
 8005ca4:	6923      	ldr	r3, [r4, #16]
 8005ca6:	6861      	ldr	r1, [r4, #4]
 8005ca8:	4299      	cmp	r1, r3
 8005caa:	bfde      	ittt	le
 8005cac:	2330      	movle	r3, #48	; 0x30
 8005cae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cb2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cb6:	1b52      	subs	r2, r2, r5
 8005cb8:	6122      	str	r2, [r4, #16]
 8005cba:	464b      	mov	r3, r9
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	4640      	mov	r0, r8
 8005cc0:	f8cd a000 	str.w	sl, [sp]
 8005cc4:	aa03      	add	r2, sp, #12
 8005cc6:	f7ff fedf 	bl	8005a88 <_printf_common>
 8005cca:	3001      	adds	r0, #1
 8005ccc:	d14c      	bne.n	8005d68 <_printf_i+0x200>
 8005cce:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd2:	b004      	add	sp, #16
 8005cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd8:	4834      	ldr	r0, [pc, #208]	; (8005dac <_printf_i+0x244>)
 8005cda:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005cde:	6829      	ldr	r1, [r5, #0]
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ce6:	6029      	str	r1, [r5, #0]
 8005ce8:	061d      	lsls	r5, r3, #24
 8005cea:	d514      	bpl.n	8005d16 <_printf_i+0x1ae>
 8005cec:	07df      	lsls	r7, r3, #31
 8005cee:	bf44      	itt	mi
 8005cf0:	f043 0320 	orrmi.w	r3, r3, #32
 8005cf4:	6023      	strmi	r3, [r4, #0]
 8005cf6:	b91e      	cbnz	r6, 8005d00 <_printf_i+0x198>
 8005cf8:	6823      	ldr	r3, [r4, #0]
 8005cfa:	f023 0320 	bic.w	r3, r3, #32
 8005cfe:	6023      	str	r3, [r4, #0]
 8005d00:	2310      	movs	r3, #16
 8005d02:	e7af      	b.n	8005c64 <_printf_i+0xfc>
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	f043 0320 	orr.w	r3, r3, #32
 8005d0a:	6023      	str	r3, [r4, #0]
 8005d0c:	2378      	movs	r3, #120	; 0x78
 8005d0e:	4828      	ldr	r0, [pc, #160]	; (8005db0 <_printf_i+0x248>)
 8005d10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d14:	e7e3      	b.n	8005cde <_printf_i+0x176>
 8005d16:	0659      	lsls	r1, r3, #25
 8005d18:	bf48      	it	mi
 8005d1a:	b2b6      	uxthmi	r6, r6
 8005d1c:	e7e6      	b.n	8005cec <_printf_i+0x184>
 8005d1e:	4615      	mov	r5, r2
 8005d20:	e7bb      	b.n	8005c9a <_printf_i+0x132>
 8005d22:	682b      	ldr	r3, [r5, #0]
 8005d24:	6826      	ldr	r6, [r4, #0]
 8005d26:	1d18      	adds	r0, r3, #4
 8005d28:	6961      	ldr	r1, [r4, #20]
 8005d2a:	6028      	str	r0, [r5, #0]
 8005d2c:	0635      	lsls	r5, r6, #24
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	d501      	bpl.n	8005d36 <_printf_i+0x1ce>
 8005d32:	6019      	str	r1, [r3, #0]
 8005d34:	e002      	b.n	8005d3c <_printf_i+0x1d4>
 8005d36:	0670      	lsls	r0, r6, #25
 8005d38:	d5fb      	bpl.n	8005d32 <_printf_i+0x1ca>
 8005d3a:	8019      	strh	r1, [r3, #0]
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	4615      	mov	r5, r2
 8005d40:	6123      	str	r3, [r4, #16]
 8005d42:	e7ba      	b.n	8005cba <_printf_i+0x152>
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	2100      	movs	r1, #0
 8005d48:	1d1a      	adds	r2, r3, #4
 8005d4a:	602a      	str	r2, [r5, #0]
 8005d4c:	681d      	ldr	r5, [r3, #0]
 8005d4e:	6862      	ldr	r2, [r4, #4]
 8005d50:	4628      	mov	r0, r5
 8005d52:	f000 fed7 	bl	8006b04 <memchr>
 8005d56:	b108      	cbz	r0, 8005d5c <_printf_i+0x1f4>
 8005d58:	1b40      	subs	r0, r0, r5
 8005d5a:	6060      	str	r0, [r4, #4]
 8005d5c:	6863      	ldr	r3, [r4, #4]
 8005d5e:	6123      	str	r3, [r4, #16]
 8005d60:	2300      	movs	r3, #0
 8005d62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d66:	e7a8      	b.n	8005cba <_printf_i+0x152>
 8005d68:	462a      	mov	r2, r5
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	6923      	ldr	r3, [r4, #16]
 8005d70:	47d0      	blx	sl
 8005d72:	3001      	adds	r0, #1
 8005d74:	d0ab      	beq.n	8005cce <_printf_i+0x166>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	079b      	lsls	r3, r3, #30
 8005d7a:	d413      	bmi.n	8005da4 <_printf_i+0x23c>
 8005d7c:	68e0      	ldr	r0, [r4, #12]
 8005d7e:	9b03      	ldr	r3, [sp, #12]
 8005d80:	4298      	cmp	r0, r3
 8005d82:	bfb8      	it	lt
 8005d84:	4618      	movlt	r0, r3
 8005d86:	e7a4      	b.n	8005cd2 <_printf_i+0x16a>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	4632      	mov	r2, r6
 8005d8c:	4649      	mov	r1, r9
 8005d8e:	4640      	mov	r0, r8
 8005d90:	47d0      	blx	sl
 8005d92:	3001      	adds	r0, #1
 8005d94:	d09b      	beq.n	8005cce <_printf_i+0x166>
 8005d96:	3501      	adds	r5, #1
 8005d98:	68e3      	ldr	r3, [r4, #12]
 8005d9a:	9903      	ldr	r1, [sp, #12]
 8005d9c:	1a5b      	subs	r3, r3, r1
 8005d9e:	42ab      	cmp	r3, r5
 8005da0:	dcf2      	bgt.n	8005d88 <_printf_i+0x220>
 8005da2:	e7eb      	b.n	8005d7c <_printf_i+0x214>
 8005da4:	2500      	movs	r5, #0
 8005da6:	f104 0619 	add.w	r6, r4, #25
 8005daa:	e7f5      	b.n	8005d98 <_printf_i+0x230>
 8005dac:	08008356 	.word	0x08008356
 8005db0:	08008367 	.word	0x08008367

08005db4 <siprintf>:
 8005db4:	b40e      	push	{r1, r2, r3}
 8005db6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005dba:	b500      	push	{lr}
 8005dbc:	b09c      	sub	sp, #112	; 0x70
 8005dbe:	ab1d      	add	r3, sp, #116	; 0x74
 8005dc0:	9002      	str	r0, [sp, #8]
 8005dc2:	9006      	str	r0, [sp, #24]
 8005dc4:	9107      	str	r1, [sp, #28]
 8005dc6:	9104      	str	r1, [sp, #16]
 8005dc8:	4808      	ldr	r0, [pc, #32]	; (8005dec <siprintf+0x38>)
 8005dca:	4909      	ldr	r1, [pc, #36]	; (8005df0 <siprintf+0x3c>)
 8005dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dd0:	9105      	str	r1, [sp, #20]
 8005dd2:	6800      	ldr	r0, [r0, #0]
 8005dd4:	a902      	add	r1, sp, #8
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	f001 fb7e 	bl	80074d8 <_svfiprintf_r>
 8005ddc:	2200      	movs	r2, #0
 8005dde:	9b02      	ldr	r3, [sp, #8]
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	b01c      	add	sp, #112	; 0x70
 8005de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005de8:	b003      	add	sp, #12
 8005dea:	4770      	bx	lr
 8005dec:	2000000c 	.word	0x2000000c
 8005df0:	ffff0208 	.word	0xffff0208

08005df4 <quorem>:
 8005df4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df8:	6903      	ldr	r3, [r0, #16]
 8005dfa:	690c      	ldr	r4, [r1, #16]
 8005dfc:	4607      	mov	r7, r0
 8005dfe:	42a3      	cmp	r3, r4
 8005e00:	f2c0 8082 	blt.w	8005f08 <quorem+0x114>
 8005e04:	3c01      	subs	r4, #1
 8005e06:	f100 0514 	add.w	r5, r0, #20
 8005e0a:	f101 0814 	add.w	r8, r1, #20
 8005e0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e12:	9301      	str	r3, [sp, #4]
 8005e14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e2c:	d331      	bcc.n	8005e92 <quorem+0x9e>
 8005e2e:	f04f 0e00 	mov.w	lr, #0
 8005e32:	4640      	mov	r0, r8
 8005e34:	46ac      	mov	ip, r5
 8005e36:	46f2      	mov	sl, lr
 8005e38:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e3c:	b293      	uxth	r3, r2
 8005e3e:	fb06 e303 	mla	r3, r6, r3, lr
 8005e42:	0c12      	lsrs	r2, r2, #16
 8005e44:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	fb06 e202 	mla	r2, r6, r2, lr
 8005e4e:	ebaa 0303 	sub.w	r3, sl, r3
 8005e52:	f8dc a000 	ldr.w	sl, [ip]
 8005e56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e5a:	fa1f fa8a 	uxth.w	sl, sl
 8005e5e:	4453      	add	r3, sl
 8005e60:	f8dc a000 	ldr.w	sl, [ip]
 8005e64:	b292      	uxth	r2, r2
 8005e66:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e74:	4581      	cmp	r9, r0
 8005e76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e7a:	f84c 3b04 	str.w	r3, [ip], #4
 8005e7e:	d2db      	bcs.n	8005e38 <quorem+0x44>
 8005e80:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e84:	b92b      	cbnz	r3, 8005e92 <quorem+0x9e>
 8005e86:	9b01      	ldr	r3, [sp, #4]
 8005e88:	3b04      	subs	r3, #4
 8005e8a:	429d      	cmp	r5, r3
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	d32f      	bcc.n	8005ef0 <quorem+0xfc>
 8005e90:	613c      	str	r4, [r7, #16]
 8005e92:	4638      	mov	r0, r7
 8005e94:	f001 f8d0 	bl	8007038 <__mcmp>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	db25      	blt.n	8005ee8 <quorem+0xf4>
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	f04f 0c00 	mov.w	ip, #0
 8005ea2:	3601      	adds	r6, #1
 8005ea4:	f858 1b04 	ldr.w	r1, [r8], #4
 8005ea8:	f8d0 e000 	ldr.w	lr, [r0]
 8005eac:	b28b      	uxth	r3, r1
 8005eae:	ebac 0303 	sub.w	r3, ip, r3
 8005eb2:	fa1f f28e 	uxth.w	r2, lr
 8005eb6:	4413      	add	r3, r2
 8005eb8:	0c0a      	lsrs	r2, r1, #16
 8005eba:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005ebe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ec8:	45c1      	cmp	r9, r8
 8005eca:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ece:	f840 3b04 	str.w	r3, [r0], #4
 8005ed2:	d2e7      	bcs.n	8005ea4 <quorem+0xb0>
 8005ed4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ed8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005edc:	b922      	cbnz	r2, 8005ee8 <quorem+0xf4>
 8005ede:	3b04      	subs	r3, #4
 8005ee0:	429d      	cmp	r5, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	d30a      	bcc.n	8005efc <quorem+0x108>
 8005ee6:	613c      	str	r4, [r7, #16]
 8005ee8:	4630      	mov	r0, r6
 8005eea:	b003      	add	sp, #12
 8005eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef0:	6812      	ldr	r2, [r2, #0]
 8005ef2:	3b04      	subs	r3, #4
 8005ef4:	2a00      	cmp	r2, #0
 8005ef6:	d1cb      	bne.n	8005e90 <quorem+0x9c>
 8005ef8:	3c01      	subs	r4, #1
 8005efa:	e7c6      	b.n	8005e8a <quorem+0x96>
 8005efc:	6812      	ldr	r2, [r2, #0]
 8005efe:	3b04      	subs	r3, #4
 8005f00:	2a00      	cmp	r2, #0
 8005f02:	d1f0      	bne.n	8005ee6 <quorem+0xf2>
 8005f04:	3c01      	subs	r4, #1
 8005f06:	e7eb      	b.n	8005ee0 <quorem+0xec>
 8005f08:	2000      	movs	r0, #0
 8005f0a:	e7ee      	b.n	8005eea <quorem+0xf6>
 8005f0c:	0000      	movs	r0, r0
	...

08005f10 <_dtoa_r>:
 8005f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	4616      	mov	r6, r2
 8005f16:	461f      	mov	r7, r3
 8005f18:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f1a:	b099      	sub	sp, #100	; 0x64
 8005f1c:	4605      	mov	r5, r0
 8005f1e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005f22:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005f26:	b974      	cbnz	r4, 8005f46 <_dtoa_r+0x36>
 8005f28:	2010      	movs	r0, #16
 8005f2a:	f000 fde3 	bl	8006af4 <malloc>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	6268      	str	r0, [r5, #36]	; 0x24
 8005f32:	b920      	cbnz	r0, 8005f3e <_dtoa_r+0x2e>
 8005f34:	21ea      	movs	r1, #234	; 0xea
 8005f36:	4ba8      	ldr	r3, [pc, #672]	; (80061d8 <_dtoa_r+0x2c8>)
 8005f38:	48a8      	ldr	r0, [pc, #672]	; (80061dc <_dtoa_r+0x2cc>)
 8005f3a:	f001 fbdd 	bl	80076f8 <__assert_func>
 8005f3e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f42:	6004      	str	r4, [r0, #0]
 8005f44:	60c4      	str	r4, [r0, #12]
 8005f46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f48:	6819      	ldr	r1, [r3, #0]
 8005f4a:	b151      	cbz	r1, 8005f62 <_dtoa_r+0x52>
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	2301      	movs	r3, #1
 8005f50:	4093      	lsls	r3, r2
 8005f52:	604a      	str	r2, [r1, #4]
 8005f54:	608b      	str	r3, [r1, #8]
 8005f56:	4628      	mov	r0, r5
 8005f58:	f000 fe30 	bl	8006bbc <_Bfree>
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	1e3b      	subs	r3, r7, #0
 8005f64:	bfaf      	iteee	ge
 8005f66:	2300      	movge	r3, #0
 8005f68:	2201      	movlt	r2, #1
 8005f6a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f6e:	9305      	strlt	r3, [sp, #20]
 8005f70:	bfa8      	it	ge
 8005f72:	f8c8 3000 	strge.w	r3, [r8]
 8005f76:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005f7a:	4b99      	ldr	r3, [pc, #612]	; (80061e0 <_dtoa_r+0x2d0>)
 8005f7c:	bfb8      	it	lt
 8005f7e:	f8c8 2000 	strlt.w	r2, [r8]
 8005f82:	ea33 0309 	bics.w	r3, r3, r9
 8005f86:	d119      	bne.n	8005fbc <_dtoa_r+0xac>
 8005f88:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f94:	4333      	orrs	r3, r6
 8005f96:	f000 857f 	beq.w	8006a98 <_dtoa_r+0xb88>
 8005f9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f9c:	b953      	cbnz	r3, 8005fb4 <_dtoa_r+0xa4>
 8005f9e:	4b91      	ldr	r3, [pc, #580]	; (80061e4 <_dtoa_r+0x2d4>)
 8005fa0:	e022      	b.n	8005fe8 <_dtoa_r+0xd8>
 8005fa2:	4b91      	ldr	r3, [pc, #580]	; (80061e8 <_dtoa_r+0x2d8>)
 8005fa4:	9303      	str	r3, [sp, #12]
 8005fa6:	3308      	adds	r3, #8
 8005fa8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	9803      	ldr	r0, [sp, #12]
 8005fae:	b019      	add	sp, #100	; 0x64
 8005fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb4:	4b8b      	ldr	r3, [pc, #556]	; (80061e4 <_dtoa_r+0x2d4>)
 8005fb6:	9303      	str	r3, [sp, #12]
 8005fb8:	3303      	adds	r3, #3
 8005fba:	e7f5      	b.n	8005fa8 <_dtoa_r+0x98>
 8005fbc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005fc0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005fc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f7fa fd04 	bl	80009d8 <__aeabi_dcmpeq>
 8005fd0:	4680      	mov	r8, r0
 8005fd2:	b158      	cbz	r0, 8005fec <_dtoa_r+0xdc>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 8558 	beq.w	8006a92 <_dtoa_r+0xb82>
 8005fe2:	4882      	ldr	r0, [pc, #520]	; (80061ec <_dtoa_r+0x2dc>)
 8005fe4:	6018      	str	r0, [r3, #0]
 8005fe6:	1e43      	subs	r3, r0, #1
 8005fe8:	9303      	str	r3, [sp, #12]
 8005fea:	e7df      	b.n	8005fac <_dtoa_r+0x9c>
 8005fec:	ab16      	add	r3, sp, #88	; 0x58
 8005fee:	9301      	str	r3, [sp, #4]
 8005ff0:	ab17      	add	r3, sp, #92	; 0x5c
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005ffa:	f001 f8c5 	bl	8007188 <__d2b>
 8005ffe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006002:	4683      	mov	fp, r0
 8006004:	2c00      	cmp	r4, #0
 8006006:	d07f      	beq.n	8006108 <_dtoa_r+0x1f8>
 8006008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800600c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800600e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006012:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006016:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800601a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800601e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006022:	2200      	movs	r2, #0
 8006024:	4b72      	ldr	r3, [pc, #456]	; (80061f0 <_dtoa_r+0x2e0>)
 8006026:	f7fa f8b7 	bl	8000198 <__aeabi_dsub>
 800602a:	a365      	add	r3, pc, #404	; (adr r3, 80061c0 <_dtoa_r+0x2b0>)
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	f7fa fa6a 	bl	8000508 <__aeabi_dmul>
 8006034:	a364      	add	r3, pc, #400	; (adr r3, 80061c8 <_dtoa_r+0x2b8>)
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	f7fa f8af 	bl	800019c <__adddf3>
 800603e:	4606      	mov	r6, r0
 8006040:	4620      	mov	r0, r4
 8006042:	460f      	mov	r7, r1
 8006044:	f7fa f9f6 	bl	8000434 <__aeabi_i2d>
 8006048:	a361      	add	r3, pc, #388	; (adr r3, 80061d0 <_dtoa_r+0x2c0>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f7fa fa5b 	bl	8000508 <__aeabi_dmul>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4630      	mov	r0, r6
 8006058:	4639      	mov	r1, r7
 800605a:	f7fa f89f 	bl	800019c <__adddf3>
 800605e:	4606      	mov	r6, r0
 8006060:	460f      	mov	r7, r1
 8006062:	f7fa fd01 	bl	8000a68 <__aeabi_d2iz>
 8006066:	2200      	movs	r2, #0
 8006068:	4682      	mov	sl, r0
 800606a:	2300      	movs	r3, #0
 800606c:	4630      	mov	r0, r6
 800606e:	4639      	mov	r1, r7
 8006070:	f7fa fcbc 	bl	80009ec <__aeabi_dcmplt>
 8006074:	b148      	cbz	r0, 800608a <_dtoa_r+0x17a>
 8006076:	4650      	mov	r0, sl
 8006078:	f7fa f9dc 	bl	8000434 <__aeabi_i2d>
 800607c:	4632      	mov	r2, r6
 800607e:	463b      	mov	r3, r7
 8006080:	f7fa fcaa 	bl	80009d8 <__aeabi_dcmpeq>
 8006084:	b908      	cbnz	r0, 800608a <_dtoa_r+0x17a>
 8006086:	f10a 3aff 	add.w	sl, sl, #4294967295
 800608a:	f1ba 0f16 	cmp.w	sl, #22
 800608e:	d858      	bhi.n	8006142 <_dtoa_r+0x232>
 8006090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006094:	4b57      	ldr	r3, [pc, #348]	; (80061f4 <_dtoa_r+0x2e4>)
 8006096:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	f7fa fca5 	bl	80009ec <__aeabi_dcmplt>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d04f      	beq.n	8006146 <_dtoa_r+0x236>
 80060a6:	2300      	movs	r3, #0
 80060a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80060ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80060b0:	1b1c      	subs	r4, r3, r4
 80060b2:	1e63      	subs	r3, r4, #1
 80060b4:	9309      	str	r3, [sp, #36]	; 0x24
 80060b6:	bf49      	itett	mi
 80060b8:	f1c4 0301 	rsbmi	r3, r4, #1
 80060bc:	2300      	movpl	r3, #0
 80060be:	9306      	strmi	r3, [sp, #24]
 80060c0:	2300      	movmi	r3, #0
 80060c2:	bf54      	ite	pl
 80060c4:	9306      	strpl	r3, [sp, #24]
 80060c6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80060c8:	f1ba 0f00 	cmp.w	sl, #0
 80060cc:	db3d      	blt.n	800614a <_dtoa_r+0x23a>
 80060ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80060d4:	4453      	add	r3, sl
 80060d6:	9309      	str	r3, [sp, #36]	; 0x24
 80060d8:	2300      	movs	r3, #0
 80060da:	930a      	str	r3, [sp, #40]	; 0x28
 80060dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060de:	2b09      	cmp	r3, #9
 80060e0:	f200 808c 	bhi.w	80061fc <_dtoa_r+0x2ec>
 80060e4:	2b05      	cmp	r3, #5
 80060e6:	bfc4      	itt	gt
 80060e8:	3b04      	subgt	r3, #4
 80060ea:	9322      	strgt	r3, [sp, #136]	; 0x88
 80060ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060ee:	bfc8      	it	gt
 80060f0:	2400      	movgt	r4, #0
 80060f2:	f1a3 0302 	sub.w	r3, r3, #2
 80060f6:	bfd8      	it	le
 80060f8:	2401      	movle	r4, #1
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	f200 808a 	bhi.w	8006214 <_dtoa_r+0x304>
 8006100:	e8df f003 	tbb	[pc, r3]
 8006104:	5b4d4f2d 	.word	0x5b4d4f2d
 8006108:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800610c:	441c      	add	r4, r3
 800610e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006112:	2b20      	cmp	r3, #32
 8006114:	bfc3      	ittte	gt
 8006116:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800611a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800611e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006122:	f1c3 0320 	rsble	r3, r3, #32
 8006126:	bfc6      	itte	gt
 8006128:	fa26 f000 	lsrgt.w	r0, r6, r0
 800612c:	4318      	orrgt	r0, r3
 800612e:	fa06 f003 	lslle.w	r0, r6, r3
 8006132:	f7fa f96f 	bl	8000414 <__aeabi_ui2d>
 8006136:	2301      	movs	r3, #1
 8006138:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800613c:	3c01      	subs	r4, #1
 800613e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006140:	e76f      	b.n	8006022 <_dtoa_r+0x112>
 8006142:	2301      	movs	r3, #1
 8006144:	e7b2      	b.n	80060ac <_dtoa_r+0x19c>
 8006146:	900f      	str	r0, [sp, #60]	; 0x3c
 8006148:	e7b1      	b.n	80060ae <_dtoa_r+0x19e>
 800614a:	9b06      	ldr	r3, [sp, #24]
 800614c:	eba3 030a 	sub.w	r3, r3, sl
 8006150:	9306      	str	r3, [sp, #24]
 8006152:	f1ca 0300 	rsb	r3, sl, #0
 8006156:	930a      	str	r3, [sp, #40]	; 0x28
 8006158:	2300      	movs	r3, #0
 800615a:	930e      	str	r3, [sp, #56]	; 0x38
 800615c:	e7be      	b.n	80060dc <_dtoa_r+0x1cc>
 800615e:	2300      	movs	r3, #0
 8006160:	930b      	str	r3, [sp, #44]	; 0x2c
 8006162:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006164:	2b00      	cmp	r3, #0
 8006166:	dc58      	bgt.n	800621a <_dtoa_r+0x30a>
 8006168:	f04f 0901 	mov.w	r9, #1
 800616c:	464b      	mov	r3, r9
 800616e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006172:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006176:	2200      	movs	r2, #0
 8006178:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800617a:	6042      	str	r2, [r0, #4]
 800617c:	2204      	movs	r2, #4
 800617e:	f102 0614 	add.w	r6, r2, #20
 8006182:	429e      	cmp	r6, r3
 8006184:	6841      	ldr	r1, [r0, #4]
 8006186:	d94e      	bls.n	8006226 <_dtoa_r+0x316>
 8006188:	4628      	mov	r0, r5
 800618a:	f000 fcd7 	bl	8006b3c <_Balloc>
 800618e:	9003      	str	r0, [sp, #12]
 8006190:	2800      	cmp	r0, #0
 8006192:	d14c      	bne.n	800622e <_dtoa_r+0x31e>
 8006194:	4602      	mov	r2, r0
 8006196:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800619a:	4b17      	ldr	r3, [pc, #92]	; (80061f8 <_dtoa_r+0x2e8>)
 800619c:	e6cc      	b.n	8005f38 <_dtoa_r+0x28>
 800619e:	2301      	movs	r3, #1
 80061a0:	e7de      	b.n	8006160 <_dtoa_r+0x250>
 80061a2:	2300      	movs	r3, #0
 80061a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80061a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061a8:	eb0a 0903 	add.w	r9, sl, r3
 80061ac:	f109 0301 	add.w	r3, r9, #1
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	9308      	str	r3, [sp, #32]
 80061b4:	bfb8      	it	lt
 80061b6:	2301      	movlt	r3, #1
 80061b8:	e7dd      	b.n	8006176 <_dtoa_r+0x266>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e7f2      	b.n	80061a4 <_dtoa_r+0x294>
 80061be:	bf00      	nop
 80061c0:	636f4361 	.word	0x636f4361
 80061c4:	3fd287a7 	.word	0x3fd287a7
 80061c8:	8b60c8b3 	.word	0x8b60c8b3
 80061cc:	3fc68a28 	.word	0x3fc68a28
 80061d0:	509f79fb 	.word	0x509f79fb
 80061d4:	3fd34413 	.word	0x3fd34413
 80061d8:	08008385 	.word	0x08008385
 80061dc:	0800839c 	.word	0x0800839c
 80061e0:	7ff00000 	.word	0x7ff00000
 80061e4:	08008381 	.word	0x08008381
 80061e8:	08008378 	.word	0x08008378
 80061ec:	08008355 	.word	0x08008355
 80061f0:	3ff80000 	.word	0x3ff80000
 80061f4:	08008490 	.word	0x08008490
 80061f8:	080083f7 	.word	0x080083f7
 80061fc:	2401      	movs	r4, #1
 80061fe:	2300      	movs	r3, #0
 8006200:	940b      	str	r4, [sp, #44]	; 0x2c
 8006202:	9322      	str	r3, [sp, #136]	; 0x88
 8006204:	f04f 39ff 	mov.w	r9, #4294967295
 8006208:	2200      	movs	r2, #0
 800620a:	2312      	movs	r3, #18
 800620c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006210:	9223      	str	r2, [sp, #140]	; 0x8c
 8006212:	e7b0      	b.n	8006176 <_dtoa_r+0x266>
 8006214:	2301      	movs	r3, #1
 8006216:	930b      	str	r3, [sp, #44]	; 0x2c
 8006218:	e7f4      	b.n	8006204 <_dtoa_r+0x2f4>
 800621a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800621e:	464b      	mov	r3, r9
 8006220:	f8cd 9020 	str.w	r9, [sp, #32]
 8006224:	e7a7      	b.n	8006176 <_dtoa_r+0x266>
 8006226:	3101      	adds	r1, #1
 8006228:	6041      	str	r1, [r0, #4]
 800622a:	0052      	lsls	r2, r2, #1
 800622c:	e7a7      	b.n	800617e <_dtoa_r+0x26e>
 800622e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006230:	9a03      	ldr	r2, [sp, #12]
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	9b08      	ldr	r3, [sp, #32]
 8006236:	2b0e      	cmp	r3, #14
 8006238:	f200 80a8 	bhi.w	800638c <_dtoa_r+0x47c>
 800623c:	2c00      	cmp	r4, #0
 800623e:	f000 80a5 	beq.w	800638c <_dtoa_r+0x47c>
 8006242:	f1ba 0f00 	cmp.w	sl, #0
 8006246:	dd34      	ble.n	80062b2 <_dtoa_r+0x3a2>
 8006248:	4a9a      	ldr	r2, [pc, #616]	; (80064b4 <_dtoa_r+0x5a4>)
 800624a:	f00a 030f 	and.w	r3, sl, #15
 800624e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006252:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006256:	e9d3 3400 	ldrd	r3, r4, [r3]
 800625a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800625e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006262:	d016      	beq.n	8006292 <_dtoa_r+0x382>
 8006264:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006268:	4b93      	ldr	r3, [pc, #588]	; (80064b8 <_dtoa_r+0x5a8>)
 800626a:	2703      	movs	r7, #3
 800626c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006270:	f7fa fa74 	bl	800075c <__aeabi_ddiv>
 8006274:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006278:	f004 040f 	and.w	r4, r4, #15
 800627c:	4e8e      	ldr	r6, [pc, #568]	; (80064b8 <_dtoa_r+0x5a8>)
 800627e:	b954      	cbnz	r4, 8006296 <_dtoa_r+0x386>
 8006280:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006284:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006288:	f7fa fa68 	bl	800075c <__aeabi_ddiv>
 800628c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006290:	e029      	b.n	80062e6 <_dtoa_r+0x3d6>
 8006292:	2702      	movs	r7, #2
 8006294:	e7f2      	b.n	800627c <_dtoa_r+0x36c>
 8006296:	07e1      	lsls	r1, r4, #31
 8006298:	d508      	bpl.n	80062ac <_dtoa_r+0x39c>
 800629a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800629e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062a2:	f7fa f931 	bl	8000508 <__aeabi_dmul>
 80062a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062aa:	3701      	adds	r7, #1
 80062ac:	1064      	asrs	r4, r4, #1
 80062ae:	3608      	adds	r6, #8
 80062b0:	e7e5      	b.n	800627e <_dtoa_r+0x36e>
 80062b2:	f000 80a5 	beq.w	8006400 <_dtoa_r+0x4f0>
 80062b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062ba:	f1ca 0400 	rsb	r4, sl, #0
 80062be:	4b7d      	ldr	r3, [pc, #500]	; (80064b4 <_dtoa_r+0x5a4>)
 80062c0:	f004 020f 	and.w	r2, r4, #15
 80062c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	f7fa f91c 	bl	8000508 <__aeabi_dmul>
 80062d0:	2702      	movs	r7, #2
 80062d2:	2300      	movs	r3, #0
 80062d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062d8:	4e77      	ldr	r6, [pc, #476]	; (80064b8 <_dtoa_r+0x5a8>)
 80062da:	1124      	asrs	r4, r4, #4
 80062dc:	2c00      	cmp	r4, #0
 80062de:	f040 8084 	bne.w	80063ea <_dtoa_r+0x4da>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1d2      	bne.n	800628c <_dtoa_r+0x37c>
 80062e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 808b 	beq.w	8006404 <_dtoa_r+0x4f4>
 80062ee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80062f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80062f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062fa:	2200      	movs	r2, #0
 80062fc:	4b6f      	ldr	r3, [pc, #444]	; (80064bc <_dtoa_r+0x5ac>)
 80062fe:	f7fa fb75 	bl	80009ec <__aeabi_dcmplt>
 8006302:	2800      	cmp	r0, #0
 8006304:	d07e      	beq.n	8006404 <_dtoa_r+0x4f4>
 8006306:	9b08      	ldr	r3, [sp, #32]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d07b      	beq.n	8006404 <_dtoa_r+0x4f4>
 800630c:	f1b9 0f00 	cmp.w	r9, #0
 8006310:	dd38      	ble.n	8006384 <_dtoa_r+0x474>
 8006312:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006316:	2200      	movs	r2, #0
 8006318:	4b69      	ldr	r3, [pc, #420]	; (80064c0 <_dtoa_r+0x5b0>)
 800631a:	f7fa f8f5 	bl	8000508 <__aeabi_dmul>
 800631e:	464c      	mov	r4, r9
 8006320:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006324:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006328:	3701      	adds	r7, #1
 800632a:	4638      	mov	r0, r7
 800632c:	f7fa f882 	bl	8000434 <__aeabi_i2d>
 8006330:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006334:	f7fa f8e8 	bl	8000508 <__aeabi_dmul>
 8006338:	2200      	movs	r2, #0
 800633a:	4b62      	ldr	r3, [pc, #392]	; (80064c4 <_dtoa_r+0x5b4>)
 800633c:	f7f9 ff2e 	bl	800019c <__adddf3>
 8006340:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006344:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006348:	9611      	str	r6, [sp, #68]	; 0x44
 800634a:	2c00      	cmp	r4, #0
 800634c:	d15d      	bne.n	800640a <_dtoa_r+0x4fa>
 800634e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006352:	2200      	movs	r2, #0
 8006354:	4b5c      	ldr	r3, [pc, #368]	; (80064c8 <_dtoa_r+0x5b8>)
 8006356:	f7f9 ff1f 	bl	8000198 <__aeabi_dsub>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006362:	4633      	mov	r3, r6
 8006364:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006366:	f7fa fb5f 	bl	8000a28 <__aeabi_dcmpgt>
 800636a:	2800      	cmp	r0, #0
 800636c:	f040 829c 	bne.w	80068a8 <_dtoa_r+0x998>
 8006370:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006374:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006376:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800637a:	f7fa fb37 	bl	80009ec <__aeabi_dcmplt>
 800637e:	2800      	cmp	r0, #0
 8006380:	f040 8290 	bne.w	80068a4 <_dtoa_r+0x994>
 8006384:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006388:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800638c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800638e:	2b00      	cmp	r3, #0
 8006390:	f2c0 8152 	blt.w	8006638 <_dtoa_r+0x728>
 8006394:	f1ba 0f0e 	cmp.w	sl, #14
 8006398:	f300 814e 	bgt.w	8006638 <_dtoa_r+0x728>
 800639c:	4b45      	ldr	r3, [pc, #276]	; (80064b4 <_dtoa_r+0x5a4>)
 800639e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063a6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80063aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f280 80db 	bge.w	8006568 <_dtoa_r+0x658>
 80063b2:	9b08      	ldr	r3, [sp, #32]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f300 80d7 	bgt.w	8006568 <_dtoa_r+0x658>
 80063ba:	f040 8272 	bne.w	80068a2 <_dtoa_r+0x992>
 80063be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063c2:	2200      	movs	r2, #0
 80063c4:	4b40      	ldr	r3, [pc, #256]	; (80064c8 <_dtoa_r+0x5b8>)
 80063c6:	f7fa f89f 	bl	8000508 <__aeabi_dmul>
 80063ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063ce:	f7fa fb21 	bl	8000a14 <__aeabi_dcmpge>
 80063d2:	9c08      	ldr	r4, [sp, #32]
 80063d4:	4626      	mov	r6, r4
 80063d6:	2800      	cmp	r0, #0
 80063d8:	f040 8248 	bne.w	800686c <_dtoa_r+0x95c>
 80063dc:	2331      	movs	r3, #49	; 0x31
 80063de:	9f03      	ldr	r7, [sp, #12]
 80063e0:	f10a 0a01 	add.w	sl, sl, #1
 80063e4:	f807 3b01 	strb.w	r3, [r7], #1
 80063e8:	e244      	b.n	8006874 <_dtoa_r+0x964>
 80063ea:	07e2      	lsls	r2, r4, #31
 80063ec:	d505      	bpl.n	80063fa <_dtoa_r+0x4ea>
 80063ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063f2:	f7fa f889 	bl	8000508 <__aeabi_dmul>
 80063f6:	2301      	movs	r3, #1
 80063f8:	3701      	adds	r7, #1
 80063fa:	1064      	asrs	r4, r4, #1
 80063fc:	3608      	adds	r6, #8
 80063fe:	e76d      	b.n	80062dc <_dtoa_r+0x3cc>
 8006400:	2702      	movs	r7, #2
 8006402:	e770      	b.n	80062e6 <_dtoa_r+0x3d6>
 8006404:	46d0      	mov	r8, sl
 8006406:	9c08      	ldr	r4, [sp, #32]
 8006408:	e78f      	b.n	800632a <_dtoa_r+0x41a>
 800640a:	9903      	ldr	r1, [sp, #12]
 800640c:	4b29      	ldr	r3, [pc, #164]	; (80064b4 <_dtoa_r+0x5a4>)
 800640e:	4421      	add	r1, r4
 8006410:	9112      	str	r1, [sp, #72]	; 0x48
 8006412:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006414:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006418:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800641c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006420:	2900      	cmp	r1, #0
 8006422:	d055      	beq.n	80064d0 <_dtoa_r+0x5c0>
 8006424:	2000      	movs	r0, #0
 8006426:	4929      	ldr	r1, [pc, #164]	; (80064cc <_dtoa_r+0x5bc>)
 8006428:	f7fa f998 	bl	800075c <__aeabi_ddiv>
 800642c:	463b      	mov	r3, r7
 800642e:	4632      	mov	r2, r6
 8006430:	f7f9 feb2 	bl	8000198 <__aeabi_dsub>
 8006434:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006438:	9f03      	ldr	r7, [sp, #12]
 800643a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800643e:	f7fa fb13 	bl	8000a68 <__aeabi_d2iz>
 8006442:	4604      	mov	r4, r0
 8006444:	f7f9 fff6 	bl	8000434 <__aeabi_i2d>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006450:	f7f9 fea2 	bl	8000198 <__aeabi_dsub>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	3430      	adds	r4, #48	; 0x30
 800645a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800645e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006462:	f807 4b01 	strb.w	r4, [r7], #1
 8006466:	f7fa fac1 	bl	80009ec <__aeabi_dcmplt>
 800646a:	2800      	cmp	r0, #0
 800646c:	d174      	bne.n	8006558 <_dtoa_r+0x648>
 800646e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006472:	2000      	movs	r0, #0
 8006474:	4911      	ldr	r1, [pc, #68]	; (80064bc <_dtoa_r+0x5ac>)
 8006476:	f7f9 fe8f 	bl	8000198 <__aeabi_dsub>
 800647a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800647e:	f7fa fab5 	bl	80009ec <__aeabi_dcmplt>
 8006482:	2800      	cmp	r0, #0
 8006484:	f040 80b7 	bne.w	80065f6 <_dtoa_r+0x6e6>
 8006488:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800648a:	429f      	cmp	r7, r3
 800648c:	f43f af7a 	beq.w	8006384 <_dtoa_r+0x474>
 8006490:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006494:	2200      	movs	r2, #0
 8006496:	4b0a      	ldr	r3, [pc, #40]	; (80064c0 <_dtoa_r+0x5b0>)
 8006498:	f7fa f836 	bl	8000508 <__aeabi_dmul>
 800649c:	2200      	movs	r2, #0
 800649e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064a6:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <_dtoa_r+0x5b0>)
 80064a8:	f7fa f82e 	bl	8000508 <__aeabi_dmul>
 80064ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064b0:	e7c3      	b.n	800643a <_dtoa_r+0x52a>
 80064b2:	bf00      	nop
 80064b4:	08008490 	.word	0x08008490
 80064b8:	08008468 	.word	0x08008468
 80064bc:	3ff00000 	.word	0x3ff00000
 80064c0:	40240000 	.word	0x40240000
 80064c4:	401c0000 	.word	0x401c0000
 80064c8:	40140000 	.word	0x40140000
 80064cc:	3fe00000 	.word	0x3fe00000
 80064d0:	4630      	mov	r0, r6
 80064d2:	4639      	mov	r1, r7
 80064d4:	f7fa f818 	bl	8000508 <__aeabi_dmul>
 80064d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064de:	9c03      	ldr	r4, [sp, #12]
 80064e0:	9314      	str	r3, [sp, #80]	; 0x50
 80064e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064e6:	f7fa fabf 	bl	8000a68 <__aeabi_d2iz>
 80064ea:	9015      	str	r0, [sp, #84]	; 0x54
 80064ec:	f7f9 ffa2 	bl	8000434 <__aeabi_i2d>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064f8:	f7f9 fe4e 	bl	8000198 <__aeabi_dsub>
 80064fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064fe:	4606      	mov	r6, r0
 8006500:	3330      	adds	r3, #48	; 0x30
 8006502:	f804 3b01 	strb.w	r3, [r4], #1
 8006506:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006508:	460f      	mov	r7, r1
 800650a:	429c      	cmp	r4, r3
 800650c:	f04f 0200 	mov.w	r2, #0
 8006510:	d124      	bne.n	800655c <_dtoa_r+0x64c>
 8006512:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006516:	4bb0      	ldr	r3, [pc, #704]	; (80067d8 <_dtoa_r+0x8c8>)
 8006518:	f7f9 fe40 	bl	800019c <__adddf3>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4630      	mov	r0, r6
 8006522:	4639      	mov	r1, r7
 8006524:	f7fa fa80 	bl	8000a28 <__aeabi_dcmpgt>
 8006528:	2800      	cmp	r0, #0
 800652a:	d163      	bne.n	80065f4 <_dtoa_r+0x6e4>
 800652c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006530:	2000      	movs	r0, #0
 8006532:	49a9      	ldr	r1, [pc, #676]	; (80067d8 <_dtoa_r+0x8c8>)
 8006534:	f7f9 fe30 	bl	8000198 <__aeabi_dsub>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4630      	mov	r0, r6
 800653e:	4639      	mov	r1, r7
 8006540:	f7fa fa54 	bl	80009ec <__aeabi_dcmplt>
 8006544:	2800      	cmp	r0, #0
 8006546:	f43f af1d 	beq.w	8006384 <_dtoa_r+0x474>
 800654a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800654c:	1e7b      	subs	r3, r7, #1
 800654e:	9314      	str	r3, [sp, #80]	; 0x50
 8006550:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006554:	2b30      	cmp	r3, #48	; 0x30
 8006556:	d0f8      	beq.n	800654a <_dtoa_r+0x63a>
 8006558:	46c2      	mov	sl, r8
 800655a:	e03b      	b.n	80065d4 <_dtoa_r+0x6c4>
 800655c:	4b9f      	ldr	r3, [pc, #636]	; (80067dc <_dtoa_r+0x8cc>)
 800655e:	f7f9 ffd3 	bl	8000508 <__aeabi_dmul>
 8006562:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006566:	e7bc      	b.n	80064e2 <_dtoa_r+0x5d2>
 8006568:	9f03      	ldr	r7, [sp, #12]
 800656a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800656e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006572:	4640      	mov	r0, r8
 8006574:	4649      	mov	r1, r9
 8006576:	f7fa f8f1 	bl	800075c <__aeabi_ddiv>
 800657a:	f7fa fa75 	bl	8000a68 <__aeabi_d2iz>
 800657e:	4604      	mov	r4, r0
 8006580:	f7f9 ff58 	bl	8000434 <__aeabi_i2d>
 8006584:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006588:	f7f9 ffbe 	bl	8000508 <__aeabi_dmul>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4640      	mov	r0, r8
 8006592:	4649      	mov	r1, r9
 8006594:	f7f9 fe00 	bl	8000198 <__aeabi_dsub>
 8006598:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800659c:	f807 6b01 	strb.w	r6, [r7], #1
 80065a0:	9e03      	ldr	r6, [sp, #12]
 80065a2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80065a6:	1bbe      	subs	r6, r7, r6
 80065a8:	45b4      	cmp	ip, r6
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	d136      	bne.n	800661e <_dtoa_r+0x70e>
 80065b0:	f7f9 fdf4 	bl	800019c <__adddf3>
 80065b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065b8:	4680      	mov	r8, r0
 80065ba:	4689      	mov	r9, r1
 80065bc:	f7fa fa34 	bl	8000a28 <__aeabi_dcmpgt>
 80065c0:	bb58      	cbnz	r0, 800661a <_dtoa_r+0x70a>
 80065c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065c6:	4640      	mov	r0, r8
 80065c8:	4649      	mov	r1, r9
 80065ca:	f7fa fa05 	bl	80009d8 <__aeabi_dcmpeq>
 80065ce:	b108      	cbz	r0, 80065d4 <_dtoa_r+0x6c4>
 80065d0:	07e1      	lsls	r1, r4, #31
 80065d2:	d422      	bmi.n	800661a <_dtoa_r+0x70a>
 80065d4:	4628      	mov	r0, r5
 80065d6:	4659      	mov	r1, fp
 80065d8:	f000 faf0 	bl	8006bbc <_Bfree>
 80065dc:	2300      	movs	r3, #0
 80065de:	703b      	strb	r3, [r7, #0]
 80065e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80065e2:	f10a 0001 	add.w	r0, sl, #1
 80065e6:	6018      	str	r0, [r3, #0]
 80065e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f43f acde 	beq.w	8005fac <_dtoa_r+0x9c>
 80065f0:	601f      	str	r7, [r3, #0]
 80065f2:	e4db      	b.n	8005fac <_dtoa_r+0x9c>
 80065f4:	4627      	mov	r7, r4
 80065f6:	463b      	mov	r3, r7
 80065f8:	461f      	mov	r7, r3
 80065fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065fe:	2a39      	cmp	r2, #57	; 0x39
 8006600:	d107      	bne.n	8006612 <_dtoa_r+0x702>
 8006602:	9a03      	ldr	r2, [sp, #12]
 8006604:	429a      	cmp	r2, r3
 8006606:	d1f7      	bne.n	80065f8 <_dtoa_r+0x6e8>
 8006608:	2230      	movs	r2, #48	; 0x30
 800660a:	9903      	ldr	r1, [sp, #12]
 800660c:	f108 0801 	add.w	r8, r8, #1
 8006610:	700a      	strb	r2, [r1, #0]
 8006612:	781a      	ldrb	r2, [r3, #0]
 8006614:	3201      	adds	r2, #1
 8006616:	701a      	strb	r2, [r3, #0]
 8006618:	e79e      	b.n	8006558 <_dtoa_r+0x648>
 800661a:	46d0      	mov	r8, sl
 800661c:	e7eb      	b.n	80065f6 <_dtoa_r+0x6e6>
 800661e:	2200      	movs	r2, #0
 8006620:	4b6e      	ldr	r3, [pc, #440]	; (80067dc <_dtoa_r+0x8cc>)
 8006622:	f7f9 ff71 	bl	8000508 <__aeabi_dmul>
 8006626:	2200      	movs	r2, #0
 8006628:	2300      	movs	r3, #0
 800662a:	4680      	mov	r8, r0
 800662c:	4689      	mov	r9, r1
 800662e:	f7fa f9d3 	bl	80009d8 <__aeabi_dcmpeq>
 8006632:	2800      	cmp	r0, #0
 8006634:	d09b      	beq.n	800656e <_dtoa_r+0x65e>
 8006636:	e7cd      	b.n	80065d4 <_dtoa_r+0x6c4>
 8006638:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800663a:	2a00      	cmp	r2, #0
 800663c:	f000 80d0 	beq.w	80067e0 <_dtoa_r+0x8d0>
 8006640:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006642:	2a01      	cmp	r2, #1
 8006644:	f300 80ae 	bgt.w	80067a4 <_dtoa_r+0x894>
 8006648:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800664a:	2a00      	cmp	r2, #0
 800664c:	f000 80a6 	beq.w	800679c <_dtoa_r+0x88c>
 8006650:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006654:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006656:	9f06      	ldr	r7, [sp, #24]
 8006658:	9a06      	ldr	r2, [sp, #24]
 800665a:	2101      	movs	r1, #1
 800665c:	441a      	add	r2, r3
 800665e:	9206      	str	r2, [sp, #24]
 8006660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006662:	4628      	mov	r0, r5
 8006664:	441a      	add	r2, r3
 8006666:	9209      	str	r2, [sp, #36]	; 0x24
 8006668:	f000 fb5e 	bl	8006d28 <__i2b>
 800666c:	4606      	mov	r6, r0
 800666e:	2f00      	cmp	r7, #0
 8006670:	dd0c      	ble.n	800668c <_dtoa_r+0x77c>
 8006672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006674:	2b00      	cmp	r3, #0
 8006676:	dd09      	ble.n	800668c <_dtoa_r+0x77c>
 8006678:	42bb      	cmp	r3, r7
 800667a:	bfa8      	it	ge
 800667c:	463b      	movge	r3, r7
 800667e:	9a06      	ldr	r2, [sp, #24]
 8006680:	1aff      	subs	r7, r7, r3
 8006682:	1ad2      	subs	r2, r2, r3
 8006684:	9206      	str	r2, [sp, #24]
 8006686:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	9309      	str	r3, [sp, #36]	; 0x24
 800668c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800668e:	b1f3      	cbz	r3, 80066ce <_dtoa_r+0x7be>
 8006690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 80a8 	beq.w	80067e8 <_dtoa_r+0x8d8>
 8006698:	2c00      	cmp	r4, #0
 800669a:	dd10      	ble.n	80066be <_dtoa_r+0x7ae>
 800669c:	4631      	mov	r1, r6
 800669e:	4622      	mov	r2, r4
 80066a0:	4628      	mov	r0, r5
 80066a2:	f000 fbff 	bl	8006ea4 <__pow5mult>
 80066a6:	465a      	mov	r2, fp
 80066a8:	4601      	mov	r1, r0
 80066aa:	4606      	mov	r6, r0
 80066ac:	4628      	mov	r0, r5
 80066ae:	f000 fb51 	bl	8006d54 <__multiply>
 80066b2:	4680      	mov	r8, r0
 80066b4:	4659      	mov	r1, fp
 80066b6:	4628      	mov	r0, r5
 80066b8:	f000 fa80 	bl	8006bbc <_Bfree>
 80066bc:	46c3      	mov	fp, r8
 80066be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066c0:	1b1a      	subs	r2, r3, r4
 80066c2:	d004      	beq.n	80066ce <_dtoa_r+0x7be>
 80066c4:	4659      	mov	r1, fp
 80066c6:	4628      	mov	r0, r5
 80066c8:	f000 fbec 	bl	8006ea4 <__pow5mult>
 80066cc:	4683      	mov	fp, r0
 80066ce:	2101      	movs	r1, #1
 80066d0:	4628      	mov	r0, r5
 80066d2:	f000 fb29 	bl	8006d28 <__i2b>
 80066d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066d8:	4604      	mov	r4, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f340 8086 	ble.w	80067ec <_dtoa_r+0x8dc>
 80066e0:	461a      	mov	r2, r3
 80066e2:	4601      	mov	r1, r0
 80066e4:	4628      	mov	r0, r5
 80066e6:	f000 fbdd 	bl	8006ea4 <__pow5mult>
 80066ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066ec:	4604      	mov	r4, r0
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	dd7f      	ble.n	80067f2 <_dtoa_r+0x8e2>
 80066f2:	f04f 0800 	mov.w	r8, #0
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80066fc:	6918      	ldr	r0, [r3, #16]
 80066fe:	f000 fac5 	bl	8006c8c <__hi0bits>
 8006702:	f1c0 0020 	rsb	r0, r0, #32
 8006706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006708:	4418      	add	r0, r3
 800670a:	f010 001f 	ands.w	r0, r0, #31
 800670e:	f000 8092 	beq.w	8006836 <_dtoa_r+0x926>
 8006712:	f1c0 0320 	rsb	r3, r0, #32
 8006716:	2b04      	cmp	r3, #4
 8006718:	f340 808a 	ble.w	8006830 <_dtoa_r+0x920>
 800671c:	f1c0 001c 	rsb	r0, r0, #28
 8006720:	9b06      	ldr	r3, [sp, #24]
 8006722:	4407      	add	r7, r0
 8006724:	4403      	add	r3, r0
 8006726:	9306      	str	r3, [sp, #24]
 8006728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800672a:	4403      	add	r3, r0
 800672c:	9309      	str	r3, [sp, #36]	; 0x24
 800672e:	9b06      	ldr	r3, [sp, #24]
 8006730:	2b00      	cmp	r3, #0
 8006732:	dd05      	ble.n	8006740 <_dtoa_r+0x830>
 8006734:	4659      	mov	r1, fp
 8006736:	461a      	mov	r2, r3
 8006738:	4628      	mov	r0, r5
 800673a:	f000 fc0d 	bl	8006f58 <__lshift>
 800673e:	4683      	mov	fp, r0
 8006740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006742:	2b00      	cmp	r3, #0
 8006744:	dd05      	ble.n	8006752 <_dtoa_r+0x842>
 8006746:	4621      	mov	r1, r4
 8006748:	461a      	mov	r2, r3
 800674a:	4628      	mov	r0, r5
 800674c:	f000 fc04 	bl	8006f58 <__lshift>
 8006750:	4604      	mov	r4, r0
 8006752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006754:	2b00      	cmp	r3, #0
 8006756:	d070      	beq.n	800683a <_dtoa_r+0x92a>
 8006758:	4621      	mov	r1, r4
 800675a:	4658      	mov	r0, fp
 800675c:	f000 fc6c 	bl	8007038 <__mcmp>
 8006760:	2800      	cmp	r0, #0
 8006762:	da6a      	bge.n	800683a <_dtoa_r+0x92a>
 8006764:	2300      	movs	r3, #0
 8006766:	4659      	mov	r1, fp
 8006768:	220a      	movs	r2, #10
 800676a:	4628      	mov	r0, r5
 800676c:	f000 fa48 	bl	8006c00 <__multadd>
 8006770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006772:	4683      	mov	fp, r0
 8006774:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 8194 	beq.w	8006aa6 <_dtoa_r+0xb96>
 800677e:	4631      	mov	r1, r6
 8006780:	2300      	movs	r3, #0
 8006782:	220a      	movs	r2, #10
 8006784:	4628      	mov	r0, r5
 8006786:	f000 fa3b 	bl	8006c00 <__multadd>
 800678a:	f1b9 0f00 	cmp.w	r9, #0
 800678e:	4606      	mov	r6, r0
 8006790:	f300 8093 	bgt.w	80068ba <_dtoa_r+0x9aa>
 8006794:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006796:	2b02      	cmp	r3, #2
 8006798:	dc57      	bgt.n	800684a <_dtoa_r+0x93a>
 800679a:	e08e      	b.n	80068ba <_dtoa_r+0x9aa>
 800679c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800679e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80067a2:	e757      	b.n	8006654 <_dtoa_r+0x744>
 80067a4:	9b08      	ldr	r3, [sp, #32]
 80067a6:	1e5c      	subs	r4, r3, #1
 80067a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067aa:	42a3      	cmp	r3, r4
 80067ac:	bfb7      	itett	lt
 80067ae:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80067b0:	1b1c      	subge	r4, r3, r4
 80067b2:	1ae2      	sublt	r2, r4, r3
 80067b4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80067b6:	bfbe      	ittt	lt
 80067b8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80067ba:	189b      	addlt	r3, r3, r2
 80067bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80067be:	9b08      	ldr	r3, [sp, #32]
 80067c0:	bfb8      	it	lt
 80067c2:	2400      	movlt	r4, #0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	bfbb      	ittet	lt
 80067c8:	9b06      	ldrlt	r3, [sp, #24]
 80067ca:	9a08      	ldrlt	r2, [sp, #32]
 80067cc:	9f06      	ldrge	r7, [sp, #24]
 80067ce:	1a9f      	sublt	r7, r3, r2
 80067d0:	bfac      	ite	ge
 80067d2:	9b08      	ldrge	r3, [sp, #32]
 80067d4:	2300      	movlt	r3, #0
 80067d6:	e73f      	b.n	8006658 <_dtoa_r+0x748>
 80067d8:	3fe00000 	.word	0x3fe00000
 80067dc:	40240000 	.word	0x40240000
 80067e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80067e2:	9f06      	ldr	r7, [sp, #24]
 80067e4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80067e6:	e742      	b.n	800666e <_dtoa_r+0x75e>
 80067e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ea:	e76b      	b.n	80066c4 <_dtoa_r+0x7b4>
 80067ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	dc19      	bgt.n	8006826 <_dtoa_r+0x916>
 80067f2:	9b04      	ldr	r3, [sp, #16]
 80067f4:	b9bb      	cbnz	r3, 8006826 <_dtoa_r+0x916>
 80067f6:	9b05      	ldr	r3, [sp, #20]
 80067f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067fc:	b99b      	cbnz	r3, 8006826 <_dtoa_r+0x916>
 80067fe:	9b05      	ldr	r3, [sp, #20]
 8006800:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006804:	0d1b      	lsrs	r3, r3, #20
 8006806:	051b      	lsls	r3, r3, #20
 8006808:	b183      	cbz	r3, 800682c <_dtoa_r+0x91c>
 800680a:	f04f 0801 	mov.w	r8, #1
 800680e:	9b06      	ldr	r3, [sp, #24]
 8006810:	3301      	adds	r3, #1
 8006812:	9306      	str	r3, [sp, #24]
 8006814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006816:	3301      	adds	r3, #1
 8006818:	9309      	str	r3, [sp, #36]	; 0x24
 800681a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800681c:	2b00      	cmp	r3, #0
 800681e:	f47f af6a 	bne.w	80066f6 <_dtoa_r+0x7e6>
 8006822:	2001      	movs	r0, #1
 8006824:	e76f      	b.n	8006706 <_dtoa_r+0x7f6>
 8006826:	f04f 0800 	mov.w	r8, #0
 800682a:	e7f6      	b.n	800681a <_dtoa_r+0x90a>
 800682c:	4698      	mov	r8, r3
 800682e:	e7f4      	b.n	800681a <_dtoa_r+0x90a>
 8006830:	f43f af7d 	beq.w	800672e <_dtoa_r+0x81e>
 8006834:	4618      	mov	r0, r3
 8006836:	301c      	adds	r0, #28
 8006838:	e772      	b.n	8006720 <_dtoa_r+0x810>
 800683a:	9b08      	ldr	r3, [sp, #32]
 800683c:	2b00      	cmp	r3, #0
 800683e:	dc36      	bgt.n	80068ae <_dtoa_r+0x99e>
 8006840:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006842:	2b02      	cmp	r3, #2
 8006844:	dd33      	ble.n	80068ae <_dtoa_r+0x99e>
 8006846:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800684a:	f1b9 0f00 	cmp.w	r9, #0
 800684e:	d10d      	bne.n	800686c <_dtoa_r+0x95c>
 8006850:	4621      	mov	r1, r4
 8006852:	464b      	mov	r3, r9
 8006854:	2205      	movs	r2, #5
 8006856:	4628      	mov	r0, r5
 8006858:	f000 f9d2 	bl	8006c00 <__multadd>
 800685c:	4601      	mov	r1, r0
 800685e:	4604      	mov	r4, r0
 8006860:	4658      	mov	r0, fp
 8006862:	f000 fbe9 	bl	8007038 <__mcmp>
 8006866:	2800      	cmp	r0, #0
 8006868:	f73f adb8 	bgt.w	80063dc <_dtoa_r+0x4cc>
 800686c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800686e:	9f03      	ldr	r7, [sp, #12]
 8006870:	ea6f 0a03 	mvn.w	sl, r3
 8006874:	f04f 0800 	mov.w	r8, #0
 8006878:	4621      	mov	r1, r4
 800687a:	4628      	mov	r0, r5
 800687c:	f000 f99e 	bl	8006bbc <_Bfree>
 8006880:	2e00      	cmp	r6, #0
 8006882:	f43f aea7 	beq.w	80065d4 <_dtoa_r+0x6c4>
 8006886:	f1b8 0f00 	cmp.w	r8, #0
 800688a:	d005      	beq.n	8006898 <_dtoa_r+0x988>
 800688c:	45b0      	cmp	r8, r6
 800688e:	d003      	beq.n	8006898 <_dtoa_r+0x988>
 8006890:	4641      	mov	r1, r8
 8006892:	4628      	mov	r0, r5
 8006894:	f000 f992 	bl	8006bbc <_Bfree>
 8006898:	4631      	mov	r1, r6
 800689a:	4628      	mov	r0, r5
 800689c:	f000 f98e 	bl	8006bbc <_Bfree>
 80068a0:	e698      	b.n	80065d4 <_dtoa_r+0x6c4>
 80068a2:	2400      	movs	r4, #0
 80068a4:	4626      	mov	r6, r4
 80068a6:	e7e1      	b.n	800686c <_dtoa_r+0x95c>
 80068a8:	46c2      	mov	sl, r8
 80068aa:	4626      	mov	r6, r4
 80068ac:	e596      	b.n	80063dc <_dtoa_r+0x4cc>
 80068ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 80fd 	beq.w	8006ab4 <_dtoa_r+0xba4>
 80068ba:	2f00      	cmp	r7, #0
 80068bc:	dd05      	ble.n	80068ca <_dtoa_r+0x9ba>
 80068be:	4631      	mov	r1, r6
 80068c0:	463a      	mov	r2, r7
 80068c2:	4628      	mov	r0, r5
 80068c4:	f000 fb48 	bl	8006f58 <__lshift>
 80068c8:	4606      	mov	r6, r0
 80068ca:	f1b8 0f00 	cmp.w	r8, #0
 80068ce:	d05c      	beq.n	800698a <_dtoa_r+0xa7a>
 80068d0:	4628      	mov	r0, r5
 80068d2:	6871      	ldr	r1, [r6, #4]
 80068d4:	f000 f932 	bl	8006b3c <_Balloc>
 80068d8:	4607      	mov	r7, r0
 80068da:	b928      	cbnz	r0, 80068e8 <_dtoa_r+0x9d8>
 80068dc:	4602      	mov	r2, r0
 80068de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80068e2:	4b7f      	ldr	r3, [pc, #508]	; (8006ae0 <_dtoa_r+0xbd0>)
 80068e4:	f7ff bb28 	b.w	8005f38 <_dtoa_r+0x28>
 80068e8:	6932      	ldr	r2, [r6, #16]
 80068ea:	f106 010c 	add.w	r1, r6, #12
 80068ee:	3202      	adds	r2, #2
 80068f0:	0092      	lsls	r2, r2, #2
 80068f2:	300c      	adds	r0, #12
 80068f4:	f000 f914 	bl	8006b20 <memcpy>
 80068f8:	2201      	movs	r2, #1
 80068fa:	4639      	mov	r1, r7
 80068fc:	4628      	mov	r0, r5
 80068fe:	f000 fb2b 	bl	8006f58 <__lshift>
 8006902:	46b0      	mov	r8, r6
 8006904:	4606      	mov	r6, r0
 8006906:	9b03      	ldr	r3, [sp, #12]
 8006908:	3301      	adds	r3, #1
 800690a:	9308      	str	r3, [sp, #32]
 800690c:	9b03      	ldr	r3, [sp, #12]
 800690e:	444b      	add	r3, r9
 8006910:	930a      	str	r3, [sp, #40]	; 0x28
 8006912:	9b04      	ldr	r3, [sp, #16]
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	9309      	str	r3, [sp, #36]	; 0x24
 800691a:	9b08      	ldr	r3, [sp, #32]
 800691c:	4621      	mov	r1, r4
 800691e:	3b01      	subs	r3, #1
 8006920:	4658      	mov	r0, fp
 8006922:	9304      	str	r3, [sp, #16]
 8006924:	f7ff fa66 	bl	8005df4 <quorem>
 8006928:	4603      	mov	r3, r0
 800692a:	4641      	mov	r1, r8
 800692c:	3330      	adds	r3, #48	; 0x30
 800692e:	9006      	str	r0, [sp, #24]
 8006930:	4658      	mov	r0, fp
 8006932:	930b      	str	r3, [sp, #44]	; 0x2c
 8006934:	f000 fb80 	bl	8007038 <__mcmp>
 8006938:	4632      	mov	r2, r6
 800693a:	4681      	mov	r9, r0
 800693c:	4621      	mov	r1, r4
 800693e:	4628      	mov	r0, r5
 8006940:	f000 fb96 	bl	8007070 <__mdiff>
 8006944:	68c2      	ldr	r2, [r0, #12]
 8006946:	4607      	mov	r7, r0
 8006948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800694a:	bb02      	cbnz	r2, 800698e <_dtoa_r+0xa7e>
 800694c:	4601      	mov	r1, r0
 800694e:	4658      	mov	r0, fp
 8006950:	f000 fb72 	bl	8007038 <__mcmp>
 8006954:	4602      	mov	r2, r0
 8006956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006958:	4639      	mov	r1, r7
 800695a:	4628      	mov	r0, r5
 800695c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006960:	f000 f92c 	bl	8006bbc <_Bfree>
 8006964:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006966:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006968:	9f08      	ldr	r7, [sp, #32]
 800696a:	ea43 0102 	orr.w	r1, r3, r2
 800696e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006970:	430b      	orrs	r3, r1
 8006972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006974:	d10d      	bne.n	8006992 <_dtoa_r+0xa82>
 8006976:	2b39      	cmp	r3, #57	; 0x39
 8006978:	d029      	beq.n	80069ce <_dtoa_r+0xabe>
 800697a:	f1b9 0f00 	cmp.w	r9, #0
 800697e:	dd01      	ble.n	8006984 <_dtoa_r+0xa74>
 8006980:	9b06      	ldr	r3, [sp, #24]
 8006982:	3331      	adds	r3, #49	; 0x31
 8006984:	9a04      	ldr	r2, [sp, #16]
 8006986:	7013      	strb	r3, [r2, #0]
 8006988:	e776      	b.n	8006878 <_dtoa_r+0x968>
 800698a:	4630      	mov	r0, r6
 800698c:	e7b9      	b.n	8006902 <_dtoa_r+0x9f2>
 800698e:	2201      	movs	r2, #1
 8006990:	e7e2      	b.n	8006958 <_dtoa_r+0xa48>
 8006992:	f1b9 0f00 	cmp.w	r9, #0
 8006996:	db06      	blt.n	80069a6 <_dtoa_r+0xa96>
 8006998:	9922      	ldr	r1, [sp, #136]	; 0x88
 800699a:	ea41 0909 	orr.w	r9, r1, r9
 800699e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069a0:	ea59 0101 	orrs.w	r1, r9, r1
 80069a4:	d120      	bne.n	80069e8 <_dtoa_r+0xad8>
 80069a6:	2a00      	cmp	r2, #0
 80069a8:	ddec      	ble.n	8006984 <_dtoa_r+0xa74>
 80069aa:	4659      	mov	r1, fp
 80069ac:	2201      	movs	r2, #1
 80069ae:	4628      	mov	r0, r5
 80069b0:	9308      	str	r3, [sp, #32]
 80069b2:	f000 fad1 	bl	8006f58 <__lshift>
 80069b6:	4621      	mov	r1, r4
 80069b8:	4683      	mov	fp, r0
 80069ba:	f000 fb3d 	bl	8007038 <__mcmp>
 80069be:	2800      	cmp	r0, #0
 80069c0:	9b08      	ldr	r3, [sp, #32]
 80069c2:	dc02      	bgt.n	80069ca <_dtoa_r+0xaba>
 80069c4:	d1de      	bne.n	8006984 <_dtoa_r+0xa74>
 80069c6:	07da      	lsls	r2, r3, #31
 80069c8:	d5dc      	bpl.n	8006984 <_dtoa_r+0xa74>
 80069ca:	2b39      	cmp	r3, #57	; 0x39
 80069cc:	d1d8      	bne.n	8006980 <_dtoa_r+0xa70>
 80069ce:	2339      	movs	r3, #57	; 0x39
 80069d0:	9a04      	ldr	r2, [sp, #16]
 80069d2:	7013      	strb	r3, [r2, #0]
 80069d4:	463b      	mov	r3, r7
 80069d6:	461f      	mov	r7, r3
 80069d8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80069dc:	3b01      	subs	r3, #1
 80069de:	2a39      	cmp	r2, #57	; 0x39
 80069e0:	d050      	beq.n	8006a84 <_dtoa_r+0xb74>
 80069e2:	3201      	adds	r2, #1
 80069e4:	701a      	strb	r2, [r3, #0]
 80069e6:	e747      	b.n	8006878 <_dtoa_r+0x968>
 80069e8:	2a00      	cmp	r2, #0
 80069ea:	dd03      	ble.n	80069f4 <_dtoa_r+0xae4>
 80069ec:	2b39      	cmp	r3, #57	; 0x39
 80069ee:	d0ee      	beq.n	80069ce <_dtoa_r+0xabe>
 80069f0:	3301      	adds	r3, #1
 80069f2:	e7c7      	b.n	8006984 <_dtoa_r+0xa74>
 80069f4:	9a08      	ldr	r2, [sp, #32]
 80069f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80069f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80069fc:	428a      	cmp	r2, r1
 80069fe:	d02a      	beq.n	8006a56 <_dtoa_r+0xb46>
 8006a00:	4659      	mov	r1, fp
 8006a02:	2300      	movs	r3, #0
 8006a04:	220a      	movs	r2, #10
 8006a06:	4628      	mov	r0, r5
 8006a08:	f000 f8fa 	bl	8006c00 <__multadd>
 8006a0c:	45b0      	cmp	r8, r6
 8006a0e:	4683      	mov	fp, r0
 8006a10:	f04f 0300 	mov.w	r3, #0
 8006a14:	f04f 020a 	mov.w	r2, #10
 8006a18:	4641      	mov	r1, r8
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	d107      	bne.n	8006a2e <_dtoa_r+0xb1e>
 8006a1e:	f000 f8ef 	bl	8006c00 <__multadd>
 8006a22:	4680      	mov	r8, r0
 8006a24:	4606      	mov	r6, r0
 8006a26:	9b08      	ldr	r3, [sp, #32]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	9308      	str	r3, [sp, #32]
 8006a2c:	e775      	b.n	800691a <_dtoa_r+0xa0a>
 8006a2e:	f000 f8e7 	bl	8006c00 <__multadd>
 8006a32:	4631      	mov	r1, r6
 8006a34:	4680      	mov	r8, r0
 8006a36:	2300      	movs	r3, #0
 8006a38:	220a      	movs	r2, #10
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	f000 f8e0 	bl	8006c00 <__multadd>
 8006a40:	4606      	mov	r6, r0
 8006a42:	e7f0      	b.n	8006a26 <_dtoa_r+0xb16>
 8006a44:	f1b9 0f00 	cmp.w	r9, #0
 8006a48:	bfcc      	ite	gt
 8006a4a:	464f      	movgt	r7, r9
 8006a4c:	2701      	movle	r7, #1
 8006a4e:	f04f 0800 	mov.w	r8, #0
 8006a52:	9a03      	ldr	r2, [sp, #12]
 8006a54:	4417      	add	r7, r2
 8006a56:	4659      	mov	r1, fp
 8006a58:	2201      	movs	r2, #1
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	9308      	str	r3, [sp, #32]
 8006a5e:	f000 fa7b 	bl	8006f58 <__lshift>
 8006a62:	4621      	mov	r1, r4
 8006a64:	4683      	mov	fp, r0
 8006a66:	f000 fae7 	bl	8007038 <__mcmp>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	dcb2      	bgt.n	80069d4 <_dtoa_r+0xac4>
 8006a6e:	d102      	bne.n	8006a76 <_dtoa_r+0xb66>
 8006a70:	9b08      	ldr	r3, [sp, #32]
 8006a72:	07db      	lsls	r3, r3, #31
 8006a74:	d4ae      	bmi.n	80069d4 <_dtoa_r+0xac4>
 8006a76:	463b      	mov	r3, r7
 8006a78:	461f      	mov	r7, r3
 8006a7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a7e:	2a30      	cmp	r2, #48	; 0x30
 8006a80:	d0fa      	beq.n	8006a78 <_dtoa_r+0xb68>
 8006a82:	e6f9      	b.n	8006878 <_dtoa_r+0x968>
 8006a84:	9a03      	ldr	r2, [sp, #12]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d1a5      	bne.n	80069d6 <_dtoa_r+0xac6>
 8006a8a:	2331      	movs	r3, #49	; 0x31
 8006a8c:	f10a 0a01 	add.w	sl, sl, #1
 8006a90:	e779      	b.n	8006986 <_dtoa_r+0xa76>
 8006a92:	4b14      	ldr	r3, [pc, #80]	; (8006ae4 <_dtoa_r+0xbd4>)
 8006a94:	f7ff baa8 	b.w	8005fe8 <_dtoa_r+0xd8>
 8006a98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f47f aa81 	bne.w	8005fa2 <_dtoa_r+0x92>
 8006aa0:	4b11      	ldr	r3, [pc, #68]	; (8006ae8 <_dtoa_r+0xbd8>)
 8006aa2:	f7ff baa1 	b.w	8005fe8 <_dtoa_r+0xd8>
 8006aa6:	f1b9 0f00 	cmp.w	r9, #0
 8006aaa:	dc03      	bgt.n	8006ab4 <_dtoa_r+0xba4>
 8006aac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	f73f aecb 	bgt.w	800684a <_dtoa_r+0x93a>
 8006ab4:	9f03      	ldr	r7, [sp, #12]
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	4658      	mov	r0, fp
 8006aba:	f7ff f99b 	bl	8005df4 <quorem>
 8006abe:	9a03      	ldr	r2, [sp, #12]
 8006ac0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006ac4:	f807 3b01 	strb.w	r3, [r7], #1
 8006ac8:	1aba      	subs	r2, r7, r2
 8006aca:	4591      	cmp	r9, r2
 8006acc:	ddba      	ble.n	8006a44 <_dtoa_r+0xb34>
 8006ace:	4659      	mov	r1, fp
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	220a      	movs	r2, #10
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	f000 f893 	bl	8006c00 <__multadd>
 8006ada:	4683      	mov	fp, r0
 8006adc:	e7eb      	b.n	8006ab6 <_dtoa_r+0xba6>
 8006ade:	bf00      	nop
 8006ae0:	080083f7 	.word	0x080083f7
 8006ae4:	08008354 	.word	0x08008354
 8006ae8:	08008378 	.word	0x08008378

08006aec <_localeconv_r>:
 8006aec:	4800      	ldr	r0, [pc, #0]	; (8006af0 <_localeconv_r+0x4>)
 8006aee:	4770      	bx	lr
 8006af0:	20000160 	.word	0x20000160

08006af4 <malloc>:
 8006af4:	4b02      	ldr	r3, [pc, #8]	; (8006b00 <malloc+0xc>)
 8006af6:	4601      	mov	r1, r0
 8006af8:	6818      	ldr	r0, [r3, #0]
 8006afa:	f000 bc1d 	b.w	8007338 <_malloc_r>
 8006afe:	bf00      	nop
 8006b00:	2000000c 	.word	0x2000000c

08006b04 <memchr>:
 8006b04:	4603      	mov	r3, r0
 8006b06:	b510      	push	{r4, lr}
 8006b08:	b2c9      	uxtb	r1, r1
 8006b0a:	4402      	add	r2, r0
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	4618      	mov	r0, r3
 8006b10:	d101      	bne.n	8006b16 <memchr+0x12>
 8006b12:	2000      	movs	r0, #0
 8006b14:	e003      	b.n	8006b1e <memchr+0x1a>
 8006b16:	7804      	ldrb	r4, [r0, #0]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	428c      	cmp	r4, r1
 8006b1c:	d1f6      	bne.n	8006b0c <memchr+0x8>
 8006b1e:	bd10      	pop	{r4, pc}

08006b20 <memcpy>:
 8006b20:	440a      	add	r2, r1
 8006b22:	4291      	cmp	r1, r2
 8006b24:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b28:	d100      	bne.n	8006b2c <memcpy+0xc>
 8006b2a:	4770      	bx	lr
 8006b2c:	b510      	push	{r4, lr}
 8006b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b32:	4291      	cmp	r1, r2
 8006b34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b38:	d1f9      	bne.n	8006b2e <memcpy+0xe>
 8006b3a:	bd10      	pop	{r4, pc}

08006b3c <_Balloc>:
 8006b3c:	b570      	push	{r4, r5, r6, lr}
 8006b3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b40:	4604      	mov	r4, r0
 8006b42:	460d      	mov	r5, r1
 8006b44:	b976      	cbnz	r6, 8006b64 <_Balloc+0x28>
 8006b46:	2010      	movs	r0, #16
 8006b48:	f7ff ffd4 	bl	8006af4 <malloc>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	6260      	str	r0, [r4, #36]	; 0x24
 8006b50:	b920      	cbnz	r0, 8006b5c <_Balloc+0x20>
 8006b52:	2166      	movs	r1, #102	; 0x66
 8006b54:	4b17      	ldr	r3, [pc, #92]	; (8006bb4 <_Balloc+0x78>)
 8006b56:	4818      	ldr	r0, [pc, #96]	; (8006bb8 <_Balloc+0x7c>)
 8006b58:	f000 fdce 	bl	80076f8 <__assert_func>
 8006b5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b60:	6006      	str	r6, [r0, #0]
 8006b62:	60c6      	str	r6, [r0, #12]
 8006b64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006b66:	68f3      	ldr	r3, [r6, #12]
 8006b68:	b183      	cbz	r3, 8006b8c <_Balloc+0x50>
 8006b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b72:	b9b8      	cbnz	r0, 8006ba4 <_Balloc+0x68>
 8006b74:	2101      	movs	r1, #1
 8006b76:	fa01 f605 	lsl.w	r6, r1, r5
 8006b7a:	1d72      	adds	r2, r6, #5
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	0092      	lsls	r2, r2, #2
 8006b80:	f000 fb5e 	bl	8007240 <_calloc_r>
 8006b84:	b160      	cbz	r0, 8006ba0 <_Balloc+0x64>
 8006b86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b8a:	e00e      	b.n	8006baa <_Balloc+0x6e>
 8006b8c:	2221      	movs	r2, #33	; 0x21
 8006b8e:	2104      	movs	r1, #4
 8006b90:	4620      	mov	r0, r4
 8006b92:	f000 fb55 	bl	8007240 <_calloc_r>
 8006b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b98:	60f0      	str	r0, [r6, #12]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e4      	bne.n	8006b6a <_Balloc+0x2e>
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}
 8006ba4:	6802      	ldr	r2, [r0, #0]
 8006ba6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006baa:	2300      	movs	r3, #0
 8006bac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bb0:	e7f7      	b.n	8006ba2 <_Balloc+0x66>
 8006bb2:	bf00      	nop
 8006bb4:	08008385 	.word	0x08008385
 8006bb8:	08008408 	.word	0x08008408

08006bbc <_Bfree>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006bc0:	4605      	mov	r5, r0
 8006bc2:	460c      	mov	r4, r1
 8006bc4:	b976      	cbnz	r6, 8006be4 <_Bfree+0x28>
 8006bc6:	2010      	movs	r0, #16
 8006bc8:	f7ff ff94 	bl	8006af4 <malloc>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	6268      	str	r0, [r5, #36]	; 0x24
 8006bd0:	b920      	cbnz	r0, 8006bdc <_Bfree+0x20>
 8006bd2:	218a      	movs	r1, #138	; 0x8a
 8006bd4:	4b08      	ldr	r3, [pc, #32]	; (8006bf8 <_Bfree+0x3c>)
 8006bd6:	4809      	ldr	r0, [pc, #36]	; (8006bfc <_Bfree+0x40>)
 8006bd8:	f000 fd8e 	bl	80076f8 <__assert_func>
 8006bdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006be0:	6006      	str	r6, [r0, #0]
 8006be2:	60c6      	str	r6, [r0, #12]
 8006be4:	b13c      	cbz	r4, 8006bf6 <_Bfree+0x3a>
 8006be6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006be8:	6862      	ldr	r2, [r4, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bf0:	6021      	str	r1, [r4, #0]
 8006bf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006bf6:	bd70      	pop	{r4, r5, r6, pc}
 8006bf8:	08008385 	.word	0x08008385
 8006bfc:	08008408 	.word	0x08008408

08006c00 <__multadd>:
 8006c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c04:	4607      	mov	r7, r0
 8006c06:	460c      	mov	r4, r1
 8006c08:	461e      	mov	r6, r3
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	690d      	ldr	r5, [r1, #16]
 8006c0e:	f101 0c14 	add.w	ip, r1, #20
 8006c12:	f8dc 3000 	ldr.w	r3, [ip]
 8006c16:	3001      	adds	r0, #1
 8006c18:	b299      	uxth	r1, r3
 8006c1a:	fb02 6101 	mla	r1, r2, r1, r6
 8006c1e:	0c1e      	lsrs	r6, r3, #16
 8006c20:	0c0b      	lsrs	r3, r1, #16
 8006c22:	fb02 3306 	mla	r3, r2, r6, r3
 8006c26:	b289      	uxth	r1, r1
 8006c28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c2c:	4285      	cmp	r5, r0
 8006c2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c32:	f84c 1b04 	str.w	r1, [ip], #4
 8006c36:	dcec      	bgt.n	8006c12 <__multadd+0x12>
 8006c38:	b30e      	cbz	r6, 8006c7e <__multadd+0x7e>
 8006c3a:	68a3      	ldr	r3, [r4, #8]
 8006c3c:	42ab      	cmp	r3, r5
 8006c3e:	dc19      	bgt.n	8006c74 <__multadd+0x74>
 8006c40:	6861      	ldr	r1, [r4, #4]
 8006c42:	4638      	mov	r0, r7
 8006c44:	3101      	adds	r1, #1
 8006c46:	f7ff ff79 	bl	8006b3c <_Balloc>
 8006c4a:	4680      	mov	r8, r0
 8006c4c:	b928      	cbnz	r0, 8006c5a <__multadd+0x5a>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	21b5      	movs	r1, #181	; 0xb5
 8006c52:	4b0c      	ldr	r3, [pc, #48]	; (8006c84 <__multadd+0x84>)
 8006c54:	480c      	ldr	r0, [pc, #48]	; (8006c88 <__multadd+0x88>)
 8006c56:	f000 fd4f 	bl	80076f8 <__assert_func>
 8006c5a:	6922      	ldr	r2, [r4, #16]
 8006c5c:	f104 010c 	add.w	r1, r4, #12
 8006c60:	3202      	adds	r2, #2
 8006c62:	0092      	lsls	r2, r2, #2
 8006c64:	300c      	adds	r0, #12
 8006c66:	f7ff ff5b 	bl	8006b20 <memcpy>
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4638      	mov	r0, r7
 8006c6e:	f7ff ffa5 	bl	8006bbc <_Bfree>
 8006c72:	4644      	mov	r4, r8
 8006c74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c78:	3501      	adds	r5, #1
 8006c7a:	615e      	str	r6, [r3, #20]
 8006c7c:	6125      	str	r5, [r4, #16]
 8006c7e:	4620      	mov	r0, r4
 8006c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c84:	080083f7 	.word	0x080083f7
 8006c88:	08008408 	.word	0x08008408

08006c8c <__hi0bits>:
 8006c8c:	0c02      	lsrs	r2, r0, #16
 8006c8e:	0412      	lsls	r2, r2, #16
 8006c90:	4603      	mov	r3, r0
 8006c92:	b9ca      	cbnz	r2, 8006cc8 <__hi0bits+0x3c>
 8006c94:	0403      	lsls	r3, r0, #16
 8006c96:	2010      	movs	r0, #16
 8006c98:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006c9c:	bf04      	itt	eq
 8006c9e:	021b      	lsleq	r3, r3, #8
 8006ca0:	3008      	addeq	r0, #8
 8006ca2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006ca6:	bf04      	itt	eq
 8006ca8:	011b      	lsleq	r3, r3, #4
 8006caa:	3004      	addeq	r0, #4
 8006cac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006cb0:	bf04      	itt	eq
 8006cb2:	009b      	lsleq	r3, r3, #2
 8006cb4:	3002      	addeq	r0, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	db05      	blt.n	8006cc6 <__hi0bits+0x3a>
 8006cba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006cbe:	f100 0001 	add.w	r0, r0, #1
 8006cc2:	bf08      	it	eq
 8006cc4:	2020      	moveq	r0, #32
 8006cc6:	4770      	bx	lr
 8006cc8:	2000      	movs	r0, #0
 8006cca:	e7e5      	b.n	8006c98 <__hi0bits+0xc>

08006ccc <__lo0bits>:
 8006ccc:	6803      	ldr	r3, [r0, #0]
 8006cce:	4602      	mov	r2, r0
 8006cd0:	f013 0007 	ands.w	r0, r3, #7
 8006cd4:	d00b      	beq.n	8006cee <__lo0bits+0x22>
 8006cd6:	07d9      	lsls	r1, r3, #31
 8006cd8:	d421      	bmi.n	8006d1e <__lo0bits+0x52>
 8006cda:	0798      	lsls	r0, r3, #30
 8006cdc:	bf49      	itett	mi
 8006cde:	085b      	lsrmi	r3, r3, #1
 8006ce0:	089b      	lsrpl	r3, r3, #2
 8006ce2:	2001      	movmi	r0, #1
 8006ce4:	6013      	strmi	r3, [r2, #0]
 8006ce6:	bf5c      	itt	pl
 8006ce8:	2002      	movpl	r0, #2
 8006cea:	6013      	strpl	r3, [r2, #0]
 8006cec:	4770      	bx	lr
 8006cee:	b299      	uxth	r1, r3
 8006cf0:	b909      	cbnz	r1, 8006cf6 <__lo0bits+0x2a>
 8006cf2:	2010      	movs	r0, #16
 8006cf4:	0c1b      	lsrs	r3, r3, #16
 8006cf6:	b2d9      	uxtb	r1, r3
 8006cf8:	b909      	cbnz	r1, 8006cfe <__lo0bits+0x32>
 8006cfa:	3008      	adds	r0, #8
 8006cfc:	0a1b      	lsrs	r3, r3, #8
 8006cfe:	0719      	lsls	r1, r3, #28
 8006d00:	bf04      	itt	eq
 8006d02:	091b      	lsreq	r3, r3, #4
 8006d04:	3004      	addeq	r0, #4
 8006d06:	0799      	lsls	r1, r3, #30
 8006d08:	bf04      	itt	eq
 8006d0a:	089b      	lsreq	r3, r3, #2
 8006d0c:	3002      	addeq	r0, #2
 8006d0e:	07d9      	lsls	r1, r3, #31
 8006d10:	d403      	bmi.n	8006d1a <__lo0bits+0x4e>
 8006d12:	085b      	lsrs	r3, r3, #1
 8006d14:	f100 0001 	add.w	r0, r0, #1
 8006d18:	d003      	beq.n	8006d22 <__lo0bits+0x56>
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	4770      	bx	lr
 8006d1e:	2000      	movs	r0, #0
 8006d20:	4770      	bx	lr
 8006d22:	2020      	movs	r0, #32
 8006d24:	4770      	bx	lr
	...

08006d28 <__i2b>:
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	f7ff ff05 	bl	8006b3c <_Balloc>
 8006d32:	4602      	mov	r2, r0
 8006d34:	b928      	cbnz	r0, 8006d42 <__i2b+0x1a>
 8006d36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006d3a:	4b04      	ldr	r3, [pc, #16]	; (8006d4c <__i2b+0x24>)
 8006d3c:	4804      	ldr	r0, [pc, #16]	; (8006d50 <__i2b+0x28>)
 8006d3e:	f000 fcdb 	bl	80076f8 <__assert_func>
 8006d42:	2301      	movs	r3, #1
 8006d44:	6144      	str	r4, [r0, #20]
 8006d46:	6103      	str	r3, [r0, #16]
 8006d48:	bd10      	pop	{r4, pc}
 8006d4a:	bf00      	nop
 8006d4c:	080083f7 	.word	0x080083f7
 8006d50:	08008408 	.word	0x08008408

08006d54 <__multiply>:
 8006d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d58:	4691      	mov	r9, r2
 8006d5a:	690a      	ldr	r2, [r1, #16]
 8006d5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d60:	460c      	mov	r4, r1
 8006d62:	429a      	cmp	r2, r3
 8006d64:	bfbe      	ittt	lt
 8006d66:	460b      	movlt	r3, r1
 8006d68:	464c      	movlt	r4, r9
 8006d6a:	4699      	movlt	r9, r3
 8006d6c:	6927      	ldr	r7, [r4, #16]
 8006d6e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d72:	68a3      	ldr	r3, [r4, #8]
 8006d74:	6861      	ldr	r1, [r4, #4]
 8006d76:	eb07 060a 	add.w	r6, r7, sl
 8006d7a:	42b3      	cmp	r3, r6
 8006d7c:	b085      	sub	sp, #20
 8006d7e:	bfb8      	it	lt
 8006d80:	3101      	addlt	r1, #1
 8006d82:	f7ff fedb 	bl	8006b3c <_Balloc>
 8006d86:	b930      	cbnz	r0, 8006d96 <__multiply+0x42>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	f240 115d 	movw	r1, #349	; 0x15d
 8006d8e:	4b43      	ldr	r3, [pc, #268]	; (8006e9c <__multiply+0x148>)
 8006d90:	4843      	ldr	r0, [pc, #268]	; (8006ea0 <__multiply+0x14c>)
 8006d92:	f000 fcb1 	bl	80076f8 <__assert_func>
 8006d96:	f100 0514 	add.w	r5, r0, #20
 8006d9a:	462b      	mov	r3, r5
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006da2:	4543      	cmp	r3, r8
 8006da4:	d321      	bcc.n	8006dea <__multiply+0x96>
 8006da6:	f104 0314 	add.w	r3, r4, #20
 8006daa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006dae:	f109 0314 	add.w	r3, r9, #20
 8006db2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006db6:	9202      	str	r2, [sp, #8]
 8006db8:	1b3a      	subs	r2, r7, r4
 8006dba:	3a15      	subs	r2, #21
 8006dbc:	f022 0203 	bic.w	r2, r2, #3
 8006dc0:	3204      	adds	r2, #4
 8006dc2:	f104 0115 	add.w	r1, r4, #21
 8006dc6:	428f      	cmp	r7, r1
 8006dc8:	bf38      	it	cc
 8006dca:	2204      	movcc	r2, #4
 8006dcc:	9201      	str	r2, [sp, #4]
 8006dce:	9a02      	ldr	r2, [sp, #8]
 8006dd0:	9303      	str	r3, [sp, #12]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d80c      	bhi.n	8006df0 <__multiply+0x9c>
 8006dd6:	2e00      	cmp	r6, #0
 8006dd8:	dd03      	ble.n	8006de2 <__multiply+0x8e>
 8006dda:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d059      	beq.n	8006e96 <__multiply+0x142>
 8006de2:	6106      	str	r6, [r0, #16]
 8006de4:	b005      	add	sp, #20
 8006de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dea:	f843 2b04 	str.w	r2, [r3], #4
 8006dee:	e7d8      	b.n	8006da2 <__multiply+0x4e>
 8006df0:	f8b3 a000 	ldrh.w	sl, [r3]
 8006df4:	f1ba 0f00 	cmp.w	sl, #0
 8006df8:	d023      	beq.n	8006e42 <__multiply+0xee>
 8006dfa:	46a9      	mov	r9, r5
 8006dfc:	f04f 0c00 	mov.w	ip, #0
 8006e00:	f104 0e14 	add.w	lr, r4, #20
 8006e04:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e08:	f8d9 1000 	ldr.w	r1, [r9]
 8006e0c:	fa1f fb82 	uxth.w	fp, r2
 8006e10:	b289      	uxth	r1, r1
 8006e12:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e16:	4461      	add	r1, ip
 8006e18:	f8d9 c000 	ldr.w	ip, [r9]
 8006e1c:	0c12      	lsrs	r2, r2, #16
 8006e1e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006e22:	fb0a c202 	mla	r2, sl, r2, ip
 8006e26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e2a:	b289      	uxth	r1, r1
 8006e2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e30:	4577      	cmp	r7, lr
 8006e32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e36:	f849 1b04 	str.w	r1, [r9], #4
 8006e3a:	d8e3      	bhi.n	8006e04 <__multiply+0xb0>
 8006e3c:	9a01      	ldr	r2, [sp, #4]
 8006e3e:	f845 c002 	str.w	ip, [r5, r2]
 8006e42:	9a03      	ldr	r2, [sp, #12]
 8006e44:	3304      	adds	r3, #4
 8006e46:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e4a:	f1b9 0f00 	cmp.w	r9, #0
 8006e4e:	d020      	beq.n	8006e92 <__multiply+0x13e>
 8006e50:	46ae      	mov	lr, r5
 8006e52:	f04f 0a00 	mov.w	sl, #0
 8006e56:	6829      	ldr	r1, [r5, #0]
 8006e58:	f104 0c14 	add.w	ip, r4, #20
 8006e5c:	f8bc b000 	ldrh.w	fp, [ip]
 8006e60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006e64:	b289      	uxth	r1, r1
 8006e66:	fb09 220b 	mla	r2, r9, fp, r2
 8006e6a:	4492      	add	sl, r2
 8006e6c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006e70:	f84e 1b04 	str.w	r1, [lr], #4
 8006e74:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006e78:	f8be 1000 	ldrh.w	r1, [lr]
 8006e7c:	0c12      	lsrs	r2, r2, #16
 8006e7e:	fb09 1102 	mla	r1, r9, r2, r1
 8006e82:	4567      	cmp	r7, ip
 8006e84:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006e88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006e8c:	d8e6      	bhi.n	8006e5c <__multiply+0x108>
 8006e8e:	9a01      	ldr	r2, [sp, #4]
 8006e90:	50a9      	str	r1, [r5, r2]
 8006e92:	3504      	adds	r5, #4
 8006e94:	e79b      	b.n	8006dce <__multiply+0x7a>
 8006e96:	3e01      	subs	r6, #1
 8006e98:	e79d      	b.n	8006dd6 <__multiply+0x82>
 8006e9a:	bf00      	nop
 8006e9c:	080083f7 	.word	0x080083f7
 8006ea0:	08008408 	.word	0x08008408

08006ea4 <__pow5mult>:
 8006ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ea8:	4615      	mov	r5, r2
 8006eaa:	f012 0203 	ands.w	r2, r2, #3
 8006eae:	4606      	mov	r6, r0
 8006eb0:	460f      	mov	r7, r1
 8006eb2:	d007      	beq.n	8006ec4 <__pow5mult+0x20>
 8006eb4:	4c25      	ldr	r4, [pc, #148]	; (8006f4c <__pow5mult+0xa8>)
 8006eb6:	3a01      	subs	r2, #1
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ebe:	f7ff fe9f 	bl	8006c00 <__multadd>
 8006ec2:	4607      	mov	r7, r0
 8006ec4:	10ad      	asrs	r5, r5, #2
 8006ec6:	d03d      	beq.n	8006f44 <__pow5mult+0xa0>
 8006ec8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006eca:	b97c      	cbnz	r4, 8006eec <__pow5mult+0x48>
 8006ecc:	2010      	movs	r0, #16
 8006ece:	f7ff fe11 	bl	8006af4 <malloc>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	6270      	str	r0, [r6, #36]	; 0x24
 8006ed6:	b928      	cbnz	r0, 8006ee4 <__pow5mult+0x40>
 8006ed8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006edc:	4b1c      	ldr	r3, [pc, #112]	; (8006f50 <__pow5mult+0xac>)
 8006ede:	481d      	ldr	r0, [pc, #116]	; (8006f54 <__pow5mult+0xb0>)
 8006ee0:	f000 fc0a 	bl	80076f8 <__assert_func>
 8006ee4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ee8:	6004      	str	r4, [r0, #0]
 8006eea:	60c4      	str	r4, [r0, #12]
 8006eec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ef0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ef4:	b94c      	cbnz	r4, 8006f0a <__pow5mult+0x66>
 8006ef6:	f240 2171 	movw	r1, #625	; 0x271
 8006efa:	4630      	mov	r0, r6
 8006efc:	f7ff ff14 	bl	8006d28 <__i2b>
 8006f00:	2300      	movs	r3, #0
 8006f02:	4604      	mov	r4, r0
 8006f04:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f08:	6003      	str	r3, [r0, #0]
 8006f0a:	f04f 0900 	mov.w	r9, #0
 8006f0e:	07eb      	lsls	r3, r5, #31
 8006f10:	d50a      	bpl.n	8006f28 <__pow5mult+0x84>
 8006f12:	4639      	mov	r1, r7
 8006f14:	4622      	mov	r2, r4
 8006f16:	4630      	mov	r0, r6
 8006f18:	f7ff ff1c 	bl	8006d54 <__multiply>
 8006f1c:	4680      	mov	r8, r0
 8006f1e:	4639      	mov	r1, r7
 8006f20:	4630      	mov	r0, r6
 8006f22:	f7ff fe4b 	bl	8006bbc <_Bfree>
 8006f26:	4647      	mov	r7, r8
 8006f28:	106d      	asrs	r5, r5, #1
 8006f2a:	d00b      	beq.n	8006f44 <__pow5mult+0xa0>
 8006f2c:	6820      	ldr	r0, [r4, #0]
 8006f2e:	b938      	cbnz	r0, 8006f40 <__pow5mult+0x9c>
 8006f30:	4622      	mov	r2, r4
 8006f32:	4621      	mov	r1, r4
 8006f34:	4630      	mov	r0, r6
 8006f36:	f7ff ff0d 	bl	8006d54 <__multiply>
 8006f3a:	6020      	str	r0, [r4, #0]
 8006f3c:	f8c0 9000 	str.w	r9, [r0]
 8006f40:	4604      	mov	r4, r0
 8006f42:	e7e4      	b.n	8006f0e <__pow5mult+0x6a>
 8006f44:	4638      	mov	r0, r7
 8006f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f4a:	bf00      	nop
 8006f4c:	08008558 	.word	0x08008558
 8006f50:	08008385 	.word	0x08008385
 8006f54:	08008408 	.word	0x08008408

08006f58 <__lshift>:
 8006f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f5c:	460c      	mov	r4, r1
 8006f5e:	4607      	mov	r7, r0
 8006f60:	4691      	mov	r9, r2
 8006f62:	6923      	ldr	r3, [r4, #16]
 8006f64:	6849      	ldr	r1, [r1, #4]
 8006f66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f6a:	68a3      	ldr	r3, [r4, #8]
 8006f6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f70:	f108 0601 	add.w	r6, r8, #1
 8006f74:	42b3      	cmp	r3, r6
 8006f76:	db0b      	blt.n	8006f90 <__lshift+0x38>
 8006f78:	4638      	mov	r0, r7
 8006f7a:	f7ff fddf 	bl	8006b3c <_Balloc>
 8006f7e:	4605      	mov	r5, r0
 8006f80:	b948      	cbnz	r0, 8006f96 <__lshift+0x3e>
 8006f82:	4602      	mov	r2, r0
 8006f84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006f88:	4b29      	ldr	r3, [pc, #164]	; (8007030 <__lshift+0xd8>)
 8006f8a:	482a      	ldr	r0, [pc, #168]	; (8007034 <__lshift+0xdc>)
 8006f8c:	f000 fbb4 	bl	80076f8 <__assert_func>
 8006f90:	3101      	adds	r1, #1
 8006f92:	005b      	lsls	r3, r3, #1
 8006f94:	e7ee      	b.n	8006f74 <__lshift+0x1c>
 8006f96:	2300      	movs	r3, #0
 8006f98:	f100 0114 	add.w	r1, r0, #20
 8006f9c:	f100 0210 	add.w	r2, r0, #16
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	4553      	cmp	r3, sl
 8006fa4:	db37      	blt.n	8007016 <__lshift+0xbe>
 8006fa6:	6920      	ldr	r0, [r4, #16]
 8006fa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fac:	f104 0314 	add.w	r3, r4, #20
 8006fb0:	f019 091f 	ands.w	r9, r9, #31
 8006fb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006fbc:	d02f      	beq.n	800701e <__lshift+0xc6>
 8006fbe:	468a      	mov	sl, r1
 8006fc0:	f04f 0c00 	mov.w	ip, #0
 8006fc4:	f1c9 0e20 	rsb	lr, r9, #32
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	fa02 f209 	lsl.w	r2, r2, r9
 8006fce:	ea42 020c 	orr.w	r2, r2, ip
 8006fd2:	f84a 2b04 	str.w	r2, [sl], #4
 8006fd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fda:	4298      	cmp	r0, r3
 8006fdc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006fe0:	d8f2      	bhi.n	8006fc8 <__lshift+0x70>
 8006fe2:	1b03      	subs	r3, r0, r4
 8006fe4:	3b15      	subs	r3, #21
 8006fe6:	f023 0303 	bic.w	r3, r3, #3
 8006fea:	3304      	adds	r3, #4
 8006fec:	f104 0215 	add.w	r2, r4, #21
 8006ff0:	4290      	cmp	r0, r2
 8006ff2:	bf38      	it	cc
 8006ff4:	2304      	movcc	r3, #4
 8006ff6:	f841 c003 	str.w	ip, [r1, r3]
 8006ffa:	f1bc 0f00 	cmp.w	ip, #0
 8006ffe:	d001      	beq.n	8007004 <__lshift+0xac>
 8007000:	f108 0602 	add.w	r6, r8, #2
 8007004:	3e01      	subs	r6, #1
 8007006:	4638      	mov	r0, r7
 8007008:	4621      	mov	r1, r4
 800700a:	612e      	str	r6, [r5, #16]
 800700c:	f7ff fdd6 	bl	8006bbc <_Bfree>
 8007010:	4628      	mov	r0, r5
 8007012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007016:	f842 0f04 	str.w	r0, [r2, #4]!
 800701a:	3301      	adds	r3, #1
 800701c:	e7c1      	b.n	8006fa2 <__lshift+0x4a>
 800701e:	3904      	subs	r1, #4
 8007020:	f853 2b04 	ldr.w	r2, [r3], #4
 8007024:	4298      	cmp	r0, r3
 8007026:	f841 2f04 	str.w	r2, [r1, #4]!
 800702a:	d8f9      	bhi.n	8007020 <__lshift+0xc8>
 800702c:	e7ea      	b.n	8007004 <__lshift+0xac>
 800702e:	bf00      	nop
 8007030:	080083f7 	.word	0x080083f7
 8007034:	08008408 	.word	0x08008408

08007038 <__mcmp>:
 8007038:	4603      	mov	r3, r0
 800703a:	690a      	ldr	r2, [r1, #16]
 800703c:	6900      	ldr	r0, [r0, #16]
 800703e:	b530      	push	{r4, r5, lr}
 8007040:	1a80      	subs	r0, r0, r2
 8007042:	d10d      	bne.n	8007060 <__mcmp+0x28>
 8007044:	3314      	adds	r3, #20
 8007046:	3114      	adds	r1, #20
 8007048:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800704c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007050:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007054:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007058:	4295      	cmp	r5, r2
 800705a:	d002      	beq.n	8007062 <__mcmp+0x2a>
 800705c:	d304      	bcc.n	8007068 <__mcmp+0x30>
 800705e:	2001      	movs	r0, #1
 8007060:	bd30      	pop	{r4, r5, pc}
 8007062:	42a3      	cmp	r3, r4
 8007064:	d3f4      	bcc.n	8007050 <__mcmp+0x18>
 8007066:	e7fb      	b.n	8007060 <__mcmp+0x28>
 8007068:	f04f 30ff 	mov.w	r0, #4294967295
 800706c:	e7f8      	b.n	8007060 <__mcmp+0x28>
	...

08007070 <__mdiff>:
 8007070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007074:	460d      	mov	r5, r1
 8007076:	4607      	mov	r7, r0
 8007078:	4611      	mov	r1, r2
 800707a:	4628      	mov	r0, r5
 800707c:	4614      	mov	r4, r2
 800707e:	f7ff ffdb 	bl	8007038 <__mcmp>
 8007082:	1e06      	subs	r6, r0, #0
 8007084:	d111      	bne.n	80070aa <__mdiff+0x3a>
 8007086:	4631      	mov	r1, r6
 8007088:	4638      	mov	r0, r7
 800708a:	f7ff fd57 	bl	8006b3c <_Balloc>
 800708e:	4602      	mov	r2, r0
 8007090:	b928      	cbnz	r0, 800709e <__mdiff+0x2e>
 8007092:	f240 2132 	movw	r1, #562	; 0x232
 8007096:	4b3a      	ldr	r3, [pc, #232]	; (8007180 <__mdiff+0x110>)
 8007098:	483a      	ldr	r0, [pc, #232]	; (8007184 <__mdiff+0x114>)
 800709a:	f000 fb2d 	bl	80076f8 <__assert_func>
 800709e:	2301      	movs	r3, #1
 80070a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80070a4:	4610      	mov	r0, r2
 80070a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070aa:	bfa4      	itt	ge
 80070ac:	4623      	movge	r3, r4
 80070ae:	462c      	movge	r4, r5
 80070b0:	4638      	mov	r0, r7
 80070b2:	6861      	ldr	r1, [r4, #4]
 80070b4:	bfa6      	itte	ge
 80070b6:	461d      	movge	r5, r3
 80070b8:	2600      	movge	r6, #0
 80070ba:	2601      	movlt	r6, #1
 80070bc:	f7ff fd3e 	bl	8006b3c <_Balloc>
 80070c0:	4602      	mov	r2, r0
 80070c2:	b918      	cbnz	r0, 80070cc <__mdiff+0x5c>
 80070c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80070c8:	4b2d      	ldr	r3, [pc, #180]	; (8007180 <__mdiff+0x110>)
 80070ca:	e7e5      	b.n	8007098 <__mdiff+0x28>
 80070cc:	f102 0814 	add.w	r8, r2, #20
 80070d0:	46c2      	mov	sl, r8
 80070d2:	f04f 0c00 	mov.w	ip, #0
 80070d6:	6927      	ldr	r7, [r4, #16]
 80070d8:	60c6      	str	r6, [r0, #12]
 80070da:	692e      	ldr	r6, [r5, #16]
 80070dc:	f104 0014 	add.w	r0, r4, #20
 80070e0:	f105 0914 	add.w	r9, r5, #20
 80070e4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80070e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80070ec:	3410      	adds	r4, #16
 80070ee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80070f2:	f859 3b04 	ldr.w	r3, [r9], #4
 80070f6:	fa1f f18b 	uxth.w	r1, fp
 80070fa:	448c      	add	ip, r1
 80070fc:	b299      	uxth	r1, r3
 80070fe:	0c1b      	lsrs	r3, r3, #16
 8007100:	ebac 0101 	sub.w	r1, ip, r1
 8007104:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007108:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800710c:	b289      	uxth	r1, r1
 800710e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007112:	454e      	cmp	r6, r9
 8007114:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007118:	f84a 3b04 	str.w	r3, [sl], #4
 800711c:	d8e7      	bhi.n	80070ee <__mdiff+0x7e>
 800711e:	1b73      	subs	r3, r6, r5
 8007120:	3b15      	subs	r3, #21
 8007122:	f023 0303 	bic.w	r3, r3, #3
 8007126:	3515      	adds	r5, #21
 8007128:	3304      	adds	r3, #4
 800712a:	42ae      	cmp	r6, r5
 800712c:	bf38      	it	cc
 800712e:	2304      	movcc	r3, #4
 8007130:	4418      	add	r0, r3
 8007132:	4443      	add	r3, r8
 8007134:	461e      	mov	r6, r3
 8007136:	4605      	mov	r5, r0
 8007138:	4575      	cmp	r5, lr
 800713a:	d30e      	bcc.n	800715a <__mdiff+0xea>
 800713c:	f10e 0103 	add.w	r1, lr, #3
 8007140:	1a09      	subs	r1, r1, r0
 8007142:	f021 0103 	bic.w	r1, r1, #3
 8007146:	3803      	subs	r0, #3
 8007148:	4586      	cmp	lr, r0
 800714a:	bf38      	it	cc
 800714c:	2100      	movcc	r1, #0
 800714e:	4419      	add	r1, r3
 8007150:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007154:	b18b      	cbz	r3, 800717a <__mdiff+0x10a>
 8007156:	6117      	str	r7, [r2, #16]
 8007158:	e7a4      	b.n	80070a4 <__mdiff+0x34>
 800715a:	f855 8b04 	ldr.w	r8, [r5], #4
 800715e:	fa1f f188 	uxth.w	r1, r8
 8007162:	4461      	add	r1, ip
 8007164:	140c      	asrs	r4, r1, #16
 8007166:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800716a:	b289      	uxth	r1, r1
 800716c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007170:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007174:	f846 1b04 	str.w	r1, [r6], #4
 8007178:	e7de      	b.n	8007138 <__mdiff+0xc8>
 800717a:	3f01      	subs	r7, #1
 800717c:	e7e8      	b.n	8007150 <__mdiff+0xe0>
 800717e:	bf00      	nop
 8007180:	080083f7 	.word	0x080083f7
 8007184:	08008408 	.word	0x08008408

08007188 <__d2b>:
 8007188:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800718c:	2101      	movs	r1, #1
 800718e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007192:	4690      	mov	r8, r2
 8007194:	461d      	mov	r5, r3
 8007196:	f7ff fcd1 	bl	8006b3c <_Balloc>
 800719a:	4604      	mov	r4, r0
 800719c:	b930      	cbnz	r0, 80071ac <__d2b+0x24>
 800719e:	4602      	mov	r2, r0
 80071a0:	f240 310a 	movw	r1, #778	; 0x30a
 80071a4:	4b24      	ldr	r3, [pc, #144]	; (8007238 <__d2b+0xb0>)
 80071a6:	4825      	ldr	r0, [pc, #148]	; (800723c <__d2b+0xb4>)
 80071a8:	f000 faa6 	bl	80076f8 <__assert_func>
 80071ac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80071b0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80071b4:	bb2d      	cbnz	r5, 8007202 <__d2b+0x7a>
 80071b6:	9301      	str	r3, [sp, #4]
 80071b8:	f1b8 0300 	subs.w	r3, r8, #0
 80071bc:	d026      	beq.n	800720c <__d2b+0x84>
 80071be:	4668      	mov	r0, sp
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	f7ff fd83 	bl	8006ccc <__lo0bits>
 80071c6:	9900      	ldr	r1, [sp, #0]
 80071c8:	b1f0      	cbz	r0, 8007208 <__d2b+0x80>
 80071ca:	9a01      	ldr	r2, [sp, #4]
 80071cc:	f1c0 0320 	rsb	r3, r0, #32
 80071d0:	fa02 f303 	lsl.w	r3, r2, r3
 80071d4:	430b      	orrs	r3, r1
 80071d6:	40c2      	lsrs	r2, r0
 80071d8:	6163      	str	r3, [r4, #20]
 80071da:	9201      	str	r2, [sp, #4]
 80071dc:	9b01      	ldr	r3, [sp, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	bf14      	ite	ne
 80071e2:	2102      	movne	r1, #2
 80071e4:	2101      	moveq	r1, #1
 80071e6:	61a3      	str	r3, [r4, #24]
 80071e8:	6121      	str	r1, [r4, #16]
 80071ea:	b1c5      	cbz	r5, 800721e <__d2b+0x96>
 80071ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80071f0:	4405      	add	r5, r0
 80071f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80071f6:	603d      	str	r5, [r7, #0]
 80071f8:	6030      	str	r0, [r6, #0]
 80071fa:	4620      	mov	r0, r4
 80071fc:	b002      	add	sp, #8
 80071fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007206:	e7d6      	b.n	80071b6 <__d2b+0x2e>
 8007208:	6161      	str	r1, [r4, #20]
 800720a:	e7e7      	b.n	80071dc <__d2b+0x54>
 800720c:	a801      	add	r0, sp, #4
 800720e:	f7ff fd5d 	bl	8006ccc <__lo0bits>
 8007212:	2101      	movs	r1, #1
 8007214:	9b01      	ldr	r3, [sp, #4]
 8007216:	6121      	str	r1, [r4, #16]
 8007218:	6163      	str	r3, [r4, #20]
 800721a:	3020      	adds	r0, #32
 800721c:	e7e5      	b.n	80071ea <__d2b+0x62>
 800721e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007222:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007226:	6038      	str	r0, [r7, #0]
 8007228:	6918      	ldr	r0, [r3, #16]
 800722a:	f7ff fd2f 	bl	8006c8c <__hi0bits>
 800722e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007232:	6031      	str	r1, [r6, #0]
 8007234:	e7e1      	b.n	80071fa <__d2b+0x72>
 8007236:	bf00      	nop
 8007238:	080083f7 	.word	0x080083f7
 800723c:	08008408 	.word	0x08008408

08007240 <_calloc_r>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	fba1 5402 	umull	r5, r4, r1, r2
 8007246:	b934      	cbnz	r4, 8007256 <_calloc_r+0x16>
 8007248:	4629      	mov	r1, r5
 800724a:	f000 f875 	bl	8007338 <_malloc_r>
 800724e:	4606      	mov	r6, r0
 8007250:	b928      	cbnz	r0, 800725e <_calloc_r+0x1e>
 8007252:	4630      	mov	r0, r6
 8007254:	bd70      	pop	{r4, r5, r6, pc}
 8007256:	220c      	movs	r2, #12
 8007258:	2600      	movs	r6, #0
 800725a:	6002      	str	r2, [r0, #0]
 800725c:	e7f9      	b.n	8007252 <_calloc_r+0x12>
 800725e:	462a      	mov	r2, r5
 8007260:	4621      	mov	r1, r4
 8007262:	f7fe f93f 	bl	80054e4 <memset>
 8007266:	e7f4      	b.n	8007252 <_calloc_r+0x12>

08007268 <_free_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4605      	mov	r5, r0
 800726c:	2900      	cmp	r1, #0
 800726e:	d040      	beq.n	80072f2 <_free_r+0x8a>
 8007270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007274:	1f0c      	subs	r4, r1, #4
 8007276:	2b00      	cmp	r3, #0
 8007278:	bfb8      	it	lt
 800727a:	18e4      	addlt	r4, r4, r3
 800727c:	f000 fa98 	bl	80077b0 <__malloc_lock>
 8007280:	4a1c      	ldr	r2, [pc, #112]	; (80072f4 <_free_r+0x8c>)
 8007282:	6813      	ldr	r3, [r2, #0]
 8007284:	b933      	cbnz	r3, 8007294 <_free_r+0x2c>
 8007286:	6063      	str	r3, [r4, #4]
 8007288:	6014      	str	r4, [r2, #0]
 800728a:	4628      	mov	r0, r5
 800728c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007290:	f000 ba94 	b.w	80077bc <__malloc_unlock>
 8007294:	42a3      	cmp	r3, r4
 8007296:	d908      	bls.n	80072aa <_free_r+0x42>
 8007298:	6820      	ldr	r0, [r4, #0]
 800729a:	1821      	adds	r1, r4, r0
 800729c:	428b      	cmp	r3, r1
 800729e:	bf01      	itttt	eq
 80072a0:	6819      	ldreq	r1, [r3, #0]
 80072a2:	685b      	ldreq	r3, [r3, #4]
 80072a4:	1809      	addeq	r1, r1, r0
 80072a6:	6021      	streq	r1, [r4, #0]
 80072a8:	e7ed      	b.n	8007286 <_free_r+0x1e>
 80072aa:	461a      	mov	r2, r3
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	b10b      	cbz	r3, 80072b4 <_free_r+0x4c>
 80072b0:	42a3      	cmp	r3, r4
 80072b2:	d9fa      	bls.n	80072aa <_free_r+0x42>
 80072b4:	6811      	ldr	r1, [r2, #0]
 80072b6:	1850      	adds	r0, r2, r1
 80072b8:	42a0      	cmp	r0, r4
 80072ba:	d10b      	bne.n	80072d4 <_free_r+0x6c>
 80072bc:	6820      	ldr	r0, [r4, #0]
 80072be:	4401      	add	r1, r0
 80072c0:	1850      	adds	r0, r2, r1
 80072c2:	4283      	cmp	r3, r0
 80072c4:	6011      	str	r1, [r2, #0]
 80072c6:	d1e0      	bne.n	800728a <_free_r+0x22>
 80072c8:	6818      	ldr	r0, [r3, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	4401      	add	r1, r0
 80072ce:	6011      	str	r1, [r2, #0]
 80072d0:	6053      	str	r3, [r2, #4]
 80072d2:	e7da      	b.n	800728a <_free_r+0x22>
 80072d4:	d902      	bls.n	80072dc <_free_r+0x74>
 80072d6:	230c      	movs	r3, #12
 80072d8:	602b      	str	r3, [r5, #0]
 80072da:	e7d6      	b.n	800728a <_free_r+0x22>
 80072dc:	6820      	ldr	r0, [r4, #0]
 80072de:	1821      	adds	r1, r4, r0
 80072e0:	428b      	cmp	r3, r1
 80072e2:	bf01      	itttt	eq
 80072e4:	6819      	ldreq	r1, [r3, #0]
 80072e6:	685b      	ldreq	r3, [r3, #4]
 80072e8:	1809      	addeq	r1, r1, r0
 80072ea:	6021      	streq	r1, [r4, #0]
 80072ec:	6063      	str	r3, [r4, #4]
 80072ee:	6054      	str	r4, [r2, #4]
 80072f0:	e7cb      	b.n	800728a <_free_r+0x22>
 80072f2:	bd38      	pop	{r3, r4, r5, pc}
 80072f4:	200003e0 	.word	0x200003e0

080072f8 <sbrk_aligned>:
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	4e0e      	ldr	r6, [pc, #56]	; (8007334 <sbrk_aligned+0x3c>)
 80072fc:	460c      	mov	r4, r1
 80072fe:	6831      	ldr	r1, [r6, #0]
 8007300:	4605      	mov	r5, r0
 8007302:	b911      	cbnz	r1, 800730a <sbrk_aligned+0x12>
 8007304:	f000 f9e8 	bl	80076d8 <_sbrk_r>
 8007308:	6030      	str	r0, [r6, #0]
 800730a:	4621      	mov	r1, r4
 800730c:	4628      	mov	r0, r5
 800730e:	f000 f9e3 	bl	80076d8 <_sbrk_r>
 8007312:	1c43      	adds	r3, r0, #1
 8007314:	d00a      	beq.n	800732c <sbrk_aligned+0x34>
 8007316:	1cc4      	adds	r4, r0, #3
 8007318:	f024 0403 	bic.w	r4, r4, #3
 800731c:	42a0      	cmp	r0, r4
 800731e:	d007      	beq.n	8007330 <sbrk_aligned+0x38>
 8007320:	1a21      	subs	r1, r4, r0
 8007322:	4628      	mov	r0, r5
 8007324:	f000 f9d8 	bl	80076d8 <_sbrk_r>
 8007328:	3001      	adds	r0, #1
 800732a:	d101      	bne.n	8007330 <sbrk_aligned+0x38>
 800732c:	f04f 34ff 	mov.w	r4, #4294967295
 8007330:	4620      	mov	r0, r4
 8007332:	bd70      	pop	{r4, r5, r6, pc}
 8007334:	200003e4 	.word	0x200003e4

08007338 <_malloc_r>:
 8007338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800733c:	1ccd      	adds	r5, r1, #3
 800733e:	f025 0503 	bic.w	r5, r5, #3
 8007342:	3508      	adds	r5, #8
 8007344:	2d0c      	cmp	r5, #12
 8007346:	bf38      	it	cc
 8007348:	250c      	movcc	r5, #12
 800734a:	2d00      	cmp	r5, #0
 800734c:	4607      	mov	r7, r0
 800734e:	db01      	blt.n	8007354 <_malloc_r+0x1c>
 8007350:	42a9      	cmp	r1, r5
 8007352:	d905      	bls.n	8007360 <_malloc_r+0x28>
 8007354:	230c      	movs	r3, #12
 8007356:	2600      	movs	r6, #0
 8007358:	603b      	str	r3, [r7, #0]
 800735a:	4630      	mov	r0, r6
 800735c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007360:	4e2e      	ldr	r6, [pc, #184]	; (800741c <_malloc_r+0xe4>)
 8007362:	f000 fa25 	bl	80077b0 <__malloc_lock>
 8007366:	6833      	ldr	r3, [r6, #0]
 8007368:	461c      	mov	r4, r3
 800736a:	bb34      	cbnz	r4, 80073ba <_malloc_r+0x82>
 800736c:	4629      	mov	r1, r5
 800736e:	4638      	mov	r0, r7
 8007370:	f7ff ffc2 	bl	80072f8 <sbrk_aligned>
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	4604      	mov	r4, r0
 8007378:	d14d      	bne.n	8007416 <_malloc_r+0xde>
 800737a:	6834      	ldr	r4, [r6, #0]
 800737c:	4626      	mov	r6, r4
 800737e:	2e00      	cmp	r6, #0
 8007380:	d140      	bne.n	8007404 <_malloc_r+0xcc>
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	4631      	mov	r1, r6
 8007386:	4638      	mov	r0, r7
 8007388:	eb04 0803 	add.w	r8, r4, r3
 800738c:	f000 f9a4 	bl	80076d8 <_sbrk_r>
 8007390:	4580      	cmp	r8, r0
 8007392:	d13a      	bne.n	800740a <_malloc_r+0xd2>
 8007394:	6821      	ldr	r1, [r4, #0]
 8007396:	3503      	adds	r5, #3
 8007398:	1a6d      	subs	r5, r5, r1
 800739a:	f025 0503 	bic.w	r5, r5, #3
 800739e:	3508      	adds	r5, #8
 80073a0:	2d0c      	cmp	r5, #12
 80073a2:	bf38      	it	cc
 80073a4:	250c      	movcc	r5, #12
 80073a6:	4638      	mov	r0, r7
 80073a8:	4629      	mov	r1, r5
 80073aa:	f7ff ffa5 	bl	80072f8 <sbrk_aligned>
 80073ae:	3001      	adds	r0, #1
 80073b0:	d02b      	beq.n	800740a <_malloc_r+0xd2>
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	442b      	add	r3, r5
 80073b6:	6023      	str	r3, [r4, #0]
 80073b8:	e00e      	b.n	80073d8 <_malloc_r+0xa0>
 80073ba:	6822      	ldr	r2, [r4, #0]
 80073bc:	1b52      	subs	r2, r2, r5
 80073be:	d41e      	bmi.n	80073fe <_malloc_r+0xc6>
 80073c0:	2a0b      	cmp	r2, #11
 80073c2:	d916      	bls.n	80073f2 <_malloc_r+0xba>
 80073c4:	1961      	adds	r1, r4, r5
 80073c6:	42a3      	cmp	r3, r4
 80073c8:	6025      	str	r5, [r4, #0]
 80073ca:	bf18      	it	ne
 80073cc:	6059      	strne	r1, [r3, #4]
 80073ce:	6863      	ldr	r3, [r4, #4]
 80073d0:	bf08      	it	eq
 80073d2:	6031      	streq	r1, [r6, #0]
 80073d4:	5162      	str	r2, [r4, r5]
 80073d6:	604b      	str	r3, [r1, #4]
 80073d8:	4638      	mov	r0, r7
 80073da:	f104 060b 	add.w	r6, r4, #11
 80073de:	f000 f9ed 	bl	80077bc <__malloc_unlock>
 80073e2:	f026 0607 	bic.w	r6, r6, #7
 80073e6:	1d23      	adds	r3, r4, #4
 80073e8:	1af2      	subs	r2, r6, r3
 80073ea:	d0b6      	beq.n	800735a <_malloc_r+0x22>
 80073ec:	1b9b      	subs	r3, r3, r6
 80073ee:	50a3      	str	r3, [r4, r2]
 80073f0:	e7b3      	b.n	800735a <_malloc_r+0x22>
 80073f2:	6862      	ldr	r2, [r4, #4]
 80073f4:	42a3      	cmp	r3, r4
 80073f6:	bf0c      	ite	eq
 80073f8:	6032      	streq	r2, [r6, #0]
 80073fa:	605a      	strne	r2, [r3, #4]
 80073fc:	e7ec      	b.n	80073d8 <_malloc_r+0xa0>
 80073fe:	4623      	mov	r3, r4
 8007400:	6864      	ldr	r4, [r4, #4]
 8007402:	e7b2      	b.n	800736a <_malloc_r+0x32>
 8007404:	4634      	mov	r4, r6
 8007406:	6876      	ldr	r6, [r6, #4]
 8007408:	e7b9      	b.n	800737e <_malloc_r+0x46>
 800740a:	230c      	movs	r3, #12
 800740c:	4638      	mov	r0, r7
 800740e:	603b      	str	r3, [r7, #0]
 8007410:	f000 f9d4 	bl	80077bc <__malloc_unlock>
 8007414:	e7a1      	b.n	800735a <_malloc_r+0x22>
 8007416:	6025      	str	r5, [r4, #0]
 8007418:	e7de      	b.n	80073d8 <_malloc_r+0xa0>
 800741a:	bf00      	nop
 800741c:	200003e0 	.word	0x200003e0

08007420 <__ssputs_r>:
 8007420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007424:	688e      	ldr	r6, [r1, #8]
 8007426:	4682      	mov	sl, r0
 8007428:	429e      	cmp	r6, r3
 800742a:	460c      	mov	r4, r1
 800742c:	4690      	mov	r8, r2
 800742e:	461f      	mov	r7, r3
 8007430:	d838      	bhi.n	80074a4 <__ssputs_r+0x84>
 8007432:	898a      	ldrh	r2, [r1, #12]
 8007434:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007438:	d032      	beq.n	80074a0 <__ssputs_r+0x80>
 800743a:	6825      	ldr	r5, [r4, #0]
 800743c:	6909      	ldr	r1, [r1, #16]
 800743e:	3301      	adds	r3, #1
 8007440:	eba5 0901 	sub.w	r9, r5, r1
 8007444:	6965      	ldr	r5, [r4, #20]
 8007446:	444b      	add	r3, r9
 8007448:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800744c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007450:	106d      	asrs	r5, r5, #1
 8007452:	429d      	cmp	r5, r3
 8007454:	bf38      	it	cc
 8007456:	461d      	movcc	r5, r3
 8007458:	0553      	lsls	r3, r2, #21
 800745a:	d531      	bpl.n	80074c0 <__ssputs_r+0xa0>
 800745c:	4629      	mov	r1, r5
 800745e:	f7ff ff6b 	bl	8007338 <_malloc_r>
 8007462:	4606      	mov	r6, r0
 8007464:	b950      	cbnz	r0, 800747c <__ssputs_r+0x5c>
 8007466:	230c      	movs	r3, #12
 8007468:	f04f 30ff 	mov.w	r0, #4294967295
 800746c:	f8ca 3000 	str.w	r3, [sl]
 8007470:	89a3      	ldrh	r3, [r4, #12]
 8007472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007476:	81a3      	strh	r3, [r4, #12]
 8007478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800747c:	464a      	mov	r2, r9
 800747e:	6921      	ldr	r1, [r4, #16]
 8007480:	f7ff fb4e 	bl	8006b20 <memcpy>
 8007484:	89a3      	ldrh	r3, [r4, #12]
 8007486:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800748a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800748e:	81a3      	strh	r3, [r4, #12]
 8007490:	6126      	str	r6, [r4, #16]
 8007492:	444e      	add	r6, r9
 8007494:	6026      	str	r6, [r4, #0]
 8007496:	463e      	mov	r6, r7
 8007498:	6165      	str	r5, [r4, #20]
 800749a:	eba5 0509 	sub.w	r5, r5, r9
 800749e:	60a5      	str	r5, [r4, #8]
 80074a0:	42be      	cmp	r6, r7
 80074a2:	d900      	bls.n	80074a6 <__ssputs_r+0x86>
 80074a4:	463e      	mov	r6, r7
 80074a6:	4632      	mov	r2, r6
 80074a8:	4641      	mov	r1, r8
 80074aa:	6820      	ldr	r0, [r4, #0]
 80074ac:	f000 f966 	bl	800777c <memmove>
 80074b0:	68a3      	ldr	r3, [r4, #8]
 80074b2:	2000      	movs	r0, #0
 80074b4:	1b9b      	subs	r3, r3, r6
 80074b6:	60a3      	str	r3, [r4, #8]
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	4433      	add	r3, r6
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	e7db      	b.n	8007478 <__ssputs_r+0x58>
 80074c0:	462a      	mov	r2, r5
 80074c2:	f000 f981 	bl	80077c8 <_realloc_r>
 80074c6:	4606      	mov	r6, r0
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d1e1      	bne.n	8007490 <__ssputs_r+0x70>
 80074cc:	4650      	mov	r0, sl
 80074ce:	6921      	ldr	r1, [r4, #16]
 80074d0:	f7ff feca 	bl	8007268 <_free_r>
 80074d4:	e7c7      	b.n	8007466 <__ssputs_r+0x46>
	...

080074d8 <_svfiprintf_r>:
 80074d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074dc:	4698      	mov	r8, r3
 80074de:	898b      	ldrh	r3, [r1, #12]
 80074e0:	4607      	mov	r7, r0
 80074e2:	061b      	lsls	r3, r3, #24
 80074e4:	460d      	mov	r5, r1
 80074e6:	4614      	mov	r4, r2
 80074e8:	b09d      	sub	sp, #116	; 0x74
 80074ea:	d50e      	bpl.n	800750a <_svfiprintf_r+0x32>
 80074ec:	690b      	ldr	r3, [r1, #16]
 80074ee:	b963      	cbnz	r3, 800750a <_svfiprintf_r+0x32>
 80074f0:	2140      	movs	r1, #64	; 0x40
 80074f2:	f7ff ff21 	bl	8007338 <_malloc_r>
 80074f6:	6028      	str	r0, [r5, #0]
 80074f8:	6128      	str	r0, [r5, #16]
 80074fa:	b920      	cbnz	r0, 8007506 <_svfiprintf_r+0x2e>
 80074fc:	230c      	movs	r3, #12
 80074fe:	603b      	str	r3, [r7, #0]
 8007500:	f04f 30ff 	mov.w	r0, #4294967295
 8007504:	e0d1      	b.n	80076aa <_svfiprintf_r+0x1d2>
 8007506:	2340      	movs	r3, #64	; 0x40
 8007508:	616b      	str	r3, [r5, #20]
 800750a:	2300      	movs	r3, #0
 800750c:	9309      	str	r3, [sp, #36]	; 0x24
 800750e:	2320      	movs	r3, #32
 8007510:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007514:	2330      	movs	r3, #48	; 0x30
 8007516:	f04f 0901 	mov.w	r9, #1
 800751a:	f8cd 800c 	str.w	r8, [sp, #12]
 800751e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80076c4 <_svfiprintf_r+0x1ec>
 8007522:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007526:	4623      	mov	r3, r4
 8007528:	469a      	mov	sl, r3
 800752a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800752e:	b10a      	cbz	r2, 8007534 <_svfiprintf_r+0x5c>
 8007530:	2a25      	cmp	r2, #37	; 0x25
 8007532:	d1f9      	bne.n	8007528 <_svfiprintf_r+0x50>
 8007534:	ebba 0b04 	subs.w	fp, sl, r4
 8007538:	d00b      	beq.n	8007552 <_svfiprintf_r+0x7a>
 800753a:	465b      	mov	r3, fp
 800753c:	4622      	mov	r2, r4
 800753e:	4629      	mov	r1, r5
 8007540:	4638      	mov	r0, r7
 8007542:	f7ff ff6d 	bl	8007420 <__ssputs_r>
 8007546:	3001      	adds	r0, #1
 8007548:	f000 80aa 	beq.w	80076a0 <_svfiprintf_r+0x1c8>
 800754c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800754e:	445a      	add	r2, fp
 8007550:	9209      	str	r2, [sp, #36]	; 0x24
 8007552:	f89a 3000 	ldrb.w	r3, [sl]
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 80a2 	beq.w	80076a0 <_svfiprintf_r+0x1c8>
 800755c:	2300      	movs	r3, #0
 800755e:	f04f 32ff 	mov.w	r2, #4294967295
 8007562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007566:	f10a 0a01 	add.w	sl, sl, #1
 800756a:	9304      	str	r3, [sp, #16]
 800756c:	9307      	str	r3, [sp, #28]
 800756e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007572:	931a      	str	r3, [sp, #104]	; 0x68
 8007574:	4654      	mov	r4, sl
 8007576:	2205      	movs	r2, #5
 8007578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800757c:	4851      	ldr	r0, [pc, #324]	; (80076c4 <_svfiprintf_r+0x1ec>)
 800757e:	f7ff fac1 	bl	8006b04 <memchr>
 8007582:	9a04      	ldr	r2, [sp, #16]
 8007584:	b9d8      	cbnz	r0, 80075be <_svfiprintf_r+0xe6>
 8007586:	06d0      	lsls	r0, r2, #27
 8007588:	bf44      	itt	mi
 800758a:	2320      	movmi	r3, #32
 800758c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007590:	0711      	lsls	r1, r2, #28
 8007592:	bf44      	itt	mi
 8007594:	232b      	movmi	r3, #43	; 0x2b
 8007596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800759a:	f89a 3000 	ldrb.w	r3, [sl]
 800759e:	2b2a      	cmp	r3, #42	; 0x2a
 80075a0:	d015      	beq.n	80075ce <_svfiprintf_r+0xf6>
 80075a2:	4654      	mov	r4, sl
 80075a4:	2000      	movs	r0, #0
 80075a6:	f04f 0c0a 	mov.w	ip, #10
 80075aa:	9a07      	ldr	r2, [sp, #28]
 80075ac:	4621      	mov	r1, r4
 80075ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075b2:	3b30      	subs	r3, #48	; 0x30
 80075b4:	2b09      	cmp	r3, #9
 80075b6:	d94e      	bls.n	8007656 <_svfiprintf_r+0x17e>
 80075b8:	b1b0      	cbz	r0, 80075e8 <_svfiprintf_r+0x110>
 80075ba:	9207      	str	r2, [sp, #28]
 80075bc:	e014      	b.n	80075e8 <_svfiprintf_r+0x110>
 80075be:	eba0 0308 	sub.w	r3, r0, r8
 80075c2:	fa09 f303 	lsl.w	r3, r9, r3
 80075c6:	4313      	orrs	r3, r2
 80075c8:	46a2      	mov	sl, r4
 80075ca:	9304      	str	r3, [sp, #16]
 80075cc:	e7d2      	b.n	8007574 <_svfiprintf_r+0x9c>
 80075ce:	9b03      	ldr	r3, [sp, #12]
 80075d0:	1d19      	adds	r1, r3, #4
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	9103      	str	r1, [sp, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	bfbb      	ittet	lt
 80075da:	425b      	neglt	r3, r3
 80075dc:	f042 0202 	orrlt.w	r2, r2, #2
 80075e0:	9307      	strge	r3, [sp, #28]
 80075e2:	9307      	strlt	r3, [sp, #28]
 80075e4:	bfb8      	it	lt
 80075e6:	9204      	strlt	r2, [sp, #16]
 80075e8:	7823      	ldrb	r3, [r4, #0]
 80075ea:	2b2e      	cmp	r3, #46	; 0x2e
 80075ec:	d10c      	bne.n	8007608 <_svfiprintf_r+0x130>
 80075ee:	7863      	ldrb	r3, [r4, #1]
 80075f0:	2b2a      	cmp	r3, #42	; 0x2a
 80075f2:	d135      	bne.n	8007660 <_svfiprintf_r+0x188>
 80075f4:	9b03      	ldr	r3, [sp, #12]
 80075f6:	3402      	adds	r4, #2
 80075f8:	1d1a      	adds	r2, r3, #4
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	9203      	str	r2, [sp, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	bfb8      	it	lt
 8007602:	f04f 33ff 	movlt.w	r3, #4294967295
 8007606:	9305      	str	r3, [sp, #20]
 8007608:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80076c8 <_svfiprintf_r+0x1f0>
 800760c:	2203      	movs	r2, #3
 800760e:	4650      	mov	r0, sl
 8007610:	7821      	ldrb	r1, [r4, #0]
 8007612:	f7ff fa77 	bl	8006b04 <memchr>
 8007616:	b140      	cbz	r0, 800762a <_svfiprintf_r+0x152>
 8007618:	2340      	movs	r3, #64	; 0x40
 800761a:	eba0 000a 	sub.w	r0, r0, sl
 800761e:	fa03 f000 	lsl.w	r0, r3, r0
 8007622:	9b04      	ldr	r3, [sp, #16]
 8007624:	3401      	adds	r4, #1
 8007626:	4303      	orrs	r3, r0
 8007628:	9304      	str	r3, [sp, #16]
 800762a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800762e:	2206      	movs	r2, #6
 8007630:	4826      	ldr	r0, [pc, #152]	; (80076cc <_svfiprintf_r+0x1f4>)
 8007632:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007636:	f7ff fa65 	bl	8006b04 <memchr>
 800763a:	2800      	cmp	r0, #0
 800763c:	d038      	beq.n	80076b0 <_svfiprintf_r+0x1d8>
 800763e:	4b24      	ldr	r3, [pc, #144]	; (80076d0 <_svfiprintf_r+0x1f8>)
 8007640:	bb1b      	cbnz	r3, 800768a <_svfiprintf_r+0x1b2>
 8007642:	9b03      	ldr	r3, [sp, #12]
 8007644:	3307      	adds	r3, #7
 8007646:	f023 0307 	bic.w	r3, r3, #7
 800764a:	3308      	adds	r3, #8
 800764c:	9303      	str	r3, [sp, #12]
 800764e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007650:	4433      	add	r3, r6
 8007652:	9309      	str	r3, [sp, #36]	; 0x24
 8007654:	e767      	b.n	8007526 <_svfiprintf_r+0x4e>
 8007656:	460c      	mov	r4, r1
 8007658:	2001      	movs	r0, #1
 800765a:	fb0c 3202 	mla	r2, ip, r2, r3
 800765e:	e7a5      	b.n	80075ac <_svfiprintf_r+0xd4>
 8007660:	2300      	movs	r3, #0
 8007662:	f04f 0c0a 	mov.w	ip, #10
 8007666:	4619      	mov	r1, r3
 8007668:	3401      	adds	r4, #1
 800766a:	9305      	str	r3, [sp, #20]
 800766c:	4620      	mov	r0, r4
 800766e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007672:	3a30      	subs	r2, #48	; 0x30
 8007674:	2a09      	cmp	r2, #9
 8007676:	d903      	bls.n	8007680 <_svfiprintf_r+0x1a8>
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0c5      	beq.n	8007608 <_svfiprintf_r+0x130>
 800767c:	9105      	str	r1, [sp, #20]
 800767e:	e7c3      	b.n	8007608 <_svfiprintf_r+0x130>
 8007680:	4604      	mov	r4, r0
 8007682:	2301      	movs	r3, #1
 8007684:	fb0c 2101 	mla	r1, ip, r1, r2
 8007688:	e7f0      	b.n	800766c <_svfiprintf_r+0x194>
 800768a:	ab03      	add	r3, sp, #12
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	462a      	mov	r2, r5
 8007690:	4638      	mov	r0, r7
 8007692:	4b10      	ldr	r3, [pc, #64]	; (80076d4 <_svfiprintf_r+0x1fc>)
 8007694:	a904      	add	r1, sp, #16
 8007696:	f7fd ffcb 	bl	8005630 <_printf_float>
 800769a:	1c42      	adds	r2, r0, #1
 800769c:	4606      	mov	r6, r0
 800769e:	d1d6      	bne.n	800764e <_svfiprintf_r+0x176>
 80076a0:	89ab      	ldrh	r3, [r5, #12]
 80076a2:	065b      	lsls	r3, r3, #25
 80076a4:	f53f af2c 	bmi.w	8007500 <_svfiprintf_r+0x28>
 80076a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076aa:	b01d      	add	sp, #116	; 0x74
 80076ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b0:	ab03      	add	r3, sp, #12
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	462a      	mov	r2, r5
 80076b6:	4638      	mov	r0, r7
 80076b8:	4b06      	ldr	r3, [pc, #24]	; (80076d4 <_svfiprintf_r+0x1fc>)
 80076ba:	a904      	add	r1, sp, #16
 80076bc:	f7fe fa54 	bl	8005b68 <_printf_i>
 80076c0:	e7eb      	b.n	800769a <_svfiprintf_r+0x1c2>
 80076c2:	bf00      	nop
 80076c4:	08008564 	.word	0x08008564
 80076c8:	0800856a 	.word	0x0800856a
 80076cc:	0800856e 	.word	0x0800856e
 80076d0:	08005631 	.word	0x08005631
 80076d4:	08007421 	.word	0x08007421

080076d8 <_sbrk_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	2300      	movs	r3, #0
 80076dc:	4d05      	ldr	r5, [pc, #20]	; (80076f4 <_sbrk_r+0x1c>)
 80076de:	4604      	mov	r4, r0
 80076e0:	4608      	mov	r0, r1
 80076e2:	602b      	str	r3, [r5, #0]
 80076e4:	f7fb f878 	bl	80027d8 <_sbrk>
 80076e8:	1c43      	adds	r3, r0, #1
 80076ea:	d102      	bne.n	80076f2 <_sbrk_r+0x1a>
 80076ec:	682b      	ldr	r3, [r5, #0]
 80076ee:	b103      	cbz	r3, 80076f2 <_sbrk_r+0x1a>
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	bd38      	pop	{r3, r4, r5, pc}
 80076f4:	200003e8 	.word	0x200003e8

080076f8 <__assert_func>:
 80076f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076fa:	4614      	mov	r4, r2
 80076fc:	461a      	mov	r2, r3
 80076fe:	4b09      	ldr	r3, [pc, #36]	; (8007724 <__assert_func+0x2c>)
 8007700:	4605      	mov	r5, r0
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68d8      	ldr	r0, [r3, #12]
 8007706:	b14c      	cbz	r4, 800771c <__assert_func+0x24>
 8007708:	4b07      	ldr	r3, [pc, #28]	; (8007728 <__assert_func+0x30>)
 800770a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800770e:	9100      	str	r1, [sp, #0]
 8007710:	462b      	mov	r3, r5
 8007712:	4906      	ldr	r1, [pc, #24]	; (800772c <__assert_func+0x34>)
 8007714:	f000 f80e 	bl	8007734 <fiprintf>
 8007718:	f000 faaa 	bl	8007c70 <abort>
 800771c:	4b04      	ldr	r3, [pc, #16]	; (8007730 <__assert_func+0x38>)
 800771e:	461c      	mov	r4, r3
 8007720:	e7f3      	b.n	800770a <__assert_func+0x12>
 8007722:	bf00      	nop
 8007724:	2000000c 	.word	0x2000000c
 8007728:	08008575 	.word	0x08008575
 800772c:	08008582 	.word	0x08008582
 8007730:	080085b0 	.word	0x080085b0

08007734 <fiprintf>:
 8007734:	b40e      	push	{r1, r2, r3}
 8007736:	b503      	push	{r0, r1, lr}
 8007738:	4601      	mov	r1, r0
 800773a:	ab03      	add	r3, sp, #12
 800773c:	4805      	ldr	r0, [pc, #20]	; (8007754 <fiprintf+0x20>)
 800773e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007742:	6800      	ldr	r0, [r0, #0]
 8007744:	9301      	str	r3, [sp, #4]
 8007746:	f000 f895 	bl	8007874 <_vfiprintf_r>
 800774a:	b002      	add	sp, #8
 800774c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007750:	b003      	add	sp, #12
 8007752:	4770      	bx	lr
 8007754:	2000000c 	.word	0x2000000c

08007758 <__ascii_mbtowc>:
 8007758:	b082      	sub	sp, #8
 800775a:	b901      	cbnz	r1, 800775e <__ascii_mbtowc+0x6>
 800775c:	a901      	add	r1, sp, #4
 800775e:	b142      	cbz	r2, 8007772 <__ascii_mbtowc+0x1a>
 8007760:	b14b      	cbz	r3, 8007776 <__ascii_mbtowc+0x1e>
 8007762:	7813      	ldrb	r3, [r2, #0]
 8007764:	600b      	str	r3, [r1, #0]
 8007766:	7812      	ldrb	r2, [r2, #0]
 8007768:	1e10      	subs	r0, r2, #0
 800776a:	bf18      	it	ne
 800776c:	2001      	movne	r0, #1
 800776e:	b002      	add	sp, #8
 8007770:	4770      	bx	lr
 8007772:	4610      	mov	r0, r2
 8007774:	e7fb      	b.n	800776e <__ascii_mbtowc+0x16>
 8007776:	f06f 0001 	mvn.w	r0, #1
 800777a:	e7f8      	b.n	800776e <__ascii_mbtowc+0x16>

0800777c <memmove>:
 800777c:	4288      	cmp	r0, r1
 800777e:	b510      	push	{r4, lr}
 8007780:	eb01 0402 	add.w	r4, r1, r2
 8007784:	d902      	bls.n	800778c <memmove+0x10>
 8007786:	4284      	cmp	r4, r0
 8007788:	4623      	mov	r3, r4
 800778a:	d807      	bhi.n	800779c <memmove+0x20>
 800778c:	1e43      	subs	r3, r0, #1
 800778e:	42a1      	cmp	r1, r4
 8007790:	d008      	beq.n	80077a4 <memmove+0x28>
 8007792:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007796:	f803 2f01 	strb.w	r2, [r3, #1]!
 800779a:	e7f8      	b.n	800778e <memmove+0x12>
 800779c:	4601      	mov	r1, r0
 800779e:	4402      	add	r2, r0
 80077a0:	428a      	cmp	r2, r1
 80077a2:	d100      	bne.n	80077a6 <memmove+0x2a>
 80077a4:	bd10      	pop	{r4, pc}
 80077a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077ae:	e7f7      	b.n	80077a0 <memmove+0x24>

080077b0 <__malloc_lock>:
 80077b0:	4801      	ldr	r0, [pc, #4]	; (80077b8 <__malloc_lock+0x8>)
 80077b2:	f000 bc19 	b.w	8007fe8 <__retarget_lock_acquire_recursive>
 80077b6:	bf00      	nop
 80077b8:	200003ec 	.word	0x200003ec

080077bc <__malloc_unlock>:
 80077bc:	4801      	ldr	r0, [pc, #4]	; (80077c4 <__malloc_unlock+0x8>)
 80077be:	f000 bc14 	b.w	8007fea <__retarget_lock_release_recursive>
 80077c2:	bf00      	nop
 80077c4:	200003ec 	.word	0x200003ec

080077c8 <_realloc_r>:
 80077c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077cc:	4680      	mov	r8, r0
 80077ce:	4614      	mov	r4, r2
 80077d0:	460e      	mov	r6, r1
 80077d2:	b921      	cbnz	r1, 80077de <_realloc_r+0x16>
 80077d4:	4611      	mov	r1, r2
 80077d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077da:	f7ff bdad 	b.w	8007338 <_malloc_r>
 80077de:	b92a      	cbnz	r2, 80077ec <_realloc_r+0x24>
 80077e0:	f7ff fd42 	bl	8007268 <_free_r>
 80077e4:	4625      	mov	r5, r4
 80077e6:	4628      	mov	r0, r5
 80077e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077ec:	f000 fc64 	bl	80080b8 <_malloc_usable_size_r>
 80077f0:	4284      	cmp	r4, r0
 80077f2:	4607      	mov	r7, r0
 80077f4:	d802      	bhi.n	80077fc <_realloc_r+0x34>
 80077f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80077fa:	d812      	bhi.n	8007822 <_realloc_r+0x5a>
 80077fc:	4621      	mov	r1, r4
 80077fe:	4640      	mov	r0, r8
 8007800:	f7ff fd9a 	bl	8007338 <_malloc_r>
 8007804:	4605      	mov	r5, r0
 8007806:	2800      	cmp	r0, #0
 8007808:	d0ed      	beq.n	80077e6 <_realloc_r+0x1e>
 800780a:	42bc      	cmp	r4, r7
 800780c:	4622      	mov	r2, r4
 800780e:	4631      	mov	r1, r6
 8007810:	bf28      	it	cs
 8007812:	463a      	movcs	r2, r7
 8007814:	f7ff f984 	bl	8006b20 <memcpy>
 8007818:	4631      	mov	r1, r6
 800781a:	4640      	mov	r0, r8
 800781c:	f7ff fd24 	bl	8007268 <_free_r>
 8007820:	e7e1      	b.n	80077e6 <_realloc_r+0x1e>
 8007822:	4635      	mov	r5, r6
 8007824:	e7df      	b.n	80077e6 <_realloc_r+0x1e>

08007826 <__sfputc_r>:
 8007826:	6893      	ldr	r3, [r2, #8]
 8007828:	b410      	push	{r4}
 800782a:	3b01      	subs	r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	6093      	str	r3, [r2, #8]
 8007830:	da07      	bge.n	8007842 <__sfputc_r+0x1c>
 8007832:	6994      	ldr	r4, [r2, #24]
 8007834:	42a3      	cmp	r3, r4
 8007836:	db01      	blt.n	800783c <__sfputc_r+0x16>
 8007838:	290a      	cmp	r1, #10
 800783a:	d102      	bne.n	8007842 <__sfputc_r+0x1c>
 800783c:	bc10      	pop	{r4}
 800783e:	f000 b949 	b.w	8007ad4 <__swbuf_r>
 8007842:	6813      	ldr	r3, [r2, #0]
 8007844:	1c58      	adds	r0, r3, #1
 8007846:	6010      	str	r0, [r2, #0]
 8007848:	7019      	strb	r1, [r3, #0]
 800784a:	4608      	mov	r0, r1
 800784c:	bc10      	pop	{r4}
 800784e:	4770      	bx	lr

08007850 <__sfputs_r>:
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	4606      	mov	r6, r0
 8007854:	460f      	mov	r7, r1
 8007856:	4614      	mov	r4, r2
 8007858:	18d5      	adds	r5, r2, r3
 800785a:	42ac      	cmp	r4, r5
 800785c:	d101      	bne.n	8007862 <__sfputs_r+0x12>
 800785e:	2000      	movs	r0, #0
 8007860:	e007      	b.n	8007872 <__sfputs_r+0x22>
 8007862:	463a      	mov	r2, r7
 8007864:	4630      	mov	r0, r6
 8007866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800786a:	f7ff ffdc 	bl	8007826 <__sfputc_r>
 800786e:	1c43      	adds	r3, r0, #1
 8007870:	d1f3      	bne.n	800785a <__sfputs_r+0xa>
 8007872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007874 <_vfiprintf_r>:
 8007874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007878:	460d      	mov	r5, r1
 800787a:	4614      	mov	r4, r2
 800787c:	4698      	mov	r8, r3
 800787e:	4606      	mov	r6, r0
 8007880:	b09d      	sub	sp, #116	; 0x74
 8007882:	b118      	cbz	r0, 800788c <_vfiprintf_r+0x18>
 8007884:	6983      	ldr	r3, [r0, #24]
 8007886:	b90b      	cbnz	r3, 800788c <_vfiprintf_r+0x18>
 8007888:	f000 fb10 	bl	8007eac <__sinit>
 800788c:	4b89      	ldr	r3, [pc, #548]	; (8007ab4 <_vfiprintf_r+0x240>)
 800788e:	429d      	cmp	r5, r3
 8007890:	d11b      	bne.n	80078ca <_vfiprintf_r+0x56>
 8007892:	6875      	ldr	r5, [r6, #4]
 8007894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007896:	07d9      	lsls	r1, r3, #31
 8007898:	d405      	bmi.n	80078a6 <_vfiprintf_r+0x32>
 800789a:	89ab      	ldrh	r3, [r5, #12]
 800789c:	059a      	lsls	r2, r3, #22
 800789e:	d402      	bmi.n	80078a6 <_vfiprintf_r+0x32>
 80078a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078a2:	f000 fba1 	bl	8007fe8 <__retarget_lock_acquire_recursive>
 80078a6:	89ab      	ldrh	r3, [r5, #12]
 80078a8:	071b      	lsls	r3, r3, #28
 80078aa:	d501      	bpl.n	80078b0 <_vfiprintf_r+0x3c>
 80078ac:	692b      	ldr	r3, [r5, #16]
 80078ae:	b9eb      	cbnz	r3, 80078ec <_vfiprintf_r+0x78>
 80078b0:	4629      	mov	r1, r5
 80078b2:	4630      	mov	r0, r6
 80078b4:	f000 f96e 	bl	8007b94 <__swsetup_r>
 80078b8:	b1c0      	cbz	r0, 80078ec <_vfiprintf_r+0x78>
 80078ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078bc:	07dc      	lsls	r4, r3, #31
 80078be:	d50e      	bpl.n	80078de <_vfiprintf_r+0x6a>
 80078c0:	f04f 30ff 	mov.w	r0, #4294967295
 80078c4:	b01d      	add	sp, #116	; 0x74
 80078c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ca:	4b7b      	ldr	r3, [pc, #492]	; (8007ab8 <_vfiprintf_r+0x244>)
 80078cc:	429d      	cmp	r5, r3
 80078ce:	d101      	bne.n	80078d4 <_vfiprintf_r+0x60>
 80078d0:	68b5      	ldr	r5, [r6, #8]
 80078d2:	e7df      	b.n	8007894 <_vfiprintf_r+0x20>
 80078d4:	4b79      	ldr	r3, [pc, #484]	; (8007abc <_vfiprintf_r+0x248>)
 80078d6:	429d      	cmp	r5, r3
 80078d8:	bf08      	it	eq
 80078da:	68f5      	ldreq	r5, [r6, #12]
 80078dc:	e7da      	b.n	8007894 <_vfiprintf_r+0x20>
 80078de:	89ab      	ldrh	r3, [r5, #12]
 80078e0:	0598      	lsls	r0, r3, #22
 80078e2:	d4ed      	bmi.n	80078c0 <_vfiprintf_r+0x4c>
 80078e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078e6:	f000 fb80 	bl	8007fea <__retarget_lock_release_recursive>
 80078ea:	e7e9      	b.n	80078c0 <_vfiprintf_r+0x4c>
 80078ec:	2300      	movs	r3, #0
 80078ee:	9309      	str	r3, [sp, #36]	; 0x24
 80078f0:	2320      	movs	r3, #32
 80078f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078f6:	2330      	movs	r3, #48	; 0x30
 80078f8:	f04f 0901 	mov.w	r9, #1
 80078fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007900:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007ac0 <_vfiprintf_r+0x24c>
 8007904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007908:	4623      	mov	r3, r4
 800790a:	469a      	mov	sl, r3
 800790c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007910:	b10a      	cbz	r2, 8007916 <_vfiprintf_r+0xa2>
 8007912:	2a25      	cmp	r2, #37	; 0x25
 8007914:	d1f9      	bne.n	800790a <_vfiprintf_r+0x96>
 8007916:	ebba 0b04 	subs.w	fp, sl, r4
 800791a:	d00b      	beq.n	8007934 <_vfiprintf_r+0xc0>
 800791c:	465b      	mov	r3, fp
 800791e:	4622      	mov	r2, r4
 8007920:	4629      	mov	r1, r5
 8007922:	4630      	mov	r0, r6
 8007924:	f7ff ff94 	bl	8007850 <__sfputs_r>
 8007928:	3001      	adds	r0, #1
 800792a:	f000 80aa 	beq.w	8007a82 <_vfiprintf_r+0x20e>
 800792e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007930:	445a      	add	r2, fp
 8007932:	9209      	str	r2, [sp, #36]	; 0x24
 8007934:	f89a 3000 	ldrb.w	r3, [sl]
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 80a2 	beq.w	8007a82 <_vfiprintf_r+0x20e>
 800793e:	2300      	movs	r3, #0
 8007940:	f04f 32ff 	mov.w	r2, #4294967295
 8007944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007948:	f10a 0a01 	add.w	sl, sl, #1
 800794c:	9304      	str	r3, [sp, #16]
 800794e:	9307      	str	r3, [sp, #28]
 8007950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007954:	931a      	str	r3, [sp, #104]	; 0x68
 8007956:	4654      	mov	r4, sl
 8007958:	2205      	movs	r2, #5
 800795a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800795e:	4858      	ldr	r0, [pc, #352]	; (8007ac0 <_vfiprintf_r+0x24c>)
 8007960:	f7ff f8d0 	bl	8006b04 <memchr>
 8007964:	9a04      	ldr	r2, [sp, #16]
 8007966:	b9d8      	cbnz	r0, 80079a0 <_vfiprintf_r+0x12c>
 8007968:	06d1      	lsls	r1, r2, #27
 800796a:	bf44      	itt	mi
 800796c:	2320      	movmi	r3, #32
 800796e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007972:	0713      	lsls	r3, r2, #28
 8007974:	bf44      	itt	mi
 8007976:	232b      	movmi	r3, #43	; 0x2b
 8007978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800797c:	f89a 3000 	ldrb.w	r3, [sl]
 8007980:	2b2a      	cmp	r3, #42	; 0x2a
 8007982:	d015      	beq.n	80079b0 <_vfiprintf_r+0x13c>
 8007984:	4654      	mov	r4, sl
 8007986:	2000      	movs	r0, #0
 8007988:	f04f 0c0a 	mov.w	ip, #10
 800798c:	9a07      	ldr	r2, [sp, #28]
 800798e:	4621      	mov	r1, r4
 8007990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007994:	3b30      	subs	r3, #48	; 0x30
 8007996:	2b09      	cmp	r3, #9
 8007998:	d94e      	bls.n	8007a38 <_vfiprintf_r+0x1c4>
 800799a:	b1b0      	cbz	r0, 80079ca <_vfiprintf_r+0x156>
 800799c:	9207      	str	r2, [sp, #28]
 800799e:	e014      	b.n	80079ca <_vfiprintf_r+0x156>
 80079a0:	eba0 0308 	sub.w	r3, r0, r8
 80079a4:	fa09 f303 	lsl.w	r3, r9, r3
 80079a8:	4313      	orrs	r3, r2
 80079aa:	46a2      	mov	sl, r4
 80079ac:	9304      	str	r3, [sp, #16]
 80079ae:	e7d2      	b.n	8007956 <_vfiprintf_r+0xe2>
 80079b0:	9b03      	ldr	r3, [sp, #12]
 80079b2:	1d19      	adds	r1, r3, #4
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	9103      	str	r1, [sp, #12]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	bfbb      	ittet	lt
 80079bc:	425b      	neglt	r3, r3
 80079be:	f042 0202 	orrlt.w	r2, r2, #2
 80079c2:	9307      	strge	r3, [sp, #28]
 80079c4:	9307      	strlt	r3, [sp, #28]
 80079c6:	bfb8      	it	lt
 80079c8:	9204      	strlt	r2, [sp, #16]
 80079ca:	7823      	ldrb	r3, [r4, #0]
 80079cc:	2b2e      	cmp	r3, #46	; 0x2e
 80079ce:	d10c      	bne.n	80079ea <_vfiprintf_r+0x176>
 80079d0:	7863      	ldrb	r3, [r4, #1]
 80079d2:	2b2a      	cmp	r3, #42	; 0x2a
 80079d4:	d135      	bne.n	8007a42 <_vfiprintf_r+0x1ce>
 80079d6:	9b03      	ldr	r3, [sp, #12]
 80079d8:	3402      	adds	r4, #2
 80079da:	1d1a      	adds	r2, r3, #4
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	9203      	str	r2, [sp, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	bfb8      	it	lt
 80079e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80079e8:	9305      	str	r3, [sp, #20]
 80079ea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007ac4 <_vfiprintf_r+0x250>
 80079ee:	2203      	movs	r2, #3
 80079f0:	4650      	mov	r0, sl
 80079f2:	7821      	ldrb	r1, [r4, #0]
 80079f4:	f7ff f886 	bl	8006b04 <memchr>
 80079f8:	b140      	cbz	r0, 8007a0c <_vfiprintf_r+0x198>
 80079fa:	2340      	movs	r3, #64	; 0x40
 80079fc:	eba0 000a 	sub.w	r0, r0, sl
 8007a00:	fa03 f000 	lsl.w	r0, r3, r0
 8007a04:	9b04      	ldr	r3, [sp, #16]
 8007a06:	3401      	adds	r4, #1
 8007a08:	4303      	orrs	r3, r0
 8007a0a:	9304      	str	r3, [sp, #16]
 8007a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a10:	2206      	movs	r2, #6
 8007a12:	482d      	ldr	r0, [pc, #180]	; (8007ac8 <_vfiprintf_r+0x254>)
 8007a14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a18:	f7ff f874 	bl	8006b04 <memchr>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d03f      	beq.n	8007aa0 <_vfiprintf_r+0x22c>
 8007a20:	4b2a      	ldr	r3, [pc, #168]	; (8007acc <_vfiprintf_r+0x258>)
 8007a22:	bb1b      	cbnz	r3, 8007a6c <_vfiprintf_r+0x1f8>
 8007a24:	9b03      	ldr	r3, [sp, #12]
 8007a26:	3307      	adds	r3, #7
 8007a28:	f023 0307 	bic.w	r3, r3, #7
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	9303      	str	r3, [sp, #12]
 8007a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a32:	443b      	add	r3, r7
 8007a34:	9309      	str	r3, [sp, #36]	; 0x24
 8007a36:	e767      	b.n	8007908 <_vfiprintf_r+0x94>
 8007a38:	460c      	mov	r4, r1
 8007a3a:	2001      	movs	r0, #1
 8007a3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a40:	e7a5      	b.n	800798e <_vfiprintf_r+0x11a>
 8007a42:	2300      	movs	r3, #0
 8007a44:	f04f 0c0a 	mov.w	ip, #10
 8007a48:	4619      	mov	r1, r3
 8007a4a:	3401      	adds	r4, #1
 8007a4c:	9305      	str	r3, [sp, #20]
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a54:	3a30      	subs	r2, #48	; 0x30
 8007a56:	2a09      	cmp	r2, #9
 8007a58:	d903      	bls.n	8007a62 <_vfiprintf_r+0x1ee>
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0c5      	beq.n	80079ea <_vfiprintf_r+0x176>
 8007a5e:	9105      	str	r1, [sp, #20]
 8007a60:	e7c3      	b.n	80079ea <_vfiprintf_r+0x176>
 8007a62:	4604      	mov	r4, r0
 8007a64:	2301      	movs	r3, #1
 8007a66:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a6a:	e7f0      	b.n	8007a4e <_vfiprintf_r+0x1da>
 8007a6c:	ab03      	add	r3, sp, #12
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	462a      	mov	r2, r5
 8007a72:	4630      	mov	r0, r6
 8007a74:	4b16      	ldr	r3, [pc, #88]	; (8007ad0 <_vfiprintf_r+0x25c>)
 8007a76:	a904      	add	r1, sp, #16
 8007a78:	f7fd fdda 	bl	8005630 <_printf_float>
 8007a7c:	4607      	mov	r7, r0
 8007a7e:	1c78      	adds	r0, r7, #1
 8007a80:	d1d6      	bne.n	8007a30 <_vfiprintf_r+0x1bc>
 8007a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a84:	07d9      	lsls	r1, r3, #31
 8007a86:	d405      	bmi.n	8007a94 <_vfiprintf_r+0x220>
 8007a88:	89ab      	ldrh	r3, [r5, #12]
 8007a8a:	059a      	lsls	r2, r3, #22
 8007a8c:	d402      	bmi.n	8007a94 <_vfiprintf_r+0x220>
 8007a8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a90:	f000 faab 	bl	8007fea <__retarget_lock_release_recursive>
 8007a94:	89ab      	ldrh	r3, [r5, #12]
 8007a96:	065b      	lsls	r3, r3, #25
 8007a98:	f53f af12 	bmi.w	80078c0 <_vfiprintf_r+0x4c>
 8007a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a9e:	e711      	b.n	80078c4 <_vfiprintf_r+0x50>
 8007aa0:	ab03      	add	r3, sp, #12
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	462a      	mov	r2, r5
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	4b09      	ldr	r3, [pc, #36]	; (8007ad0 <_vfiprintf_r+0x25c>)
 8007aaa:	a904      	add	r1, sp, #16
 8007aac:	f7fe f85c 	bl	8005b68 <_printf_i>
 8007ab0:	e7e4      	b.n	8007a7c <_vfiprintf_r+0x208>
 8007ab2:	bf00      	nop
 8007ab4:	080086dc 	.word	0x080086dc
 8007ab8:	080086fc 	.word	0x080086fc
 8007abc:	080086bc 	.word	0x080086bc
 8007ac0:	08008564 	.word	0x08008564
 8007ac4:	0800856a 	.word	0x0800856a
 8007ac8:	0800856e 	.word	0x0800856e
 8007acc:	08005631 	.word	0x08005631
 8007ad0:	08007851 	.word	0x08007851

08007ad4 <__swbuf_r>:
 8007ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad6:	460e      	mov	r6, r1
 8007ad8:	4614      	mov	r4, r2
 8007ada:	4605      	mov	r5, r0
 8007adc:	b118      	cbz	r0, 8007ae6 <__swbuf_r+0x12>
 8007ade:	6983      	ldr	r3, [r0, #24]
 8007ae0:	b90b      	cbnz	r3, 8007ae6 <__swbuf_r+0x12>
 8007ae2:	f000 f9e3 	bl	8007eac <__sinit>
 8007ae6:	4b21      	ldr	r3, [pc, #132]	; (8007b6c <__swbuf_r+0x98>)
 8007ae8:	429c      	cmp	r4, r3
 8007aea:	d12b      	bne.n	8007b44 <__swbuf_r+0x70>
 8007aec:	686c      	ldr	r4, [r5, #4]
 8007aee:	69a3      	ldr	r3, [r4, #24]
 8007af0:	60a3      	str	r3, [r4, #8]
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	071a      	lsls	r2, r3, #28
 8007af6:	d52f      	bpl.n	8007b58 <__swbuf_r+0x84>
 8007af8:	6923      	ldr	r3, [r4, #16]
 8007afa:	b36b      	cbz	r3, 8007b58 <__swbuf_r+0x84>
 8007afc:	6923      	ldr	r3, [r4, #16]
 8007afe:	6820      	ldr	r0, [r4, #0]
 8007b00:	b2f6      	uxtb	r6, r6
 8007b02:	1ac0      	subs	r0, r0, r3
 8007b04:	6963      	ldr	r3, [r4, #20]
 8007b06:	4637      	mov	r7, r6
 8007b08:	4283      	cmp	r3, r0
 8007b0a:	dc04      	bgt.n	8007b16 <__swbuf_r+0x42>
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f000 f938 	bl	8007d84 <_fflush_r>
 8007b14:	bb30      	cbnz	r0, 8007b64 <__swbuf_r+0x90>
 8007b16:	68a3      	ldr	r3, [r4, #8]
 8007b18:	3001      	adds	r0, #1
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	60a3      	str	r3, [r4, #8]
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	1c5a      	adds	r2, r3, #1
 8007b22:	6022      	str	r2, [r4, #0]
 8007b24:	701e      	strb	r6, [r3, #0]
 8007b26:	6963      	ldr	r3, [r4, #20]
 8007b28:	4283      	cmp	r3, r0
 8007b2a:	d004      	beq.n	8007b36 <__swbuf_r+0x62>
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	07db      	lsls	r3, r3, #31
 8007b30:	d506      	bpl.n	8007b40 <__swbuf_r+0x6c>
 8007b32:	2e0a      	cmp	r6, #10
 8007b34:	d104      	bne.n	8007b40 <__swbuf_r+0x6c>
 8007b36:	4621      	mov	r1, r4
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f000 f923 	bl	8007d84 <_fflush_r>
 8007b3e:	b988      	cbnz	r0, 8007b64 <__swbuf_r+0x90>
 8007b40:	4638      	mov	r0, r7
 8007b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b44:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <__swbuf_r+0x9c>)
 8007b46:	429c      	cmp	r4, r3
 8007b48:	d101      	bne.n	8007b4e <__swbuf_r+0x7a>
 8007b4a:	68ac      	ldr	r4, [r5, #8]
 8007b4c:	e7cf      	b.n	8007aee <__swbuf_r+0x1a>
 8007b4e:	4b09      	ldr	r3, [pc, #36]	; (8007b74 <__swbuf_r+0xa0>)
 8007b50:	429c      	cmp	r4, r3
 8007b52:	bf08      	it	eq
 8007b54:	68ec      	ldreq	r4, [r5, #12]
 8007b56:	e7ca      	b.n	8007aee <__swbuf_r+0x1a>
 8007b58:	4621      	mov	r1, r4
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f000 f81a 	bl	8007b94 <__swsetup_r>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d0cb      	beq.n	8007afc <__swbuf_r+0x28>
 8007b64:	f04f 37ff 	mov.w	r7, #4294967295
 8007b68:	e7ea      	b.n	8007b40 <__swbuf_r+0x6c>
 8007b6a:	bf00      	nop
 8007b6c:	080086dc 	.word	0x080086dc
 8007b70:	080086fc 	.word	0x080086fc
 8007b74:	080086bc 	.word	0x080086bc

08007b78 <__ascii_wctomb>:
 8007b78:	4603      	mov	r3, r0
 8007b7a:	4608      	mov	r0, r1
 8007b7c:	b141      	cbz	r1, 8007b90 <__ascii_wctomb+0x18>
 8007b7e:	2aff      	cmp	r2, #255	; 0xff
 8007b80:	d904      	bls.n	8007b8c <__ascii_wctomb+0x14>
 8007b82:	228a      	movs	r2, #138	; 0x8a
 8007b84:	f04f 30ff 	mov.w	r0, #4294967295
 8007b88:	601a      	str	r2, [r3, #0]
 8007b8a:	4770      	bx	lr
 8007b8c:	2001      	movs	r0, #1
 8007b8e:	700a      	strb	r2, [r1, #0]
 8007b90:	4770      	bx	lr
	...

08007b94 <__swsetup_r>:
 8007b94:	4b32      	ldr	r3, [pc, #200]	; (8007c60 <__swsetup_r+0xcc>)
 8007b96:	b570      	push	{r4, r5, r6, lr}
 8007b98:	681d      	ldr	r5, [r3, #0]
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	b125      	cbz	r5, 8007baa <__swsetup_r+0x16>
 8007ba0:	69ab      	ldr	r3, [r5, #24]
 8007ba2:	b913      	cbnz	r3, 8007baa <__swsetup_r+0x16>
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	f000 f981 	bl	8007eac <__sinit>
 8007baa:	4b2e      	ldr	r3, [pc, #184]	; (8007c64 <__swsetup_r+0xd0>)
 8007bac:	429c      	cmp	r4, r3
 8007bae:	d10f      	bne.n	8007bd0 <__swsetup_r+0x3c>
 8007bb0:	686c      	ldr	r4, [r5, #4]
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bb8:	0719      	lsls	r1, r3, #28
 8007bba:	d42c      	bmi.n	8007c16 <__swsetup_r+0x82>
 8007bbc:	06dd      	lsls	r5, r3, #27
 8007bbe:	d411      	bmi.n	8007be4 <__swsetup_r+0x50>
 8007bc0:	2309      	movs	r3, #9
 8007bc2:	6033      	str	r3, [r6, #0]
 8007bc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bcc:	81a3      	strh	r3, [r4, #12]
 8007bce:	e03e      	b.n	8007c4e <__swsetup_r+0xba>
 8007bd0:	4b25      	ldr	r3, [pc, #148]	; (8007c68 <__swsetup_r+0xd4>)
 8007bd2:	429c      	cmp	r4, r3
 8007bd4:	d101      	bne.n	8007bda <__swsetup_r+0x46>
 8007bd6:	68ac      	ldr	r4, [r5, #8]
 8007bd8:	e7eb      	b.n	8007bb2 <__swsetup_r+0x1e>
 8007bda:	4b24      	ldr	r3, [pc, #144]	; (8007c6c <__swsetup_r+0xd8>)
 8007bdc:	429c      	cmp	r4, r3
 8007bde:	bf08      	it	eq
 8007be0:	68ec      	ldreq	r4, [r5, #12]
 8007be2:	e7e6      	b.n	8007bb2 <__swsetup_r+0x1e>
 8007be4:	0758      	lsls	r0, r3, #29
 8007be6:	d512      	bpl.n	8007c0e <__swsetup_r+0x7a>
 8007be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bea:	b141      	cbz	r1, 8007bfe <__swsetup_r+0x6a>
 8007bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bf0:	4299      	cmp	r1, r3
 8007bf2:	d002      	beq.n	8007bfa <__swsetup_r+0x66>
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	f7ff fb37 	bl	8007268 <_free_r>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	6363      	str	r3, [r4, #52]	; 0x34
 8007bfe:	89a3      	ldrh	r3, [r4, #12]
 8007c00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c04:	81a3      	strh	r3, [r4, #12]
 8007c06:	2300      	movs	r3, #0
 8007c08:	6063      	str	r3, [r4, #4]
 8007c0a:	6923      	ldr	r3, [r4, #16]
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	89a3      	ldrh	r3, [r4, #12]
 8007c10:	f043 0308 	orr.w	r3, r3, #8
 8007c14:	81a3      	strh	r3, [r4, #12]
 8007c16:	6923      	ldr	r3, [r4, #16]
 8007c18:	b94b      	cbnz	r3, 8007c2e <__swsetup_r+0x9a>
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c24:	d003      	beq.n	8007c2e <__swsetup_r+0x9a>
 8007c26:	4621      	mov	r1, r4
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f000 fa05 	bl	8008038 <__smakebuf_r>
 8007c2e:	89a0      	ldrh	r0, [r4, #12]
 8007c30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c34:	f010 0301 	ands.w	r3, r0, #1
 8007c38:	d00a      	beq.n	8007c50 <__swsetup_r+0xbc>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60a3      	str	r3, [r4, #8]
 8007c3e:	6963      	ldr	r3, [r4, #20]
 8007c40:	425b      	negs	r3, r3
 8007c42:	61a3      	str	r3, [r4, #24]
 8007c44:	6923      	ldr	r3, [r4, #16]
 8007c46:	b943      	cbnz	r3, 8007c5a <__swsetup_r+0xc6>
 8007c48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c4c:	d1ba      	bne.n	8007bc4 <__swsetup_r+0x30>
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}
 8007c50:	0781      	lsls	r1, r0, #30
 8007c52:	bf58      	it	pl
 8007c54:	6963      	ldrpl	r3, [r4, #20]
 8007c56:	60a3      	str	r3, [r4, #8]
 8007c58:	e7f4      	b.n	8007c44 <__swsetup_r+0xb0>
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	e7f7      	b.n	8007c4e <__swsetup_r+0xba>
 8007c5e:	bf00      	nop
 8007c60:	2000000c 	.word	0x2000000c
 8007c64:	080086dc 	.word	0x080086dc
 8007c68:	080086fc 	.word	0x080086fc
 8007c6c:	080086bc 	.word	0x080086bc

08007c70 <abort>:
 8007c70:	2006      	movs	r0, #6
 8007c72:	b508      	push	{r3, lr}
 8007c74:	f000 fa50 	bl	8008118 <raise>
 8007c78:	2001      	movs	r0, #1
 8007c7a:	f7fa fd39 	bl	80026f0 <_exit>
	...

08007c80 <__sflush_r>:
 8007c80:	898a      	ldrh	r2, [r1, #12]
 8007c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c84:	4605      	mov	r5, r0
 8007c86:	0710      	lsls	r0, r2, #28
 8007c88:	460c      	mov	r4, r1
 8007c8a:	d457      	bmi.n	8007d3c <__sflush_r+0xbc>
 8007c8c:	684b      	ldr	r3, [r1, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	dc04      	bgt.n	8007c9c <__sflush_r+0x1c>
 8007c92:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	dc01      	bgt.n	8007c9c <__sflush_r+0x1c>
 8007c98:	2000      	movs	r0, #0
 8007c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c9e:	2e00      	cmp	r6, #0
 8007ca0:	d0fa      	beq.n	8007c98 <__sflush_r+0x18>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ca8:	682f      	ldr	r7, [r5, #0]
 8007caa:	602b      	str	r3, [r5, #0]
 8007cac:	d032      	beq.n	8007d14 <__sflush_r+0x94>
 8007cae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007cb0:	89a3      	ldrh	r3, [r4, #12]
 8007cb2:	075a      	lsls	r2, r3, #29
 8007cb4:	d505      	bpl.n	8007cc2 <__sflush_r+0x42>
 8007cb6:	6863      	ldr	r3, [r4, #4]
 8007cb8:	1ac0      	subs	r0, r0, r3
 8007cba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cbc:	b10b      	cbz	r3, 8007cc2 <__sflush_r+0x42>
 8007cbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cc0:	1ac0      	subs	r0, r0, r3
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cc8:	4628      	mov	r0, r5
 8007cca:	6a21      	ldr	r1, [r4, #32]
 8007ccc:	47b0      	blx	r6
 8007cce:	1c43      	adds	r3, r0, #1
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	d106      	bne.n	8007ce2 <__sflush_r+0x62>
 8007cd4:	6829      	ldr	r1, [r5, #0]
 8007cd6:	291d      	cmp	r1, #29
 8007cd8:	d82c      	bhi.n	8007d34 <__sflush_r+0xb4>
 8007cda:	4a29      	ldr	r2, [pc, #164]	; (8007d80 <__sflush_r+0x100>)
 8007cdc:	40ca      	lsrs	r2, r1
 8007cde:	07d6      	lsls	r6, r2, #31
 8007ce0:	d528      	bpl.n	8007d34 <__sflush_r+0xb4>
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	6062      	str	r2, [r4, #4]
 8007ce6:	6922      	ldr	r2, [r4, #16]
 8007ce8:	04d9      	lsls	r1, r3, #19
 8007cea:	6022      	str	r2, [r4, #0]
 8007cec:	d504      	bpl.n	8007cf8 <__sflush_r+0x78>
 8007cee:	1c42      	adds	r2, r0, #1
 8007cf0:	d101      	bne.n	8007cf6 <__sflush_r+0x76>
 8007cf2:	682b      	ldr	r3, [r5, #0]
 8007cf4:	b903      	cbnz	r3, 8007cf8 <__sflush_r+0x78>
 8007cf6:	6560      	str	r0, [r4, #84]	; 0x54
 8007cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cfa:	602f      	str	r7, [r5, #0]
 8007cfc:	2900      	cmp	r1, #0
 8007cfe:	d0cb      	beq.n	8007c98 <__sflush_r+0x18>
 8007d00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d04:	4299      	cmp	r1, r3
 8007d06:	d002      	beq.n	8007d0e <__sflush_r+0x8e>
 8007d08:	4628      	mov	r0, r5
 8007d0a:	f7ff faad 	bl	8007268 <_free_r>
 8007d0e:	2000      	movs	r0, #0
 8007d10:	6360      	str	r0, [r4, #52]	; 0x34
 8007d12:	e7c2      	b.n	8007c9a <__sflush_r+0x1a>
 8007d14:	6a21      	ldr	r1, [r4, #32]
 8007d16:	2301      	movs	r3, #1
 8007d18:	4628      	mov	r0, r5
 8007d1a:	47b0      	blx	r6
 8007d1c:	1c41      	adds	r1, r0, #1
 8007d1e:	d1c7      	bne.n	8007cb0 <__sflush_r+0x30>
 8007d20:	682b      	ldr	r3, [r5, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d0c4      	beq.n	8007cb0 <__sflush_r+0x30>
 8007d26:	2b1d      	cmp	r3, #29
 8007d28:	d001      	beq.n	8007d2e <__sflush_r+0xae>
 8007d2a:	2b16      	cmp	r3, #22
 8007d2c:	d101      	bne.n	8007d32 <__sflush_r+0xb2>
 8007d2e:	602f      	str	r7, [r5, #0]
 8007d30:	e7b2      	b.n	8007c98 <__sflush_r+0x18>
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d38:	81a3      	strh	r3, [r4, #12]
 8007d3a:	e7ae      	b.n	8007c9a <__sflush_r+0x1a>
 8007d3c:	690f      	ldr	r7, [r1, #16]
 8007d3e:	2f00      	cmp	r7, #0
 8007d40:	d0aa      	beq.n	8007c98 <__sflush_r+0x18>
 8007d42:	0793      	lsls	r3, r2, #30
 8007d44:	bf18      	it	ne
 8007d46:	2300      	movne	r3, #0
 8007d48:	680e      	ldr	r6, [r1, #0]
 8007d4a:	bf08      	it	eq
 8007d4c:	694b      	ldreq	r3, [r1, #20]
 8007d4e:	1bf6      	subs	r6, r6, r7
 8007d50:	600f      	str	r7, [r1, #0]
 8007d52:	608b      	str	r3, [r1, #8]
 8007d54:	2e00      	cmp	r6, #0
 8007d56:	dd9f      	ble.n	8007c98 <__sflush_r+0x18>
 8007d58:	4633      	mov	r3, r6
 8007d5a:	463a      	mov	r2, r7
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	6a21      	ldr	r1, [r4, #32]
 8007d60:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007d64:	47e0      	blx	ip
 8007d66:	2800      	cmp	r0, #0
 8007d68:	dc06      	bgt.n	8007d78 <__sflush_r+0xf8>
 8007d6a:	89a3      	ldrh	r3, [r4, #12]
 8007d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d74:	81a3      	strh	r3, [r4, #12]
 8007d76:	e790      	b.n	8007c9a <__sflush_r+0x1a>
 8007d78:	4407      	add	r7, r0
 8007d7a:	1a36      	subs	r6, r6, r0
 8007d7c:	e7ea      	b.n	8007d54 <__sflush_r+0xd4>
 8007d7e:	bf00      	nop
 8007d80:	20400001 	.word	0x20400001

08007d84 <_fflush_r>:
 8007d84:	b538      	push	{r3, r4, r5, lr}
 8007d86:	690b      	ldr	r3, [r1, #16]
 8007d88:	4605      	mov	r5, r0
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	b913      	cbnz	r3, 8007d94 <_fflush_r+0x10>
 8007d8e:	2500      	movs	r5, #0
 8007d90:	4628      	mov	r0, r5
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	b118      	cbz	r0, 8007d9e <_fflush_r+0x1a>
 8007d96:	6983      	ldr	r3, [r0, #24]
 8007d98:	b90b      	cbnz	r3, 8007d9e <_fflush_r+0x1a>
 8007d9a:	f000 f887 	bl	8007eac <__sinit>
 8007d9e:	4b14      	ldr	r3, [pc, #80]	; (8007df0 <_fflush_r+0x6c>)
 8007da0:	429c      	cmp	r4, r3
 8007da2:	d11b      	bne.n	8007ddc <_fflush_r+0x58>
 8007da4:	686c      	ldr	r4, [r5, #4]
 8007da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d0ef      	beq.n	8007d8e <_fflush_r+0xa>
 8007dae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007db0:	07d0      	lsls	r0, r2, #31
 8007db2:	d404      	bmi.n	8007dbe <_fflush_r+0x3a>
 8007db4:	0599      	lsls	r1, r3, #22
 8007db6:	d402      	bmi.n	8007dbe <_fflush_r+0x3a>
 8007db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dba:	f000 f915 	bl	8007fe8 <__retarget_lock_acquire_recursive>
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	f7ff ff5d 	bl	8007c80 <__sflush_r>
 8007dc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dc8:	4605      	mov	r5, r0
 8007dca:	07da      	lsls	r2, r3, #31
 8007dcc:	d4e0      	bmi.n	8007d90 <_fflush_r+0xc>
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	059b      	lsls	r3, r3, #22
 8007dd2:	d4dd      	bmi.n	8007d90 <_fflush_r+0xc>
 8007dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dd6:	f000 f908 	bl	8007fea <__retarget_lock_release_recursive>
 8007dda:	e7d9      	b.n	8007d90 <_fflush_r+0xc>
 8007ddc:	4b05      	ldr	r3, [pc, #20]	; (8007df4 <_fflush_r+0x70>)
 8007dde:	429c      	cmp	r4, r3
 8007de0:	d101      	bne.n	8007de6 <_fflush_r+0x62>
 8007de2:	68ac      	ldr	r4, [r5, #8]
 8007de4:	e7df      	b.n	8007da6 <_fflush_r+0x22>
 8007de6:	4b04      	ldr	r3, [pc, #16]	; (8007df8 <_fflush_r+0x74>)
 8007de8:	429c      	cmp	r4, r3
 8007dea:	bf08      	it	eq
 8007dec:	68ec      	ldreq	r4, [r5, #12]
 8007dee:	e7da      	b.n	8007da6 <_fflush_r+0x22>
 8007df0:	080086dc 	.word	0x080086dc
 8007df4:	080086fc 	.word	0x080086fc
 8007df8:	080086bc 	.word	0x080086bc

08007dfc <std>:
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	b510      	push	{r4, lr}
 8007e00:	4604      	mov	r4, r0
 8007e02:	e9c0 3300 	strd	r3, r3, [r0]
 8007e06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e0a:	6083      	str	r3, [r0, #8]
 8007e0c:	8181      	strh	r1, [r0, #12]
 8007e0e:	6643      	str	r3, [r0, #100]	; 0x64
 8007e10:	81c2      	strh	r2, [r0, #14]
 8007e12:	6183      	str	r3, [r0, #24]
 8007e14:	4619      	mov	r1, r3
 8007e16:	2208      	movs	r2, #8
 8007e18:	305c      	adds	r0, #92	; 0x5c
 8007e1a:	f7fd fb63 	bl	80054e4 <memset>
 8007e1e:	4b05      	ldr	r3, [pc, #20]	; (8007e34 <std+0x38>)
 8007e20:	6224      	str	r4, [r4, #32]
 8007e22:	6263      	str	r3, [r4, #36]	; 0x24
 8007e24:	4b04      	ldr	r3, [pc, #16]	; (8007e38 <std+0x3c>)
 8007e26:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e28:	4b04      	ldr	r3, [pc, #16]	; (8007e3c <std+0x40>)
 8007e2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e2c:	4b04      	ldr	r3, [pc, #16]	; (8007e40 <std+0x44>)
 8007e2e:	6323      	str	r3, [r4, #48]	; 0x30
 8007e30:	bd10      	pop	{r4, pc}
 8007e32:	bf00      	nop
 8007e34:	08008151 	.word	0x08008151
 8007e38:	08008173 	.word	0x08008173
 8007e3c:	080081ab 	.word	0x080081ab
 8007e40:	080081cf 	.word	0x080081cf

08007e44 <_cleanup_r>:
 8007e44:	4901      	ldr	r1, [pc, #4]	; (8007e4c <_cleanup_r+0x8>)
 8007e46:	f000 b8af 	b.w	8007fa8 <_fwalk_reent>
 8007e4a:	bf00      	nop
 8007e4c:	08007d85 	.word	0x08007d85

08007e50 <__sfmoreglue>:
 8007e50:	2268      	movs	r2, #104	; 0x68
 8007e52:	b570      	push	{r4, r5, r6, lr}
 8007e54:	1e4d      	subs	r5, r1, #1
 8007e56:	4355      	muls	r5, r2
 8007e58:	460e      	mov	r6, r1
 8007e5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e5e:	f7ff fa6b 	bl	8007338 <_malloc_r>
 8007e62:	4604      	mov	r4, r0
 8007e64:	b140      	cbz	r0, 8007e78 <__sfmoreglue+0x28>
 8007e66:	2100      	movs	r1, #0
 8007e68:	e9c0 1600 	strd	r1, r6, [r0]
 8007e6c:	300c      	adds	r0, #12
 8007e6e:	60a0      	str	r0, [r4, #8]
 8007e70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e74:	f7fd fb36 	bl	80054e4 <memset>
 8007e78:	4620      	mov	r0, r4
 8007e7a:	bd70      	pop	{r4, r5, r6, pc}

08007e7c <__sfp_lock_acquire>:
 8007e7c:	4801      	ldr	r0, [pc, #4]	; (8007e84 <__sfp_lock_acquire+0x8>)
 8007e7e:	f000 b8b3 	b.w	8007fe8 <__retarget_lock_acquire_recursive>
 8007e82:	bf00      	nop
 8007e84:	200003ed 	.word	0x200003ed

08007e88 <__sfp_lock_release>:
 8007e88:	4801      	ldr	r0, [pc, #4]	; (8007e90 <__sfp_lock_release+0x8>)
 8007e8a:	f000 b8ae 	b.w	8007fea <__retarget_lock_release_recursive>
 8007e8e:	bf00      	nop
 8007e90:	200003ed 	.word	0x200003ed

08007e94 <__sinit_lock_acquire>:
 8007e94:	4801      	ldr	r0, [pc, #4]	; (8007e9c <__sinit_lock_acquire+0x8>)
 8007e96:	f000 b8a7 	b.w	8007fe8 <__retarget_lock_acquire_recursive>
 8007e9a:	bf00      	nop
 8007e9c:	200003ee 	.word	0x200003ee

08007ea0 <__sinit_lock_release>:
 8007ea0:	4801      	ldr	r0, [pc, #4]	; (8007ea8 <__sinit_lock_release+0x8>)
 8007ea2:	f000 b8a2 	b.w	8007fea <__retarget_lock_release_recursive>
 8007ea6:	bf00      	nop
 8007ea8:	200003ee 	.word	0x200003ee

08007eac <__sinit>:
 8007eac:	b510      	push	{r4, lr}
 8007eae:	4604      	mov	r4, r0
 8007eb0:	f7ff fff0 	bl	8007e94 <__sinit_lock_acquire>
 8007eb4:	69a3      	ldr	r3, [r4, #24]
 8007eb6:	b11b      	cbz	r3, 8007ec0 <__sinit+0x14>
 8007eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ebc:	f7ff bff0 	b.w	8007ea0 <__sinit_lock_release>
 8007ec0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ec4:	6523      	str	r3, [r4, #80]	; 0x50
 8007ec6:	4b13      	ldr	r3, [pc, #76]	; (8007f14 <__sinit+0x68>)
 8007ec8:	4a13      	ldr	r2, [pc, #76]	; (8007f18 <__sinit+0x6c>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	62a2      	str	r2, [r4, #40]	; 0x28
 8007ece:	42a3      	cmp	r3, r4
 8007ed0:	bf08      	it	eq
 8007ed2:	2301      	moveq	r3, #1
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	bf08      	it	eq
 8007ed8:	61a3      	streq	r3, [r4, #24]
 8007eda:	f000 f81f 	bl	8007f1c <__sfp>
 8007ede:	6060      	str	r0, [r4, #4]
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f000 f81b 	bl	8007f1c <__sfp>
 8007ee6:	60a0      	str	r0, [r4, #8]
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f000 f817 	bl	8007f1c <__sfp>
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2104      	movs	r1, #4
 8007ef2:	60e0      	str	r0, [r4, #12]
 8007ef4:	6860      	ldr	r0, [r4, #4]
 8007ef6:	f7ff ff81 	bl	8007dfc <std>
 8007efa:	2201      	movs	r2, #1
 8007efc:	2109      	movs	r1, #9
 8007efe:	68a0      	ldr	r0, [r4, #8]
 8007f00:	f7ff ff7c 	bl	8007dfc <std>
 8007f04:	2202      	movs	r2, #2
 8007f06:	2112      	movs	r1, #18
 8007f08:	68e0      	ldr	r0, [r4, #12]
 8007f0a:	f7ff ff77 	bl	8007dfc <std>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	61a3      	str	r3, [r4, #24]
 8007f12:	e7d1      	b.n	8007eb8 <__sinit+0xc>
 8007f14:	08008340 	.word	0x08008340
 8007f18:	08007e45 	.word	0x08007e45

08007f1c <__sfp>:
 8007f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1e:	4607      	mov	r7, r0
 8007f20:	f7ff ffac 	bl	8007e7c <__sfp_lock_acquire>
 8007f24:	4b1e      	ldr	r3, [pc, #120]	; (8007fa0 <__sfp+0x84>)
 8007f26:	681e      	ldr	r6, [r3, #0]
 8007f28:	69b3      	ldr	r3, [r6, #24]
 8007f2a:	b913      	cbnz	r3, 8007f32 <__sfp+0x16>
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	f7ff ffbd 	bl	8007eac <__sinit>
 8007f32:	3648      	adds	r6, #72	; 0x48
 8007f34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	d503      	bpl.n	8007f44 <__sfp+0x28>
 8007f3c:	6833      	ldr	r3, [r6, #0]
 8007f3e:	b30b      	cbz	r3, 8007f84 <__sfp+0x68>
 8007f40:	6836      	ldr	r6, [r6, #0]
 8007f42:	e7f7      	b.n	8007f34 <__sfp+0x18>
 8007f44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f48:	b9d5      	cbnz	r5, 8007f80 <__sfp+0x64>
 8007f4a:	4b16      	ldr	r3, [pc, #88]	; (8007fa4 <__sfp+0x88>)
 8007f4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f50:	60e3      	str	r3, [r4, #12]
 8007f52:	6665      	str	r5, [r4, #100]	; 0x64
 8007f54:	f000 f847 	bl	8007fe6 <__retarget_lock_init_recursive>
 8007f58:	f7ff ff96 	bl	8007e88 <__sfp_lock_release>
 8007f5c:	2208      	movs	r2, #8
 8007f5e:	4629      	mov	r1, r5
 8007f60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f68:	6025      	str	r5, [r4, #0]
 8007f6a:	61a5      	str	r5, [r4, #24]
 8007f6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f70:	f7fd fab8 	bl	80054e4 <memset>
 8007f74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f80:	3468      	adds	r4, #104	; 0x68
 8007f82:	e7d9      	b.n	8007f38 <__sfp+0x1c>
 8007f84:	2104      	movs	r1, #4
 8007f86:	4638      	mov	r0, r7
 8007f88:	f7ff ff62 	bl	8007e50 <__sfmoreglue>
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	6030      	str	r0, [r6, #0]
 8007f90:	2800      	cmp	r0, #0
 8007f92:	d1d5      	bne.n	8007f40 <__sfp+0x24>
 8007f94:	f7ff ff78 	bl	8007e88 <__sfp_lock_release>
 8007f98:	230c      	movs	r3, #12
 8007f9a:	603b      	str	r3, [r7, #0]
 8007f9c:	e7ee      	b.n	8007f7c <__sfp+0x60>
 8007f9e:	bf00      	nop
 8007fa0:	08008340 	.word	0x08008340
 8007fa4:	ffff0001 	.word	0xffff0001

08007fa8 <_fwalk_reent>:
 8007fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fac:	4606      	mov	r6, r0
 8007fae:	4688      	mov	r8, r1
 8007fb0:	2700      	movs	r7, #0
 8007fb2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fba:	f1b9 0901 	subs.w	r9, r9, #1
 8007fbe:	d505      	bpl.n	8007fcc <_fwalk_reent+0x24>
 8007fc0:	6824      	ldr	r4, [r4, #0]
 8007fc2:	2c00      	cmp	r4, #0
 8007fc4:	d1f7      	bne.n	8007fb6 <_fwalk_reent+0xe>
 8007fc6:	4638      	mov	r0, r7
 8007fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fcc:	89ab      	ldrh	r3, [r5, #12]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d907      	bls.n	8007fe2 <_fwalk_reent+0x3a>
 8007fd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	d003      	beq.n	8007fe2 <_fwalk_reent+0x3a>
 8007fda:	4629      	mov	r1, r5
 8007fdc:	4630      	mov	r0, r6
 8007fde:	47c0      	blx	r8
 8007fe0:	4307      	orrs	r7, r0
 8007fe2:	3568      	adds	r5, #104	; 0x68
 8007fe4:	e7e9      	b.n	8007fba <_fwalk_reent+0x12>

08007fe6 <__retarget_lock_init_recursive>:
 8007fe6:	4770      	bx	lr

08007fe8 <__retarget_lock_acquire_recursive>:
 8007fe8:	4770      	bx	lr

08007fea <__retarget_lock_release_recursive>:
 8007fea:	4770      	bx	lr

08007fec <__swhatbuf_r>:
 8007fec:	b570      	push	{r4, r5, r6, lr}
 8007fee:	460e      	mov	r6, r1
 8007ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff4:	4614      	mov	r4, r2
 8007ff6:	2900      	cmp	r1, #0
 8007ff8:	461d      	mov	r5, r3
 8007ffa:	b096      	sub	sp, #88	; 0x58
 8007ffc:	da08      	bge.n	8008010 <__swhatbuf_r+0x24>
 8007ffe:	2200      	movs	r2, #0
 8008000:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008004:	602a      	str	r2, [r5, #0]
 8008006:	061a      	lsls	r2, r3, #24
 8008008:	d410      	bmi.n	800802c <__swhatbuf_r+0x40>
 800800a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800800e:	e00e      	b.n	800802e <__swhatbuf_r+0x42>
 8008010:	466a      	mov	r2, sp
 8008012:	f000 f903 	bl	800821c <_fstat_r>
 8008016:	2800      	cmp	r0, #0
 8008018:	dbf1      	blt.n	8007ffe <__swhatbuf_r+0x12>
 800801a:	9a01      	ldr	r2, [sp, #4]
 800801c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008020:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008024:	425a      	negs	r2, r3
 8008026:	415a      	adcs	r2, r3
 8008028:	602a      	str	r2, [r5, #0]
 800802a:	e7ee      	b.n	800800a <__swhatbuf_r+0x1e>
 800802c:	2340      	movs	r3, #64	; 0x40
 800802e:	2000      	movs	r0, #0
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	b016      	add	sp, #88	; 0x58
 8008034:	bd70      	pop	{r4, r5, r6, pc}
	...

08008038 <__smakebuf_r>:
 8008038:	898b      	ldrh	r3, [r1, #12]
 800803a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800803c:	079d      	lsls	r5, r3, #30
 800803e:	4606      	mov	r6, r0
 8008040:	460c      	mov	r4, r1
 8008042:	d507      	bpl.n	8008054 <__smakebuf_r+0x1c>
 8008044:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008048:	6023      	str	r3, [r4, #0]
 800804a:	6123      	str	r3, [r4, #16]
 800804c:	2301      	movs	r3, #1
 800804e:	6163      	str	r3, [r4, #20]
 8008050:	b002      	add	sp, #8
 8008052:	bd70      	pop	{r4, r5, r6, pc}
 8008054:	466a      	mov	r2, sp
 8008056:	ab01      	add	r3, sp, #4
 8008058:	f7ff ffc8 	bl	8007fec <__swhatbuf_r>
 800805c:	9900      	ldr	r1, [sp, #0]
 800805e:	4605      	mov	r5, r0
 8008060:	4630      	mov	r0, r6
 8008062:	f7ff f969 	bl	8007338 <_malloc_r>
 8008066:	b948      	cbnz	r0, 800807c <__smakebuf_r+0x44>
 8008068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800806c:	059a      	lsls	r2, r3, #22
 800806e:	d4ef      	bmi.n	8008050 <__smakebuf_r+0x18>
 8008070:	f023 0303 	bic.w	r3, r3, #3
 8008074:	f043 0302 	orr.w	r3, r3, #2
 8008078:	81a3      	strh	r3, [r4, #12]
 800807a:	e7e3      	b.n	8008044 <__smakebuf_r+0xc>
 800807c:	4b0d      	ldr	r3, [pc, #52]	; (80080b4 <__smakebuf_r+0x7c>)
 800807e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008080:	89a3      	ldrh	r3, [r4, #12]
 8008082:	6020      	str	r0, [r4, #0]
 8008084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008088:	81a3      	strh	r3, [r4, #12]
 800808a:	9b00      	ldr	r3, [sp, #0]
 800808c:	6120      	str	r0, [r4, #16]
 800808e:	6163      	str	r3, [r4, #20]
 8008090:	9b01      	ldr	r3, [sp, #4]
 8008092:	b15b      	cbz	r3, 80080ac <__smakebuf_r+0x74>
 8008094:	4630      	mov	r0, r6
 8008096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800809a:	f000 f8d1 	bl	8008240 <_isatty_r>
 800809e:	b128      	cbz	r0, 80080ac <__smakebuf_r+0x74>
 80080a0:	89a3      	ldrh	r3, [r4, #12]
 80080a2:	f023 0303 	bic.w	r3, r3, #3
 80080a6:	f043 0301 	orr.w	r3, r3, #1
 80080aa:	81a3      	strh	r3, [r4, #12]
 80080ac:	89a0      	ldrh	r0, [r4, #12]
 80080ae:	4305      	orrs	r5, r0
 80080b0:	81a5      	strh	r5, [r4, #12]
 80080b2:	e7cd      	b.n	8008050 <__smakebuf_r+0x18>
 80080b4:	08007e45 	.word	0x08007e45

080080b8 <_malloc_usable_size_r>:
 80080b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080bc:	1f18      	subs	r0, r3, #4
 80080be:	2b00      	cmp	r3, #0
 80080c0:	bfbc      	itt	lt
 80080c2:	580b      	ldrlt	r3, [r1, r0]
 80080c4:	18c0      	addlt	r0, r0, r3
 80080c6:	4770      	bx	lr

080080c8 <_raise_r>:
 80080c8:	291f      	cmp	r1, #31
 80080ca:	b538      	push	{r3, r4, r5, lr}
 80080cc:	4604      	mov	r4, r0
 80080ce:	460d      	mov	r5, r1
 80080d0:	d904      	bls.n	80080dc <_raise_r+0x14>
 80080d2:	2316      	movs	r3, #22
 80080d4:	6003      	str	r3, [r0, #0]
 80080d6:	f04f 30ff 	mov.w	r0, #4294967295
 80080da:	bd38      	pop	{r3, r4, r5, pc}
 80080dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80080de:	b112      	cbz	r2, 80080e6 <_raise_r+0x1e>
 80080e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080e4:	b94b      	cbnz	r3, 80080fa <_raise_r+0x32>
 80080e6:	4620      	mov	r0, r4
 80080e8:	f000 f830 	bl	800814c <_getpid_r>
 80080ec:	462a      	mov	r2, r5
 80080ee:	4601      	mov	r1, r0
 80080f0:	4620      	mov	r0, r4
 80080f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080f6:	f000 b817 	b.w	8008128 <_kill_r>
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d00a      	beq.n	8008114 <_raise_r+0x4c>
 80080fe:	1c59      	adds	r1, r3, #1
 8008100:	d103      	bne.n	800810a <_raise_r+0x42>
 8008102:	2316      	movs	r3, #22
 8008104:	6003      	str	r3, [r0, #0]
 8008106:	2001      	movs	r0, #1
 8008108:	e7e7      	b.n	80080da <_raise_r+0x12>
 800810a:	2400      	movs	r4, #0
 800810c:	4628      	mov	r0, r5
 800810e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008112:	4798      	blx	r3
 8008114:	2000      	movs	r0, #0
 8008116:	e7e0      	b.n	80080da <_raise_r+0x12>

08008118 <raise>:
 8008118:	4b02      	ldr	r3, [pc, #8]	; (8008124 <raise+0xc>)
 800811a:	4601      	mov	r1, r0
 800811c:	6818      	ldr	r0, [r3, #0]
 800811e:	f7ff bfd3 	b.w	80080c8 <_raise_r>
 8008122:	bf00      	nop
 8008124:	2000000c 	.word	0x2000000c

08008128 <_kill_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	2300      	movs	r3, #0
 800812c:	4d06      	ldr	r5, [pc, #24]	; (8008148 <_kill_r+0x20>)
 800812e:	4604      	mov	r4, r0
 8008130:	4608      	mov	r0, r1
 8008132:	4611      	mov	r1, r2
 8008134:	602b      	str	r3, [r5, #0]
 8008136:	f7fa facb 	bl	80026d0 <_kill>
 800813a:	1c43      	adds	r3, r0, #1
 800813c:	d102      	bne.n	8008144 <_kill_r+0x1c>
 800813e:	682b      	ldr	r3, [r5, #0]
 8008140:	b103      	cbz	r3, 8008144 <_kill_r+0x1c>
 8008142:	6023      	str	r3, [r4, #0]
 8008144:	bd38      	pop	{r3, r4, r5, pc}
 8008146:	bf00      	nop
 8008148:	200003e8 	.word	0x200003e8

0800814c <_getpid_r>:
 800814c:	f7fa bab9 	b.w	80026c2 <_getpid>

08008150 <__sread>:
 8008150:	b510      	push	{r4, lr}
 8008152:	460c      	mov	r4, r1
 8008154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008158:	f000 f894 	bl	8008284 <_read_r>
 800815c:	2800      	cmp	r0, #0
 800815e:	bfab      	itete	ge
 8008160:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008162:	89a3      	ldrhlt	r3, [r4, #12]
 8008164:	181b      	addge	r3, r3, r0
 8008166:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800816a:	bfac      	ite	ge
 800816c:	6563      	strge	r3, [r4, #84]	; 0x54
 800816e:	81a3      	strhlt	r3, [r4, #12]
 8008170:	bd10      	pop	{r4, pc}

08008172 <__swrite>:
 8008172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008176:	461f      	mov	r7, r3
 8008178:	898b      	ldrh	r3, [r1, #12]
 800817a:	4605      	mov	r5, r0
 800817c:	05db      	lsls	r3, r3, #23
 800817e:	460c      	mov	r4, r1
 8008180:	4616      	mov	r6, r2
 8008182:	d505      	bpl.n	8008190 <__swrite+0x1e>
 8008184:	2302      	movs	r3, #2
 8008186:	2200      	movs	r2, #0
 8008188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800818c:	f000 f868 	bl	8008260 <_lseek_r>
 8008190:	89a3      	ldrh	r3, [r4, #12]
 8008192:	4632      	mov	r2, r6
 8008194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008198:	81a3      	strh	r3, [r4, #12]
 800819a:	4628      	mov	r0, r5
 800819c:	463b      	mov	r3, r7
 800819e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081a6:	f000 b817 	b.w	80081d8 <_write_r>

080081aa <__sseek>:
 80081aa:	b510      	push	{r4, lr}
 80081ac:	460c      	mov	r4, r1
 80081ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b2:	f000 f855 	bl	8008260 <_lseek_r>
 80081b6:	1c43      	adds	r3, r0, #1
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	bf15      	itete	ne
 80081bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80081be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80081c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081c6:	81a3      	strheq	r3, [r4, #12]
 80081c8:	bf18      	it	ne
 80081ca:	81a3      	strhne	r3, [r4, #12]
 80081cc:	bd10      	pop	{r4, pc}

080081ce <__sclose>:
 80081ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081d2:	f000 b813 	b.w	80081fc <_close_r>
	...

080081d8 <_write_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4604      	mov	r4, r0
 80081dc:	4608      	mov	r0, r1
 80081de:	4611      	mov	r1, r2
 80081e0:	2200      	movs	r2, #0
 80081e2:	4d05      	ldr	r5, [pc, #20]	; (80081f8 <_write_r+0x20>)
 80081e4:	602a      	str	r2, [r5, #0]
 80081e6:	461a      	mov	r2, r3
 80081e8:	f7fa faa9 	bl	800273e <_write>
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d102      	bne.n	80081f6 <_write_r+0x1e>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	b103      	cbz	r3, 80081f6 <_write_r+0x1e>
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	bd38      	pop	{r3, r4, r5, pc}
 80081f8:	200003e8 	.word	0x200003e8

080081fc <_close_r>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	2300      	movs	r3, #0
 8008200:	4d05      	ldr	r5, [pc, #20]	; (8008218 <_close_r+0x1c>)
 8008202:	4604      	mov	r4, r0
 8008204:	4608      	mov	r0, r1
 8008206:	602b      	str	r3, [r5, #0]
 8008208:	f7fa fab5 	bl	8002776 <_close>
 800820c:	1c43      	adds	r3, r0, #1
 800820e:	d102      	bne.n	8008216 <_close_r+0x1a>
 8008210:	682b      	ldr	r3, [r5, #0]
 8008212:	b103      	cbz	r3, 8008216 <_close_r+0x1a>
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	bd38      	pop	{r3, r4, r5, pc}
 8008218:	200003e8 	.word	0x200003e8

0800821c <_fstat_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	2300      	movs	r3, #0
 8008220:	4d06      	ldr	r5, [pc, #24]	; (800823c <_fstat_r+0x20>)
 8008222:	4604      	mov	r4, r0
 8008224:	4608      	mov	r0, r1
 8008226:	4611      	mov	r1, r2
 8008228:	602b      	str	r3, [r5, #0]
 800822a:	f7fa faaf 	bl	800278c <_fstat>
 800822e:	1c43      	adds	r3, r0, #1
 8008230:	d102      	bne.n	8008238 <_fstat_r+0x1c>
 8008232:	682b      	ldr	r3, [r5, #0]
 8008234:	b103      	cbz	r3, 8008238 <_fstat_r+0x1c>
 8008236:	6023      	str	r3, [r4, #0]
 8008238:	bd38      	pop	{r3, r4, r5, pc}
 800823a:	bf00      	nop
 800823c:	200003e8 	.word	0x200003e8

08008240 <_isatty_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	2300      	movs	r3, #0
 8008244:	4d05      	ldr	r5, [pc, #20]	; (800825c <_isatty_r+0x1c>)
 8008246:	4604      	mov	r4, r0
 8008248:	4608      	mov	r0, r1
 800824a:	602b      	str	r3, [r5, #0]
 800824c:	f7fa faad 	bl	80027aa <_isatty>
 8008250:	1c43      	adds	r3, r0, #1
 8008252:	d102      	bne.n	800825a <_isatty_r+0x1a>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	b103      	cbz	r3, 800825a <_isatty_r+0x1a>
 8008258:	6023      	str	r3, [r4, #0]
 800825a:	bd38      	pop	{r3, r4, r5, pc}
 800825c:	200003e8 	.word	0x200003e8

08008260 <_lseek_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4604      	mov	r4, r0
 8008264:	4608      	mov	r0, r1
 8008266:	4611      	mov	r1, r2
 8008268:	2200      	movs	r2, #0
 800826a:	4d05      	ldr	r5, [pc, #20]	; (8008280 <_lseek_r+0x20>)
 800826c:	602a      	str	r2, [r5, #0]
 800826e:	461a      	mov	r2, r3
 8008270:	f7fa faa5 	bl	80027be <_lseek>
 8008274:	1c43      	adds	r3, r0, #1
 8008276:	d102      	bne.n	800827e <_lseek_r+0x1e>
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	b103      	cbz	r3, 800827e <_lseek_r+0x1e>
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	200003e8 	.word	0x200003e8

08008284 <_read_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4604      	mov	r4, r0
 8008288:	4608      	mov	r0, r1
 800828a:	4611      	mov	r1, r2
 800828c:	2200      	movs	r2, #0
 800828e:	4d05      	ldr	r5, [pc, #20]	; (80082a4 <_read_r+0x20>)
 8008290:	602a      	str	r2, [r5, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	f7fa fa36 	bl	8002704 <_read>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d102      	bne.n	80082a2 <_read_r+0x1e>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b103      	cbz	r3, 80082a2 <_read_r+0x1e>
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	bd38      	pop	{r3, r4, r5, pc}
 80082a4:	200003e8 	.word	0x200003e8

080082a8 <_init>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	bf00      	nop
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr

080082b4 <_fini>:
 80082b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b6:	bf00      	nop
 80082b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ba:	bc08      	pop	{r3}
 80082bc:	469e      	mov	lr, r3
 80082be:	4770      	bx	lr
