
bmp280_zigbee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bb0  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08008cf0  08008cf0  00018cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800914c  0800914c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800914c  0800914c  0001914c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009154  08009154  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009154  08009154  00019154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009158  08009158  00019158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800915c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  200001e0  0800933c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  0800933c  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bba9  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002353  00000000  00000000  0002bdb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0002e108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a80  00000000  00000000  0002ec68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017350  00000000  00000000  0002f6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9ed  00000000  00000000  00046a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088df7  00000000  00000000  00055425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de21c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fd4  00000000  00000000  000de26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	08008cd8 	.word	0x08008cd8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	08008cd8 	.word	0x08008cd8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	; 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d26:	2afd      	cmp	r2, #253	; 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	; 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	; 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__aeabi_ldivmod>:
 8000f74:	b97b      	cbnz	r3, 8000f96 <__aeabi_ldivmod+0x22>
 8000f76:	b972      	cbnz	r2, 8000f96 <__aeabi_ldivmod+0x22>
 8000f78:	2900      	cmp	r1, #0
 8000f7a:	bfbe      	ittt	lt
 8000f7c:	2000      	movlt	r0, #0
 8000f7e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000f82:	e006      	blt.n	8000f92 <__aeabi_ldivmod+0x1e>
 8000f84:	bf08      	it	eq
 8000f86:	2800      	cmpeq	r0, #0
 8000f88:	bf1c      	itt	ne
 8000f8a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000f8e:	f04f 30ff 	movne.w	r0, #4294967295
 8000f92:	f000 b9c1 	b.w	8001318 <__aeabi_idiv0>
 8000f96:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f9a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f9e:	2900      	cmp	r1, #0
 8000fa0:	db09      	blt.n	8000fb6 <__aeabi_ldivmod+0x42>
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db1a      	blt.n	8000fdc <__aeabi_ldivmod+0x68>
 8000fa6:	f000 f84d 	bl	8001044 <__udivmoddi4>
 8000faa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb2:	b004      	add	sp, #16
 8000fb4:	4770      	bx	lr
 8000fb6:	4240      	negs	r0, r0
 8000fb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db1b      	blt.n	8000ff8 <__aeabi_ldivmod+0x84>
 8000fc0:	f000 f840 	bl	8001044 <__udivmoddi4>
 8000fc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fcc:	b004      	add	sp, #16
 8000fce:	4240      	negs	r0, r0
 8000fd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fd4:	4252      	negs	r2, r2
 8000fd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fda:	4770      	bx	lr
 8000fdc:	4252      	negs	r2, r2
 8000fde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fe2:	f000 f82f 	bl	8001044 <__udivmoddi4>
 8000fe6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fee:	b004      	add	sp, #16
 8000ff0:	4240      	negs	r0, r0
 8000ff2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ff6:	4770      	bx	lr
 8000ff8:	4252      	negs	r2, r2
 8000ffa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ffe:	f000 f821 	bl	8001044 <__udivmoddi4>
 8001002:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001006:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800100a:	b004      	add	sp, #16
 800100c:	4252      	negs	r2, r2
 800100e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001012:	4770      	bx	lr

08001014 <__aeabi_uldivmod>:
 8001014:	b953      	cbnz	r3, 800102c <__aeabi_uldivmod+0x18>
 8001016:	b94a      	cbnz	r2, 800102c <__aeabi_uldivmod+0x18>
 8001018:	2900      	cmp	r1, #0
 800101a:	bf08      	it	eq
 800101c:	2800      	cmpeq	r0, #0
 800101e:	bf1c      	itt	ne
 8001020:	f04f 31ff 	movne.w	r1, #4294967295
 8001024:	f04f 30ff 	movne.w	r0, #4294967295
 8001028:	f000 b976 	b.w	8001318 <__aeabi_idiv0>
 800102c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001030:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001034:	f000 f806 	bl	8001044 <__udivmoddi4>
 8001038:	f8dd e004 	ldr.w	lr, [sp, #4]
 800103c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001040:	b004      	add	sp, #16
 8001042:	4770      	bx	lr

08001044 <__udivmoddi4>:
 8001044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001048:	9e08      	ldr	r6, [sp, #32]
 800104a:	460d      	mov	r5, r1
 800104c:	4604      	mov	r4, r0
 800104e:	4688      	mov	r8, r1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d14d      	bne.n	80010f0 <__udivmoddi4+0xac>
 8001054:	428a      	cmp	r2, r1
 8001056:	4694      	mov	ip, r2
 8001058:	d968      	bls.n	800112c <__udivmoddi4+0xe8>
 800105a:	fab2 f282 	clz	r2, r2
 800105e:	b152      	cbz	r2, 8001076 <__udivmoddi4+0x32>
 8001060:	fa01 f302 	lsl.w	r3, r1, r2
 8001064:	f1c2 0120 	rsb	r1, r2, #32
 8001068:	fa20 f101 	lsr.w	r1, r0, r1
 800106c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001070:	ea41 0803 	orr.w	r8, r1, r3
 8001074:	4094      	lsls	r4, r2
 8001076:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800107a:	fbb8 f7f1 	udiv	r7, r8, r1
 800107e:	fa1f fe8c 	uxth.w	lr, ip
 8001082:	fb01 8817 	mls	r8, r1, r7, r8
 8001086:	fb07 f00e 	mul.w	r0, r7, lr
 800108a:	0c23      	lsrs	r3, r4, #16
 800108c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001090:	4298      	cmp	r0, r3
 8001092:	d90a      	bls.n	80010aa <__udivmoddi4+0x66>
 8001094:	eb1c 0303 	adds.w	r3, ip, r3
 8001098:	f107 35ff 	add.w	r5, r7, #4294967295
 800109c:	f080 811e 	bcs.w	80012dc <__udivmoddi4+0x298>
 80010a0:	4298      	cmp	r0, r3
 80010a2:	f240 811b 	bls.w	80012dc <__udivmoddi4+0x298>
 80010a6:	3f02      	subs	r7, #2
 80010a8:	4463      	add	r3, ip
 80010aa:	1a1b      	subs	r3, r3, r0
 80010ac:	fbb3 f0f1 	udiv	r0, r3, r1
 80010b0:	fb01 3310 	mls	r3, r1, r0, r3
 80010b4:	fb00 fe0e 	mul.w	lr, r0, lr
 80010b8:	b2a4      	uxth	r4, r4
 80010ba:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010be:	45a6      	cmp	lr, r4
 80010c0:	d90a      	bls.n	80010d8 <__udivmoddi4+0x94>
 80010c2:	eb1c 0404 	adds.w	r4, ip, r4
 80010c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80010ca:	f080 8109 	bcs.w	80012e0 <__udivmoddi4+0x29c>
 80010ce:	45a6      	cmp	lr, r4
 80010d0:	f240 8106 	bls.w	80012e0 <__udivmoddi4+0x29c>
 80010d4:	4464      	add	r4, ip
 80010d6:	3802      	subs	r0, #2
 80010d8:	2100      	movs	r1, #0
 80010da:	eba4 040e 	sub.w	r4, r4, lr
 80010de:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80010e2:	b11e      	cbz	r6, 80010ec <__udivmoddi4+0xa8>
 80010e4:	2300      	movs	r3, #0
 80010e6:	40d4      	lsrs	r4, r2
 80010e8:	e9c6 4300 	strd	r4, r3, [r6]
 80010ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010f0:	428b      	cmp	r3, r1
 80010f2:	d908      	bls.n	8001106 <__udivmoddi4+0xc2>
 80010f4:	2e00      	cmp	r6, #0
 80010f6:	f000 80ee 	beq.w	80012d6 <__udivmoddi4+0x292>
 80010fa:	2100      	movs	r1, #0
 80010fc:	e9c6 0500 	strd	r0, r5, [r6]
 8001100:	4608      	mov	r0, r1
 8001102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001106:	fab3 f183 	clz	r1, r3
 800110a:	2900      	cmp	r1, #0
 800110c:	d14a      	bne.n	80011a4 <__udivmoddi4+0x160>
 800110e:	42ab      	cmp	r3, r5
 8001110:	d302      	bcc.n	8001118 <__udivmoddi4+0xd4>
 8001112:	4282      	cmp	r2, r0
 8001114:	f200 80fc 	bhi.w	8001310 <__udivmoddi4+0x2cc>
 8001118:	1a84      	subs	r4, r0, r2
 800111a:	eb65 0303 	sbc.w	r3, r5, r3
 800111e:	2001      	movs	r0, #1
 8001120:	4698      	mov	r8, r3
 8001122:	2e00      	cmp	r6, #0
 8001124:	d0e2      	beq.n	80010ec <__udivmoddi4+0xa8>
 8001126:	e9c6 4800 	strd	r4, r8, [r6]
 800112a:	e7df      	b.n	80010ec <__udivmoddi4+0xa8>
 800112c:	b902      	cbnz	r2, 8001130 <__udivmoddi4+0xec>
 800112e:	deff      	udf	#255	; 0xff
 8001130:	fab2 f282 	clz	r2, r2
 8001134:	2a00      	cmp	r2, #0
 8001136:	f040 8091 	bne.w	800125c <__udivmoddi4+0x218>
 800113a:	eba1 000c 	sub.w	r0, r1, ip
 800113e:	2101      	movs	r1, #1
 8001140:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001144:	fa1f fe8c 	uxth.w	lr, ip
 8001148:	fbb0 f3f7 	udiv	r3, r0, r7
 800114c:	fb07 0013 	mls	r0, r7, r3, r0
 8001150:	0c25      	lsrs	r5, r4, #16
 8001152:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001156:	fb0e f003 	mul.w	r0, lr, r3
 800115a:	42a8      	cmp	r0, r5
 800115c:	d908      	bls.n	8001170 <__udivmoddi4+0x12c>
 800115e:	eb1c 0505 	adds.w	r5, ip, r5
 8001162:	f103 38ff 	add.w	r8, r3, #4294967295
 8001166:	d202      	bcs.n	800116e <__udivmoddi4+0x12a>
 8001168:	42a8      	cmp	r0, r5
 800116a:	f200 80ce 	bhi.w	800130a <__udivmoddi4+0x2c6>
 800116e:	4643      	mov	r3, r8
 8001170:	1a2d      	subs	r5, r5, r0
 8001172:	fbb5 f0f7 	udiv	r0, r5, r7
 8001176:	fb07 5510 	mls	r5, r7, r0, r5
 800117a:	fb0e fe00 	mul.w	lr, lr, r0
 800117e:	b2a4      	uxth	r4, r4
 8001180:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001184:	45a6      	cmp	lr, r4
 8001186:	d908      	bls.n	800119a <__udivmoddi4+0x156>
 8001188:	eb1c 0404 	adds.w	r4, ip, r4
 800118c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001190:	d202      	bcs.n	8001198 <__udivmoddi4+0x154>
 8001192:	45a6      	cmp	lr, r4
 8001194:	f200 80b6 	bhi.w	8001304 <__udivmoddi4+0x2c0>
 8001198:	4628      	mov	r0, r5
 800119a:	eba4 040e 	sub.w	r4, r4, lr
 800119e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80011a2:	e79e      	b.n	80010e2 <__udivmoddi4+0x9e>
 80011a4:	f1c1 0720 	rsb	r7, r1, #32
 80011a8:	408b      	lsls	r3, r1
 80011aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80011ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80011b2:	fa25 fa07 	lsr.w	sl, r5, r7
 80011b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80011ba:	fbba f8f9 	udiv	r8, sl, r9
 80011be:	fa20 f307 	lsr.w	r3, r0, r7
 80011c2:	fb09 aa18 	mls	sl, r9, r8, sl
 80011c6:	408d      	lsls	r5, r1
 80011c8:	fa1f fe8c 	uxth.w	lr, ip
 80011cc:	431d      	orrs	r5, r3
 80011ce:	fa00 f301 	lsl.w	r3, r0, r1
 80011d2:	fb08 f00e 	mul.w	r0, r8, lr
 80011d6:	0c2c      	lsrs	r4, r5, #16
 80011d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80011dc:	42a0      	cmp	r0, r4
 80011de:	fa02 f201 	lsl.w	r2, r2, r1
 80011e2:	d90b      	bls.n	80011fc <__udivmoddi4+0x1b8>
 80011e4:	eb1c 0404 	adds.w	r4, ip, r4
 80011e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80011ec:	f080 8088 	bcs.w	8001300 <__udivmoddi4+0x2bc>
 80011f0:	42a0      	cmp	r0, r4
 80011f2:	f240 8085 	bls.w	8001300 <__udivmoddi4+0x2bc>
 80011f6:	f1a8 0802 	sub.w	r8, r8, #2
 80011fa:	4464      	add	r4, ip
 80011fc:	1a24      	subs	r4, r4, r0
 80011fe:	fbb4 f0f9 	udiv	r0, r4, r9
 8001202:	fb09 4410 	mls	r4, r9, r0, r4
 8001206:	fb00 fe0e 	mul.w	lr, r0, lr
 800120a:	b2ad      	uxth	r5, r5
 800120c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001210:	45a6      	cmp	lr, r4
 8001212:	d908      	bls.n	8001226 <__udivmoddi4+0x1e2>
 8001214:	eb1c 0404 	adds.w	r4, ip, r4
 8001218:	f100 35ff 	add.w	r5, r0, #4294967295
 800121c:	d26c      	bcs.n	80012f8 <__udivmoddi4+0x2b4>
 800121e:	45a6      	cmp	lr, r4
 8001220:	d96a      	bls.n	80012f8 <__udivmoddi4+0x2b4>
 8001222:	3802      	subs	r0, #2
 8001224:	4464      	add	r4, ip
 8001226:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800122a:	fba0 9502 	umull	r9, r5, r0, r2
 800122e:	eba4 040e 	sub.w	r4, r4, lr
 8001232:	42ac      	cmp	r4, r5
 8001234:	46c8      	mov	r8, r9
 8001236:	46ae      	mov	lr, r5
 8001238:	d356      	bcc.n	80012e8 <__udivmoddi4+0x2a4>
 800123a:	d053      	beq.n	80012e4 <__udivmoddi4+0x2a0>
 800123c:	2e00      	cmp	r6, #0
 800123e:	d069      	beq.n	8001314 <__udivmoddi4+0x2d0>
 8001240:	ebb3 0208 	subs.w	r2, r3, r8
 8001244:	eb64 040e 	sbc.w	r4, r4, lr
 8001248:	fa22 f301 	lsr.w	r3, r2, r1
 800124c:	fa04 f707 	lsl.w	r7, r4, r7
 8001250:	431f      	orrs	r7, r3
 8001252:	40cc      	lsrs	r4, r1
 8001254:	e9c6 7400 	strd	r7, r4, [r6]
 8001258:	2100      	movs	r1, #0
 800125a:	e747      	b.n	80010ec <__udivmoddi4+0xa8>
 800125c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001260:	f1c2 0120 	rsb	r1, r2, #32
 8001264:	fa25 f301 	lsr.w	r3, r5, r1
 8001268:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800126c:	fa20 f101 	lsr.w	r1, r0, r1
 8001270:	4095      	lsls	r5, r2
 8001272:	430d      	orrs	r5, r1
 8001274:	fbb3 f1f7 	udiv	r1, r3, r7
 8001278:	fb07 3311 	mls	r3, r7, r1, r3
 800127c:	fa1f fe8c 	uxth.w	lr, ip
 8001280:	0c28      	lsrs	r0, r5, #16
 8001282:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001286:	fb01 f30e 	mul.w	r3, r1, lr
 800128a:	4283      	cmp	r3, r0
 800128c:	fa04 f402 	lsl.w	r4, r4, r2
 8001290:	d908      	bls.n	80012a4 <__udivmoddi4+0x260>
 8001292:	eb1c 0000 	adds.w	r0, ip, r0
 8001296:	f101 38ff 	add.w	r8, r1, #4294967295
 800129a:	d22f      	bcs.n	80012fc <__udivmoddi4+0x2b8>
 800129c:	4283      	cmp	r3, r0
 800129e:	d92d      	bls.n	80012fc <__udivmoddi4+0x2b8>
 80012a0:	3902      	subs	r1, #2
 80012a2:	4460      	add	r0, ip
 80012a4:	1ac0      	subs	r0, r0, r3
 80012a6:	fbb0 f3f7 	udiv	r3, r0, r7
 80012aa:	fb07 0013 	mls	r0, r7, r3, r0
 80012ae:	b2ad      	uxth	r5, r5
 80012b0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80012b4:	fb03 f00e 	mul.w	r0, r3, lr
 80012b8:	42a8      	cmp	r0, r5
 80012ba:	d908      	bls.n	80012ce <__udivmoddi4+0x28a>
 80012bc:	eb1c 0505 	adds.w	r5, ip, r5
 80012c0:	f103 38ff 	add.w	r8, r3, #4294967295
 80012c4:	d216      	bcs.n	80012f4 <__udivmoddi4+0x2b0>
 80012c6:	42a8      	cmp	r0, r5
 80012c8:	d914      	bls.n	80012f4 <__udivmoddi4+0x2b0>
 80012ca:	3b02      	subs	r3, #2
 80012cc:	4465      	add	r5, ip
 80012ce:	1a28      	subs	r0, r5, r0
 80012d0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80012d4:	e738      	b.n	8001148 <__udivmoddi4+0x104>
 80012d6:	4631      	mov	r1, r6
 80012d8:	4630      	mov	r0, r6
 80012da:	e707      	b.n	80010ec <__udivmoddi4+0xa8>
 80012dc:	462f      	mov	r7, r5
 80012de:	e6e4      	b.n	80010aa <__udivmoddi4+0x66>
 80012e0:	4618      	mov	r0, r3
 80012e2:	e6f9      	b.n	80010d8 <__udivmoddi4+0x94>
 80012e4:	454b      	cmp	r3, r9
 80012e6:	d2a9      	bcs.n	800123c <__udivmoddi4+0x1f8>
 80012e8:	ebb9 0802 	subs.w	r8, r9, r2
 80012ec:	eb65 0e0c 	sbc.w	lr, r5, ip
 80012f0:	3801      	subs	r0, #1
 80012f2:	e7a3      	b.n	800123c <__udivmoddi4+0x1f8>
 80012f4:	4643      	mov	r3, r8
 80012f6:	e7ea      	b.n	80012ce <__udivmoddi4+0x28a>
 80012f8:	4628      	mov	r0, r5
 80012fa:	e794      	b.n	8001226 <__udivmoddi4+0x1e2>
 80012fc:	4641      	mov	r1, r8
 80012fe:	e7d1      	b.n	80012a4 <__udivmoddi4+0x260>
 8001300:	46d0      	mov	r8, sl
 8001302:	e77b      	b.n	80011fc <__udivmoddi4+0x1b8>
 8001304:	4464      	add	r4, ip
 8001306:	3802      	subs	r0, #2
 8001308:	e747      	b.n	800119a <__udivmoddi4+0x156>
 800130a:	3b02      	subs	r3, #2
 800130c:	4465      	add	r5, ip
 800130e:	e72f      	b.n	8001170 <__udivmoddi4+0x12c>
 8001310:	4608      	mov	r0, r1
 8001312:	e706      	b.n	8001122 <__udivmoddi4+0xde>
 8001314:	4631      	mov	r1, r6
 8001316:	e6e9      	b.n	80010ec <__udivmoddi4+0xa8>

08001318 <__aeabi_idiv0>:
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop

0800131c <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2203      	movs	r2, #3
 8001328:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2203      	movs	r2, #3
 8001334:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2203      	movs	r2, #3
 800133a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2203      	movs	r2, #3
 8001340:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2203      	movs	r2, #3
 8001346:	715a      	strb	r2, [r3, #5]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr

08001352 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001352:	b580      	push	{r7, lr}
 8001354:	b08a      	sub	sp, #40	; 0x28
 8001356:	af04      	add	r7, sp, #16
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	460b      	mov	r3, r1
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800136c:	7afb      	ldrb	r3, [r7, #11]
 800136e:	b29a      	uxth	r2, r3
 8001370:	8af9      	ldrh	r1, [r7, #22]
 8001372:	f241 3388 	movw	r3, #5000	; 0x1388
 8001376:	9302      	str	r3, [sp, #8]
 8001378:	2302      	movs	r3, #2
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	f002 fc18 	bl	8003bb8 <HAL_I2C_Mem_Read>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10b      	bne.n	80013a6 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800138e:	7d7b      	ldrb	r3, [r7, #21]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	b21a      	sxth	r2, r3
 8001394:	7d3b      	ldrb	r3, [r7, #20]
 8001396:	b21b      	sxth	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	b21b      	sxth	r3, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	801a      	strh	r2, [r3, #0]
		return true;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <read_register16+0x56>
	} else
		return false;
 80013a6:	2300      	movs	r3, #0

}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b08b      	sub	sp, #44	; 0x2c
 80013b4:	af04      	add	r7, sp, #16
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	461a      	mov	r2, r3
 80013bc:	460b      	mov	r3, r1
 80013be:	72fb      	strb	r3, [r7, #11]
 80013c0:	4613      	mov	r3, r2
 80013c2:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80013d0:	7afb      	ldrb	r3, [r7, #11]
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	7abb      	ldrb	r3, [r7, #10]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	8af9      	ldrh	r1, [r7, #22]
 80013da:	f241 3488 	movw	r4, #5000	; 0x1388
 80013de:	9402      	str	r4, [sp, #8]
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2301      	movs	r3, #1
 80013e8:	f002 fbe6 	bl	8003bb8 <HAL_I2C_Mem_Read>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <read_data+0x46>
		return 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e000      	b.n	80013f8 <read_data+0x48>
	else
		return 1;
 80013f6:	2301      	movs	r3, #1

}
 80013f8:	4618      	mov	r0, r3
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd90      	pop	{r4, r7, pc}

08001400 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	461a      	mov	r2, r3
 800140c:	2188      	movs	r1, #136	; 0x88
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ff9f 	bl	8001352 <read_register16>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d06f      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3302      	adds	r3, #2
 800141e:	461a      	mov	r2, r3
 8001420:	218a      	movs	r1, #138	; 0x8a
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff95 	bl	8001352 <read_register16>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d065      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3304      	adds	r3, #4
 8001432:	461a      	mov	r2, r3
 8001434:	218c      	movs	r1, #140	; 0x8c
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff8b 	bl	8001352 <read_register16>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d05b      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3306      	adds	r3, #6
 8001446:	461a      	mov	r2, r3
 8001448:	218e      	movs	r1, #142	; 0x8e
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ff81 	bl	8001352 <read_register16>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d051      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3308      	adds	r3, #8
 800145a:	461a      	mov	r2, r3
 800145c:	2190      	movs	r1, #144	; 0x90
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ff77 	bl	8001352 <read_register16>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d047      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	330a      	adds	r3, #10
 800146e:	461a      	mov	r2, r3
 8001470:	2192      	movs	r1, #146	; 0x92
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ff6d 	bl	8001352 <read_register16>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d03d      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	330c      	adds	r3, #12
 8001482:	461a      	mov	r2, r3
 8001484:	2194      	movs	r1, #148	; 0x94
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ff63 	bl	8001352 <read_register16>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d033      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	330e      	adds	r3, #14
 8001496:	461a      	mov	r2, r3
 8001498:	2196      	movs	r1, #150	; 0x96
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ff59 	bl	8001352 <read_register16>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d029      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3310      	adds	r3, #16
 80014aa:	461a      	mov	r2, r3
 80014ac:	2198      	movs	r1, #152	; 0x98
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ff4f 	bl	8001352 <read_register16>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d01f      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3312      	adds	r3, #18
 80014be:	461a      	mov	r2, r3
 80014c0:	219a      	movs	r1, #154	; 0x9a
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ff45 	bl	8001352 <read_register16>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d015      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3314      	adds	r3, #20
 80014d2:	461a      	mov	r2, r3
 80014d4:	219c      	movs	r1, #156	; 0x9c
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ff3b 	bl	8001352 <read_register16>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80014e6:	461a      	mov	r2, r3
 80014e8:	219e      	movs	r1, #158	; 0x9e
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff31 	bl	8001352 <read_register16>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <read_calibration_data+0xfa>

		return true;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <read_calibration_data+0xfc>
	}

	return false;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f103 0218 	add.w	r2, r3, #24
 8001512:	2301      	movs	r3, #1
 8001514:	21a1      	movs	r1, #161	; 0xa1
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ff4a 	bl	80013b0 <read_data>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d14b      	bne.n	80015ba <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	331a      	adds	r3, #26
 8001526:	461a      	mov	r2, r3
 8001528:	21e1      	movs	r1, #225	; 0xe1
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff11 	bl	8001352 <read_register16>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d041      	beq.n	80015ba <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f103 021c 	add.w	r2, r3, #28
 800153c:	2301      	movs	r3, #1
 800153e:	21e3      	movs	r1, #227	; 0xe3
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff35 	bl	80013b0 <read_data>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d136      	bne.n	80015ba <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800154c:	f107 030e 	add.w	r3, r7, #14
 8001550:	461a      	mov	r2, r3
 8001552:	21e4      	movs	r1, #228	; 0xe4
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff fefc 	bl	8001352 <read_register16>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d02c      	beq.n	80015ba <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	461a      	mov	r2, r3
 8001566:	21e5      	movs	r1, #229	; 0xe5
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fef2 	bl	8001352 <read_register16>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d022      	beq.n	80015ba <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800157a:	2301      	movs	r3, #1
 800157c:	21e7      	movs	r1, #231	; 0xe7
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ff16 	bl	80013b0 <read_data>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d117      	bne.n	80015ba <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800158a:	89fb      	ldrh	r3, [r7, #14]
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	b21b      	sxth	r3, r3
 8001590:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001594:	b21a      	sxth	r2, r3
 8001596:	89fb      	ldrh	r3, [r7, #14]
 8001598:	121b      	asrs	r3, r3, #8
 800159a:	b21b      	sxth	r3, r3
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80015aa:	89bb      	ldrh	r3, [r7, #12]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	841a      	strh	r2, [r3, #32]

		return true;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <read_hum_calibration_data+0xb8>
	}

	return false;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af04      	add	r7, sp, #16
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	70fb      	strb	r3, [r7, #3]
 80015d0:	4613      	mov	r3, r2
 80015d2:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	89f9      	ldrh	r1, [r7, #14]
 80015e6:	f242 7310 	movw	r3, #10000	; 0x2710
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	2301      	movs	r3, #1
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	1cbb      	adds	r3, r7, #2
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2301      	movs	r3, #1
 80015f6:	f002 f9e5 	bl	80039c4 <HAL_I2C_Mem_Write>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <write_register8+0x40>
		return false;
 8001600:	2300      	movs	r3, #0
 8001602:	e000      	b.n	8001606 <write_register8+0x42>
	else
		return true;
 8001604:	2301      	movs	r3, #1
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800161c:	2b76      	cmp	r3, #118	; 0x76
 800161e:	d005      	beq.n	800162c <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001624:	2b77      	cmp	r3, #119	; 0x77
 8001626:	d001      	beq.n	800162c <bmp280_init+0x1e>

		return false;
 8001628:	2300      	movs	r3, #0
 800162a:	e099      	b.n	8001760 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001632:	2301      	movs	r3, #1
 8001634:	21d0      	movs	r1, #208	; 0xd0
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff feba 	bl	80013b0 <read_data>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <bmp280_init+0x38>
		return false;
 8001642:	2300      	movs	r3, #0
 8001644:	e08c      	b.n	8001760 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800164c:	2b58      	cmp	r3, #88	; 0x58
 800164e:	d006      	beq.n	800165e <bmp280_init+0x50>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001656:	2b60      	cmp	r3, #96	; 0x60
 8001658:	d001      	beq.n	800165e <bmp280_init+0x50>

		return false;
 800165a:	2300      	movs	r3, #0
 800165c:	e080      	b.n	8001760 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800165e:	22b6      	movs	r2, #182	; 0xb6
 8001660:	21e0      	movs	r1, #224	; 0xe0
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffae 	bl	80015c4 <write_register8>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <bmp280_init+0x64>
		return false;
 800166e:	2300      	movs	r3, #0
 8001670:	e076      	b.n	8001760 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001672:	f107 020c 	add.w	r2, r7, #12
 8001676:	2301      	movs	r3, #1
 8001678:	21f3      	movs	r1, #243	; 0xf3
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fe98 	bl	80013b0 <read_data>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f5      	bne.n	8001672 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001686:	7b3b      	ldrb	r3, [r7, #12]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f0      	bne.n	8001672 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff feb5 	bl	8001400 <read_calibration_data>
 8001696:	4603      	mov	r3, r0
 8001698:	f083 0301 	eor.w	r3, r3, #1
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d100      	bne.n	80016a4 <bmp280_init+0x96>
 80016a2:	e001      	b.n	80016a8 <bmp280_init+0x9a>
		return false;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e05b      	b.n	8001760 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80016ae:	2b60      	cmp	r3, #96	; 0x60
 80016b0:	d10a      	bne.n	80016c8 <bmp280_init+0xba>
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ff26 	bl	8001504 <read_hum_calibration_data>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f083 0301 	eor.w	r3, r3, #1
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <bmp280_init+0xba>
		return false;
 80016c4:	2300      	movs	r3, #0
 80016c6:	e04b      	b.n	8001760 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	795b      	ldrb	r3, [r3, #5]
 80016cc:	015b      	lsls	r3, r3, #5
 80016ce:	b25a      	sxtb	r2, r3
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	785b      	ldrb	r3, [r3, #1]
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	461a      	mov	r2, r3
 80016e2:	21f5      	movs	r1, #245	; 0xf5
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff6d 	bl	80015c4 <write_register8>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <bmp280_init+0xe6>
		return false;
 80016f0:	2300      	movs	r3, #0
 80016f2:	e035      	b.n	8001760 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d102      	bne.n	8001702 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	78db      	ldrb	r3, [r3, #3]
 8001706:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001708:	b25a      	sxtb	r2, r3
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	789b      	ldrb	r3, [r3, #2]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	b25b      	sxtb	r3, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	b25a      	sxtb	r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b25b      	sxtb	r3, r3
 800171c:	4313      	orrs	r3, r2
 800171e:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001720:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001728:	2b60      	cmp	r3, #96	; 0x60
 800172a:	d10d      	bne.n	8001748 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	791b      	ldrb	r3, [r3, #4]
 8001730:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001732:	7b7b      	ldrb	r3, [r7, #13]
 8001734:	461a      	mov	r2, r3
 8001736:	21f2      	movs	r1, #242	; 0xf2
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff43 	bl	80015c4 <write_register8>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <bmp280_init+0x13a>
			return false;
 8001744:	2300      	movs	r3, #0
 8001746:	e00b      	b.n	8001760 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001748:	7bbb      	ldrb	r3, [r7, #14]
 800174a:	461a      	mov	r2, r3
 800174c:	21f4      	movs	r1, #244	; 0xf4
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ff38 	bl	80015c4 <write_register8>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <bmp280_init+0x150>
		return false;
 800175a:	2300      	movs	r3, #0
 800175c:	e000      	b.n	8001760 <bmp280_init+0x152>
	}

	return true;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	10da      	asrs	r2, r3, #3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001786:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800178a:	12db      	asrs	r3, r3, #11
 800178c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	111b      	asrs	r3, r3, #4
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	8812      	ldrh	r2, [r2, #0]
 8001796:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	1112      	asrs	r2, r2, #4
 800179c:	68f9      	ldr	r1, [r7, #12]
 800179e:	8809      	ldrh	r1, [r1, #0]
 80017a0:	1a52      	subs	r2, r2, r1
 80017a2:	fb02 f303 	mul.w	r3, r2, r3
 80017a6:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80017ae:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80017b2:	139b      	asrs	r3, r3, #14
 80017b4:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	441a      	add	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	3380      	adds	r3, #128	; 0x80
 80017cc:	121b      	asrs	r3, r3, #8
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	371c      	adds	r7, #28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80017d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017dc:	b0cc      	sub	sp, #304	; 0x130
 80017de:	af00      	add	r7, sp, #0
 80017e0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 80017e4:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80017e8:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80017ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017f0:	17da      	asrs	r2, r3, #31
 80017f2:	461c      	mov	r4, r3
 80017f4:	4615      	mov	r5, r2
 80017f6:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80017fa:	f145 3bff 	adc.w	fp, r5, #4294967295
 80017fe:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001802:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001806:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800180a:	fb03 f102 	mul.w	r1, r3, r2
 800180e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001812:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001816:	fb02 f303 	mul.w	r3, r2, r3
 800181a:	18ca      	adds	r2, r1, r3
 800181c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001820:	fba3 8903 	umull	r8, r9, r3, r3
 8001824:	eb02 0309 	add.w	r3, r2, r9
 8001828:	4699      	mov	r9, r3
 800182a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800182e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001832:	b21b      	sxth	r3, r3
 8001834:	17da      	asrs	r2, r3, #31
 8001836:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800183a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800183e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001842:	4603      	mov	r3, r0
 8001844:	fb03 f209 	mul.w	r2, r3, r9
 8001848:	460b      	mov	r3, r1
 800184a:	fb08 f303 	mul.w	r3, r8, r3
 800184e:	4413      	add	r3, r2
 8001850:	4602      	mov	r2, r0
 8001852:	fba8 2102 	umull	r2, r1, r8, r2
 8001856:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 800185a:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800185e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001862:	4413      	add	r3, r2
 8001864:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001868:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800186c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8001870:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001878:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800187c:	b21b      	sxth	r3, r3
 800187e:	17da      	asrs	r2, r3, #31
 8001880:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001884:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001888:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800188c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001890:	462a      	mov	r2, r5
 8001892:	fb02 f203 	mul.w	r2, r2, r3
 8001896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800189a:	4621      	mov	r1, r4
 800189c:	fb01 f303 	mul.w	r3, r1, r3
 80018a0:	441a      	add	r2, r3
 80018a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018a6:	4621      	mov	r1, r4
 80018a8:	fba3 3101 	umull	r3, r1, r3, r1
 80018ac:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 80018b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80018b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80018b8:	18d3      	adds	r3, r2, r3
 80018ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018be:	f04f 0000 	mov.w	r0, #0
 80018c2:	f04f 0100 	mov.w	r1, #0
 80018c6:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80018ca:	462b      	mov	r3, r5
 80018cc:	0459      	lsls	r1, r3, #17
 80018ce:	4622      	mov	r2, r4
 80018d0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80018d4:	4623      	mov	r3, r4
 80018d6:	0458      	lsls	r0, r3, #17
 80018d8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80018dc:	1814      	adds	r4, r2, r0
 80018de:	643c      	str	r4, [r7, #64]	; 0x40
 80018e0:	414b      	adcs	r3, r1
 80018e2:	647b      	str	r3, [r7, #68]	; 0x44
 80018e4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80018e8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80018ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018f0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	17da      	asrs	r2, r3, #31
 80018f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80018fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001900:	f04f 0000 	mov.w	r0, #0
 8001904:	f04f 0100 	mov.w	r1, #0
 8001908:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800190c:	00d9      	lsls	r1, r3, #3
 800190e:	2000      	movs	r0, #0
 8001910:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001914:	1814      	adds	r4, r2, r0
 8001916:	63bc      	str	r4, [r7, #56]	; 0x38
 8001918:	414b      	adcs	r3, r1
 800191a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800191c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001920:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001924:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001928:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800192c:	fb03 f102 	mul.w	r1, r3, r2
 8001930:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001934:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001938:	fb02 f303 	mul.w	r3, r2, r3
 800193c:	18ca      	adds	r2, r1, r3
 800193e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001942:	fba3 3103 	umull	r3, r1, r3, r3
 8001946:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 800194a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800194e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001952:	18d3      	adds	r3, r2, r3
 8001954:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800195c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001960:	b21b      	sxth	r3, r3
 8001962:	17da      	asrs	r2, r3, #31
 8001964:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001968:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800196c:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8001970:	4622      	mov	r2, r4
 8001972:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001976:	4641      	mov	r1, r8
 8001978:	fb01 f202 	mul.w	r2, r1, r2
 800197c:	464d      	mov	r5, r9
 800197e:	4618      	mov	r0, r3
 8001980:	4621      	mov	r1, r4
 8001982:	4603      	mov	r3, r0
 8001984:	fb03 f305 	mul.w	r3, r3, r5
 8001988:	4413      	add	r3, r2
 800198a:	4602      	mov	r2, r0
 800198c:	4641      	mov	r1, r8
 800198e:	fba2 2101 	umull	r2, r1, r2, r1
 8001992:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001996:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800199a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800199e:	4413      	add	r3, r2
 80019a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80019a4:	f04f 0000 	mov.w	r0, #0
 80019a8:	f04f 0100 	mov.w	r1, #0
 80019ac:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80019b0:	4623      	mov	r3, r4
 80019b2:	0a18      	lsrs	r0, r3, #8
 80019b4:	462a      	mov	r2, r5
 80019b6:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80019ba:	462b      	mov	r3, r5
 80019bc:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80019be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	17da      	asrs	r2, r3, #31
 80019ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80019ce:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80019d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019d6:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80019da:	464a      	mov	r2, r9
 80019dc:	fb02 f203 	mul.w	r2, r2, r3
 80019e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80019e4:	4644      	mov	r4, r8
 80019e6:	fb04 f303 	mul.w	r3, r4, r3
 80019ea:	441a      	add	r2, r3
 80019ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80019f0:	4644      	mov	r4, r8
 80019f2:	fba3 3404 	umull	r3, r4, r3, r4
 80019f6:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 80019fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80019fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001a02:	18d3      	adds	r3, r2, r3
 8001a04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001a14:	464c      	mov	r4, r9
 8001a16:	0323      	lsls	r3, r4, #12
 8001a18:	46c4      	mov	ip, r8
 8001a1a:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001a1e:	4644      	mov	r4, r8
 8001a20:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001a22:	1884      	adds	r4, r0, r2
 8001a24:	633c      	str	r4, [r7, #48]	; 0x30
 8001a26:	eb41 0303 	adc.w	r3, r1, r3
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a2c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001a30:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001a34:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001a38:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001a3c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001a40:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a48:	88db      	ldrh	r3, [r3, #6]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a52:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001a56:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001a5a:	4622      	mov	r2, r4
 8001a5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001a60:	4641      	mov	r1, r8
 8001a62:	fb01 f202 	mul.w	r2, r1, r2
 8001a66:	464d      	mov	r5, r9
 8001a68:	4618      	mov	r0, r3
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	fb03 f305 	mul.w	r3, r3, r5
 8001a72:	4413      	add	r3, r2
 8001a74:	4602      	mov	r2, r0
 8001a76:	4641      	mov	r1, r8
 8001a78:	fba2 2101 	umull	r2, r1, r2, r1
 8001a7c:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001a80:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001a84:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001a88:	4413      	add	r3, r2
 8001a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	104a      	asrs	r2, r1, #1
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	17cb      	asrs	r3, r1, #31
 8001aa2:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001aa6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	d101      	bne.n	8001ab2 <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e146      	b.n	8001d40 <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 8001ab2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ab6:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001aba:	17da      	asrs	r2, r3, #31
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001abe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ac0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001ac4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001ac8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001acc:	105b      	asrs	r3, r3, #1
 8001ace:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ad2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001ad6:	07db      	lsls	r3, r3, #31
 8001ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001adc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001ae0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001ae4:	4604      	mov	r4, r0
 8001ae6:	1aa4      	subs	r4, r4, r2
 8001ae8:	67bc      	str	r4, [r7, #120]	; 0x78
 8001aea:	eb61 0303 	sbc.w	r3, r1, r3
 8001aee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001af0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001af4:	4622      	mov	r2, r4
 8001af6:	462b      	mov	r3, r5
 8001af8:	1891      	adds	r1, r2, r2
 8001afa:	6239      	str	r1, [r7, #32]
 8001afc:	415b      	adcs	r3, r3
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
 8001b00:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b04:	4621      	mov	r1, r4
 8001b06:	1851      	adds	r1, r2, r1
 8001b08:	61b9      	str	r1, [r7, #24]
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	414b      	adcs	r3, r1
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001b1c:	4649      	mov	r1, r9
 8001b1e:	018b      	lsls	r3, r1, #6
 8001b20:	4641      	mov	r1, r8
 8001b22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b26:	4641      	mov	r1, r8
 8001b28:	018a      	lsls	r2, r1, #6
 8001b2a:	4641      	mov	r1, r8
 8001b2c:	1889      	adds	r1, r1, r2
 8001b2e:	6139      	str	r1, [r7, #16]
 8001b30:	4649      	mov	r1, r9
 8001b32:	eb43 0101 	adc.w	r1, r3, r1
 8001b36:	6179      	str	r1, [r7, #20]
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001b44:	4649      	mov	r1, r9
 8001b46:	008b      	lsls	r3, r1, #2
 8001b48:	46c4      	mov	ip, r8
 8001b4a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001b4e:	4641      	mov	r1, r8
 8001b50:	008a      	lsls	r2, r1, #2
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	4622      	mov	r2, r4
 8001b5a:	189b      	adds	r3, r3, r2
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	462a      	mov	r2, r5
 8001b62:	eb42 0303 	adc.w	r3, r2, r3
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001b74:	4649      	mov	r1, r9
 8001b76:	008b      	lsls	r3, r1, #2
 8001b78:	46c4      	mov	ip, r8
 8001b7a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001b7e:	4641      	mov	r1, r8
 8001b80:	008a      	lsls	r2, r1, #2
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	4603      	mov	r3, r0
 8001b88:	4622      	mov	r2, r4
 8001b8a:	189b      	adds	r3, r3, r2
 8001b8c:	673b      	str	r3, [r7, #112]	; 0x70
 8001b8e:	462b      	mov	r3, r5
 8001b90:	460a      	mov	r2, r1
 8001b92:	eb42 0303 	adc.w	r3, r2, r3
 8001b96:	677b      	str	r3, [r7, #116]	; 0x74
 8001b98:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001b9c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001ba0:	f7ff f9e8 	bl	8000f74 <__aeabi_ldivmod>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bb0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	17da      	asrs	r2, r3, #31
 8001bb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8001bba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001bbc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001bc0:	f04f 0000 	mov.w	r0, #0
 8001bc4:	f04f 0100 	mov.w	r1, #0
 8001bc8:	0b50      	lsrs	r0, r2, #13
 8001bca:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001bce:	1359      	asrs	r1, r3, #13
 8001bd0:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001bd4:	462b      	mov	r3, r5
 8001bd6:	fb00 f203 	mul.w	r2, r0, r3
 8001bda:	4623      	mov	r3, r4
 8001bdc:	fb03 f301 	mul.w	r3, r3, r1
 8001be0:	4413      	add	r3, r2
 8001be2:	4622      	mov	r2, r4
 8001be4:	fba2 2100 	umull	r2, r1, r2, r0
 8001be8:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8001bec:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001bf0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001bfa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001bfe:	f04f 0000 	mov.w	r0, #0
 8001c02:	f04f 0100 	mov.w	r1, #0
 8001c06:	0b50      	lsrs	r0, r2, #13
 8001c08:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001c0c:	1359      	asrs	r1, r3, #13
 8001c0e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001c12:	462b      	mov	r3, r5
 8001c14:	fb00 f203 	mul.w	r2, r0, r3
 8001c18:	4623      	mov	r3, r4
 8001c1a:	fb03 f301 	mul.w	r3, r3, r1
 8001c1e:	4413      	add	r3, r2
 8001c20:	4622      	mov	r2, r4
 8001c22:	fba2 2100 	umull	r2, r1, r2, r0
 8001c26:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8001c2a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001c2e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001c32:	4413      	add	r3, r2
 8001c34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001c44:	4621      	mov	r1, r4
 8001c46:	0e4a      	lsrs	r2, r1, #25
 8001c48:	4620      	mov	r0, r4
 8001c4a:	4629      	mov	r1, r5
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001c52:	164b      	asrs	r3, r1, #25
 8001c54:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c5c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	17da      	asrs	r2, r3, #31
 8001c64:	663b      	str	r3, [r7, #96]	; 0x60
 8001c66:	667a      	str	r2, [r7, #100]	; 0x64
 8001c68:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001c6c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001c70:	462a      	mov	r2, r5
 8001c72:	fb02 f203 	mul.w	r2, r2, r3
 8001c76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	fb01 f303 	mul.w	r3, r1, r3
 8001c80:	4413      	add	r3, r2
 8001c82:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c86:	4621      	mov	r1, r4
 8001c88:	fba2 2101 	umull	r2, r1, r2, r1
 8001c8c:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8001c90:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001c94:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001c98:	4413      	add	r3, r2
 8001c9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001caa:	4621      	mov	r1, r4
 8001cac:	0cca      	lsrs	r2, r1, #19
 8001cae:	4620      	mov	r0, r4
 8001cb0:	4629      	mov	r1, r5
 8001cb2:	460c      	mov	r4, r1
 8001cb4:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001cb8:	14cb      	asrs	r3, r1, #19
 8001cba:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001cbe:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001cc2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001cc6:	1884      	adds	r4, r0, r2
 8001cc8:	65bc      	str	r4, [r7, #88]	; 0x58
 8001cca:	eb41 0303 	adc.w	r3, r1, r3
 8001cce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cd0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001cd4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001cd8:	4621      	mov	r1, r4
 8001cda:	1889      	adds	r1, r1, r2
 8001cdc:	6539      	str	r1, [r7, #80]	; 0x50
 8001cde:	4629      	mov	r1, r5
 8001ce0:	eb43 0101 	adc.w	r1, r3, r1
 8001ce4:	6579      	str	r1, [r7, #84]	; 0x54
 8001ce6:	f04f 0000 	mov.w	r0, #0
 8001cea:	f04f 0100 	mov.w	r1, #0
 8001cee:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001cf2:	4623      	mov	r3, r4
 8001cf4:	0a18      	lsrs	r0, r3, #8
 8001cf6:	462a      	mov	r2, r5
 8001cf8:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001cfc:	462b      	mov	r3, r5
 8001cfe:	1219      	asrs	r1, r3, #8
 8001d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d04:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	17da      	asrs	r2, r3, #31
 8001d0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d0e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001d1c:	464c      	mov	r4, r9
 8001d1e:	0123      	lsls	r3, r4, #4
 8001d20:	46c4      	mov	ip, r8
 8001d22:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001d26:	4644      	mov	r4, r8
 8001d28:	0122      	lsls	r2, r4, #4
 8001d2a:	1884      	adds	r4, r0, r2
 8001d2c:	603c      	str	r4, [r7, #0]
 8001d2e:	eb41 0303 	adc.w	r3, r1, r3
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001d38:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001d3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001d46:	46bd      	mov	sp, r7
 8001d48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001d4c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001d5e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	039a      	lsls	r2, r3, #14
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001d6a:	051b      	lsls	r3, r3, #20
 8001d6c:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001d74:	4619      	mov	r1, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001d82:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	fb01 f202 	mul.w	r2, r1, r2
 8001d92:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001d94:	68f9      	ldr	r1, [r7, #12]
 8001d96:	7f09      	ldrb	r1, [r1, #28]
 8001d98:	4608      	mov	r0, r1
 8001d9a:	6979      	ldr	r1, [r7, #20]
 8001d9c:	fb00 f101 	mul.w	r1, r0, r1
 8001da0:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001da2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001da6:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001daa:	1292      	asrs	r2, r2, #10
 8001dac:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001db0:	68f9      	ldr	r1, [r7, #12]
 8001db2:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001db6:	fb01 f202 	mul.w	r2, r1, r2
 8001dba:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001dbe:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	13db      	asrs	r3, r3, #15
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	13d2      	asrs	r2, r2, #15
 8001dce:	fb02 f303 	mul.w	r3, r2, r3
 8001dd2:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	7e12      	ldrb	r2, [r2, #24]
 8001dd8:	fb02 f303 	mul.w	r3, r2, r3
 8001ddc:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001dea:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001df2:	bfa8      	it	ge
 8001df4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001df8:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	131b      	asrs	r3, r3, #12
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	371c      	adds	r7, #28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08c      	sub	sp, #48	; 0x30
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001e1c:	2b60      	cmp	r3, #96	; 0x60
 8001e1e:	d007      	beq.n	8001e30 <bmp280_read_fixed+0x28>
		if (humidity)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <bmp280_read_fixed+0x32>
 8001e36:	2308      	movs	r3, #8
 8001e38:	e000      	b.n	8001e3c <bmp280_read_fixed+0x34>
 8001e3a:	2306      	movs	r3, #6
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	f107 0218 	add.w	r2, r7, #24
 8001e46:	21f7      	movs	r1, #247	; 0xf7
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f7ff fab1 	bl	80013b0 <read_data>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <bmp280_read_fixed+0x50>
		return false;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e038      	b.n	8001eca <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001e58:	7e3b      	ldrb	r3, [r7, #24]
 8001e5a:	031a      	lsls	r2, r3, #12
 8001e5c:	7e7b      	ldrb	r3, [r7, #25]
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	4313      	orrs	r3, r2
 8001e62:	7eba      	ldrb	r2, [r7, #26]
 8001e64:	0912      	lsrs	r2, r2, #4
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001e6c:	7efb      	ldrb	r3, [r7, #27]
 8001e6e:	031a      	lsls	r2, r3, #12
 8001e70:	7f3b      	ldrb	r3, [r7, #28]
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	4313      	orrs	r3, r2
 8001e76:	7f7a      	ldrb	r2, [r7, #29]
 8001e78:	0912      	lsrs	r2, r2, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	461a      	mov	r2, r3
 8001e86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7ff fc6d 	bl	8001768 <compensate_temperature>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	461a      	mov	r2, r3
 8001e98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f7ff fc9c 	bl	80017d8 <compensate_pressure>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00d      	beq.n	8001ec8 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001eac:	7fbb      	ldrb	r3, [r7, #30]
 8001eae:	021b      	lsls	r3, r3, #8
 8001eb0:	7ffa      	ldrb	r2, [r7, #31]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	6a39      	ldr	r1, [r7, #32]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f7ff ff45 	bl	8001d4c <compensate_humidity>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001ec8:	2301      	movs	r3, #1
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3730      	adds	r7, #48	; 0x30
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <bmp280_read_float+0x1a>
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	e000      	b.n	8001ef0 <bmp280_read_float+0x1c>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f107 0218 	add.w	r2, r7, #24
 8001ef4:	f107 011c 	add.w	r1, r7, #28
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f7ff ff85 	bl	8001e08 <bmp280_read_fixed>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d02d      	beq.n	8001f60 <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fe90 	bl	8000c2c <__aeabi_i2f>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4917      	ldr	r1, [pc, #92]	; (8001f6c <bmp280_read_float+0x98>)
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe ff93 	bl	8000e3c <__aeabi_fdiv>
 8001f16:	4603      	mov	r3, r0
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fe7f 	bl	8000c24 <__aeabi_ui2f>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe ff85 	bl	8000e3c <__aeabi_fdiv>
 8001f32:	4603      	mov	r3, r0
 8001f34:	461a      	mov	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	601a      	str	r2, [r3, #0]
		if (humidity)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00d      	beq.n	8001f5c <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fe6e 	bl	8000c24 <__aeabi_ui2f>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe ff74 	bl	8000e3c <__aeabi_fdiv>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	601a      	str	r2, [r3, #0]
		return true;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <bmp280_read_float+0x8e>
	}

	return false;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3720      	adds	r7, #32
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	42c80000 	.word	0x42c80000

08001f70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <MX_DMA_Init+0x38>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <MX_DMA_Init+0x38>)
 8001f7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f80:	61d3      	str	r3, [r2, #28]
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <MX_DMA_Init+0x38>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2100      	movs	r1, #0
 8001f92:	200f      	movs	r0, #15
 8001f94:	f000 ff43 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001f98:	200f      	movs	r0, #15
 8001f9a:	f000 ff5c 	bl	8002e56 <HAL_NVIC_EnableIRQ>

}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800

08001fac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	60da      	str	r2, [r3, #12]
 8001fc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	; (800206c <MX_GPIO_Init+0xc0>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	4a29      	ldr	r2, [pc, #164]	; (800206c <MX_GPIO_Init+0xc0>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	61d3      	str	r3, [r2, #28]
 8001fce:	4b27      	ldr	r3, [pc, #156]	; (800206c <MX_GPIO_Init+0xc0>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <MX_GPIO_Init+0xc0>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4a23      	ldr	r2, [pc, #140]	; (800206c <MX_GPIO_Init+0xc0>)
 8001fe0:	f043 0320 	orr.w	r3, r3, #32
 8001fe4:	61d3      	str	r3, [r2, #28]
 8001fe6:	4b21      	ldr	r3, [pc, #132]	; (800206c <MX_GPIO_Init+0xc0>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <MX_GPIO_Init+0xc0>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a1d      	ldr	r2, [pc, #116]	; (800206c <MX_GPIO_Init+0xc0>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	61d3      	str	r3, [r2, #28]
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	; (800206c <MX_GPIO_Init+0xc0>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <MX_GPIO_Init+0xc0>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	4a17      	ldr	r2, [pc, #92]	; (800206c <MX_GPIO_Init+0xc0>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	61d3      	str	r3, [r2, #28]
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <MX_GPIO_Init+0xc0>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	2120      	movs	r1, #32
 8002026:	4812      	ldr	r0, [pc, #72]	; (8002070 <MX_GPIO_Init+0xc4>)
 8002028:	f001 fa72 	bl	8003510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800202c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002032:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	4619      	mov	r1, r3
 8002042:	480c      	ldr	r0, [pc, #48]	; (8002074 <MX_GPIO_Init+0xc8>)
 8002044:	f001 f8d4 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002048:	2320      	movs	r3, #32
 800204a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800204c:	2301      	movs	r3, #1
 800204e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4619      	mov	r1, r3
 800205e:	4804      	ldr	r0, [pc, #16]	; (8002070 <MX_GPIO_Init+0xc4>)
 8002060:	f001 f8c6 	bl	80031f0 <HAL_GPIO_Init>

}
 8002064:	bf00      	nop
 8002066:	3728      	adds	r7, #40	; 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800
 8002070:	40020000 	.word	0x40020000
 8002074:	40020800 	.word	0x40020800

08002078 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <MX_I2C1_Init+0x50>)
 800207e:	4a13      	ldr	r2, [pc, #76]	; (80020cc <MX_I2C1_Init+0x54>)
 8002080:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <MX_I2C1_Init+0x50>)
 8002084:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <MX_I2C1_Init+0x58>)
 8002086:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <MX_I2C1_Init+0x50>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <MX_I2C1_Init+0x50>)
 8002090:	2200      	movs	r2, #0
 8002092:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <MX_I2C1_Init+0x50>)
 8002096:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800209a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800209c:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <MX_I2C1_Init+0x50>)
 800209e:	2200      	movs	r2, #0
 80020a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <MX_I2C1_Init+0x50>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <MX_I2C1_Init+0x50>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <MX_I2C1_Init+0x50>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020b4:	4804      	ldr	r0, [pc, #16]	; (80020c8 <MX_I2C1_Init+0x50>)
 80020b6:	f001 fa43 	bl	8003540 <HAL_I2C_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020c0:	f000 fb00 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200001fc 	.word	0x200001fc
 80020cc:	40005400 	.word	0x40005400
 80020d0:	000186a0 	.word	0x000186a0

080020d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a17      	ldr	r2, [pc, #92]	; (8002150 <HAL_I2C_MspInit+0x7c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d128      	bne.n	8002148 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_I2C_MspInit+0x80>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	4a16      	ldr	r2, [pc, #88]	; (8002154 <HAL_I2C_MspInit+0x80>)
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	61d3      	str	r3, [r2, #28]
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_I2C_MspInit+0x80>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800210e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002114:	2312      	movs	r3, #18
 8002116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211c:	2303      	movs	r3, #3
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002120:	2304      	movs	r3, #4
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4619      	mov	r1, r3
 800212a:	480b      	ldr	r0, [pc, #44]	; (8002158 <HAL_I2C_MspInit+0x84>)
 800212c:	f001 f860 	bl	80031f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_I2C_MspInit+0x80>)
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	4a07      	ldr	r2, [pc, #28]	; (8002154 <HAL_I2C_MspInit+0x80>)
 8002136:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800213a:	6253      	str	r3, [r2, #36]	; 0x24
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_I2C_MspInit+0x80>)
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002148:	bf00      	nop
 800214a:	3728      	adds	r7, #40	; 0x28
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40005400 	.word	0x40005400
 8002154:	40023800 	.word	0x40023800
 8002158:	40020400 	.word	0x40020400

0800215c <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af02      	add	r7, sp, #8
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	f043 030c 	orr.w	r3, r3, #12
 8002172:	b2da      	uxtb	r2, r3
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	f043 0320 	orr.w	r3, r3, #32
 8002184:	b2db      	uxtb	r3, r3
 8002186:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 8002188:	f107 0118 	add.w	r1, r7, #24
 800218c:	230a      	movs	r3, #10
 800218e:	2202      	movs	r2, #2
 8002190:	486c      	ldr	r0, [pc, #432]	; (8002344 <lcd_init+0x1e8>)
 8002192:	f003 fa84 	bl	800569e <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8002196:	f640 230d 	movw	r3, #2573	; 0xa0d
 800219a:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 800219c:	f107 0114 	add.w	r1, r7, #20
 80021a0:	230a      	movs	r3, #10
 80021a2:	2202      	movs	r2, #2
 80021a4:	4867      	ldr	r0, [pc, #412]	; (8002344 <lcd_init+0x1e8>)
 80021a6:	f003 fa7a 	bl	800569e <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 80021aa:	2364      	movs	r3, #100	; 0x64
 80021ac:	2205      	movs	r2, #5
 80021ae:	217c      	movs	r1, #124	; 0x7c
 80021b0:	69f8      	ldr	r0, [r7, #28]
 80021b2:	f001 ff27 	bl	8004004 <HAL_I2C_IsDeviceReady>
 80021b6:	4603      	mov	r3, r0
 80021b8:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 80021ba:	f107 0113 	add.w	r1, r7, #19
 80021be:	230a      	movs	r3, #10
 80021c0:	2201      	movs	r2, #1
 80021c2:	4860      	ldr	r0, [pc, #384]	; (8002344 <lcd_init+0x1e8>)
 80021c4:	f003 fa6b 	bl	800569e <HAL_UART_Transmit>
	HAL_Delay(50);
 80021c8:	2032      	movs	r0, #50	; 0x32
 80021ca:	f000 fd2f 	bl	8002c2c <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 80021ce:	f107 0218 	add.w	r2, r7, #24
 80021d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	2302      	movs	r3, #2
 80021da:	217c      	movs	r1, #124	; 0x7c
 80021dc:	69f8      	ldr	r0, [r7, #28]
 80021de:	f001 faf3 	bl	80037c8 <HAL_I2C_Master_Transmit>
 80021e2:	4603      	mov	r3, r0
 80021e4:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 80021e6:	f107 0112 	add.w	r1, r7, #18
 80021ea:	230a      	movs	r3, #10
 80021ec:	2201      	movs	r2, #1
 80021ee:	4855      	ldr	r0, [pc, #340]	; (8002344 <lcd_init+0x1e8>)
 80021f0:	f003 fa55 	bl	800569e <HAL_UART_Transmit>
	HAL_Delay(50);
 80021f4:	2032      	movs	r0, #50	; 0x32
 80021f6:	f000 fd19 	bl	8002c2c <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80021fa:	f107 0218 	add.w	r2, r7, #24
 80021fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	2302      	movs	r3, #2
 8002206:	217c      	movs	r1, #124	; 0x7c
 8002208:	69f8      	ldr	r0, [r7, #28]
 800220a:	f001 fadd 	bl	80037c8 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800220e:	2005      	movs	r0, #5
 8002210:	f000 fd0c 	bl	8002c2c <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8002214:	f107 0218 	add.w	r2, r7, #24
 8002218:	f241 3388 	movw	r3, #5000	; 0x1388
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	2302      	movs	r3, #2
 8002220:	217c      	movs	r1, #124	; 0x7c
 8002222:	69f8      	ldr	r0, [r7, #28]
 8002224:	f001 fad0 	bl	80037c8 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2204      	movs	r2, #4
 800222c:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	785b      	ldrb	r3, [r3, #1]
 8002232:	f043 0308 	orr.w	r3, r3, #8
 8002236:	b2db      	uxtb	r3, r3
 8002238:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 800223a:	f107 0218 	add.w	r2, r7, #24
 800223e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	2302      	movs	r3, #2
 8002246:	217c      	movs	r1, #124	; 0x7c
 8002248:	69f8      	ldr	r0, [r7, #28]
 800224a:	f001 fabd 	bl	80037c8 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 800224e:	2301      	movs	r3, #1
 8002250:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8002252:	f107 0218 	add.w	r2, r7, #24
 8002256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	2302      	movs	r3, #2
 800225e:	217c      	movs	r1, #124	; 0x7c
 8002260:	69f8      	ldr	r0, [r7, #28]
 8002262:	f001 fab1 	bl	80037c8 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8002266:	2002      	movs	r0, #2
 8002268:	f000 fce0 	bl	8002c2c <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	2202      	movs	r2, #2
 8002270:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	789b      	ldrb	r3, [r3, #2]
 8002276:	f043 0304 	orr.w	r3, r3, #4
 800227a:	b2db      	uxtb	r3, r3
 800227c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 800227e:	f107 0218 	add.w	r2, r7, #24
 8002282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	2302      	movs	r3, #2
 800228a:	217c      	movs	r1, #124	; 0x7c
 800228c:	69f8      	ldr	r0, [r7, #28]
 800228e:	f001 fa9b 	bl	80037c8 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8002292:	2300      	movs	r3, #0
 8002294:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800229a:	f107 0210 	add.w	r2, r7, #16
 800229e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	2302      	movs	r3, #2
 80022a6:	21c4      	movs	r1, #196	; 0xc4
 80022a8:	69f8      	ldr	r0, [r7, #28]
 80022aa:	f001 fa8d 	bl	80037c8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 80022ae:	2308      	movs	r3, #8
 80022b0:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 80022b2:	23ff      	movs	r3, #255	; 0xff
 80022b4:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80022b6:	f107 0210 	add.w	r2, r7, #16
 80022ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2302      	movs	r3, #2
 80022c2:	21c4      	movs	r1, #196	; 0xc4
 80022c4:	69f8      	ldr	r0, [r7, #28]
 80022c6:	f001 fa7f 	bl	80037c8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 80022ca:	2301      	movs	r3, #1
 80022cc:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 80022ce:	2320      	movs	r3, #32
 80022d0:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80022d2:	f107 0210 	add.w	r2, r7, #16
 80022d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	2302      	movs	r3, #2
 80022de:	21c4      	movs	r1, #196	; 0xc4
 80022e0:	69f8      	ldr	r0, [r7, #28]
 80022e2:	f001 fa71 	bl	80037c8 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 80022e6:	2304      	movs	r3, #4
 80022e8:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80022ea:	23ff      	movs	r3, #255	; 0xff
 80022ec:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80022ee:	f107 020c 	add.w	r2, r7, #12
 80022f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	2302      	movs	r3, #2
 80022fa:	21c4      	movs	r1, #196	; 0xc4
 80022fc:	69f8      	ldr	r0, [r7, #28]
 80022fe:	f001 fa63 	bl	80037c8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8002302:	2303      	movs	r3, #3
 8002304:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8002306:	23ff      	movs	r3, #255	; 0xff
 8002308:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800230a:	f107 020c 	add.w	r2, r7, #12
 800230e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	2302      	movs	r3, #2
 8002316:	21c4      	movs	r1, #196	; 0xc4
 8002318:	69f8      	ldr	r0, [r7, #28]
 800231a:	f001 fa55 	bl	80037c8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 800231e:	2302      	movs	r3, #2
 8002320:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8002322:	23ff      	movs	r3, #255	; 0xff
 8002324:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8002326:	f107 020c 	add.w	r2, r7, #12
 800232a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2302      	movs	r3, #2
 8002332:	21c4      	movs	r1, #196	; 0xc4
 8002334:	69f8      	ldr	r0, [r7, #28]
 8002336:	f001 fa47 	bl	80037c8 <HAL_I2C_Master_Transmit>


}
 800233a:	bf00      	nop
 800233c:	3720      	adds	r7, #32
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200002e8 	.word	0x200002e8

08002348 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af02      	add	r7, sp, #8
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8002356:	2340      	movs	r3, #64	; 0x40
 8002358:	733b      	strb	r3, [r7, #12]
    int i=0;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 800235e:	e011      	b.n	8002384 <lcd_print+0x3c>
    {
            data[1] = str[i];
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	4413      	add	r3, r2
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 800236a:	f107 020c 	add.w	r2, r7, #12
 800236e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2302      	movs	r3, #2
 8002376:	217c      	movs	r1, #124	; 0x7c
 8002378:	6938      	ldr	r0, [r7, #16]
 800237a:	f001 fa25 	bl	80037c8 <HAL_I2C_Master_Transmit>
            i++;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	3301      	adds	r3, #1
 8002382:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	4413      	add	r3, r2
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1e7      	bne.n	8002360 <lcd_print+0x18>
   }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af02      	add	r7, sp, #8
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	70fb      	strb	r3, [r7, #3]
 80023a6:	4613      	mov	r3, r2
 80023a8:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 80023ae:	78bb      	ldrb	r3, [r7, #2]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d104      	bne.n	80023be <lcd_position+0x24>
    {
        col = col | 0x80;
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023ba:	70fb      	strb	r3, [r7, #3]
 80023bc:	e003      	b.n	80023c6 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80023c4:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80023ce:	f107 0208 	add.w	r2, r7, #8
 80023d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2302      	movs	r3, #2
 80023da:	217c      	movs	r1, #124	; 0x7c
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f001 f9f3 	bl	80037c8 <HAL_I2C_Master_Transmit>
}
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{ if(i==1)  {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <HAL_UART_RxCpltCallback+0x78>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d115      	bne.n	8002428 <HAL_UART_RxCpltCallback+0x3c>
			lcd_position(&hi2c1,11,0);
 80023fc:	2200      	movs	r2, #0
 80023fe:	210b      	movs	r1, #11
 8002400:	4819      	ldr	r0, [pc, #100]	; (8002468 <HAL_UART_RxCpltCallback+0x7c>)
 8002402:	f7ff ffca 	bl	800239a <lcd_position>
		    lcd_print(&hi2c1,(char*)Recep);
 8002406:	4919      	ldr	r1, [pc, #100]	; (800246c <HAL_UART_RxCpltCallback+0x80>)
 8002408:	4817      	ldr	r0, [pc, #92]	; (8002468 <HAL_UART_RxCpltCallback+0x7c>)
 800240a:	f7ff ff9d 	bl	8002348 <lcd_print>
		    lcd_position(&hi2c1,15,0);
 800240e:	2200      	movs	r2, #0
 8002410:	210f      	movs	r1, #15
 8002412:	4815      	ldr	r0, [pc, #84]	; (8002468 <HAL_UART_RxCpltCallback+0x7c>)
 8002414:	f7ff ffc1 	bl	800239a <lcd_position>
		    lcd_print(&hi2c1,"%");
 8002418:	4915      	ldr	r1, [pc, #84]	; (8002470 <HAL_UART_RxCpltCallback+0x84>)
 800241a:	4813      	ldr	r0, [pc, #76]	; (8002468 <HAL_UART_RxCpltCallback+0x7c>)
 800241c:	f7ff ff94 	bl	8002348 <lcd_print>
		i=2;
 8002420:	4b10      	ldr	r3, [pc, #64]	; (8002464 <HAL_UART_RxCpltCallback+0x78>)
 8002422:	2202      	movs	r2, #2
 8002424:	601a      	str	r2, [r3, #0]
					lcd_position(&hi2c1,15,1);
					lcd_print(&hi2c1,"C");
					i=1;
			}

	}
 8002426:	e018      	b.n	800245a <HAL_UART_RxCpltCallback+0x6e>
	else if(i==2) {
 8002428:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <HAL_UART_RxCpltCallback+0x78>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d114      	bne.n	800245a <HAL_UART_RxCpltCallback+0x6e>
					lcd_position(&hi2c1,11,1);
 8002430:	2201      	movs	r2, #1
 8002432:	210b      	movs	r1, #11
 8002434:	480c      	ldr	r0, [pc, #48]	; (8002468 <HAL_UART_RxCpltCallback+0x7c>)
 8002436:	f7ff ffb0 	bl	800239a <lcd_position>
					lcd_print(&hi2c1,(char*)Recep);
 800243a:	490c      	ldr	r1, [pc, #48]	; (800246c <HAL_UART_RxCpltCallback+0x80>)
 800243c:	480a      	ldr	r0, [pc, #40]	; (8002468 <HAL_UART_RxCpltCallback+0x7c>)
 800243e:	f7ff ff83 	bl	8002348 <lcd_print>
					lcd_position(&hi2c1,15,1);
 8002442:	2201      	movs	r2, #1
 8002444:	210f      	movs	r1, #15
 8002446:	4808      	ldr	r0, [pc, #32]	; (8002468 <HAL_UART_RxCpltCallback+0x7c>)
 8002448:	f7ff ffa7 	bl	800239a <lcd_position>
					lcd_print(&hi2c1,"C");
 800244c:	4909      	ldr	r1, [pc, #36]	; (8002474 <HAL_UART_RxCpltCallback+0x88>)
 800244e:	4806      	ldr	r0, [pc, #24]	; (8002468 <HAL_UART_RxCpltCallback+0x7c>)
 8002450:	f7ff ff7a 	bl	8002348 <lcd_print>
					i=1;
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_UART_RxCpltCallback+0x78>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]
	}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000000 	.word	0x20000000
 8002468:	200001fc 	.word	0x200001fc
 800246c:	2000029c 	.word	0x2000029c
 8002470:	08008cf0 	.word	0x08008cf0
 8002474:	08008cf4 	.word	0x08008cf4

08002478 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{ 		//  HAL_UART_Transmit_DMA(&huart1, Data1, 4);
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
	...

0800248c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002490:	f000 fb5d 	bl	8002b4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002494:	f000 f8c8 	bl	8002628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002498:	f7ff fd88 	bl	8001fac <MX_GPIO_Init>
  MX_DMA_Init();
 800249c:	f7ff fd68 	bl	8001f70 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80024a0:	f000 fa68 	bl	8002974 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80024a4:	f7ff fde8 	bl	8002078 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80024a8:	f000 fa3a 	bl	8002920 <MX_USART1_UART_Init>

  lcd_init(&hi2c1, &lcdData); // initialise le lcd
 80024ac:	494c      	ldr	r1, [pc, #304]	; (80025e0 <main+0x154>)
 80024ae:	484d      	ldr	r0, [pc, #308]	; (80025e4 <main+0x158>)
 80024b0:	f7ff fe54 	bl	800215c <lcd_init>
  lcd_position(&hi2c1,0,0);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2100      	movs	r1, #0
 80024b8:	484a      	ldr	r0, [pc, #296]	; (80025e4 <main+0x158>)
 80024ba:	f7ff ff6e 	bl	800239a <lcd_position>
   lcd_print(&hi2c1,"Humidite ");;
 80024be:	494a      	ldr	r1, [pc, #296]	; (80025e8 <main+0x15c>)
 80024c0:	4848      	ldr	r0, [pc, #288]	; (80025e4 <main+0x158>)
 80024c2:	f7ff ff41 	bl	8002348 <lcd_print>
   lcd_position(&hi2c1,0,1);
 80024c6:	2201      	movs	r2, #1
 80024c8:	2100      	movs	r1, #0
 80024ca:	4846      	ldr	r0, [pc, #280]	; (80025e4 <main+0x158>)
 80024cc:	f7ff ff65 	bl	800239a <lcd_position>
   lcd_print(&hi2c1,"Temperature ");
 80024d0:	4946      	ldr	r1, [pc, #280]	; (80025ec <main+0x160>)
 80024d2:	4844      	ldr	r0, [pc, #272]	; (80025e4 <main+0x158>)
 80024d4:	f7ff ff38 	bl	8002348 <lcd_print>

   HAL_UART_Receive_DMA (&huart1, Recep, 4);
 80024d8:	2204      	movs	r2, #4
 80024da:	4945      	ldr	r1, [pc, #276]	; (80025f0 <main+0x164>)
 80024dc:	4845      	ldr	r0, [pc, #276]	; (80025f4 <main+0x168>)
 80024de:	f003 f9dd 	bl	800589c <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */
  /* USER CODE BEGIN 2 */
  bmp280_init_default_params(&bmp280.params);
 80024e2:	4845      	ldr	r0, [pc, #276]	; (80025f8 <main+0x16c>)
 80024e4:	f7fe ff1a 	bl	800131c <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_1;
 80024e8:	4b44      	ldr	r3, [pc, #272]	; (80025fc <main+0x170>)
 80024ea:	2277      	movs	r2, #119	; 0x77
 80024ec:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 80024ee:	4b43      	ldr	r3, [pc, #268]	; (80025fc <main+0x170>)
 80024f0:	4a3c      	ldr	r2, [pc, #240]	; (80025e4 <main+0x158>)
 80024f2:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bmp280_init(&bmp280, &bmp280.params);
 80024f4:	4940      	ldr	r1, [pc, #256]	; (80025f8 <main+0x16c>)
 80024f6:	4841      	ldr	r0, [pc, #260]	; (80025fc <main+0x170>)
 80024f8:	f7ff f889 	bl	800160e <bmp280_init>
  while (1)
  {
	  /* USER CODE END WHILE */
	  	  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 80024fc:	e012      	b.n	8002524 <main+0x98>
	  	  			size = sprintf((char *)Data,"Temperature/pressure reading failed\n\r");
 80024fe:	4940      	ldr	r1, [pc, #256]	; (8002600 <main+0x174>)
 8002500:	4840      	ldr	r0, [pc, #256]	; (8002604 <main+0x178>)
 8002502:	f004 f96f 	bl	80067e4 <siprintf>
 8002506:	4603      	mov	r3, r0
 8002508:	b29a      	uxth	r2, r3
 800250a:	4b3f      	ldr	r3, [pc, #252]	; (8002608 <main+0x17c>)
 800250c:	801a      	strh	r2, [r3, #0]
	  	  			HAL_UART_Transmit_DMA(&huart1, Data, size);
 800250e:	4b3e      	ldr	r3, [pc, #248]	; (8002608 <main+0x17c>)
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	493b      	ldr	r1, [pc, #236]	; (8002604 <main+0x178>)
 8002516:	4837      	ldr	r0, [pc, #220]	; (80025f4 <main+0x168>)
 8002518:	f003 f954 	bl	80057c4 <HAL_UART_Transmit_DMA>
	  	  			HAL_Delay(2000);
 800251c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002520:	f000 fb84 	bl	8002c2c <HAL_Delay>
	  	  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8002524:	4b39      	ldr	r3, [pc, #228]	; (800260c <main+0x180>)
 8002526:	4a3a      	ldr	r2, [pc, #232]	; (8002610 <main+0x184>)
 8002528:	493a      	ldr	r1, [pc, #232]	; (8002614 <main+0x188>)
 800252a:	4834      	ldr	r0, [pc, #208]	; (80025fc <main+0x170>)
 800252c:	f7ff fcd2 	bl	8001ed4 <bmp280_read_float>
 8002530:	4603      	mov	r3, r0
 8002532:	f083 0301 	eor.w	r3, r3, #1
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1e0      	bne.n	80024fe <main+0x72>
	  	  		}
	  	  pressure=pressure/100.;
 800253c:	4b34      	ldr	r3, [pc, #208]	; (8002610 <main+0x184>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4935      	ldr	r1, [pc, #212]	; (8002618 <main+0x18c>)
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fc7a 	bl	8000e3c <__aeabi_fdiv>
 8002548:	4603      	mov	r3, r0
 800254a:	461a      	mov	r2, r3
 800254c:	4b30      	ldr	r3, [pc, #192]	; (8002610 <main+0x184>)
 800254e:	601a      	str	r2, [r3, #0]
	  	 // size = sprintf((char *)Tx,"htgmnj 🙂");
	  	  	//  HAL_UART_Transmit(&huart1, Tx, size, 1000);

	  	  size = sprintf((char *)Data,"%.1f", temperature);
 8002550:	4b30      	ldr	r3, [pc, #192]	; (8002614 <main+0x188>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7fd ff7f 	bl	8000458 <__aeabi_f2d>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	492f      	ldr	r1, [pc, #188]	; (800261c <main+0x190>)
 8002560:	4828      	ldr	r0, [pc, #160]	; (8002604 <main+0x178>)
 8002562:	f004 f93f 	bl	80067e4 <siprintf>
 8002566:	4603      	mov	r3, r0
 8002568:	b29a      	uxth	r2, r3
 800256a:	4b27      	ldr	r3, [pc, #156]	; (8002608 <main+0x17c>)
 800256c:	801a      	strh	r2, [r3, #0]
	  	  HAL_UART_Transmit(&huart1, Data, 4,1000);
 800256e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002572:	2204      	movs	r2, #4
 8002574:	4923      	ldr	r1, [pc, #140]	; (8002604 <main+0x178>)
 8002576:	481f      	ldr	r0, [pc, #124]	; (80025f4 <main+0x168>)
 8002578:	f003 f891 	bl	800569e <HAL_UART_Transmit>
	  	/*  lcd_position(&hi2c1,0,0);
	  	  lcd_print(&hi2c1,Data);*/
	  	 HAL_Delay(100);
 800257c:	2064      	movs	r0, #100	; 0x64
 800257e:	f000 fb55 	bl	8002c2c <HAL_Delay>
	  	  size = sprintf((char *)Data,"%.f", pressure);
 8002582:	4b23      	ldr	r3, [pc, #140]	; (8002610 <main+0x184>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd ff66 	bl	8000458 <__aeabi_f2d>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4923      	ldr	r1, [pc, #140]	; (8002620 <main+0x194>)
 8002592:	481c      	ldr	r0, [pc, #112]	; (8002604 <main+0x178>)
 8002594:	f004 f926 	bl	80067e4 <siprintf>
 8002598:	4603      	mov	r3, r0
 800259a:	b29a      	uxth	r2, r3
 800259c:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <main+0x17c>)
 800259e:	801a      	strh	r2, [r3, #0]
	  	  if (size==3) {
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <main+0x17c>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d10e      	bne.n	80025c6 <main+0x13a>
	  		HAL_UART_Transmit(&huart1,"0",1,1000);
 80025a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ac:	2201      	movs	r2, #1
 80025ae:	491d      	ldr	r1, [pc, #116]	; (8002624 <main+0x198>)
 80025b0:	4810      	ldr	r0, [pc, #64]	; (80025f4 <main+0x168>)
 80025b2:	f003 f874 	bl	800569e <HAL_UART_Transmit>
	  		HAL_UART_Transmit(&huart1, Data, 3,1000);
 80025b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ba:	2203      	movs	r2, #3
 80025bc:	4911      	ldr	r1, [pc, #68]	; (8002604 <main+0x178>)
 80025be:	480d      	ldr	r0, [pc, #52]	; (80025f4 <main+0x168>)
 80025c0:	f003 f86d 	bl	800569e <HAL_UART_Transmit>
 80025c4:	e006      	b.n	80025d4 <main+0x148>
	  	  }
	  	  else {
		  	  HAL_UART_Transmit(&huart1, Data, 4,1000);
 80025c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ca:	2204      	movs	r2, #4
 80025cc:	490d      	ldr	r1, [pc, #52]	; (8002604 <main+0x178>)
 80025ce:	4809      	ldr	r0, [pc, #36]	; (80025f4 <main+0x168>)
 80025d0:	f003 f865 	bl	800569e <HAL_UART_Transmit>
	  	  }
	  	/*  lcd_position(&hi2c1,0,1);
	  	  lcd_print(&hi2c1,Data);*/

	      /* USER CODE BEGIN 3 */
	  	 HAL_Delay(1000);
 80025d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025d8:	f000 fb28 	bl	8002c2c <HAL_Delay>
	  	  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 80025dc:	e7a2      	b.n	8002524 <main+0x98>
 80025de:	bf00      	nop
 80025e0:	20000284 	.word	0x20000284
 80025e4:	200001fc 	.word	0x200001fc
 80025e8:	08008cf8 	.word	0x08008cf8
 80025ec:	08008d04 	.word	0x08008d04
 80025f0:	2000029c 	.word	0x2000029c
 80025f4:	200002a4 	.word	0x200002a4
 80025f8:	2000027c 	.word	0x2000027c
 80025fc:	20000250 	.word	0x20000250
 8002600:	08008d14 	.word	0x08008d14
 8002604:	20000298 	.word	0x20000298
 8002608:	20000294 	.word	0x20000294
 800260c:	20000290 	.word	0x20000290
 8002610:	20000288 	.word	0x20000288
 8002614:	2000028c 	.word	0x2000028c
 8002618:	42c80000 	.word	0x42c80000
 800261c:	08008d3c 	.word	0x08008d3c
 8002620:	08008d44 	.word	0x08008d44
 8002624:	08008d48 	.word	0x08008d48

08002628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b092      	sub	sp, #72	; 0x48
 800262c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800262e:	f107 0314 	add.w	r3, r7, #20
 8002632:	2234      	movs	r2, #52	; 0x34
 8002634:	2100      	movs	r1, #0
 8002636:	4618      	mov	r0, r3
 8002638:	f003 fc6c 	bl	8005f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800263c:	463b      	mov	r3, r7
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	60da      	str	r2, [r3, #12]
 8002648:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800264a:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <SystemClock_Config+0x98>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002652:	4a1b      	ldr	r2, [pc, #108]	; (80026c0 <SystemClock_Config+0x98>)
 8002654:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002658:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800265a:	2302      	movs	r3, #2
 800265c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800265e:	2301      	movs	r3, #1
 8002660:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002662:	2310      	movs	r3, #16
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002666:	2302      	movs	r3, #2
 8002668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800266a:	2300      	movs	r3, #0
 800266c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800266e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8002674:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002678:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	4618      	mov	r0, r3
 8002680:	f002 f9ca 	bl	8004a18 <HAL_RCC_OscConfig>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800268a:	f000 f81b 	bl	80026c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800268e:	230f      	movs	r3, #15
 8002690:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002692:	2303      	movs	r3, #3
 8002694:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80026a2:	463b      	mov	r3, r7
 80026a4:	2101      	movs	r1, #1
 80026a6:	4618      	mov	r0, r3
 80026a8:	f002 fce6 	bl	8005078 <HAL_RCC_ClockConfig>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80026b2:	f000 f807 	bl	80026c4 <Error_Handler>
  }
}
 80026b6:	bf00      	nop
 80026b8:	3748      	adds	r7, #72	; 0x48
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40007000 	.word	0x40007000

080026c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026c8:	b672      	cpsid	i
}
 80026ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026cc:	e7fe      	b.n	80026cc <Error_Handler+0x8>
	...

080026d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <HAL_MspInit+0x5c>)
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	4a14      	ldr	r2, [pc, #80]	; (800272c <HAL_MspInit+0x5c>)
 80026dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026e0:	6253      	str	r3, [r2, #36]	; 0x24
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_MspInit+0x5c>)
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ee:	4b0f      	ldr	r3, [pc, #60]	; (800272c <HAL_MspInit+0x5c>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4a0e      	ldr	r2, [pc, #56]	; (800272c <HAL_MspInit+0x5c>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6213      	str	r3, [r2, #32]
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <HAL_MspInit+0x5c>)
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <HAL_MspInit+0x5c>)
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	4a08      	ldr	r2, [pc, #32]	; (800272c <HAL_MspInit+0x5c>)
 800270c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002710:	6253      	str	r3, [r2, #36]	; 0x24
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_MspInit+0x5c>)
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800271e:	2007      	movs	r0, #7
 8002720:	f000 fb72 	bl	8002e08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002724:	bf00      	nop
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40023800 	.word	0x40023800

08002730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002734:	e7fe      	b.n	8002734 <NMI_Handler+0x4>

08002736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800273a:	e7fe      	b.n	800273a <HardFault_Handler+0x4>

0800273c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <MemManage_Handler+0x4>

08002742 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002746:	e7fe      	b.n	8002746 <BusFault_Handler+0x4>

08002748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800274c:	e7fe      	b.n	800274c <UsageFault_Handler+0x4>

0800274e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002776:	f000 fa3d 	bl	8002bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <DMA1_Channel5_IRQHandler+0x10>)
 8002786:	f000 fc55 	bl	8003034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	2000032c 	.word	0x2000032c

08002794 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return 1;
 8002798:	2301      	movs	r3, #1
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <_kill>:

int _kill(int pid, int sig)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027ac:	f003 fb88 	bl	8005ec0 <__errno>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2216      	movs	r2, #22
 80027b4:	601a      	str	r2, [r3, #0]
  return -1;
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <_exit>:

void _exit (int status)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027ca:	f04f 31ff 	mov.w	r1, #4294967295
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ffe7 	bl	80027a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027d4:	e7fe      	b.n	80027d4 <_exit+0x12>

080027d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b086      	sub	sp, #24
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	e00a      	b.n	80027fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027e8:	f3af 8000 	nop.w
 80027ec:	4601      	mov	r1, r0
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	60ba      	str	r2, [r7, #8]
 80027f4:	b2ca      	uxtb	r2, r1
 80027f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	3301      	adds	r3, #1
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	429a      	cmp	r2, r3
 8002804:	dbf0      	blt.n	80027e8 <_read+0x12>
  }

  return len;
 8002806:	687b      	ldr	r3, [r7, #4]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	e009      	b.n	8002836 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	60ba      	str	r2, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3301      	adds	r3, #1
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	429a      	cmp	r2, r3
 800283c:	dbf1      	blt.n	8002822 <_write+0x12>
  }
  return len;
 800283e:	687b      	ldr	r3, [r7, #4]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <_close>:

int _close(int file)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002850:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800286e:	605a      	str	r2, [r3, #4]
  return 0;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <_isatty>:

int _isatty(int file)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002884:	2301      	movs	r3, #1
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b0:	4a14      	ldr	r2, [pc, #80]	; (8002904 <_sbrk+0x5c>)
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <_sbrk+0x60>)
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028bc:	4b13      	ldr	r3, [pc, #76]	; (800290c <_sbrk+0x64>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <_sbrk+0x64>)
 80028c6:	4a12      	ldr	r2, [pc, #72]	; (8002910 <_sbrk+0x68>)
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <_sbrk+0x64>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d207      	bcs.n	80028e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d8:	f003 faf2 	bl	8005ec0 <__errno>
 80028dc:	4603      	mov	r3, r0
 80028de:	220c      	movs	r2, #12
 80028e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295
 80028e6:	e009      	b.n	80028fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <_sbrk+0x64>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ee:	4b07      	ldr	r3, [pc, #28]	; (800290c <_sbrk+0x64>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <_sbrk+0x64>)
 80028f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028fa:	68fb      	ldr	r3, [r7, #12]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20014000 	.word	0x20014000
 8002908:	00000400 	.word	0x00000400
 800290c:	200002a0 	.word	0x200002a0
 8002910:	20000388 	.word	0x20000388

08002914 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <MX_USART1_UART_Init+0x4c>)
 8002926:	4a12      	ldr	r2, [pc, #72]	; (8002970 <MX_USART1_UART_Init+0x50>)
 8002928:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <MX_USART1_UART_Init+0x4c>)
 800292c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002930:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <MX_USART1_UART_Init+0x4c>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <MX_USART1_UART_Init+0x4c>)
 800293a:	2200      	movs	r2, #0
 800293c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800293e:	4b0b      	ldr	r3, [pc, #44]	; (800296c <MX_USART1_UART_Init+0x4c>)
 8002940:	2200      	movs	r2, #0
 8002942:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <MX_USART1_UART_Init+0x4c>)
 8002946:	220c      	movs	r2, #12
 8002948:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <MX_USART1_UART_Init+0x4c>)
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <MX_USART1_UART_Init+0x4c>)
 8002952:	2200      	movs	r2, #0
 8002954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002956:	4805      	ldr	r0, [pc, #20]	; (800296c <MX_USART1_UART_Init+0x4c>)
 8002958:	f002 fe54 	bl	8005604 <HAL_UART_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002962:	f7ff feaf 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	200002a4 	.word	0x200002a4
 8002970:	40013800 	.word	0x40013800

08002974 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002978:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 800297a:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <MX_USART2_UART_Init+0x50>)
 800297c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 8002980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002986:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 800298e:	2200      	movs	r2, #0
 8002990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002992:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002998:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 800299a:	220c      	movs	r2, #12
 800299c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800299e:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029aa:	4805      	ldr	r0, [pc, #20]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 80029ac:	f002 fe2a 	bl	8005604 <HAL_UART_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029b6:	f7ff fe85 	bl	80026c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	200002e8 	.word	0x200002e8
 80029c4:	40004400 	.word	0x40004400

080029c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08c      	sub	sp, #48	; 0x30
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	f107 031c 	add.w	r3, r7, #28
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a41      	ldr	r2, [pc, #260]	; (8002aec <HAL_UART_MspInit+0x124>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d14f      	bne.n	8002a8a <HAL_UART_MspInit+0xc2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029ea:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <HAL_UART_MspInit+0x128>)
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	4a40      	ldr	r2, [pc, #256]	; (8002af0 <HAL_UART_MspInit+0x128>)
 80029f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f4:	6213      	str	r3, [r2, #32]
 80029f6:	4b3e      	ldr	r3, [pc, #248]	; (8002af0 <HAL_UART_MspInit+0x128>)
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fe:	61bb      	str	r3, [r7, #24]
 8002a00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a02:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <HAL_UART_MspInit+0x128>)
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	4a3a      	ldr	r2, [pc, #232]	; (8002af0 <HAL_UART_MspInit+0x128>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	61d3      	str	r3, [r2, #28]
 8002a0e:	4b38      	ldr	r3, [pc, #224]	; (8002af0 <HAL_UART_MspInit+0x128>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a2c:	2307      	movs	r3, #7
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a30:	f107 031c 	add.w	r3, r7, #28
 8002a34:	4619      	mov	r1, r3
 8002a36:	482f      	ldr	r0, [pc, #188]	; (8002af4 <HAL_UART_MspInit+0x12c>)
 8002a38:	f000 fbda 	bl	80031f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002a3c:	4b2e      	ldr	r3, [pc, #184]	; (8002af8 <HAL_UART_MspInit+0x130>)
 8002a3e:	4a2f      	ldr	r2, [pc, #188]	; (8002afc <HAL_UART_MspInit+0x134>)
 8002a40:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a42:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_UART_MspInit+0x130>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a48:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <HAL_UART_MspInit+0x130>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a4e:	4b2a      	ldr	r3, [pc, #168]	; (8002af8 <HAL_UART_MspInit+0x130>)
 8002a50:	2280      	movs	r2, #128	; 0x80
 8002a52:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a54:	4b28      	ldr	r3, [pc, #160]	; (8002af8 <HAL_UART_MspInit+0x130>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a5a:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <HAL_UART_MspInit+0x130>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002a60:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <HAL_UART_MspInit+0x130>)
 8002a62:	2220      	movs	r2, #32
 8002a64:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a66:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <HAL_UART_MspInit+0x130>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a6c:	4822      	ldr	r0, [pc, #136]	; (8002af8 <HAL_UART_MspInit+0x130>)
 8002a6e:	f000 fa0d 	bl	8002e8c <HAL_DMA_Init>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8002a78:	f7ff fe24 	bl	80026c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a1e      	ldr	r2, [pc, #120]	; (8002af8 <HAL_UART_MspInit+0x130>)
 8002a80:	639a      	str	r2, [r3, #56]	; 0x38
 8002a82:	4a1d      	ldr	r2, [pc, #116]	; (8002af8 <HAL_UART_MspInit+0x130>)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a88:	e02c      	b.n	8002ae4 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <HAL_UART_MspInit+0x138>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d127      	bne.n	8002ae4 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a94:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <HAL_UART_MspInit+0x128>)
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <HAL_UART_MspInit+0x128>)
 8002a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a9e:	6253      	str	r3, [r2, #36]	; 0x24
 8002aa0:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <HAL_UART_MspInit+0x128>)
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <HAL_UART_MspInit+0x128>)
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <HAL_UART_MspInit+0x128>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	61d3      	str	r3, [r2, #28]
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <HAL_UART_MspInit+0x128>)
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ac4:	230c      	movs	r3, #12
 8002ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ad4:	2307      	movs	r3, #7
 8002ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad8:	f107 031c 	add.w	r3, r7, #28
 8002adc:	4619      	mov	r1, r3
 8002ade:	4805      	ldr	r0, [pc, #20]	; (8002af4 <HAL_UART_MspInit+0x12c>)
 8002ae0:	f000 fb86 	bl	80031f0 <HAL_GPIO_Init>
}
 8002ae4:	bf00      	nop
 8002ae6:	3730      	adds	r7, #48	; 0x30
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40013800 	.word	0x40013800
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020000 	.word	0x40020000
 8002af8:	2000032c 	.word	0x2000032c
 8002afc:	40026058 	.word	0x40026058
 8002b00:	40004400 	.word	0x40004400

08002b04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b04:	480c      	ldr	r0, [pc, #48]	; (8002b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b06:	490d      	ldr	r1, [pc, #52]	; (8002b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b08:	4a0d      	ldr	r2, [pc, #52]	; (8002b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b0c:	e002      	b.n	8002b14 <LoopCopyDataInit>

08002b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b12:	3304      	adds	r3, #4

08002b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b18:	d3f9      	bcc.n	8002b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b1a:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b1c:	4c0a      	ldr	r4, [pc, #40]	; (8002b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b20:	e001      	b.n	8002b26 <LoopFillZerobss>

08002b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b24:	3204      	adds	r2, #4

08002b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b28:	d3fb      	bcc.n	8002b22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b2a:	f7ff fef3 	bl	8002914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b2e:	f003 f9cd 	bl	8005ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b32:	f7ff fcab 	bl	800248c <main>
  bx lr
 8002b36:	4770      	bx	lr
  ldr r0, =_sdata
 8002b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b3c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002b40:	0800915c 	.word	0x0800915c
  ldr r2, =_sbss
 8002b44:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002b48:	20000384 	.word	0x20000384

08002b4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b4c:	e7fe      	b.n	8002b4c <ADC1_IRQHandler>

08002b4e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b58:	2003      	movs	r0, #3
 8002b5a:	f000 f955 	bl	8002e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f000 f80e 	bl	8002b80 <HAL_InitTick>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	71fb      	strb	r3, [r7, #7]
 8002b6e:	e001      	b.n	8002b74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b70:	f7ff fdae 	bl	80026d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b74:	79fb      	ldrb	r3, [r7, #7]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002b8c:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <HAL_InitTick+0x68>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d022      	beq.n	8002bda <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002b94:	4b15      	ldr	r3, [pc, #84]	; (8002bec <HAL_InitTick+0x6c>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <HAL_InitTick+0x68>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ba0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 f962 	bl	8002e72 <HAL_SYSTICK_Config>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10f      	bne.n	8002bd4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b0f      	cmp	r3, #15
 8002bb8:	d809      	bhi.n	8002bce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc2:	f000 f92c 	bl	8002e1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <HAL_InitTick+0x70>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	e007      	b.n	8002bde <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	e004      	b.n	8002bde <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
 8002bd8:	e001      	b.n	8002bde <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	2000000c 	.word	0x2000000c
 8002bec:	20000004 	.word	0x20000004
 8002bf0:	20000008 	.word	0x20000008

08002bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <HAL_IncTick+0x1c>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_IncTick+0x20>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4413      	add	r3, r2
 8002c02:	4a03      	ldr	r2, [pc, #12]	; (8002c10 <HAL_IncTick+0x1c>)
 8002c04:	6013      	str	r3, [r2, #0]
}
 8002c06:	bf00      	nop
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20000370 	.word	0x20000370
 8002c14:	2000000c 	.word	0x2000000c

08002c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c1c:	4b02      	ldr	r3, [pc, #8]	; (8002c28 <HAL_GetTick+0x10>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	20000370 	.word	0x20000370

08002c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c34:	f7ff fff0 	bl	8002c18 <HAL_GetTick>
 8002c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c44:	d004      	beq.n	8002c50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c46:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <HAL_Delay+0x40>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c50:	bf00      	nop
 8002c52:	f7ff ffe1 	bl	8002c18 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d8f7      	bhi.n	8002c52 <HAL_Delay+0x26>
  {
  }
}
 8002c62:	bf00      	nop
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	2000000c 	.word	0x2000000c

08002c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ca2:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	60d3      	str	r3, [r2, #12]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	f003 0307 	and.w	r3, r3, #7
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	db0b      	blt.n	8002cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	f003 021f 	and.w	r2, r3, #31
 8002cec:	4906      	ldr	r1, [pc, #24]	; (8002d08 <__NVIC_EnableIRQ+0x34>)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr
 8002d08:	e000e100 	.word	0xe000e100

08002d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	6039      	str	r1, [r7, #0]
 8002d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	db0a      	blt.n	8002d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	490c      	ldr	r1, [pc, #48]	; (8002d58 <__NVIC_SetPriority+0x4c>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	0112      	lsls	r2, r2, #4
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	440b      	add	r3, r1
 8002d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d34:	e00a      	b.n	8002d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4908      	ldr	r1, [pc, #32]	; (8002d5c <__NVIC_SetPriority+0x50>)
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	3b04      	subs	r3, #4
 8002d44:	0112      	lsls	r2, r2, #4
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	440b      	add	r3, r1
 8002d4a:	761a      	strb	r2, [r3, #24]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000e100 	.word	0xe000e100
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	; 0x24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f1c3 0307 	rsb	r3, r3, #7
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	bf28      	it	cs
 8002d7e:	2304      	movcs	r3, #4
 8002d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3304      	adds	r3, #4
 8002d86:	2b06      	cmp	r3, #6
 8002d88:	d902      	bls.n	8002d90 <NVIC_EncodePriority+0x30>
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3b03      	subs	r3, #3
 8002d8e:	e000      	b.n	8002d92 <NVIC_EncodePriority+0x32>
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d94:	f04f 32ff 	mov.w	r2, #4294967295
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	401a      	ands	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	fa01 f303 	lsl.w	r3, r1, r3
 8002db2:	43d9      	mvns	r1, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	4313      	orrs	r3, r2
         );
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3724      	adds	r7, #36	; 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dd4:	d301      	bcc.n	8002dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00f      	b.n	8002dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dda:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <SysTick_Config+0x40>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002de2:	210f      	movs	r1, #15
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295
 8002de8:	f7ff ff90 	bl	8002d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <SysTick_Config+0x40>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002df2:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <SysTick_Config+0x40>)
 8002df4:	2207      	movs	r2, #7
 8002df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	e000e010 	.word	0xe000e010

08002e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ff2d 	bl	8002c70 <__NVIC_SetPriorityGrouping>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4603      	mov	r3, r0
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e30:	f7ff ff42 	bl	8002cb8 <__NVIC_GetPriorityGrouping>
 8002e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	6978      	ldr	r0, [r7, #20]
 8002e3c:	f7ff ff90 	bl	8002d60 <NVIC_EncodePriority>
 8002e40:	4602      	mov	r2, r0
 8002e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff5f 	bl	8002d0c <__NVIC_SetPriority>
}
 8002e4e:	bf00      	nop
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ff35 	bl	8002cd4 <__NVIC_EnableIRQ>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ffa2 	bl	8002dc4 <SysTick_Config>
 8002e80:	4603      	mov	r3, r0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e059      	b.n	8002f52 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4b2d      	ldr	r3, [pc, #180]	; (8002f5c <HAL_DMA_Init+0xd0>)
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d80f      	bhi.n	8002eca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4b2b      	ldr	r3, [pc, #172]	; (8002f60 <HAL_DMA_Init+0xd4>)
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4a2b      	ldr	r2, [pc, #172]	; (8002f64 <HAL_DMA_Init+0xd8>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	009a      	lsls	r2, r3, #2
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a28      	ldr	r2, [pc, #160]	; (8002f68 <HAL_DMA_Init+0xdc>)
 8002ec6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ec8:	e00e      	b.n	8002ee8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <HAL_DMA_Init+0xe0>)
 8002ed2:	4413      	add	r3, r2
 8002ed4:	4a23      	ldr	r2, [pc, #140]	; (8002f64 <HAL_DMA_Init+0xd8>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	091b      	lsrs	r3, r3, #4
 8002edc:	009a      	lsls	r2, r3, #2
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a22      	ldr	r2, [pc, #136]	; (8002f70 <HAL_DMA_Init+0xe4>)
 8002ee6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	40026407 	.word	0x40026407
 8002f60:	bffd9ff8 	.word	0xbffd9ff8
 8002f64:	cccccccd 	.word	0xcccccccd
 8002f68:	40026000 	.word	0x40026000
 8002f6c:	bffd9bf8 	.word	0xbffd9bf8
 8002f70:	40026400 	.word	0x40026400

08002f74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_DMA_Start_IT+0x20>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e04b      	b.n	800302c <HAL_DMA_Start_IT+0xb8>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d13a      	bne.n	800301e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0201 	bic.w	r2, r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f8e0 	bl	8003192 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d008      	beq.n	8002fec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 020e 	orr.w	r2, r2, #14
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	e00f      	b.n	800300c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0204 	bic.w	r2, r2, #4
 8002ffa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 020a 	orr.w	r2, r2, #10
 800300a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e005      	b.n	800302a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003026:	2302      	movs	r3, #2
 8003028:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800302a:	7dfb      	ldrb	r3, [r7, #23]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f003 031c 	and.w	r3, r3, #28
 8003054:	2204      	movs	r2, #4
 8003056:	409a      	lsls	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4013      	ands	r3, r2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d026      	beq.n	80030ae <HAL_DMA_IRQHandler+0x7a>
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d021      	beq.n	80030ae <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b00      	cmp	r3, #0
 8003076:	d107      	bne.n	8003088 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0204 	bic.w	r2, r2, #4
 8003086:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	f003 021c 	and.w	r2, r3, #28
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003094:	2104      	movs	r1, #4
 8003096:	fa01 f202 	lsl.w	r2, r1, r2
 800309a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d071      	beq.n	8003188 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80030ac:	e06c      	b.n	8003188 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f003 031c 	and.w	r3, r3, #28
 80030b6:	2202      	movs	r2, #2
 80030b8:	409a      	lsls	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d02e      	beq.n	8003120 <HAL_DMA_IRQHandler+0xec>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d029      	beq.n	8003120 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10b      	bne.n	80030f2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 020a 	bic.w	r2, r2, #10
 80030e8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f003 021c 	and.w	r2, r3, #28
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fe:	2102      	movs	r1, #2
 8003100:	fa01 f202 	lsl.w	r2, r1, r2
 8003104:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	2b00      	cmp	r3, #0
 8003114:	d038      	beq.n	8003188 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800311e:	e033      	b.n	8003188 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	f003 031c 	and.w	r3, r3, #28
 8003128:	2208      	movs	r2, #8
 800312a:	409a      	lsls	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4013      	ands	r3, r2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d02a      	beq.n	800318a <HAL_DMA_IRQHandler+0x156>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d025      	beq.n	800318a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 020e 	bic.w	r2, r2, #14
 800314c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f003 021c 	and.w	r2, r3, #28
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315a:	2101      	movs	r1, #1
 800315c:	fa01 f202 	lsl.w	r2, r1, r2
 8003160:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	2b00      	cmp	r3, #0
 800317e:	d004      	beq.n	800318a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003188:	bf00      	nop
 800318a:	bf00      	nop
}
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003192:	b480      	push	{r7}
 8003194:	b085      	sub	sp, #20
 8003196:	af00      	add	r7, sp, #0
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f003 021c 	and.w	r2, r3, #28
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	2101      	movs	r1, #1
 80031ae:	fa01 f202 	lsl.w	r2, r1, r2
 80031b2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b10      	cmp	r3, #16
 80031c2:	d108      	bne.n	80031d6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031d4:	e007      	b.n	80031e6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	60da      	str	r2, [r3, #12]
}
 80031e6:	bf00      	nop
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003206:	e160      	b.n	80034ca <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	2101      	movs	r1, #1
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	fa01 f303 	lsl.w	r3, r1, r3
 8003214:	4013      	ands	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 8152 	beq.w	80034c4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	2b01      	cmp	r3, #1
 800322a:	d005      	beq.n	8003238 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003234:	2b02      	cmp	r3, #2
 8003236:	d130      	bne.n	800329a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	2203      	movs	r2, #3
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800326e:	2201      	movs	r2, #1
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	fa02 f303 	lsl.w	r3, r2, r3
 8003276:	43db      	mvns	r3, r3
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4013      	ands	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	091b      	lsrs	r3, r3, #4
 8003284:	f003 0201 	and.w	r2, r3, #1
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d017      	beq.n	80032d6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	2203      	movs	r2, #3
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4013      	ands	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d123      	bne.n	800332a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	08da      	lsrs	r2, r3, #3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3208      	adds	r2, #8
 80032ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ee:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	220f      	movs	r2, #15
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	691a      	ldr	r2, [r3, #16]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	08da      	lsrs	r2, r3, #3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3208      	adds	r2, #8
 8003324:	6939      	ldr	r1, [r7, #16]
 8003326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	2203      	movs	r2, #3
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0203 	and.w	r2, r3, #3
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80ac 	beq.w	80034c4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336c:	4b5e      	ldr	r3, [pc, #376]	; (80034e8 <HAL_GPIO_Init+0x2f8>)
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	4a5d      	ldr	r2, [pc, #372]	; (80034e8 <HAL_GPIO_Init+0x2f8>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	6213      	str	r3, [r2, #32]
 8003378:	4b5b      	ldr	r3, [pc, #364]	; (80034e8 <HAL_GPIO_Init+0x2f8>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003384:	4a59      	ldr	r2, [pc, #356]	; (80034ec <HAL_GPIO_Init+0x2fc>)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	3302      	adds	r3, #2
 800338c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003390:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	220f      	movs	r2, #15
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a51      	ldr	r2, [pc, #324]	; (80034f0 <HAL_GPIO_Init+0x300>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d025      	beq.n	80033fc <HAL_GPIO_Init+0x20c>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a50      	ldr	r2, [pc, #320]	; (80034f4 <HAL_GPIO_Init+0x304>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d01f      	beq.n	80033f8 <HAL_GPIO_Init+0x208>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a4f      	ldr	r2, [pc, #316]	; (80034f8 <HAL_GPIO_Init+0x308>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d019      	beq.n	80033f4 <HAL_GPIO_Init+0x204>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a4e      	ldr	r2, [pc, #312]	; (80034fc <HAL_GPIO_Init+0x30c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d013      	beq.n	80033f0 <HAL_GPIO_Init+0x200>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a4d      	ldr	r2, [pc, #308]	; (8003500 <HAL_GPIO_Init+0x310>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00d      	beq.n	80033ec <HAL_GPIO_Init+0x1fc>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a4c      	ldr	r2, [pc, #304]	; (8003504 <HAL_GPIO_Init+0x314>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d007      	beq.n	80033e8 <HAL_GPIO_Init+0x1f8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a4b      	ldr	r2, [pc, #300]	; (8003508 <HAL_GPIO_Init+0x318>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d101      	bne.n	80033e4 <HAL_GPIO_Init+0x1f4>
 80033e0:	2306      	movs	r3, #6
 80033e2:	e00c      	b.n	80033fe <HAL_GPIO_Init+0x20e>
 80033e4:	2307      	movs	r3, #7
 80033e6:	e00a      	b.n	80033fe <HAL_GPIO_Init+0x20e>
 80033e8:	2305      	movs	r3, #5
 80033ea:	e008      	b.n	80033fe <HAL_GPIO_Init+0x20e>
 80033ec:	2304      	movs	r3, #4
 80033ee:	e006      	b.n	80033fe <HAL_GPIO_Init+0x20e>
 80033f0:	2303      	movs	r3, #3
 80033f2:	e004      	b.n	80033fe <HAL_GPIO_Init+0x20e>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e002      	b.n	80033fe <HAL_GPIO_Init+0x20e>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <HAL_GPIO_Init+0x20e>
 80033fc:	2300      	movs	r3, #0
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	f002 0203 	and.w	r2, r2, #3
 8003404:	0092      	lsls	r2, r2, #2
 8003406:	4093      	lsls	r3, r2
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800340e:	4937      	ldr	r1, [pc, #220]	; (80034ec <HAL_GPIO_Init+0x2fc>)
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	3302      	adds	r3, #2
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800341c:	4b3b      	ldr	r3, [pc, #236]	; (800350c <HAL_GPIO_Init+0x31c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	43db      	mvns	r3, r3
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4013      	ands	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003440:	4a32      	ldr	r2, [pc, #200]	; (800350c <HAL_GPIO_Init+0x31c>)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003446:	4b31      	ldr	r3, [pc, #196]	; (800350c <HAL_GPIO_Init+0x31c>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	43db      	mvns	r3, r3
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4013      	ands	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800346a:	4a28      	ldr	r2, [pc, #160]	; (800350c <HAL_GPIO_Init+0x31c>)
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003470:	4b26      	ldr	r3, [pc, #152]	; (800350c <HAL_GPIO_Init+0x31c>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	43db      	mvns	r3, r3
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4013      	ands	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003494:	4a1d      	ldr	r2, [pc, #116]	; (800350c <HAL_GPIO_Init+0x31c>)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800349a:	4b1c      	ldr	r3, [pc, #112]	; (800350c <HAL_GPIO_Init+0x31c>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4013      	ands	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80034be:	4a13      	ldr	r2, [pc, #76]	; (800350c <HAL_GPIO_Init+0x31c>)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	3301      	adds	r3, #1
 80034c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f47f ae97 	bne.w	8003208 <HAL_GPIO_Init+0x18>
  }
}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	371c      	adds	r7, #28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40010000 	.word	0x40010000
 80034f0:	40020000 	.word	0x40020000
 80034f4:	40020400 	.word	0x40020400
 80034f8:	40020800 	.word	0x40020800
 80034fc:	40020c00 	.word	0x40020c00
 8003500:	40021000 	.word	0x40021000
 8003504:	40021400 	.word	0x40021400
 8003508:	40021800 	.word	0x40021800
 800350c:	40010400 	.word	0x40010400

08003510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	807b      	strh	r3, [r7, #2]
 800351c:	4613      	mov	r3, r2
 800351e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003520:	787b      	ldrb	r3, [r7, #1]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003526:	887a      	ldrh	r2, [r7, #2]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800352c:	e003      	b.n	8003536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800352e:	887b      	ldrh	r3, [r7, #2]
 8003530:	041a      	lsls	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	619a      	str	r2, [r3, #24]
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e12b      	b.n	80037aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fe fdb4 	bl	80020d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2224      	movs	r2, #36	; 0x24
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035a4:	f001 ffa6 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 80035a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4a81      	ldr	r2, [pc, #516]	; (80037b4 <HAL_I2C_Init+0x274>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d807      	bhi.n	80035c4 <HAL_I2C_Init+0x84>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4a80      	ldr	r2, [pc, #512]	; (80037b8 <HAL_I2C_Init+0x278>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	bf94      	ite	ls
 80035bc:	2301      	movls	r3, #1
 80035be:	2300      	movhi	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e006      	b.n	80035d2 <HAL_I2C_Init+0x92>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4a7d      	ldr	r2, [pc, #500]	; (80037bc <HAL_I2C_Init+0x27c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	bf94      	ite	ls
 80035cc:	2301      	movls	r3, #1
 80035ce:	2300      	movhi	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0e7      	b.n	80037aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4a78      	ldr	r2, [pc, #480]	; (80037c0 <HAL_I2C_Init+0x280>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	0c9b      	lsrs	r3, r3, #18
 80035e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4a6a      	ldr	r2, [pc, #424]	; (80037b4 <HAL_I2C_Init+0x274>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d802      	bhi.n	8003614 <HAL_I2C_Init+0xd4>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	3301      	adds	r3, #1
 8003612:	e009      	b.n	8003628 <HAL_I2C_Init+0xe8>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	4a69      	ldr	r2, [pc, #420]	; (80037c4 <HAL_I2C_Init+0x284>)
 8003620:	fba2 2303 	umull	r2, r3, r2, r3
 8003624:	099b      	lsrs	r3, r3, #6
 8003626:	3301      	adds	r3, #1
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	430b      	orrs	r3, r1
 800362e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800363a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	495c      	ldr	r1, [pc, #368]	; (80037b4 <HAL_I2C_Init+0x274>)
 8003644:	428b      	cmp	r3, r1
 8003646:	d819      	bhi.n	800367c <HAL_I2C_Init+0x13c>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1e59      	subs	r1, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fbb1 f3f3 	udiv	r3, r1, r3
 8003656:	1c59      	adds	r1, r3, #1
 8003658:	f640 73fc 	movw	r3, #4092	; 0xffc
 800365c:	400b      	ands	r3, r1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_I2C_Init+0x138>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1e59      	subs	r1, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003670:	3301      	adds	r3, #1
 8003672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003676:	e051      	b.n	800371c <HAL_I2C_Init+0x1dc>
 8003678:	2304      	movs	r3, #4
 800367a:	e04f      	b.n	800371c <HAL_I2C_Init+0x1dc>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d111      	bne.n	80036a8 <HAL_I2C_Init+0x168>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	1e58      	subs	r0, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6859      	ldr	r1, [r3, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	440b      	add	r3, r1
 8003692:	fbb0 f3f3 	udiv	r3, r0, r3
 8003696:	3301      	adds	r3, #1
 8003698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e012      	b.n	80036ce <HAL_I2C_Init+0x18e>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1e58      	subs	r0, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	0099      	lsls	r1, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80036be:	3301      	adds	r3, #1
 80036c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_I2C_Init+0x196>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e022      	b.n	800371c <HAL_I2C_Init+0x1dc>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10e      	bne.n	80036fc <HAL_I2C_Init+0x1bc>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1e58      	subs	r0, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6859      	ldr	r1, [r3, #4]
 80036e6:	460b      	mov	r3, r1
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	440b      	add	r3, r1
 80036ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f0:	3301      	adds	r3, #1
 80036f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036fa:	e00f      	b.n	800371c <HAL_I2C_Init+0x1dc>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1e58      	subs	r0, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	0099      	lsls	r1, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003712:	3301      	adds	r3, #1
 8003714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003718:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	6809      	ldr	r1, [r1, #0]
 8003720:	4313      	orrs	r3, r2
 8003722:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69da      	ldr	r2, [r3, #28]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800374a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6911      	ldr	r1, [r2, #16]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68d2      	ldr	r2, [r2, #12]
 8003756:	4311      	orrs	r1, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	430b      	orrs	r3, r1
 800375e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	000186a0 	.word	0x000186a0
 80037b8:	001e847f 	.word	0x001e847f
 80037bc:	003d08ff 	.word	0x003d08ff
 80037c0:	431bde83 	.word	0x431bde83
 80037c4:	10624dd3 	.word	0x10624dd3

080037c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	607a      	str	r2, [r7, #4]
 80037d2:	461a      	mov	r2, r3
 80037d4:	460b      	mov	r3, r1
 80037d6:	817b      	strh	r3, [r7, #10]
 80037d8:	4613      	mov	r3, r2
 80037da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037dc:	f7ff fa1c 	bl	8002c18 <HAL_GetTick>
 80037e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	f040 80e0 	bne.w	80039b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	2319      	movs	r3, #25
 80037f6:	2201      	movs	r2, #1
 80037f8:	4970      	ldr	r1, [pc, #448]	; (80039bc <HAL_I2C_Master_Transmit+0x1f4>)
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 ff30 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003806:	2302      	movs	r3, #2
 8003808:	e0d3      	b.n	80039b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_I2C_Master_Transmit+0x50>
 8003814:	2302      	movs	r3, #2
 8003816:	e0cc      	b.n	80039b2 <HAL_I2C_Master_Transmit+0x1ea>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b01      	cmp	r3, #1
 800382c:	d007      	beq.n	800383e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0201 	orr.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800384c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2221      	movs	r2, #33	; 0x21
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2210      	movs	r2, #16
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	893a      	ldrh	r2, [r7, #8]
 800386e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4a50      	ldr	r2, [pc, #320]	; (80039c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800387e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003880:	8979      	ldrh	r1, [r7, #10]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	6a3a      	ldr	r2, [r7, #32]
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 fcea 	bl	8004260 <I2C_MasterRequestWrite>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e08d      	b.n	80039b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038ac:	e066      	b.n	800397c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	6a39      	ldr	r1, [r7, #32]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 ffaa 	bl	800480c <I2C_WaitOnTXEFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00d      	beq.n	80038da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d107      	bne.n	80038d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e06b      	b.n	80039b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	781a      	ldrb	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b04      	cmp	r3, #4
 8003916:	d11b      	bne.n	8003950 <HAL_I2C_Master_Transmit+0x188>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391c:	2b00      	cmp	r3, #0
 800391e:	d017      	beq.n	8003950 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	781a      	ldrb	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	6a39      	ldr	r1, [r7, #32]
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 ff9a 	bl	800488e <I2C_WaitOnBTFFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00d      	beq.n	800397c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	2b04      	cmp	r3, #4
 8003966:	d107      	bne.n	8003978 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003976:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e01a      	b.n	80039b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003980:	2b00      	cmp	r3, #0
 8003982:	d194      	bne.n	80038ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	e000      	b.n	80039b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039b0:	2302      	movs	r3, #2
  }
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	00100002 	.word	0x00100002
 80039c0:	ffff0000 	.word	0xffff0000

080039c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	4608      	mov	r0, r1
 80039ce:	4611      	mov	r1, r2
 80039d0:	461a      	mov	r2, r3
 80039d2:	4603      	mov	r3, r0
 80039d4:	817b      	strh	r3, [r7, #10]
 80039d6:	460b      	mov	r3, r1
 80039d8:	813b      	strh	r3, [r7, #8]
 80039da:	4613      	mov	r3, r2
 80039dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039de:	f7ff f91b 	bl	8002c18 <HAL_GetTick>
 80039e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	f040 80d9 	bne.w	8003ba4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	2319      	movs	r3, #25
 80039f8:	2201      	movs	r2, #1
 80039fa:	496d      	ldr	r1, [pc, #436]	; (8003bb0 <HAL_I2C_Mem_Write+0x1ec>)
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fe2f 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e0cc      	b.n	8003ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_I2C_Mem_Write+0x56>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e0c5      	b.n	8003ba6 <HAL_I2C_Mem_Write+0x1e2>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d007      	beq.n	8003a40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2221      	movs	r2, #33	; 0x21
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2240      	movs	r2, #64	; 0x40
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a3a      	ldr	r2, [r7, #32]
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4a4d      	ldr	r2, [pc, #308]	; (8003bb4 <HAL_I2C_Mem_Write+0x1f0>)
 8003a80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a82:	88f8      	ldrh	r0, [r7, #6]
 8003a84:	893a      	ldrh	r2, [r7, #8]
 8003a86:	8979      	ldrh	r1, [r7, #10]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	4603      	mov	r3, r0
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 fc66 	bl	8004364 <I2C_RequestMemoryWrite>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d052      	beq.n	8003b44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e081      	b.n	8003ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 feb0 	bl	800480c <I2C_WaitOnTXEFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00d      	beq.n	8003ace <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d107      	bne.n	8003aca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e06b      	b.n	8003ba6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	781a      	ldrb	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d11b      	bne.n	8003b44 <HAL_I2C_Mem_Write+0x180>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d017      	beq.n	8003b44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	781a      	ldrb	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1aa      	bne.n	8003aa2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 fe9c 	bl	800488e <I2C_WaitOnBTFFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00d      	beq.n	8003b78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d107      	bne.n	8003b74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e016      	b.n	8003ba6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e000      	b.n	8003ba6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ba4:	2302      	movs	r3, #2
  }
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	00100002 	.word	0x00100002
 8003bb4:	ffff0000 	.word	0xffff0000

08003bb8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08c      	sub	sp, #48	; 0x30
 8003bbc:	af02      	add	r7, sp, #8
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	4608      	mov	r0, r1
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	817b      	strh	r3, [r7, #10]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	813b      	strh	r3, [r7, #8]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bd2:	f7ff f821 	bl	8002c18 <HAL_GetTick>
 8003bd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	f040 8208 	bne.w	8003ff6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	2319      	movs	r3, #25
 8003bec:	2201      	movs	r2, #1
 8003bee:	497b      	ldr	r1, [pc, #492]	; (8003ddc <HAL_I2C_Mem_Read+0x224>)
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 fd35 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e1fb      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_I2C_Mem_Read+0x56>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e1f4      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x440>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d007      	beq.n	8003c34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2222      	movs	r2, #34	; 0x22
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2240      	movs	r2, #64	; 0x40
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a5b      	ldr	r2, [pc, #364]	; (8003de0 <HAL_I2C_Mem_Read+0x228>)
 8003c74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c76:	88f8      	ldrh	r0, [r7, #6]
 8003c78:	893a      	ldrh	r2, [r7, #8]
 8003c7a:	8979      	ldrh	r1, [r7, #10]
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	4603      	mov	r3, r0
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 fc02 	bl	8004490 <I2C_RequestMemoryRead>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e1b0      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d113      	bne.n	8003cc6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	623b      	str	r3, [r7, #32]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	623b      	str	r3, [r7, #32]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	623b      	str	r3, [r7, #32]
 8003cb2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	e184      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d11b      	bne.n	8003d06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	e164      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d11b      	bne.n	8003d46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	e144      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d5c:	e138      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	f200 80f1 	bhi.w	8003f4a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d123      	bne.n	8003db8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 fdcb 	bl	8004910 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e139      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003db6:	e10b      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d14e      	bne.n	8003e5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	4906      	ldr	r1, [pc, #24]	; (8003de4 <HAL_I2C_Mem_Read+0x22c>)
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 fc48 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d008      	beq.n	8003de8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e10e      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x440>
 8003dda:	bf00      	nop
 8003ddc:	00100002 	.word	0x00100002
 8003de0:	ffff0000 	.word	0xffff0000
 8003de4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e5c:	e0b8      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	2200      	movs	r2, #0
 8003e66:	4966      	ldr	r1, [pc, #408]	; (8004000 <HAL_I2C_Mem_Read+0x448>)
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fbf9 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0bf      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	494f      	ldr	r1, [pc, #316]	; (8004000 <HAL_I2C_Mem_Read+0x448>)
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 fbcb 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e091      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f48:	e042      	b.n	8003fd0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 fcde 	bl	8004910 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e04c      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d118      	bne.n	8003fd0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f47f aec2 	bne.w	8003d5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e000      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ff6:	2302      	movs	r3, #2
  }
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3728      	adds	r7, #40	; 0x28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	00010004 	.word	0x00010004

08004004 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	607a      	str	r2, [r7, #4]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	460b      	mov	r3, r1
 8004012:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004014:	f7fe fe00 	bl	8002c18 <HAL_GetTick>
 8004018:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800401a:	2301      	movs	r3, #1
 800401c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b20      	cmp	r3, #32
 8004028:	f040 8111 	bne.w	800424e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	2319      	movs	r3, #25
 8004032:	2201      	movs	r2, #1
 8004034:	4988      	ldr	r1, [pc, #544]	; (8004258 <HAL_I2C_IsDeviceReady+0x254>)
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 fb12 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004042:	2302      	movs	r3, #2
 8004044:	e104      	b.n	8004250 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_I2C_IsDeviceReady+0x50>
 8004050:	2302      	movs	r3, #2
 8004052:	e0fd      	b.n	8004250 <HAL_I2C_IsDeviceReady+0x24c>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b01      	cmp	r3, #1
 8004068:	d007      	beq.n	800407a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0201 	orr.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004088:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2224      	movs	r2, #36	; 0x24
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4a70      	ldr	r2, [pc, #448]	; (800425c <HAL_I2C_IsDeviceReady+0x258>)
 800409c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fad0 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00d      	beq.n	80040e2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d4:	d103      	bne.n	80040de <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e0b6      	b.n	8004250 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040e2:	897b      	ldrh	r3, [r7, #10]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	461a      	mov	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040f0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80040f2:	f7fe fd91 	bl	8002c18 <HAL_GetTick>
 80040f6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b02      	cmp	r3, #2
 8004104:	bf0c      	ite	eq
 8004106:	2301      	moveq	r3, #1
 8004108:	2300      	movne	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411c:	bf0c      	ite	eq
 800411e:	2301      	moveq	r3, #1
 8004120:	2300      	movne	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004126:	e025      	b.n	8004174 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004128:	f7fe fd76 	bl	8002c18 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d302      	bcc.n	800413e <HAL_I2C_IsDeviceReady+0x13a>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d103      	bne.n	8004146 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	22a0      	movs	r2, #160	; 0xa0
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b02      	cmp	r3, #2
 8004152:	bf0c      	ite	eq
 8004154:	2301      	moveq	r3, #1
 8004156:	2300      	movne	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800416a:	bf0c      	ite	eq
 800416c:	2301      	moveq	r3, #1
 800416e:	2300      	movne	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2ba0      	cmp	r3, #160	; 0xa0
 800417e:	d005      	beq.n	800418c <HAL_I2C_IsDeviceReady+0x188>
 8004180:	7dfb      	ldrb	r3, [r7, #23]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d102      	bne.n	800418c <HAL_I2C_IsDeviceReady+0x188>
 8004186:	7dbb      	ldrb	r3, [r7, #22]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0cd      	beq.n	8004128 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d129      	bne.n	80041f6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b2:	2300      	movs	r3, #0
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	2319      	movs	r3, #25
 80041ce:	2201      	movs	r2, #1
 80041d0:	4921      	ldr	r1, [pc, #132]	; (8004258 <HAL_I2C_IsDeviceReady+0x254>)
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 fa44 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e036      	b.n	8004250 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	e02c      	b.n	8004250 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004204:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800420e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	2319      	movs	r3, #25
 8004216:	2201      	movs	r2, #1
 8004218:	490f      	ldr	r1, [pc, #60]	; (8004258 <HAL_I2C_IsDeviceReady+0x254>)
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fa20 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e012      	b.n	8004250 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	3301      	adds	r3, #1
 800422e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	429a      	cmp	r2, r3
 8004236:	f4ff af32 	bcc.w	800409e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800424e:	2302      	movs	r3, #2
  }
}
 8004250:	4618      	mov	r0, r3
 8004252:	3720      	adds	r7, #32
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	00100002 	.word	0x00100002
 800425c:	ffff0000 	.word	0xffff0000

08004260 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	460b      	mov	r3, r1
 800426e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b08      	cmp	r3, #8
 800427a:	d006      	beq.n	800428a <I2C_MasterRequestWrite+0x2a>
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d003      	beq.n	800428a <I2C_MasterRequestWrite+0x2a>
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004288:	d108      	bne.n	800429c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	e00b      	b.n	80042b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	2b12      	cmp	r3, #18
 80042a2:	d107      	bne.n	80042b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f9cd 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00d      	beq.n	80042e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042da:	d103      	bne.n	80042e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e035      	b.n	8004354 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042f0:	d108      	bne.n	8004304 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042f2:	897b      	ldrh	r3, [r7, #10]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004300:	611a      	str	r2, [r3, #16]
 8004302:	e01b      	b.n	800433c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004304:	897b      	ldrh	r3, [r7, #10]
 8004306:	11db      	asrs	r3, r3, #7
 8004308:	b2db      	uxtb	r3, r3
 800430a:	f003 0306 	and.w	r3, r3, #6
 800430e:	b2db      	uxtb	r3, r3
 8004310:	f063 030f 	orn	r3, r3, #15
 8004314:	b2da      	uxtb	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	490e      	ldr	r1, [pc, #56]	; (800435c <I2C_MasterRequestWrite+0xfc>)
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 f9f3 	bl	800470e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e010      	b.n	8004354 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004332:	897b      	ldrh	r3, [r7, #10]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	4907      	ldr	r1, [pc, #28]	; (8004360 <I2C_MasterRequestWrite+0x100>)
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f9e3 	bl	800470e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	00010008 	.word	0x00010008
 8004360:	00010002 	.word	0x00010002

08004364 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b088      	sub	sp, #32
 8004368:	af02      	add	r7, sp, #8
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	4608      	mov	r0, r1
 800436e:	4611      	mov	r1, r2
 8004370:	461a      	mov	r2, r3
 8004372:	4603      	mov	r3, r0
 8004374:	817b      	strh	r3, [r7, #10]
 8004376:	460b      	mov	r3, r1
 8004378:	813b      	strh	r3, [r7, #8]
 800437a:	4613      	mov	r3, r2
 800437c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800438c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	2200      	movs	r2, #0
 8004396:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 f960 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00d      	beq.n	80043c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b4:	d103      	bne.n	80043be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e05f      	b.n	8004482 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043c2:	897b      	ldrh	r3, [r7, #10]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	6a3a      	ldr	r2, [r7, #32]
 80043d6:	492d      	ldr	r1, [pc, #180]	; (800448c <I2C_RequestMemoryWrite+0x128>)
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f998 	bl	800470e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e04c      	b.n	8004482 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004400:	6a39      	ldr	r1, [r7, #32]
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 fa02 	bl	800480c <I2C_WaitOnTXEFlagUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00d      	beq.n	800442a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	2b04      	cmp	r3, #4
 8004414:	d107      	bne.n	8004426 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004424:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e02b      	b.n	8004482 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d105      	bne.n	800443c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004430:	893b      	ldrh	r3, [r7, #8]
 8004432:	b2da      	uxtb	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	611a      	str	r2, [r3, #16]
 800443a:	e021      	b.n	8004480 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800443c:	893b      	ldrh	r3, [r7, #8]
 800443e:	0a1b      	lsrs	r3, r3, #8
 8004440:	b29b      	uxth	r3, r3
 8004442:	b2da      	uxtb	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800444a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444c:	6a39      	ldr	r1, [r7, #32]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f9dc 	bl	800480c <I2C_WaitOnTXEFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00d      	beq.n	8004476 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	2b04      	cmp	r3, #4
 8004460:	d107      	bne.n	8004472 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004470:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e005      	b.n	8004482 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004476:	893b      	ldrh	r3, [r7, #8]
 8004478:	b2da      	uxtb	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	00010002 	.word	0x00010002

08004490 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af02      	add	r7, sp, #8
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	4608      	mov	r0, r1
 800449a:	4611      	mov	r1, r2
 800449c:	461a      	mov	r2, r3
 800449e:	4603      	mov	r3, r0
 80044a0:	817b      	strh	r3, [r7, #10]
 80044a2:	460b      	mov	r3, r1
 80044a4:	813b      	strh	r3, [r7, #8]
 80044a6:	4613      	mov	r3, r2
 80044a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f8c2 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00d      	beq.n	80044fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f0:	d103      	bne.n	80044fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e0aa      	b.n	8004654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044fe:	897b      	ldrh	r3, [r7, #10]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	461a      	mov	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800450c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	6a3a      	ldr	r2, [r7, #32]
 8004512:	4952      	ldr	r1, [pc, #328]	; (800465c <I2C_RequestMemoryRead+0x1cc>)
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 f8fa 	bl	800470e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e097      	b.n	8004654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800453a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800453c:	6a39      	ldr	r1, [r7, #32]
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 f964 	bl	800480c <I2C_WaitOnTXEFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00d      	beq.n	8004566 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	2b04      	cmp	r3, #4
 8004550:	d107      	bne.n	8004562 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004560:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e076      	b.n	8004654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d105      	bne.n	8004578 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800456c:	893b      	ldrh	r3, [r7, #8]
 800456e:	b2da      	uxtb	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	611a      	str	r2, [r3, #16]
 8004576:	e021      	b.n	80045bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004578:	893b      	ldrh	r3, [r7, #8]
 800457a:	0a1b      	lsrs	r3, r3, #8
 800457c:	b29b      	uxth	r3, r3
 800457e:	b2da      	uxtb	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004588:	6a39      	ldr	r1, [r7, #32]
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f93e 	bl	800480c <I2C_WaitOnTXEFlagUntilTimeout>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00d      	beq.n	80045b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	2b04      	cmp	r3, #4
 800459c:	d107      	bne.n	80045ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e050      	b.n	8004654 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045b2:	893b      	ldrh	r3, [r7, #8]
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045be:	6a39      	ldr	r1, [r7, #32]
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 f923 	bl	800480c <I2C_WaitOnTXEFlagUntilTimeout>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00d      	beq.n	80045e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d107      	bne.n	80045e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e035      	b.n	8004654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	2200      	movs	r2, #0
 8004600:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f82b 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00d      	beq.n	800462c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800461e:	d103      	bne.n	8004628 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004626:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e013      	b.n	8004654 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800462c:	897b      	ldrh	r3, [r7, #10]
 800462e:	b2db      	uxtb	r3, r3
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	b2da      	uxtb	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	6a3a      	ldr	r2, [r7, #32]
 8004640:	4906      	ldr	r1, [pc, #24]	; (800465c <I2C_RequestMemoryRead+0x1cc>)
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 f863 	bl	800470e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	00010002 	.word	0x00010002

08004660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	4613      	mov	r3, r2
 800466e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004670:	e025      	b.n	80046be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004678:	d021      	beq.n	80046be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467a:	f7fe facd 	bl	8002c18 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d302      	bcc.n	8004690 <I2C_WaitOnFlagUntilTimeout+0x30>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d116      	bne.n	80046be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f043 0220 	orr.w	r2, r3, #32
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e023      	b.n	8004706 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	0c1b      	lsrs	r3, r3, #16
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d10d      	bne.n	80046e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	43da      	mvns	r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	4013      	ands	r3, r2
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	bf0c      	ite	eq
 80046da:	2301      	moveq	r3, #1
 80046dc:	2300      	movne	r3, #0
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	e00c      	b.n	80046fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	43da      	mvns	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4013      	ands	r3, r2
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	bf0c      	ite	eq
 80046f6:	2301      	moveq	r3, #1
 80046f8:	2300      	movne	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	461a      	mov	r2, r3
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	429a      	cmp	r2, r3
 8004702:	d0b6      	beq.n	8004672 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	607a      	str	r2, [r7, #4]
 800471a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800471c:	e051      	b.n	80047c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800472c:	d123      	bne.n	8004776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800473c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004746:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	f043 0204 	orr.w	r2, r3, #4
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e046      	b.n	8004804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477c:	d021      	beq.n	80047c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800477e:	f7fe fa4b 	bl	8002c18 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	429a      	cmp	r2, r3
 800478c:	d302      	bcc.n	8004794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d116      	bne.n	80047c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f043 0220 	orr.w	r2, r3, #32
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e020      	b.n	8004804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	0c1b      	lsrs	r3, r3, #16
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d10c      	bne.n	80047e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	43da      	mvns	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4013      	ands	r3, r2
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	bf14      	ite	ne
 80047de:	2301      	movne	r3, #1
 80047e0:	2300      	moveq	r3, #0
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	e00b      	b.n	80047fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	43da      	mvns	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	4013      	ands	r3, r2
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bf14      	ite	ne
 80047f8:	2301      	movne	r3, #1
 80047fa:	2300      	moveq	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d18d      	bne.n	800471e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004818:	e02d      	b.n	8004876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f8ce 	bl	80049bc <I2C_IsAcknowledgeFailed>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e02d      	b.n	8004886 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d021      	beq.n	8004876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004832:	f7fe f9f1 	bl	8002c18 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	429a      	cmp	r2, r3
 8004840:	d302      	bcc.n	8004848 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d116      	bne.n	8004876 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f043 0220 	orr.w	r2, r3, #32
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e007      	b.n	8004886 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004880:	2b80      	cmp	r3, #128	; 0x80
 8004882:	d1ca      	bne.n	800481a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800489a:	e02d      	b.n	80048f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f88d 	bl	80049bc <I2C_IsAcknowledgeFailed>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e02d      	b.n	8004908 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d021      	beq.n	80048f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b4:	f7fe f9b0 	bl	8002c18 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d302      	bcc.n	80048ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d116      	bne.n	80048f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	f043 0220 	orr.w	r2, r3, #32
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e007      	b.n	8004908 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f003 0304 	and.w	r3, r3, #4
 8004902:	2b04      	cmp	r3, #4
 8004904:	d1ca      	bne.n	800489c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800491c:	e042      	b.n	80049a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	f003 0310 	and.w	r3, r3, #16
 8004928:	2b10      	cmp	r3, #16
 800492a:	d119      	bne.n	8004960 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f06f 0210 	mvn.w	r2, #16
 8004934:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e029      	b.n	80049b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004960:	f7fe f95a 	bl	8002c18 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	429a      	cmp	r2, r3
 800496e:	d302      	bcc.n	8004976 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d116      	bne.n	80049a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	f043 0220 	orr.w	r2, r3, #32
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e007      	b.n	80049b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ae:	2b40      	cmp	r3, #64	; 0x40
 80049b0:	d1b5      	bne.n	800491e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d2:	d11b      	bne.n	8004a0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	f043 0204 	orr.w	r2, r3, #4
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr

08004a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e31d      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a2a:	4b94      	ldr	r3, [pc, #592]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
 8004a32:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a34:	4b91      	ldr	r3, [pc, #580]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d07b      	beq.n	8004b42 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d006      	beq.n	8004a5e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	2b0c      	cmp	r3, #12
 8004a54:	d10f      	bne.n	8004a76 <HAL_RCC_OscConfig+0x5e>
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a5c:	d10b      	bne.n	8004a76 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a5e:	4b87      	ldr	r3, [pc, #540]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d06a      	beq.n	8004b40 <HAL_RCC_OscConfig+0x128>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d166      	bne.n	8004b40 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e2f7      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d106      	bne.n	8004a8c <HAL_RCC_OscConfig+0x74>
 8004a7e:	4b7f      	ldr	r3, [pc, #508]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a7e      	ldr	r2, [pc, #504]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	e02d      	b.n	8004ae8 <HAL_RCC_OscConfig+0xd0>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10c      	bne.n	8004aae <HAL_RCC_OscConfig+0x96>
 8004a94:	4b79      	ldr	r3, [pc, #484]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a78      	ldr	r2, [pc, #480]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	4b76      	ldr	r3, [pc, #472]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a75      	ldr	r2, [pc, #468]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	e01c      	b.n	8004ae8 <HAL_RCC_OscConfig+0xd0>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b05      	cmp	r3, #5
 8004ab4:	d10c      	bne.n	8004ad0 <HAL_RCC_OscConfig+0xb8>
 8004ab6:	4b71      	ldr	r3, [pc, #452]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a70      	ldr	r2, [pc, #448]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	4b6e      	ldr	r3, [pc, #440]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a6d      	ldr	r2, [pc, #436]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e00b      	b.n	8004ae8 <HAL_RCC_OscConfig+0xd0>
 8004ad0:	4b6a      	ldr	r3, [pc, #424]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a69      	ldr	r2, [pc, #420]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	4b67      	ldr	r3, [pc, #412]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a66      	ldr	r2, [pc, #408]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d013      	beq.n	8004b18 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af0:	f7fe f892 	bl	8002c18 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004af8:	f7fe f88e 	bl	8002c18 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b64      	cmp	r3, #100	; 0x64
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e2ad      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b0a:	4b5c      	ldr	r3, [pc, #368]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0xe0>
 8004b16:	e014      	b.n	8004b42 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b18:	f7fe f87e 	bl	8002c18 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b20:	f7fe f87a 	bl	8002c18 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b64      	cmp	r3, #100	; 0x64
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e299      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004b32:	4b52      	ldr	r3, [pc, #328]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCC_OscConfig+0x108>
 8004b3e:	e000      	b.n	8004b42 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d05a      	beq.n	8004c04 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d005      	beq.n	8004b60 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b0c      	cmp	r3, #12
 8004b58:	d119      	bne.n	8004b8e <HAL_RCC_OscConfig+0x176>
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d116      	bne.n	8004b8e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b60:	4b46      	ldr	r3, [pc, #280]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_OscConfig+0x160>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e276      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b78:	4b40      	ldr	r3, [pc, #256]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	021b      	lsls	r3, r3, #8
 8004b86:	493d      	ldr	r1, [pc, #244]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8c:	e03a      	b.n	8004c04 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d020      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b96:	4b3a      	ldr	r3, [pc, #232]	; (8004c80 <HAL_RCC_OscConfig+0x268>)
 8004b98:	2201      	movs	r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fe f83c 	bl	8002c18 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ba4:	f7fe f838 	bl	8002c18 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e257      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bb6:	4b31      	ldr	r3, [pc, #196]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc2:	4b2e      	ldr	r3, [pc, #184]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	492a      	ldr	r1, [pc, #168]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	604b      	str	r3, [r1, #4]
 8004bd6:	e015      	b.n	8004c04 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bd8:	4b29      	ldr	r3, [pc, #164]	; (8004c80 <HAL_RCC_OscConfig+0x268>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bde:	f7fe f81b 	bl	8002c18 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004be6:	f7fe f817 	bl	8002c18 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e236      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bf8:	4b20      	ldr	r3, [pc, #128]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1f0      	bne.n	8004be6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0310 	and.w	r3, r3, #16
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 80b8 	beq.w	8004d82 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d170      	bne.n	8004cfa <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c18:	4b18      	ldr	r3, [pc, #96]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_RCC_OscConfig+0x218>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e21a      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1a      	ldr	r2, [r3, #32]
 8004c34:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d921      	bls.n	8004c84 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 fc7d 	bl	8005544 <RCC_SetFlashLatencyFromMSIRange>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e208      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c54:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	4906      	ldr	r1, [pc, #24]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	061b      	lsls	r3, r3, #24
 8004c74:	4901      	ldr	r1, [pc, #4]	; (8004c7c <HAL_RCC_OscConfig+0x264>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	604b      	str	r3, [r1, #4]
 8004c7a:	e020      	b.n	8004cbe <HAL_RCC_OscConfig+0x2a6>
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c84:	4b99      	ldr	r3, [pc, #612]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	4996      	ldr	r1, [pc, #600]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c96:	4b95      	ldr	r3, [pc, #596]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	061b      	lsls	r3, r3, #24
 8004ca4:	4991      	ldr	r1, [pc, #580]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fc48 	bl	8005544 <RCC_SetFlashLatencyFromMSIRange>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e1d3      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	0b5b      	lsrs	r3, r3, #13
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004cce:	4a87      	ldr	r2, [pc, #540]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004cd0:	6892      	ldr	r2, [r2, #8]
 8004cd2:	0912      	lsrs	r2, r2, #4
 8004cd4:	f002 020f 	and.w	r2, r2, #15
 8004cd8:	4985      	ldr	r1, [pc, #532]	; (8004ef0 <HAL_RCC_OscConfig+0x4d8>)
 8004cda:	5c8a      	ldrb	r2, [r1, r2]
 8004cdc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004cde:	4a85      	ldr	r2, [pc, #532]	; (8004ef4 <HAL_RCC_OscConfig+0x4dc>)
 8004ce0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ce2:	4b85      	ldr	r3, [pc, #532]	; (8004ef8 <HAL_RCC_OscConfig+0x4e0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fd ff4a 	bl	8002b80 <HAL_InitTick>
 8004cec:	4603      	mov	r3, r0
 8004cee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d045      	beq.n	8004d82 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	e1b5      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d029      	beq.n	8004d56 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d02:	4b7e      	ldr	r3, [pc, #504]	; (8004efc <HAL_RCC_OscConfig+0x4e4>)
 8004d04:	2201      	movs	r2, #1
 8004d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d08:	f7fd ff86 	bl	8002c18 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d10:	f7fd ff82 	bl	8002c18 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e1a1      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d22:	4b72      	ldr	r3, [pc, #456]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d2e:	4b6f      	ldr	r3, [pc, #444]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	496c      	ldr	r1, [pc, #432]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d40:	4b6a      	ldr	r3, [pc, #424]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	061b      	lsls	r3, r3, #24
 8004d4e:	4967      	ldr	r1, [pc, #412]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	604b      	str	r3, [r1, #4]
 8004d54:	e015      	b.n	8004d82 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d56:	4b69      	ldr	r3, [pc, #420]	; (8004efc <HAL_RCC_OscConfig+0x4e4>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7fd ff5c 	bl	8002c18 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d64:	f7fd ff58 	bl	8002c18 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e177      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d76:	4b5d      	ldr	r3, [pc, #372]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f0      	bne.n	8004d64 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d030      	beq.n	8004df0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d016      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d96:	4b5a      	ldr	r3, [pc, #360]	; (8004f00 <HAL_RCC_OscConfig+0x4e8>)
 8004d98:	2201      	movs	r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d9c:	f7fd ff3c 	bl	8002c18 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004da4:	f7fd ff38 	bl	8002c18 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e157      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004db6:	4b4d      	ldr	r3, [pc, #308]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x38c>
 8004dc2:	e015      	b.n	8004df0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dc4:	4b4e      	ldr	r3, [pc, #312]	; (8004f00 <HAL_RCC_OscConfig+0x4e8>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dca:	f7fd ff25 	bl	8002c18 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dd2:	f7fd ff21 	bl	8002c18 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e140      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004de4:	4b41      	ldr	r3, [pc, #260]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f0      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 80b5 	beq.w	8004f68 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e02:	4b3a      	ldr	r3, [pc, #232]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10d      	bne.n	8004e2a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e0e:	4b37      	ldr	r3, [pc, #220]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	4a36      	ldr	r2, [pc, #216]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e18:	6253      	str	r3, [r2, #36]	; 0x24
 8004e1a:	4b34      	ldr	r3, [pc, #208]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e22:	60bb      	str	r3, [r7, #8]
 8004e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e26:	2301      	movs	r3, #1
 8004e28:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2a:	4b36      	ldr	r3, [pc, #216]	; (8004f04 <HAL_RCC_OscConfig+0x4ec>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d118      	bne.n	8004e68 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e36:	4b33      	ldr	r3, [pc, #204]	; (8004f04 <HAL_RCC_OscConfig+0x4ec>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a32      	ldr	r2, [pc, #200]	; (8004f04 <HAL_RCC_OscConfig+0x4ec>)
 8004e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e42:	f7fd fee9 	bl	8002c18 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e4a:	f7fd fee5 	bl	8002c18 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b64      	cmp	r3, #100	; 0x64
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e104      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5c:	4b29      	ldr	r3, [pc, #164]	; (8004f04 <HAL_RCC_OscConfig+0x4ec>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0f0      	beq.n	8004e4a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d106      	bne.n	8004e7e <HAL_RCC_OscConfig+0x466>
 8004e70:	4b1e      	ldr	r3, [pc, #120]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e74:	4a1d      	ldr	r2, [pc, #116]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e7a:	6353      	str	r3, [r2, #52]	; 0x34
 8004e7c:	e02d      	b.n	8004eda <HAL_RCC_OscConfig+0x4c2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10c      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x488>
 8004e86:	4b19      	ldr	r3, [pc, #100]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8a:	4a18      	ldr	r2, [pc, #96]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e90:	6353      	str	r3, [r2, #52]	; 0x34
 8004e92:	4b16      	ldr	r3, [pc, #88]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e96:	4a15      	ldr	r2, [pc, #84]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004e98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e9c:	6353      	str	r3, [r2, #52]	; 0x34
 8004e9e:	e01c      	b.n	8004eda <HAL_RCC_OscConfig+0x4c2>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b05      	cmp	r3, #5
 8004ea6:	d10c      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x4aa>
 8004ea8:	4b10      	ldr	r3, [pc, #64]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eac:	4a0f      	ldr	r2, [pc, #60]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004eae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004eb2:	6353      	str	r3, [r2, #52]	; 0x34
 8004eb4:	4b0d      	ldr	r3, [pc, #52]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb8:	4a0c      	ldr	r2, [pc, #48]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ebe:	6353      	str	r3, [r2, #52]	; 0x34
 8004ec0:	e00b      	b.n	8004eda <HAL_RCC_OscConfig+0x4c2>
 8004ec2:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec6:	4a09      	ldr	r2, [pc, #36]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ecc:	6353      	str	r3, [r2, #52]	; 0x34
 8004ece:	4b07      	ldr	r3, [pc, #28]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed2:	4a06      	ldr	r2, [pc, #24]	; (8004eec <HAL_RCC_OscConfig+0x4d4>)
 8004ed4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ed8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d024      	beq.n	8004f2c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee2:	f7fd fe99 	bl	8002c18 <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ee8:	e019      	b.n	8004f1e <HAL_RCC_OscConfig+0x506>
 8004eea:	bf00      	nop
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	08008d58 	.word	0x08008d58
 8004ef4:	20000004 	.word	0x20000004
 8004ef8:	20000008 	.word	0x20000008
 8004efc:	42470020 	.word	0x42470020
 8004f00:	42470680 	.word	0x42470680
 8004f04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f08:	f7fd fe86 	bl	8002c18 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e0a3      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f1e:	4b54      	ldr	r3, [pc, #336]	; (8005070 <HAL_RCC_OscConfig+0x658>)
 8004f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0ee      	beq.n	8004f08 <HAL_RCC_OscConfig+0x4f0>
 8004f2a:	e014      	b.n	8004f56 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f2c:	f7fd fe74 	bl	8002c18 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f32:	e00a      	b.n	8004f4a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f34:	f7fd fe70 	bl	8002c18 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e08d      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f4a:	4b49      	ldr	r3, [pc, #292]	; (8005070 <HAL_RCC_OscConfig+0x658>)
 8004f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1ee      	bne.n	8004f34 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f56:	7ffb      	ldrb	r3, [r7, #31]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d105      	bne.n	8004f68 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f5c:	4b44      	ldr	r3, [pc, #272]	; (8005070 <HAL_RCC_OscConfig+0x658>)
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	4a43      	ldr	r2, [pc, #268]	; (8005070 <HAL_RCC_OscConfig+0x658>)
 8004f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f66:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d079      	beq.n	8005064 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2b0c      	cmp	r3, #12
 8004f74:	d056      	beq.n	8005024 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d13b      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7e:	4b3d      	ldr	r3, [pc, #244]	; (8005074 <HAL_RCC_OscConfig+0x65c>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f84:	f7fd fe48 	bl	8002c18 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f8c:	f7fd fe44 	bl	8002c18 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e063      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f9e:	4b34      	ldr	r3, [pc, #208]	; (8005070 <HAL_RCC_OscConfig+0x658>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1f0      	bne.n	8004f8c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004faa:	4b31      	ldr	r3, [pc, #196]	; (8005070 <HAL_RCC_OscConfig+0x658>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	4319      	orrs	r1, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	492b      	ldr	r1, [pc, #172]	; (8005070 <HAL_RCC_OscConfig+0x658>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fc8:	4b2a      	ldr	r3, [pc, #168]	; (8005074 <HAL_RCC_OscConfig+0x65c>)
 8004fca:	2201      	movs	r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fce:	f7fd fe23 	bl	8002c18 <HAL_GetTick>
 8004fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd6:	f7fd fe1f 	bl	8002c18 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e03e      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fe8:	4b21      	ldr	r3, [pc, #132]	; (8005070 <HAL_RCC_OscConfig+0x658>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0f0      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x5be>
 8004ff4:	e036      	b.n	8005064 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff6:	4b1f      	ldr	r3, [pc, #124]	; (8005074 <HAL_RCC_OscConfig+0x65c>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffc:	f7fd fe0c 	bl	8002c18 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005004:	f7fd fe08 	bl	8002c18 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e027      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005016:	4b16      	ldr	r3, [pc, #88]	; (8005070 <HAL_RCC_OscConfig+0x658>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f0      	bne.n	8005004 <HAL_RCC_OscConfig+0x5ec>
 8005022:	e01f      	b.n	8005064 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e01a      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005030:	4b0f      	ldr	r3, [pc, #60]	; (8005070 <HAL_RCC_OscConfig+0x658>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005040:	429a      	cmp	r2, r3
 8005042:	d10d      	bne.n	8005060 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504e:	429a      	cmp	r2, r3
 8005050:	d106      	bne.n	8005060 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800505c:	429a      	cmp	r2, r3
 800505e:	d001      	beq.n	8005064 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3720      	adds	r7, #32
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800
 8005074:	42470060 	.word	0x42470060

08005078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e11a      	b.n	80052c2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800508c:	4b8f      	ldr	r3, [pc, #572]	; (80052cc <HAL_RCC_ClockConfig+0x254>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d919      	bls.n	80050ce <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d105      	bne.n	80050ac <HAL_RCC_ClockConfig+0x34>
 80050a0:	4b8a      	ldr	r3, [pc, #552]	; (80052cc <HAL_RCC_ClockConfig+0x254>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a89      	ldr	r2, [pc, #548]	; (80052cc <HAL_RCC_ClockConfig+0x254>)
 80050a6:	f043 0304 	orr.w	r3, r3, #4
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	4b87      	ldr	r3, [pc, #540]	; (80052cc <HAL_RCC_ClockConfig+0x254>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f023 0201 	bic.w	r2, r3, #1
 80050b4:	4985      	ldr	r1, [pc, #532]	; (80052cc <HAL_RCC_ClockConfig+0x254>)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050bc:	4b83      	ldr	r3, [pc, #524]	; (80052cc <HAL_RCC_ClockConfig+0x254>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d001      	beq.n	80050ce <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e0f9      	b.n	80052c2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d008      	beq.n	80050ec <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050da:	4b7d      	ldr	r3, [pc, #500]	; (80052d0 <HAL_RCC_ClockConfig+0x258>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	497a      	ldr	r1, [pc, #488]	; (80052d0 <HAL_RCC_ClockConfig+0x258>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 808e 	beq.w	8005216 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d107      	bne.n	8005112 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005102:	4b73      	ldr	r3, [pc, #460]	; (80052d0 <HAL_RCC_ClockConfig+0x258>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d121      	bne.n	8005152 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e0d7      	b.n	80052c2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b03      	cmp	r3, #3
 8005118:	d107      	bne.n	800512a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800511a:	4b6d      	ldr	r3, [pc, #436]	; (80052d0 <HAL_RCC_ClockConfig+0x258>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d115      	bne.n	8005152 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e0cb      	b.n	80052c2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d107      	bne.n	8005142 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005132:	4b67      	ldr	r3, [pc, #412]	; (80052d0 <HAL_RCC_ClockConfig+0x258>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e0bf      	b.n	80052c2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005142:	4b63      	ldr	r3, [pc, #396]	; (80052d0 <HAL_RCC_ClockConfig+0x258>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e0b7      	b.n	80052c2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005152:	4b5f      	ldr	r3, [pc, #380]	; (80052d0 <HAL_RCC_ClockConfig+0x258>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f023 0203 	bic.w	r2, r3, #3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	495c      	ldr	r1, [pc, #368]	; (80052d0 <HAL_RCC_ClockConfig+0x258>)
 8005160:	4313      	orrs	r3, r2
 8005162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005164:	f7fd fd58 	bl	8002c18 <HAL_GetTick>
 8005168:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2b02      	cmp	r3, #2
 8005170:	d112      	bne.n	8005198 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005172:	e00a      	b.n	800518a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005174:	f7fd fd50 	bl	8002c18 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e09b      	b.n	80052c2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800518a:	4b51      	ldr	r3, [pc, #324]	; (80052d0 <HAL_RCC_ClockConfig+0x258>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 030c 	and.w	r3, r3, #12
 8005192:	2b08      	cmp	r3, #8
 8005194:	d1ee      	bne.n	8005174 <HAL_RCC_ClockConfig+0xfc>
 8005196:	e03e      	b.n	8005216 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2b03      	cmp	r3, #3
 800519e:	d112      	bne.n	80051c6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051a0:	e00a      	b.n	80051b8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a2:	f7fd fd39 	bl	8002c18 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e084      	b.n	80052c2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051b8:	4b45      	ldr	r3, [pc, #276]	; (80052d0 <HAL_RCC_ClockConfig+0x258>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 030c 	and.w	r3, r3, #12
 80051c0:	2b0c      	cmp	r3, #12
 80051c2:	d1ee      	bne.n	80051a2 <HAL_RCC_ClockConfig+0x12a>
 80051c4:	e027      	b.n	8005216 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d11d      	bne.n	800520a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80051ce:	e00a      	b.n	80051e6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d0:	f7fd fd22 	bl	8002c18 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	f241 3288 	movw	r2, #5000	; 0x1388
 80051de:	4293      	cmp	r3, r2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e06d      	b.n	80052c2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80051e6:	4b3a      	ldr	r3, [pc, #232]	; (80052d0 <HAL_RCC_ClockConfig+0x258>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d1ee      	bne.n	80051d0 <HAL_RCC_ClockConfig+0x158>
 80051f2:	e010      	b.n	8005216 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051f4:	f7fd fd10 	bl	8002c18 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005202:	4293      	cmp	r3, r2
 8005204:	d901      	bls.n	800520a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e05b      	b.n	80052c2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800520a:	4b31      	ldr	r3, [pc, #196]	; (80052d0 <HAL_RCC_ClockConfig+0x258>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 030c 	and.w	r3, r3, #12
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1ee      	bne.n	80051f4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005216:	4b2d      	ldr	r3, [pc, #180]	; (80052cc <HAL_RCC_ClockConfig+0x254>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	429a      	cmp	r2, r3
 8005222:	d219      	bcs.n	8005258 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d105      	bne.n	8005236 <HAL_RCC_ClockConfig+0x1be>
 800522a:	4b28      	ldr	r3, [pc, #160]	; (80052cc <HAL_RCC_ClockConfig+0x254>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a27      	ldr	r2, [pc, #156]	; (80052cc <HAL_RCC_ClockConfig+0x254>)
 8005230:	f043 0304 	orr.w	r3, r3, #4
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	4b25      	ldr	r3, [pc, #148]	; (80052cc <HAL_RCC_ClockConfig+0x254>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f023 0201 	bic.w	r2, r3, #1
 800523e:	4923      	ldr	r1, [pc, #140]	; (80052cc <HAL_RCC_ClockConfig+0x254>)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	4313      	orrs	r3, r2
 8005244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005246:	4b21      	ldr	r3, [pc, #132]	; (80052cc <HAL_RCC_ClockConfig+0x254>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	429a      	cmp	r2, r3
 8005252:	d001      	beq.n	8005258 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e034      	b.n	80052c2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	d008      	beq.n	8005276 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005264:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <HAL_RCC_ClockConfig+0x258>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	4917      	ldr	r1, [pc, #92]	; (80052d0 <HAL_RCC_ClockConfig+0x258>)
 8005272:	4313      	orrs	r3, r2
 8005274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0308 	and.w	r3, r3, #8
 800527e:	2b00      	cmp	r3, #0
 8005280:	d009      	beq.n	8005296 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005282:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <HAL_RCC_ClockConfig+0x258>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	490f      	ldr	r1, [pc, #60]	; (80052d0 <HAL_RCC_ClockConfig+0x258>)
 8005292:	4313      	orrs	r3, r2
 8005294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005296:	f000 f823 	bl	80052e0 <HAL_RCC_GetSysClockFreq>
 800529a:	4602      	mov	r2, r0
 800529c:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <HAL_RCC_ClockConfig+0x258>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	091b      	lsrs	r3, r3, #4
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	490b      	ldr	r1, [pc, #44]	; (80052d4 <HAL_RCC_ClockConfig+0x25c>)
 80052a8:	5ccb      	ldrb	r3, [r1, r3]
 80052aa:	fa22 f303 	lsr.w	r3, r2, r3
 80052ae:	4a0a      	ldr	r2, [pc, #40]	; (80052d8 <HAL_RCC_ClockConfig+0x260>)
 80052b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052b2:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <HAL_RCC_ClockConfig+0x264>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fd fc62 	bl	8002b80 <HAL_InitTick>
 80052bc:	4603      	mov	r3, r0
 80052be:	72fb      	strb	r3, [r7, #11]

  return status;
 80052c0:	7afb      	ldrb	r3, [r7, #11]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40023c00 	.word	0x40023c00
 80052d0:	40023800 	.word	0x40023800
 80052d4:	08008d58 	.word	0x08008d58
 80052d8:	20000004 	.word	0x20000004
 80052dc:	20000008 	.word	0x20000008

080052e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052e4:	b092      	sub	sp, #72	; 0x48
 80052e6:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80052e8:	4b79      	ldr	r3, [pc, #484]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f0:	f003 030c 	and.w	r3, r3, #12
 80052f4:	2b0c      	cmp	r3, #12
 80052f6:	d00d      	beq.n	8005314 <HAL_RCC_GetSysClockFreq+0x34>
 80052f8:	2b0c      	cmp	r3, #12
 80052fa:	f200 80d5 	bhi.w	80054a8 <HAL_RCC_GetSysClockFreq+0x1c8>
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d002      	beq.n	8005308 <HAL_RCC_GetSysClockFreq+0x28>
 8005302:	2b08      	cmp	r3, #8
 8005304:	d003      	beq.n	800530e <HAL_RCC_GetSysClockFreq+0x2e>
 8005306:	e0cf      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005308:	4b72      	ldr	r3, [pc, #456]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800530a:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800530c:	e0da      	b.n	80054c4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800530e:	4b72      	ldr	r3, [pc, #456]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005310:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005312:	e0d7      	b.n	80054c4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005316:	0c9b      	lsrs	r3, r3, #18
 8005318:	f003 020f 	and.w	r2, r3, #15
 800531c:	4b6f      	ldr	r3, [pc, #444]	; (80054dc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800531e:	5c9b      	ldrb	r3, [r3, r2]
 8005320:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005324:	0d9b      	lsrs	r3, r3, #22
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	3301      	adds	r3, #1
 800532c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800532e:	4b68      	ldr	r3, [pc, #416]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d05d      	beq.n	80053f6 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	2200      	movs	r2, #0
 800533e:	4618      	mov	r0, r3
 8005340:	4611      	mov	r1, r2
 8005342:	4604      	mov	r4, r0
 8005344:	460d      	mov	r5, r1
 8005346:	4622      	mov	r2, r4
 8005348:	462b      	mov	r3, r5
 800534a:	f04f 0000 	mov.w	r0, #0
 800534e:	f04f 0100 	mov.w	r1, #0
 8005352:	0159      	lsls	r1, r3, #5
 8005354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005358:	0150      	lsls	r0, r2, #5
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	4621      	mov	r1, r4
 8005360:	1a51      	subs	r1, r2, r1
 8005362:	6139      	str	r1, [r7, #16]
 8005364:	4629      	mov	r1, r5
 8005366:	eb63 0301 	sbc.w	r3, r3, r1
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	f04f 0300 	mov.w	r3, #0
 8005374:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005378:	4659      	mov	r1, fp
 800537a:	018b      	lsls	r3, r1, #6
 800537c:	4651      	mov	r1, sl
 800537e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005382:	4651      	mov	r1, sl
 8005384:	018a      	lsls	r2, r1, #6
 8005386:	46d4      	mov	ip, sl
 8005388:	ebb2 080c 	subs.w	r8, r2, ip
 800538c:	4659      	mov	r1, fp
 800538e:	eb63 0901 	sbc.w	r9, r3, r1
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800539e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053a6:	4690      	mov	r8, r2
 80053a8:	4699      	mov	r9, r3
 80053aa:	4623      	mov	r3, r4
 80053ac:	eb18 0303 	adds.w	r3, r8, r3
 80053b0:	60bb      	str	r3, [r7, #8]
 80053b2:	462b      	mov	r3, r5
 80053b4:	eb49 0303 	adc.w	r3, r9, r3
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053c6:	4629      	mov	r1, r5
 80053c8:	024b      	lsls	r3, r1, #9
 80053ca:	4620      	mov	r0, r4
 80053cc:	4629      	mov	r1, r5
 80053ce:	4604      	mov	r4, r0
 80053d0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80053d4:	4601      	mov	r1, r0
 80053d6:	024a      	lsls	r2, r1, #9
 80053d8:	4610      	mov	r0, r2
 80053da:	4619      	mov	r1, r3
 80053dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053de:	2200      	movs	r2, #0
 80053e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053e8:	f7fb fe14 	bl	8001014 <__aeabi_uldivmod>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4613      	mov	r3, r2
 80053f2:	647b      	str	r3, [r7, #68]	; 0x44
 80053f4:	e055      	b.n	80054a2 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80053f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f8:	2200      	movs	r2, #0
 80053fa:	623b      	str	r3, [r7, #32]
 80053fc:	627a      	str	r2, [r7, #36]	; 0x24
 80053fe:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005402:	4642      	mov	r2, r8
 8005404:	464b      	mov	r3, r9
 8005406:	f04f 0000 	mov.w	r0, #0
 800540a:	f04f 0100 	mov.w	r1, #0
 800540e:	0159      	lsls	r1, r3, #5
 8005410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005414:	0150      	lsls	r0, r2, #5
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	46c4      	mov	ip, r8
 800541c:	ebb2 0a0c 	subs.w	sl, r2, ip
 8005420:	4640      	mov	r0, r8
 8005422:	4649      	mov	r1, r9
 8005424:	468c      	mov	ip, r1
 8005426:	eb63 0b0c 	sbc.w	fp, r3, ip
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	f04f 0300 	mov.w	r3, #0
 8005432:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005436:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800543a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800543e:	ebb2 040a 	subs.w	r4, r2, sl
 8005442:	eb63 050b 	sbc.w	r5, r3, fp
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	f04f 0300 	mov.w	r3, #0
 800544e:	00eb      	lsls	r3, r5, #3
 8005450:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005454:	00e2      	lsls	r2, r4, #3
 8005456:	4614      	mov	r4, r2
 8005458:	461d      	mov	r5, r3
 800545a:	4603      	mov	r3, r0
 800545c:	18e3      	adds	r3, r4, r3
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	460b      	mov	r3, r1
 8005462:	eb45 0303 	adc.w	r3, r5, r3
 8005466:	607b      	str	r3, [r7, #4]
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005474:	4629      	mov	r1, r5
 8005476:	028b      	lsls	r3, r1, #10
 8005478:	4620      	mov	r0, r4
 800547a:	4629      	mov	r1, r5
 800547c:	4604      	mov	r4, r0
 800547e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8005482:	4601      	mov	r1, r0
 8005484:	028a      	lsls	r2, r1, #10
 8005486:	4610      	mov	r0, r2
 8005488:	4619      	mov	r1, r3
 800548a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548c:	2200      	movs	r2, #0
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	61fa      	str	r2, [r7, #28]
 8005492:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005496:	f7fb fdbd 	bl	8001014 <__aeabi_uldivmod>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4613      	mov	r3, r2
 80054a0:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80054a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a4:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80054a6:	e00d      	b.n	80054c4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80054a8:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	0b5b      	lsrs	r3, r3, #13
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80054b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b6:	3301      	adds	r3, #1
 80054b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80054bc:	fa02 f303 	lsl.w	r3, r2, r3
 80054c0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80054c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3748      	adds	r7, #72	; 0x48
 80054ca:	46bd      	mov	sp, r7
 80054cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054d0:	40023800 	.word	0x40023800
 80054d4:	00f42400 	.word	0x00f42400
 80054d8:	007a1200 	.word	0x007a1200
 80054dc:	08008d4c 	.word	0x08008d4c

080054e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e4:	4b02      	ldr	r3, [pc, #8]	; (80054f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80054e6:	681b      	ldr	r3, [r3, #0]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr
 80054f0:	20000004 	.word	0x20000004

080054f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054f8:	f7ff fff2 	bl	80054e0 <HAL_RCC_GetHCLKFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b05      	ldr	r3, [pc, #20]	; (8005514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	0a1b      	lsrs	r3, r3, #8
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	4903      	ldr	r1, [pc, #12]	; (8005518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005510:	4618      	mov	r0, r3
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40023800 	.word	0x40023800
 8005518:	08008d68 	.word	0x08008d68

0800551c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005520:	f7ff ffde 	bl	80054e0 <HAL_RCC_GetHCLKFreq>
 8005524:	4602      	mov	r2, r0
 8005526:	4b05      	ldr	r3, [pc, #20]	; (800553c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	0adb      	lsrs	r3, r3, #11
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	4903      	ldr	r1, [pc, #12]	; (8005540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005532:	5ccb      	ldrb	r3, [r1, r3]
 8005534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005538:	4618      	mov	r0, r3
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40023800 	.word	0x40023800
 8005540:	08008d68 	.word	0x08008d68

08005544 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800554c:	2300      	movs	r3, #0
 800554e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005550:	4b29      	ldr	r3, [pc, #164]	; (80055f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d12c      	bne.n	80055b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800555c:	4b26      	ldr	r3, [pc, #152]	; (80055f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005568:	4b24      	ldr	r3, [pc, #144]	; (80055fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005570:	617b      	str	r3, [r7, #20]
 8005572:	e016      	b.n	80055a2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005574:	4b20      	ldr	r3, [pc, #128]	; (80055f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	4a1f      	ldr	r2, [pc, #124]	; (80055f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800557a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557e:	6253      	str	r3, [r2, #36]	; 0x24
 8005580:	4b1d      	ldr	r3, [pc, #116]	; (80055f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800558c:	4b1b      	ldr	r3, [pc, #108]	; (80055fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005594:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005596:	4b18      	ldr	r3, [pc, #96]	; (80055f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	4a17      	ldr	r2, [pc, #92]	; (80055f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800559c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055a0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80055a8:	d105      	bne.n	80055b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055b0:	d101      	bne.n	80055b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80055b2:	2301      	movs	r3, #1
 80055b4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d105      	bne.n	80055c8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80055bc:	4b10      	ldr	r3, [pc, #64]	; (8005600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a0f      	ldr	r2, [pc, #60]	; (8005600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055c2:	f043 0304 	orr.w	r3, r3, #4
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	4b0d      	ldr	r3, [pc, #52]	; (8005600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f023 0201 	bic.w	r2, r3, #1
 80055d0:	490b      	ldr	r1, [pc, #44]	; (8005600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80055d8:	4b09      	ldr	r3, [pc, #36]	; (8005600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d001      	beq.n	80055ea <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bc80      	pop	{r7}
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40023800 	.word	0x40023800
 80055fc:	40007000 	.word	0x40007000
 8005600:	40023c00 	.word	0x40023c00

08005604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e03f      	b.n	8005696 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fd f9cc 	bl	80029c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2224      	movs	r2, #36	; 0x24
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005646:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fb55 	bl	8005cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800565c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695a      	ldr	r2, [r3, #20]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800566c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68da      	ldr	r2, [r3, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800567c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b08a      	sub	sp, #40	; 0x28
 80056a2:	af02      	add	r7, sp, #8
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	603b      	str	r3, [r7, #0]
 80056aa:	4613      	mov	r3, r2
 80056ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d17c      	bne.n	80057b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <HAL_UART_Transmit+0x2c>
 80056c4:	88fb      	ldrh	r3, [r7, #6]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e075      	b.n	80057ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <HAL_UART_Transmit+0x3e>
 80056d8:	2302      	movs	r3, #2
 80056da:	e06e      	b.n	80057ba <HAL_UART_Transmit+0x11c>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2221      	movs	r2, #33	; 0x21
 80056ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056f2:	f7fd fa91 	bl	8002c18 <HAL_GetTick>
 80056f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	88fa      	ldrh	r2, [r7, #6]
 80056fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	88fa      	ldrh	r2, [r7, #6]
 8005702:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800570c:	d108      	bne.n	8005720 <HAL_UART_Transmit+0x82>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d104      	bne.n	8005720 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005716:	2300      	movs	r3, #0
 8005718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	e003      	b.n	8005728 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005724:	2300      	movs	r3, #0
 8005726:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005730:	e02a      	b.n	8005788 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2200      	movs	r2, #0
 800573a:	2180      	movs	r1, #128	; 0x80
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 f9ea 	bl	8005b16 <UART_WaitOnFlagUntilTimeout>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e036      	b.n	80057ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10b      	bne.n	800576a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005760:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	3302      	adds	r3, #2
 8005766:	61bb      	str	r3, [r7, #24]
 8005768:	e007      	b.n	800577a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	781a      	ldrb	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	3301      	adds	r3, #1
 8005778:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1cf      	bne.n	8005732 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2200      	movs	r2, #0
 800579a:	2140      	movs	r1, #64	; 0x40
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f9ba 	bl	8005b16 <UART_WaitOnFlagUntilTimeout>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e006      	b.n	80057ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	e000      	b.n	80057ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057b8:	2302      	movs	r3, #2
  }
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3720      	adds	r7, #32
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	4613      	mov	r3, r2
 80057d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b20      	cmp	r3, #32
 80057dc:	d153      	bne.n	8005886 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <HAL_UART_Transmit_DMA+0x26>
 80057e4:	88fb      	ldrh	r3, [r7, #6]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e04c      	b.n	8005888 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_UART_Transmit_DMA+0x38>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e045      	b.n	8005888 <HAL_UART_Transmit_DMA+0xc4>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	88fa      	ldrh	r2, [r7, #6]
 800580e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	88fa      	ldrh	r2, [r7, #6]
 8005814:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2221      	movs	r2, #33	; 0x21
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005828:	4a19      	ldr	r2, [pc, #100]	; (8005890 <HAL_UART_Transmit_DMA+0xcc>)
 800582a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005830:	4a18      	ldr	r2, [pc, #96]	; (8005894 <HAL_UART_Transmit_DMA+0xd0>)
 8005832:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005838:	4a17      	ldr	r2, [pc, #92]	; (8005898 <HAL_UART_Transmit_DMA+0xd4>)
 800583a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005840:	2200      	movs	r2, #0
 8005842:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8005844:	f107 0308 	add.w	r3, r7, #8
 8005848:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	6819      	ldr	r1, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3304      	adds	r3, #4
 8005858:	461a      	mov	r2, r3
 800585a:	88fb      	ldrh	r3, [r7, #6]
 800585c:	f7fd fb8a 	bl	8002f74 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005868:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695a      	ldr	r2, [r3, #20]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005880:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	e000      	b.n	8005888 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005886:	2302      	movs	r3, #2
  }
}
 8005888:	4618      	mov	r0, r3
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	08005949 	.word	0x08005949
 8005894:	0800599b 	.word	0x0800599b
 8005898:	08005a83 	.word	0x08005a83

0800589c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	4613      	mov	r3, r2
 80058a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d11d      	bne.n	80058f2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_UART_Receive_DMA+0x26>
 80058bc:	88fb      	ldrh	r3, [r7, #6]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e016      	b.n	80058f4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_UART_Receive_DMA+0x38>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e00f      	b.n	80058f4 <HAL_UART_Receive_DMA+0x58>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80058e2:	88fb      	ldrh	r3, [r7, #6]
 80058e4:	461a      	mov	r2, r3
 80058e6:	68b9      	ldr	r1, [r7, #8]
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 f95f 	bl	8005bac <UART_Start_Receive_DMA>
 80058ee:	4603      	mov	r3, r0
 80058f0:	e000      	b.n	80058f4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80058f2:	2302      	movs	r3, #2
  }
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	bc80      	pop	{r7}
 800590c:	4770      	bx	lr

0800590e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	bc80      	pop	{r7}
 800591e:	4770      	bx	lr

08005920 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr

08005932 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	460b      	mov	r3, r1
 800593c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0320 	and.w	r3, r3, #32
 8005960:	2b00      	cmp	r3, #0
 8005962:	d113      	bne.n	800598c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	695a      	ldr	r2, [r3, #20]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005978:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005988:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800598a:	e002      	b.n	8005992 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f7fc fd73 	bl	8002478 <HAL_UART_TxCpltCallback>
}
 8005992:	bf00      	nop
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f7ff ffa7 	bl	80058fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059ae:	bf00      	nop
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b084      	sub	sp, #16
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0320 	and.w	r3, r3, #32
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d12a      	bne.n	8005a28 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68da      	ldr	r2, [r3, #12]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059e6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695a      	ldr	r2, [r3, #20]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0201 	bic.w	r2, r2, #1
 80059f6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	695a      	ldr	r2, [r3, #20]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a06:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d107      	bne.n	8005a28 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0210 	bic.w	r2, r2, #16
 8005a26:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d106      	bne.n	8005a3e <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a34:	4619      	mov	r1, r3
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f7ff ff7b 	bl	8005932 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a3c:	e002      	b.n	8005a44 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f7fc fcd4 	bl	80023ec <HAL_UART_RxCpltCallback>
}
 8005a44:	bf00      	nop
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d108      	bne.n	8005a74 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a66:	085b      	lsrs	r3, r3, #1
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7ff ff60 	bl	8005932 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a72:	e002      	b.n	8005a7a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f7ff ff4a 	bl	800590e <HAL_UART_RxHalfCpltCallback>
}
 8005a7a:	bf00      	nop
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9e:	2b80      	cmp	r3, #128	; 0x80
 8005aa0:	bf0c      	ite	eq
 8005aa2:	2301      	moveq	r3, #1
 8005aa4:	2300      	movne	r3, #0
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b21      	cmp	r3, #33	; 0x21
 8005ab4:	d108      	bne.n	8005ac8 <UART_DMAError+0x46>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d005      	beq.n	8005ac8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005ac2:	68b8      	ldr	r0, [r7, #8]
 8005ac4:	f000 f8d6 	bl	8005c74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	bf0c      	ite	eq
 8005ad6:	2301      	moveq	r3, #1
 8005ad8:	2300      	movne	r3, #0
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b22      	cmp	r3, #34	; 0x22
 8005ae8:	d108      	bne.n	8005afc <UART_DMAError+0x7a>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2200      	movs	r2, #0
 8005af4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005af6:	68b8      	ldr	r0, [r7, #8]
 8005af8:	f000 f8d1 	bl	8005c9e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	f043 0210 	orr.w	r2, r3, #16
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b08:	68b8      	ldr	r0, [r7, #8]
 8005b0a:	f7ff ff09 	bl	8005920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b0e:	bf00      	nop
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b084      	sub	sp, #16
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	603b      	str	r3, [r7, #0]
 8005b22:	4613      	mov	r3, r2
 8005b24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b26:	e02c      	b.n	8005b82 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2e:	d028      	beq.n	8005b82 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b36:	f7fd f86f 	bl	8002c18 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d21d      	bcs.n	8005b82 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b54:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	695a      	ldr	r2, [r3, #20]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0201 	bic.w	r2, r2, #1
 8005b64:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e00f      	b.n	8005ba2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	bf0c      	ite	eq
 8005b92:	2301      	moveq	r3, #1
 8005b94:	2300      	movne	r3, #0
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d0c3      	beq.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	88fa      	ldrh	r2, [r7, #6]
 8005bc4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2222      	movs	r2, #34	; 0x22
 8005bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd8:	4a23      	ldr	r2, [pc, #140]	; (8005c68 <UART_Start_Receive_DMA+0xbc>)
 8005bda:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	4a22      	ldr	r2, [pc, #136]	; (8005c6c <UART_Start_Receive_DMA+0xc0>)
 8005be2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	4a21      	ldr	r2, [pc, #132]	; (8005c70 <UART_Start_Receive_DMA+0xc4>)
 8005bea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005bf4:	f107 0308 	add.w	r3, r7, #8
 8005bf8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3304      	adds	r3, #4
 8005c04:	4619      	mov	r1, r3
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	88fb      	ldrh	r3, [r7, #6]
 8005c0c:	f7fd f9b2 	bl	8002f74 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005c10:	2300      	movs	r3, #0
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	613b      	str	r3, [r7, #16]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	613b      	str	r3, [r7, #16]
 8005c24:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c3c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	695a      	ldr	r2, [r3, #20]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f042 0201 	orr.w	r2, r2, #1
 8005c4c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	695a      	ldr	r2, [r3, #20]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c5c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	080059b7 	.word	0x080059b7
 8005c6c:	08005a4d 	.word	0x08005a4d
 8005c70:	08005a83 	.word	0x08005a83

08005c74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005c8a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bc80      	pop	{r7}
 8005c9c:	4770      	bx	lr

08005c9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005cb4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695a      	ldr	r2, [r3, #20]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0201 	bic.w	r2, r2, #1
 8005cc4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d107      	bne.n	8005cde <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0210 	bic.w	r2, r2, #16
 8005cdc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bc80      	pop	{r7}
 8005cf4:	4770      	bx	lr
	...

08005cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d38:	f023 030c 	bic.w	r3, r3, #12
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6812      	ldr	r2, [r2, #0]
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	430b      	orrs	r3, r1
 8005d44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699a      	ldr	r2, [r3, #24]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a55      	ldr	r2, [pc, #340]	; (8005eb8 <UART_SetConfig+0x1c0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d103      	bne.n	8005d6e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d66:	f7ff fbd9 	bl	800551c <HAL_RCC_GetPCLK2Freq>
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	e002      	b.n	8005d74 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005d6e:	f7ff fbc1 	bl	80054f4 <HAL_RCC_GetPCLK1Freq>
 8005d72:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d7c:	d14c      	bne.n	8005e18 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	4613      	mov	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	009a      	lsls	r2, r3, #2
 8005d88:	441a      	add	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d94:	4a49      	ldr	r2, [pc, #292]	; (8005ebc <UART_SetConfig+0x1c4>)
 8005d96:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	0119      	lsls	r1, r3, #4
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4613      	mov	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	009a      	lsls	r2, r3, #2
 8005da8:	441a      	add	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005db4:	4b41      	ldr	r3, [pc, #260]	; (8005ebc <UART_SetConfig+0x1c4>)
 8005db6:	fba3 0302 	umull	r0, r3, r3, r2
 8005dba:	095b      	lsrs	r3, r3, #5
 8005dbc:	2064      	movs	r0, #100	; 0x64
 8005dbe:	fb00 f303 	mul.w	r3, r0, r3
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	3332      	adds	r3, #50	; 0x32
 8005dc8:	4a3c      	ldr	r2, [pc, #240]	; (8005ebc <UART_SetConfig+0x1c4>)
 8005dca:	fba2 2303 	umull	r2, r3, r2, r3
 8005dce:	095b      	lsrs	r3, r3, #5
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005dd6:	4419      	add	r1, r3
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	009a      	lsls	r2, r3, #2
 8005de2:	441a      	add	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dee:	4b33      	ldr	r3, [pc, #204]	; (8005ebc <UART_SetConfig+0x1c4>)
 8005df0:	fba3 0302 	umull	r0, r3, r3, r2
 8005df4:	095b      	lsrs	r3, r3, #5
 8005df6:	2064      	movs	r0, #100	; 0x64
 8005df8:	fb00 f303 	mul.w	r3, r0, r3
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	3332      	adds	r3, #50	; 0x32
 8005e02:	4a2e      	ldr	r2, [pc, #184]	; (8005ebc <UART_SetConfig+0x1c4>)
 8005e04:	fba2 2303 	umull	r2, r3, r2, r3
 8005e08:	095b      	lsrs	r3, r3, #5
 8005e0a:	f003 0207 	and.w	r2, r3, #7
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	440a      	add	r2, r1
 8005e14:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e16:	e04a      	b.n	8005eae <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	009a      	lsls	r2, r3, #2
 8005e22:	441a      	add	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2e:	4a23      	ldr	r2, [pc, #140]	; (8005ebc <UART_SetConfig+0x1c4>)
 8005e30:	fba2 2303 	umull	r2, r3, r2, r3
 8005e34:	095b      	lsrs	r3, r3, #5
 8005e36:	0119      	lsls	r1, r3, #4
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	009a      	lsls	r2, r3, #2
 8005e42:	441a      	add	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e4e:	4b1b      	ldr	r3, [pc, #108]	; (8005ebc <UART_SetConfig+0x1c4>)
 8005e50:	fba3 0302 	umull	r0, r3, r3, r2
 8005e54:	095b      	lsrs	r3, r3, #5
 8005e56:	2064      	movs	r0, #100	; 0x64
 8005e58:	fb00 f303 	mul.w	r3, r0, r3
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	3332      	adds	r3, #50	; 0x32
 8005e62:	4a16      	ldr	r2, [pc, #88]	; (8005ebc <UART_SetConfig+0x1c4>)
 8005e64:	fba2 2303 	umull	r2, r3, r2, r3
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e6e:	4419      	add	r1, r3
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4613      	mov	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	009a      	lsls	r2, r3, #2
 8005e7a:	441a      	add	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e86:	4b0d      	ldr	r3, [pc, #52]	; (8005ebc <UART_SetConfig+0x1c4>)
 8005e88:	fba3 0302 	umull	r0, r3, r3, r2
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	2064      	movs	r0, #100	; 0x64
 8005e90:	fb00 f303 	mul.w	r3, r0, r3
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	3332      	adds	r3, #50	; 0x32
 8005e9a:	4a08      	ldr	r2, [pc, #32]	; (8005ebc <UART_SetConfig+0x1c4>)
 8005e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea0:	095b      	lsrs	r3, r3, #5
 8005ea2:	f003 020f 	and.w	r2, r3, #15
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	440a      	add	r2, r1
 8005eac:	609a      	str	r2, [r3, #8]
}
 8005eae:	bf00      	nop
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	40013800 	.word	0x40013800
 8005ebc:	51eb851f 	.word	0x51eb851f

08005ec0 <__errno>:
 8005ec0:	4b01      	ldr	r3, [pc, #4]	; (8005ec8 <__errno+0x8>)
 8005ec2:	6818      	ldr	r0, [r3, #0]
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	20000010 	.word	0x20000010

08005ecc <__libc_init_array>:
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	2600      	movs	r6, #0
 8005ed0:	4d0c      	ldr	r5, [pc, #48]	; (8005f04 <__libc_init_array+0x38>)
 8005ed2:	4c0d      	ldr	r4, [pc, #52]	; (8005f08 <__libc_init_array+0x3c>)
 8005ed4:	1b64      	subs	r4, r4, r5
 8005ed6:	10a4      	asrs	r4, r4, #2
 8005ed8:	42a6      	cmp	r6, r4
 8005eda:	d109      	bne.n	8005ef0 <__libc_init_array+0x24>
 8005edc:	f002 fefc 	bl	8008cd8 <_init>
 8005ee0:	2600      	movs	r6, #0
 8005ee2:	4d0a      	ldr	r5, [pc, #40]	; (8005f0c <__libc_init_array+0x40>)
 8005ee4:	4c0a      	ldr	r4, [pc, #40]	; (8005f10 <__libc_init_array+0x44>)
 8005ee6:	1b64      	subs	r4, r4, r5
 8005ee8:	10a4      	asrs	r4, r4, #2
 8005eea:	42a6      	cmp	r6, r4
 8005eec:	d105      	bne.n	8005efa <__libc_init_array+0x2e>
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef4:	4798      	blx	r3
 8005ef6:	3601      	adds	r6, #1
 8005ef8:	e7ee      	b.n	8005ed8 <__libc_init_array+0xc>
 8005efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efe:	4798      	blx	r3
 8005f00:	3601      	adds	r6, #1
 8005f02:	e7f2      	b.n	8005eea <__libc_init_array+0x1e>
 8005f04:	08009154 	.word	0x08009154
 8005f08:	08009154 	.word	0x08009154
 8005f0c:	08009154 	.word	0x08009154
 8005f10:	08009158 	.word	0x08009158

08005f14 <memset>:
 8005f14:	4603      	mov	r3, r0
 8005f16:	4402      	add	r2, r0
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d100      	bne.n	8005f1e <memset+0xa>
 8005f1c:	4770      	bx	lr
 8005f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f22:	e7f9      	b.n	8005f18 <memset+0x4>

08005f24 <__cvt>:
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f2a:	461f      	mov	r7, r3
 8005f2c:	bfbb      	ittet	lt
 8005f2e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005f32:	461f      	movlt	r7, r3
 8005f34:	2300      	movge	r3, #0
 8005f36:	232d      	movlt	r3, #45	; 0x2d
 8005f38:	b088      	sub	sp, #32
 8005f3a:	4614      	mov	r4, r2
 8005f3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f3e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005f40:	7013      	strb	r3, [r2, #0]
 8005f42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f44:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005f48:	f023 0820 	bic.w	r8, r3, #32
 8005f4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f50:	d005      	beq.n	8005f5e <__cvt+0x3a>
 8005f52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f56:	d100      	bne.n	8005f5a <__cvt+0x36>
 8005f58:	3501      	adds	r5, #1
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	e000      	b.n	8005f60 <__cvt+0x3c>
 8005f5e:	2303      	movs	r3, #3
 8005f60:	aa07      	add	r2, sp, #28
 8005f62:	9204      	str	r2, [sp, #16]
 8005f64:	aa06      	add	r2, sp, #24
 8005f66:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005f6a:	e9cd 3500 	strd	r3, r5, [sp]
 8005f6e:	4622      	mov	r2, r4
 8005f70:	463b      	mov	r3, r7
 8005f72:	f000 fce5 	bl	8006940 <_dtoa_r>
 8005f76:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	d102      	bne.n	8005f84 <__cvt+0x60>
 8005f7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f80:	07db      	lsls	r3, r3, #31
 8005f82:	d522      	bpl.n	8005fca <__cvt+0xa6>
 8005f84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f88:	eb06 0905 	add.w	r9, r6, r5
 8005f8c:	d110      	bne.n	8005fb0 <__cvt+0x8c>
 8005f8e:	7833      	ldrb	r3, [r6, #0]
 8005f90:	2b30      	cmp	r3, #48	; 0x30
 8005f92:	d10a      	bne.n	8005faa <__cvt+0x86>
 8005f94:	2200      	movs	r2, #0
 8005f96:	2300      	movs	r3, #0
 8005f98:	4620      	mov	r0, r4
 8005f9a:	4639      	mov	r1, r7
 8005f9c:	f7fa fd1c 	bl	80009d8 <__aeabi_dcmpeq>
 8005fa0:	b918      	cbnz	r0, 8005faa <__cvt+0x86>
 8005fa2:	f1c5 0501 	rsb	r5, r5, #1
 8005fa6:	f8ca 5000 	str.w	r5, [sl]
 8005faa:	f8da 3000 	ldr.w	r3, [sl]
 8005fae:	4499      	add	r9, r3
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	4639      	mov	r1, r7
 8005fb8:	f7fa fd0e 	bl	80009d8 <__aeabi_dcmpeq>
 8005fbc:	b108      	cbz	r0, 8005fc2 <__cvt+0x9e>
 8005fbe:	f8cd 901c 	str.w	r9, [sp, #28]
 8005fc2:	2230      	movs	r2, #48	; 0x30
 8005fc4:	9b07      	ldr	r3, [sp, #28]
 8005fc6:	454b      	cmp	r3, r9
 8005fc8:	d307      	bcc.n	8005fda <__cvt+0xb6>
 8005fca:	4630      	mov	r0, r6
 8005fcc:	9b07      	ldr	r3, [sp, #28]
 8005fce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005fd0:	1b9b      	subs	r3, r3, r6
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	b008      	add	sp, #32
 8005fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fda:	1c59      	adds	r1, r3, #1
 8005fdc:	9107      	str	r1, [sp, #28]
 8005fde:	701a      	strb	r2, [r3, #0]
 8005fe0:	e7f0      	b.n	8005fc4 <__cvt+0xa0>

08005fe2 <__exponent>:
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fe6:	2900      	cmp	r1, #0
 8005fe8:	f803 2b02 	strb.w	r2, [r3], #2
 8005fec:	bfb6      	itet	lt
 8005fee:	222d      	movlt	r2, #45	; 0x2d
 8005ff0:	222b      	movge	r2, #43	; 0x2b
 8005ff2:	4249      	neglt	r1, r1
 8005ff4:	2909      	cmp	r1, #9
 8005ff6:	7042      	strb	r2, [r0, #1]
 8005ff8:	dd2b      	ble.n	8006052 <__exponent+0x70>
 8005ffa:	f10d 0407 	add.w	r4, sp, #7
 8005ffe:	46a4      	mov	ip, r4
 8006000:	270a      	movs	r7, #10
 8006002:	fb91 f6f7 	sdiv	r6, r1, r7
 8006006:	460a      	mov	r2, r1
 8006008:	46a6      	mov	lr, r4
 800600a:	fb07 1516 	mls	r5, r7, r6, r1
 800600e:	2a63      	cmp	r2, #99	; 0x63
 8006010:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006014:	4631      	mov	r1, r6
 8006016:	f104 34ff 	add.w	r4, r4, #4294967295
 800601a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800601e:	dcf0      	bgt.n	8006002 <__exponent+0x20>
 8006020:	3130      	adds	r1, #48	; 0x30
 8006022:	f1ae 0502 	sub.w	r5, lr, #2
 8006026:	f804 1c01 	strb.w	r1, [r4, #-1]
 800602a:	4629      	mov	r1, r5
 800602c:	1c44      	adds	r4, r0, #1
 800602e:	4561      	cmp	r1, ip
 8006030:	d30a      	bcc.n	8006048 <__exponent+0x66>
 8006032:	f10d 0209 	add.w	r2, sp, #9
 8006036:	eba2 020e 	sub.w	r2, r2, lr
 800603a:	4565      	cmp	r5, ip
 800603c:	bf88      	it	hi
 800603e:	2200      	movhi	r2, #0
 8006040:	4413      	add	r3, r2
 8006042:	1a18      	subs	r0, r3, r0
 8006044:	b003      	add	sp, #12
 8006046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006048:	f811 2b01 	ldrb.w	r2, [r1], #1
 800604c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006050:	e7ed      	b.n	800602e <__exponent+0x4c>
 8006052:	2330      	movs	r3, #48	; 0x30
 8006054:	3130      	adds	r1, #48	; 0x30
 8006056:	7083      	strb	r3, [r0, #2]
 8006058:	70c1      	strb	r1, [r0, #3]
 800605a:	1d03      	adds	r3, r0, #4
 800605c:	e7f1      	b.n	8006042 <__exponent+0x60>
	...

08006060 <_printf_float>:
 8006060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006064:	b091      	sub	sp, #68	; 0x44
 8006066:	460c      	mov	r4, r1
 8006068:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800606c:	4616      	mov	r6, r2
 800606e:	461f      	mov	r7, r3
 8006070:	4605      	mov	r5, r0
 8006072:	f001 fa53 	bl	800751c <_localeconv_r>
 8006076:	6803      	ldr	r3, [r0, #0]
 8006078:	4618      	mov	r0, r3
 800607a:	9309      	str	r3, [sp, #36]	; 0x24
 800607c:	f7fa f880 	bl	8000180 <strlen>
 8006080:	2300      	movs	r3, #0
 8006082:	930e      	str	r3, [sp, #56]	; 0x38
 8006084:	f8d8 3000 	ldr.w	r3, [r8]
 8006088:	900a      	str	r0, [sp, #40]	; 0x28
 800608a:	3307      	adds	r3, #7
 800608c:	f023 0307 	bic.w	r3, r3, #7
 8006090:	f103 0208 	add.w	r2, r3, #8
 8006094:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006098:	f8d4 b000 	ldr.w	fp, [r4]
 800609c:	f8c8 2000 	str.w	r2, [r8]
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80060a8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80060ac:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80060b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80060b2:	f04f 32ff 	mov.w	r2, #4294967295
 80060b6:	4640      	mov	r0, r8
 80060b8:	4b9c      	ldr	r3, [pc, #624]	; (800632c <_printf_float+0x2cc>)
 80060ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060bc:	f7fa fcbe 	bl	8000a3c <__aeabi_dcmpun>
 80060c0:	bb70      	cbnz	r0, 8006120 <_printf_float+0xc0>
 80060c2:	f04f 32ff 	mov.w	r2, #4294967295
 80060c6:	4640      	mov	r0, r8
 80060c8:	4b98      	ldr	r3, [pc, #608]	; (800632c <_printf_float+0x2cc>)
 80060ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060cc:	f7fa fc98 	bl	8000a00 <__aeabi_dcmple>
 80060d0:	bb30      	cbnz	r0, 8006120 <_printf_float+0xc0>
 80060d2:	2200      	movs	r2, #0
 80060d4:	2300      	movs	r3, #0
 80060d6:	4640      	mov	r0, r8
 80060d8:	4651      	mov	r1, sl
 80060da:	f7fa fc87 	bl	80009ec <__aeabi_dcmplt>
 80060de:	b110      	cbz	r0, 80060e6 <_printf_float+0x86>
 80060e0:	232d      	movs	r3, #45	; 0x2d
 80060e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060e6:	4b92      	ldr	r3, [pc, #584]	; (8006330 <_printf_float+0x2d0>)
 80060e8:	4892      	ldr	r0, [pc, #584]	; (8006334 <_printf_float+0x2d4>)
 80060ea:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80060ee:	bf94      	ite	ls
 80060f0:	4698      	movls	r8, r3
 80060f2:	4680      	movhi	r8, r0
 80060f4:	2303      	movs	r3, #3
 80060f6:	f04f 0a00 	mov.w	sl, #0
 80060fa:	6123      	str	r3, [r4, #16]
 80060fc:	f02b 0304 	bic.w	r3, fp, #4
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	4633      	mov	r3, r6
 8006104:	4621      	mov	r1, r4
 8006106:	4628      	mov	r0, r5
 8006108:	9700      	str	r7, [sp, #0]
 800610a:	aa0f      	add	r2, sp, #60	; 0x3c
 800610c:	f000 f9d4 	bl	80064b8 <_printf_common>
 8006110:	3001      	adds	r0, #1
 8006112:	f040 8090 	bne.w	8006236 <_printf_float+0x1d6>
 8006116:	f04f 30ff 	mov.w	r0, #4294967295
 800611a:	b011      	add	sp, #68	; 0x44
 800611c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006120:	4642      	mov	r2, r8
 8006122:	4653      	mov	r3, sl
 8006124:	4640      	mov	r0, r8
 8006126:	4651      	mov	r1, sl
 8006128:	f7fa fc88 	bl	8000a3c <__aeabi_dcmpun>
 800612c:	b148      	cbz	r0, 8006142 <_printf_float+0xe2>
 800612e:	f1ba 0f00 	cmp.w	sl, #0
 8006132:	bfb8      	it	lt
 8006134:	232d      	movlt	r3, #45	; 0x2d
 8006136:	4880      	ldr	r0, [pc, #512]	; (8006338 <_printf_float+0x2d8>)
 8006138:	bfb8      	it	lt
 800613a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800613e:	4b7f      	ldr	r3, [pc, #508]	; (800633c <_printf_float+0x2dc>)
 8006140:	e7d3      	b.n	80060ea <_printf_float+0x8a>
 8006142:	6863      	ldr	r3, [r4, #4]
 8006144:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	d142      	bne.n	80061d2 <_printf_float+0x172>
 800614c:	2306      	movs	r3, #6
 800614e:	6063      	str	r3, [r4, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	9206      	str	r2, [sp, #24]
 8006154:	aa0e      	add	r2, sp, #56	; 0x38
 8006156:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800615a:	aa0d      	add	r2, sp, #52	; 0x34
 800615c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006160:	9203      	str	r2, [sp, #12]
 8006162:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006166:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800616a:	6023      	str	r3, [r4, #0]
 800616c:	6863      	ldr	r3, [r4, #4]
 800616e:	4642      	mov	r2, r8
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	4628      	mov	r0, r5
 8006174:	4653      	mov	r3, sl
 8006176:	910b      	str	r1, [sp, #44]	; 0x2c
 8006178:	f7ff fed4 	bl	8005f24 <__cvt>
 800617c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800617e:	4680      	mov	r8, r0
 8006180:	2947      	cmp	r1, #71	; 0x47
 8006182:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006184:	d108      	bne.n	8006198 <_printf_float+0x138>
 8006186:	1cc8      	adds	r0, r1, #3
 8006188:	db02      	blt.n	8006190 <_printf_float+0x130>
 800618a:	6863      	ldr	r3, [r4, #4]
 800618c:	4299      	cmp	r1, r3
 800618e:	dd40      	ble.n	8006212 <_printf_float+0x1b2>
 8006190:	f1a9 0902 	sub.w	r9, r9, #2
 8006194:	fa5f f989 	uxtb.w	r9, r9
 8006198:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800619c:	d81f      	bhi.n	80061de <_printf_float+0x17e>
 800619e:	464a      	mov	r2, r9
 80061a0:	3901      	subs	r1, #1
 80061a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80061a6:	910d      	str	r1, [sp, #52]	; 0x34
 80061a8:	f7ff ff1b 	bl	8005fe2 <__exponent>
 80061ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061ae:	4682      	mov	sl, r0
 80061b0:	1813      	adds	r3, r2, r0
 80061b2:	2a01      	cmp	r2, #1
 80061b4:	6123      	str	r3, [r4, #16]
 80061b6:	dc02      	bgt.n	80061be <_printf_float+0x15e>
 80061b8:	6822      	ldr	r2, [r4, #0]
 80061ba:	07d2      	lsls	r2, r2, #31
 80061bc:	d501      	bpl.n	80061c2 <_printf_float+0x162>
 80061be:	3301      	adds	r3, #1
 80061c0:	6123      	str	r3, [r4, #16]
 80061c2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d09b      	beq.n	8006102 <_printf_float+0xa2>
 80061ca:	232d      	movs	r3, #45	; 0x2d
 80061cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d0:	e797      	b.n	8006102 <_printf_float+0xa2>
 80061d2:	2947      	cmp	r1, #71	; 0x47
 80061d4:	d1bc      	bne.n	8006150 <_printf_float+0xf0>
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1ba      	bne.n	8006150 <_printf_float+0xf0>
 80061da:	2301      	movs	r3, #1
 80061dc:	e7b7      	b.n	800614e <_printf_float+0xee>
 80061de:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80061e2:	d118      	bne.n	8006216 <_printf_float+0x1b6>
 80061e4:	2900      	cmp	r1, #0
 80061e6:	6863      	ldr	r3, [r4, #4]
 80061e8:	dd0b      	ble.n	8006202 <_printf_float+0x1a2>
 80061ea:	6121      	str	r1, [r4, #16]
 80061ec:	b913      	cbnz	r3, 80061f4 <_printf_float+0x194>
 80061ee:	6822      	ldr	r2, [r4, #0]
 80061f0:	07d0      	lsls	r0, r2, #31
 80061f2:	d502      	bpl.n	80061fa <_printf_float+0x19a>
 80061f4:	3301      	adds	r3, #1
 80061f6:	440b      	add	r3, r1
 80061f8:	6123      	str	r3, [r4, #16]
 80061fa:	f04f 0a00 	mov.w	sl, #0
 80061fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8006200:	e7df      	b.n	80061c2 <_printf_float+0x162>
 8006202:	b913      	cbnz	r3, 800620a <_printf_float+0x1aa>
 8006204:	6822      	ldr	r2, [r4, #0]
 8006206:	07d2      	lsls	r2, r2, #31
 8006208:	d501      	bpl.n	800620e <_printf_float+0x1ae>
 800620a:	3302      	adds	r3, #2
 800620c:	e7f4      	b.n	80061f8 <_printf_float+0x198>
 800620e:	2301      	movs	r3, #1
 8006210:	e7f2      	b.n	80061f8 <_printf_float+0x198>
 8006212:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006218:	4299      	cmp	r1, r3
 800621a:	db05      	blt.n	8006228 <_printf_float+0x1c8>
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	6121      	str	r1, [r4, #16]
 8006220:	07d8      	lsls	r0, r3, #31
 8006222:	d5ea      	bpl.n	80061fa <_printf_float+0x19a>
 8006224:	1c4b      	adds	r3, r1, #1
 8006226:	e7e7      	b.n	80061f8 <_printf_float+0x198>
 8006228:	2900      	cmp	r1, #0
 800622a:	bfcc      	ite	gt
 800622c:	2201      	movgt	r2, #1
 800622e:	f1c1 0202 	rsble	r2, r1, #2
 8006232:	4413      	add	r3, r2
 8006234:	e7e0      	b.n	80061f8 <_printf_float+0x198>
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	055a      	lsls	r2, r3, #21
 800623a:	d407      	bmi.n	800624c <_printf_float+0x1ec>
 800623c:	6923      	ldr	r3, [r4, #16]
 800623e:	4642      	mov	r2, r8
 8006240:	4631      	mov	r1, r6
 8006242:	4628      	mov	r0, r5
 8006244:	47b8      	blx	r7
 8006246:	3001      	adds	r0, #1
 8006248:	d12b      	bne.n	80062a2 <_printf_float+0x242>
 800624a:	e764      	b.n	8006116 <_printf_float+0xb6>
 800624c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006250:	f240 80dd 	bls.w	800640e <_printf_float+0x3ae>
 8006254:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006258:	2200      	movs	r2, #0
 800625a:	2300      	movs	r3, #0
 800625c:	f7fa fbbc 	bl	80009d8 <__aeabi_dcmpeq>
 8006260:	2800      	cmp	r0, #0
 8006262:	d033      	beq.n	80062cc <_printf_float+0x26c>
 8006264:	2301      	movs	r3, #1
 8006266:	4631      	mov	r1, r6
 8006268:	4628      	mov	r0, r5
 800626a:	4a35      	ldr	r2, [pc, #212]	; (8006340 <_printf_float+0x2e0>)
 800626c:	47b8      	blx	r7
 800626e:	3001      	adds	r0, #1
 8006270:	f43f af51 	beq.w	8006116 <_printf_float+0xb6>
 8006274:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006278:	429a      	cmp	r2, r3
 800627a:	db02      	blt.n	8006282 <_printf_float+0x222>
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	07d8      	lsls	r0, r3, #31
 8006280:	d50f      	bpl.n	80062a2 <_printf_float+0x242>
 8006282:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006286:	4631      	mov	r1, r6
 8006288:	4628      	mov	r0, r5
 800628a:	47b8      	blx	r7
 800628c:	3001      	adds	r0, #1
 800628e:	f43f af42 	beq.w	8006116 <_printf_float+0xb6>
 8006292:	f04f 0800 	mov.w	r8, #0
 8006296:	f104 091a 	add.w	r9, r4, #26
 800629a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800629c:	3b01      	subs	r3, #1
 800629e:	4543      	cmp	r3, r8
 80062a0:	dc09      	bgt.n	80062b6 <_printf_float+0x256>
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	079b      	lsls	r3, r3, #30
 80062a6:	f100 8102 	bmi.w	80064ae <_printf_float+0x44e>
 80062aa:	68e0      	ldr	r0, [r4, #12]
 80062ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062ae:	4298      	cmp	r0, r3
 80062b0:	bfb8      	it	lt
 80062b2:	4618      	movlt	r0, r3
 80062b4:	e731      	b.n	800611a <_printf_float+0xba>
 80062b6:	2301      	movs	r3, #1
 80062b8:	464a      	mov	r2, r9
 80062ba:	4631      	mov	r1, r6
 80062bc:	4628      	mov	r0, r5
 80062be:	47b8      	blx	r7
 80062c0:	3001      	adds	r0, #1
 80062c2:	f43f af28 	beq.w	8006116 <_printf_float+0xb6>
 80062c6:	f108 0801 	add.w	r8, r8, #1
 80062ca:	e7e6      	b.n	800629a <_printf_float+0x23a>
 80062cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	dc38      	bgt.n	8006344 <_printf_float+0x2e4>
 80062d2:	2301      	movs	r3, #1
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	4a19      	ldr	r2, [pc, #100]	; (8006340 <_printf_float+0x2e0>)
 80062da:	47b8      	blx	r7
 80062dc:	3001      	adds	r0, #1
 80062de:	f43f af1a 	beq.w	8006116 <_printf_float+0xb6>
 80062e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80062e6:	4313      	orrs	r3, r2
 80062e8:	d102      	bne.n	80062f0 <_printf_float+0x290>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	07d9      	lsls	r1, r3, #31
 80062ee:	d5d8      	bpl.n	80062a2 <_printf_float+0x242>
 80062f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062f4:	4631      	mov	r1, r6
 80062f6:	4628      	mov	r0, r5
 80062f8:	47b8      	blx	r7
 80062fa:	3001      	adds	r0, #1
 80062fc:	f43f af0b 	beq.w	8006116 <_printf_float+0xb6>
 8006300:	f04f 0900 	mov.w	r9, #0
 8006304:	f104 0a1a 	add.w	sl, r4, #26
 8006308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800630a:	425b      	negs	r3, r3
 800630c:	454b      	cmp	r3, r9
 800630e:	dc01      	bgt.n	8006314 <_printf_float+0x2b4>
 8006310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006312:	e794      	b.n	800623e <_printf_float+0x1de>
 8006314:	2301      	movs	r3, #1
 8006316:	4652      	mov	r2, sl
 8006318:	4631      	mov	r1, r6
 800631a:	4628      	mov	r0, r5
 800631c:	47b8      	blx	r7
 800631e:	3001      	adds	r0, #1
 8006320:	f43f aef9 	beq.w	8006116 <_printf_float+0xb6>
 8006324:	f109 0901 	add.w	r9, r9, #1
 8006328:	e7ee      	b.n	8006308 <_printf_float+0x2a8>
 800632a:	bf00      	nop
 800632c:	7fefffff 	.word	0x7fefffff
 8006330:	08008d74 	.word	0x08008d74
 8006334:	08008d78 	.word	0x08008d78
 8006338:	08008d80 	.word	0x08008d80
 800633c:	08008d7c 	.word	0x08008d7c
 8006340:	08008d84 	.word	0x08008d84
 8006344:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006346:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006348:	429a      	cmp	r2, r3
 800634a:	bfa8      	it	ge
 800634c:	461a      	movge	r2, r3
 800634e:	2a00      	cmp	r2, #0
 8006350:	4691      	mov	r9, r2
 8006352:	dc37      	bgt.n	80063c4 <_printf_float+0x364>
 8006354:	f04f 0b00 	mov.w	fp, #0
 8006358:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800635c:	f104 021a 	add.w	r2, r4, #26
 8006360:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006364:	ebaa 0309 	sub.w	r3, sl, r9
 8006368:	455b      	cmp	r3, fp
 800636a:	dc33      	bgt.n	80063d4 <_printf_float+0x374>
 800636c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006370:	429a      	cmp	r2, r3
 8006372:	db3b      	blt.n	80063ec <_printf_float+0x38c>
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	07da      	lsls	r2, r3, #31
 8006378:	d438      	bmi.n	80063ec <_printf_float+0x38c>
 800637a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800637c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800637e:	eba3 020a 	sub.w	r2, r3, sl
 8006382:	eba3 0901 	sub.w	r9, r3, r1
 8006386:	4591      	cmp	r9, r2
 8006388:	bfa8      	it	ge
 800638a:	4691      	movge	r9, r2
 800638c:	f1b9 0f00 	cmp.w	r9, #0
 8006390:	dc34      	bgt.n	80063fc <_printf_float+0x39c>
 8006392:	f04f 0800 	mov.w	r8, #0
 8006396:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800639a:	f104 0a1a 	add.w	sl, r4, #26
 800639e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80063a2:	1a9b      	subs	r3, r3, r2
 80063a4:	eba3 0309 	sub.w	r3, r3, r9
 80063a8:	4543      	cmp	r3, r8
 80063aa:	f77f af7a 	ble.w	80062a2 <_printf_float+0x242>
 80063ae:	2301      	movs	r3, #1
 80063b0:	4652      	mov	r2, sl
 80063b2:	4631      	mov	r1, r6
 80063b4:	4628      	mov	r0, r5
 80063b6:	47b8      	blx	r7
 80063b8:	3001      	adds	r0, #1
 80063ba:	f43f aeac 	beq.w	8006116 <_printf_float+0xb6>
 80063be:	f108 0801 	add.w	r8, r8, #1
 80063c2:	e7ec      	b.n	800639e <_printf_float+0x33e>
 80063c4:	4613      	mov	r3, r2
 80063c6:	4631      	mov	r1, r6
 80063c8:	4642      	mov	r2, r8
 80063ca:	4628      	mov	r0, r5
 80063cc:	47b8      	blx	r7
 80063ce:	3001      	adds	r0, #1
 80063d0:	d1c0      	bne.n	8006354 <_printf_float+0x2f4>
 80063d2:	e6a0      	b.n	8006116 <_printf_float+0xb6>
 80063d4:	2301      	movs	r3, #1
 80063d6:	4631      	mov	r1, r6
 80063d8:	4628      	mov	r0, r5
 80063da:	920b      	str	r2, [sp, #44]	; 0x2c
 80063dc:	47b8      	blx	r7
 80063de:	3001      	adds	r0, #1
 80063e0:	f43f ae99 	beq.w	8006116 <_printf_float+0xb6>
 80063e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063e6:	f10b 0b01 	add.w	fp, fp, #1
 80063ea:	e7b9      	b.n	8006360 <_printf_float+0x300>
 80063ec:	4631      	mov	r1, r6
 80063ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063f2:	4628      	mov	r0, r5
 80063f4:	47b8      	blx	r7
 80063f6:	3001      	adds	r0, #1
 80063f8:	d1bf      	bne.n	800637a <_printf_float+0x31a>
 80063fa:	e68c      	b.n	8006116 <_printf_float+0xb6>
 80063fc:	464b      	mov	r3, r9
 80063fe:	4631      	mov	r1, r6
 8006400:	4628      	mov	r0, r5
 8006402:	eb08 020a 	add.w	r2, r8, sl
 8006406:	47b8      	blx	r7
 8006408:	3001      	adds	r0, #1
 800640a:	d1c2      	bne.n	8006392 <_printf_float+0x332>
 800640c:	e683      	b.n	8006116 <_printf_float+0xb6>
 800640e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006410:	2a01      	cmp	r2, #1
 8006412:	dc01      	bgt.n	8006418 <_printf_float+0x3b8>
 8006414:	07db      	lsls	r3, r3, #31
 8006416:	d537      	bpl.n	8006488 <_printf_float+0x428>
 8006418:	2301      	movs	r3, #1
 800641a:	4642      	mov	r2, r8
 800641c:	4631      	mov	r1, r6
 800641e:	4628      	mov	r0, r5
 8006420:	47b8      	blx	r7
 8006422:	3001      	adds	r0, #1
 8006424:	f43f ae77 	beq.w	8006116 <_printf_float+0xb6>
 8006428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800642c:	4631      	mov	r1, r6
 800642e:	4628      	mov	r0, r5
 8006430:	47b8      	blx	r7
 8006432:	3001      	adds	r0, #1
 8006434:	f43f ae6f 	beq.w	8006116 <_printf_float+0xb6>
 8006438:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800643c:	2200      	movs	r2, #0
 800643e:	2300      	movs	r3, #0
 8006440:	f7fa faca 	bl	80009d8 <__aeabi_dcmpeq>
 8006444:	b9d8      	cbnz	r0, 800647e <_printf_float+0x41e>
 8006446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006448:	f108 0201 	add.w	r2, r8, #1
 800644c:	3b01      	subs	r3, #1
 800644e:	4631      	mov	r1, r6
 8006450:	4628      	mov	r0, r5
 8006452:	47b8      	blx	r7
 8006454:	3001      	adds	r0, #1
 8006456:	d10e      	bne.n	8006476 <_printf_float+0x416>
 8006458:	e65d      	b.n	8006116 <_printf_float+0xb6>
 800645a:	2301      	movs	r3, #1
 800645c:	464a      	mov	r2, r9
 800645e:	4631      	mov	r1, r6
 8006460:	4628      	mov	r0, r5
 8006462:	47b8      	blx	r7
 8006464:	3001      	adds	r0, #1
 8006466:	f43f ae56 	beq.w	8006116 <_printf_float+0xb6>
 800646a:	f108 0801 	add.w	r8, r8, #1
 800646e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006470:	3b01      	subs	r3, #1
 8006472:	4543      	cmp	r3, r8
 8006474:	dcf1      	bgt.n	800645a <_printf_float+0x3fa>
 8006476:	4653      	mov	r3, sl
 8006478:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800647c:	e6e0      	b.n	8006240 <_printf_float+0x1e0>
 800647e:	f04f 0800 	mov.w	r8, #0
 8006482:	f104 091a 	add.w	r9, r4, #26
 8006486:	e7f2      	b.n	800646e <_printf_float+0x40e>
 8006488:	2301      	movs	r3, #1
 800648a:	4642      	mov	r2, r8
 800648c:	e7df      	b.n	800644e <_printf_float+0x3ee>
 800648e:	2301      	movs	r3, #1
 8006490:	464a      	mov	r2, r9
 8006492:	4631      	mov	r1, r6
 8006494:	4628      	mov	r0, r5
 8006496:	47b8      	blx	r7
 8006498:	3001      	adds	r0, #1
 800649a:	f43f ae3c 	beq.w	8006116 <_printf_float+0xb6>
 800649e:	f108 0801 	add.w	r8, r8, #1
 80064a2:	68e3      	ldr	r3, [r4, #12]
 80064a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80064a6:	1a5b      	subs	r3, r3, r1
 80064a8:	4543      	cmp	r3, r8
 80064aa:	dcf0      	bgt.n	800648e <_printf_float+0x42e>
 80064ac:	e6fd      	b.n	80062aa <_printf_float+0x24a>
 80064ae:	f04f 0800 	mov.w	r8, #0
 80064b2:	f104 0919 	add.w	r9, r4, #25
 80064b6:	e7f4      	b.n	80064a2 <_printf_float+0x442>

080064b8 <_printf_common>:
 80064b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064bc:	4616      	mov	r6, r2
 80064be:	4699      	mov	r9, r3
 80064c0:	688a      	ldr	r2, [r1, #8]
 80064c2:	690b      	ldr	r3, [r1, #16]
 80064c4:	4607      	mov	r7, r0
 80064c6:	4293      	cmp	r3, r2
 80064c8:	bfb8      	it	lt
 80064ca:	4613      	movlt	r3, r2
 80064cc:	6033      	str	r3, [r6, #0]
 80064ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064d2:	460c      	mov	r4, r1
 80064d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064d8:	b10a      	cbz	r2, 80064de <_printf_common+0x26>
 80064da:	3301      	adds	r3, #1
 80064dc:	6033      	str	r3, [r6, #0]
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	0699      	lsls	r1, r3, #26
 80064e2:	bf42      	ittt	mi
 80064e4:	6833      	ldrmi	r3, [r6, #0]
 80064e6:	3302      	addmi	r3, #2
 80064e8:	6033      	strmi	r3, [r6, #0]
 80064ea:	6825      	ldr	r5, [r4, #0]
 80064ec:	f015 0506 	ands.w	r5, r5, #6
 80064f0:	d106      	bne.n	8006500 <_printf_common+0x48>
 80064f2:	f104 0a19 	add.w	sl, r4, #25
 80064f6:	68e3      	ldr	r3, [r4, #12]
 80064f8:	6832      	ldr	r2, [r6, #0]
 80064fa:	1a9b      	subs	r3, r3, r2
 80064fc:	42ab      	cmp	r3, r5
 80064fe:	dc28      	bgt.n	8006552 <_printf_common+0x9a>
 8006500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006504:	1e13      	subs	r3, r2, #0
 8006506:	6822      	ldr	r2, [r4, #0]
 8006508:	bf18      	it	ne
 800650a:	2301      	movne	r3, #1
 800650c:	0692      	lsls	r2, r2, #26
 800650e:	d42d      	bmi.n	800656c <_printf_common+0xb4>
 8006510:	4649      	mov	r1, r9
 8006512:	4638      	mov	r0, r7
 8006514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006518:	47c0      	blx	r8
 800651a:	3001      	adds	r0, #1
 800651c:	d020      	beq.n	8006560 <_printf_common+0xa8>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	68e5      	ldr	r5, [r4, #12]
 8006522:	f003 0306 	and.w	r3, r3, #6
 8006526:	2b04      	cmp	r3, #4
 8006528:	bf18      	it	ne
 800652a:	2500      	movne	r5, #0
 800652c:	6832      	ldr	r2, [r6, #0]
 800652e:	f04f 0600 	mov.w	r6, #0
 8006532:	68a3      	ldr	r3, [r4, #8]
 8006534:	bf08      	it	eq
 8006536:	1aad      	subeq	r5, r5, r2
 8006538:	6922      	ldr	r2, [r4, #16]
 800653a:	bf08      	it	eq
 800653c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006540:	4293      	cmp	r3, r2
 8006542:	bfc4      	itt	gt
 8006544:	1a9b      	subgt	r3, r3, r2
 8006546:	18ed      	addgt	r5, r5, r3
 8006548:	341a      	adds	r4, #26
 800654a:	42b5      	cmp	r5, r6
 800654c:	d11a      	bne.n	8006584 <_printf_common+0xcc>
 800654e:	2000      	movs	r0, #0
 8006550:	e008      	b.n	8006564 <_printf_common+0xac>
 8006552:	2301      	movs	r3, #1
 8006554:	4652      	mov	r2, sl
 8006556:	4649      	mov	r1, r9
 8006558:	4638      	mov	r0, r7
 800655a:	47c0      	blx	r8
 800655c:	3001      	adds	r0, #1
 800655e:	d103      	bne.n	8006568 <_printf_common+0xb0>
 8006560:	f04f 30ff 	mov.w	r0, #4294967295
 8006564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006568:	3501      	adds	r5, #1
 800656a:	e7c4      	b.n	80064f6 <_printf_common+0x3e>
 800656c:	2030      	movs	r0, #48	; 0x30
 800656e:	18e1      	adds	r1, r4, r3
 8006570:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800657a:	4422      	add	r2, r4
 800657c:	3302      	adds	r3, #2
 800657e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006582:	e7c5      	b.n	8006510 <_printf_common+0x58>
 8006584:	2301      	movs	r3, #1
 8006586:	4622      	mov	r2, r4
 8006588:	4649      	mov	r1, r9
 800658a:	4638      	mov	r0, r7
 800658c:	47c0      	blx	r8
 800658e:	3001      	adds	r0, #1
 8006590:	d0e6      	beq.n	8006560 <_printf_common+0xa8>
 8006592:	3601      	adds	r6, #1
 8006594:	e7d9      	b.n	800654a <_printf_common+0x92>
	...

08006598 <_printf_i>:
 8006598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800659c:	7e0f      	ldrb	r7, [r1, #24]
 800659e:	4691      	mov	r9, r2
 80065a0:	2f78      	cmp	r7, #120	; 0x78
 80065a2:	4680      	mov	r8, r0
 80065a4:	460c      	mov	r4, r1
 80065a6:	469a      	mov	sl, r3
 80065a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065ae:	d807      	bhi.n	80065c0 <_printf_i+0x28>
 80065b0:	2f62      	cmp	r7, #98	; 0x62
 80065b2:	d80a      	bhi.n	80065ca <_printf_i+0x32>
 80065b4:	2f00      	cmp	r7, #0
 80065b6:	f000 80d9 	beq.w	800676c <_printf_i+0x1d4>
 80065ba:	2f58      	cmp	r7, #88	; 0x58
 80065bc:	f000 80a4 	beq.w	8006708 <_printf_i+0x170>
 80065c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065c8:	e03a      	b.n	8006640 <_printf_i+0xa8>
 80065ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065ce:	2b15      	cmp	r3, #21
 80065d0:	d8f6      	bhi.n	80065c0 <_printf_i+0x28>
 80065d2:	a101      	add	r1, pc, #4	; (adr r1, 80065d8 <_printf_i+0x40>)
 80065d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065d8:	08006631 	.word	0x08006631
 80065dc:	08006645 	.word	0x08006645
 80065e0:	080065c1 	.word	0x080065c1
 80065e4:	080065c1 	.word	0x080065c1
 80065e8:	080065c1 	.word	0x080065c1
 80065ec:	080065c1 	.word	0x080065c1
 80065f0:	08006645 	.word	0x08006645
 80065f4:	080065c1 	.word	0x080065c1
 80065f8:	080065c1 	.word	0x080065c1
 80065fc:	080065c1 	.word	0x080065c1
 8006600:	080065c1 	.word	0x080065c1
 8006604:	08006753 	.word	0x08006753
 8006608:	08006675 	.word	0x08006675
 800660c:	08006735 	.word	0x08006735
 8006610:	080065c1 	.word	0x080065c1
 8006614:	080065c1 	.word	0x080065c1
 8006618:	08006775 	.word	0x08006775
 800661c:	080065c1 	.word	0x080065c1
 8006620:	08006675 	.word	0x08006675
 8006624:	080065c1 	.word	0x080065c1
 8006628:	080065c1 	.word	0x080065c1
 800662c:	0800673d 	.word	0x0800673d
 8006630:	682b      	ldr	r3, [r5, #0]
 8006632:	1d1a      	adds	r2, r3, #4
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	602a      	str	r2, [r5, #0]
 8006638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800663c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006640:	2301      	movs	r3, #1
 8006642:	e0a4      	b.n	800678e <_printf_i+0x1f6>
 8006644:	6820      	ldr	r0, [r4, #0]
 8006646:	6829      	ldr	r1, [r5, #0]
 8006648:	0606      	lsls	r6, r0, #24
 800664a:	f101 0304 	add.w	r3, r1, #4
 800664e:	d50a      	bpl.n	8006666 <_printf_i+0xce>
 8006650:	680e      	ldr	r6, [r1, #0]
 8006652:	602b      	str	r3, [r5, #0]
 8006654:	2e00      	cmp	r6, #0
 8006656:	da03      	bge.n	8006660 <_printf_i+0xc8>
 8006658:	232d      	movs	r3, #45	; 0x2d
 800665a:	4276      	negs	r6, r6
 800665c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006660:	230a      	movs	r3, #10
 8006662:	485e      	ldr	r0, [pc, #376]	; (80067dc <_printf_i+0x244>)
 8006664:	e019      	b.n	800669a <_printf_i+0x102>
 8006666:	680e      	ldr	r6, [r1, #0]
 8006668:	f010 0f40 	tst.w	r0, #64	; 0x40
 800666c:	602b      	str	r3, [r5, #0]
 800666e:	bf18      	it	ne
 8006670:	b236      	sxthne	r6, r6
 8006672:	e7ef      	b.n	8006654 <_printf_i+0xbc>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	6820      	ldr	r0, [r4, #0]
 8006678:	1d19      	adds	r1, r3, #4
 800667a:	6029      	str	r1, [r5, #0]
 800667c:	0601      	lsls	r1, r0, #24
 800667e:	d501      	bpl.n	8006684 <_printf_i+0xec>
 8006680:	681e      	ldr	r6, [r3, #0]
 8006682:	e002      	b.n	800668a <_printf_i+0xf2>
 8006684:	0646      	lsls	r6, r0, #25
 8006686:	d5fb      	bpl.n	8006680 <_printf_i+0xe8>
 8006688:	881e      	ldrh	r6, [r3, #0]
 800668a:	2f6f      	cmp	r7, #111	; 0x6f
 800668c:	bf0c      	ite	eq
 800668e:	2308      	moveq	r3, #8
 8006690:	230a      	movne	r3, #10
 8006692:	4852      	ldr	r0, [pc, #328]	; (80067dc <_printf_i+0x244>)
 8006694:	2100      	movs	r1, #0
 8006696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800669a:	6865      	ldr	r5, [r4, #4]
 800669c:	2d00      	cmp	r5, #0
 800669e:	bfa8      	it	ge
 80066a0:	6821      	ldrge	r1, [r4, #0]
 80066a2:	60a5      	str	r5, [r4, #8]
 80066a4:	bfa4      	itt	ge
 80066a6:	f021 0104 	bicge.w	r1, r1, #4
 80066aa:	6021      	strge	r1, [r4, #0]
 80066ac:	b90e      	cbnz	r6, 80066b2 <_printf_i+0x11a>
 80066ae:	2d00      	cmp	r5, #0
 80066b0:	d04d      	beq.n	800674e <_printf_i+0x1b6>
 80066b2:	4615      	mov	r5, r2
 80066b4:	fbb6 f1f3 	udiv	r1, r6, r3
 80066b8:	fb03 6711 	mls	r7, r3, r1, r6
 80066bc:	5dc7      	ldrb	r7, [r0, r7]
 80066be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066c2:	4637      	mov	r7, r6
 80066c4:	42bb      	cmp	r3, r7
 80066c6:	460e      	mov	r6, r1
 80066c8:	d9f4      	bls.n	80066b4 <_printf_i+0x11c>
 80066ca:	2b08      	cmp	r3, #8
 80066cc:	d10b      	bne.n	80066e6 <_printf_i+0x14e>
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	07de      	lsls	r6, r3, #31
 80066d2:	d508      	bpl.n	80066e6 <_printf_i+0x14e>
 80066d4:	6923      	ldr	r3, [r4, #16]
 80066d6:	6861      	ldr	r1, [r4, #4]
 80066d8:	4299      	cmp	r1, r3
 80066da:	bfde      	ittt	le
 80066dc:	2330      	movle	r3, #48	; 0x30
 80066de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066e6:	1b52      	subs	r2, r2, r5
 80066e8:	6122      	str	r2, [r4, #16]
 80066ea:	464b      	mov	r3, r9
 80066ec:	4621      	mov	r1, r4
 80066ee:	4640      	mov	r0, r8
 80066f0:	f8cd a000 	str.w	sl, [sp]
 80066f4:	aa03      	add	r2, sp, #12
 80066f6:	f7ff fedf 	bl	80064b8 <_printf_common>
 80066fa:	3001      	adds	r0, #1
 80066fc:	d14c      	bne.n	8006798 <_printf_i+0x200>
 80066fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006702:	b004      	add	sp, #16
 8006704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006708:	4834      	ldr	r0, [pc, #208]	; (80067dc <_printf_i+0x244>)
 800670a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800670e:	6829      	ldr	r1, [r5, #0]
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	f851 6b04 	ldr.w	r6, [r1], #4
 8006716:	6029      	str	r1, [r5, #0]
 8006718:	061d      	lsls	r5, r3, #24
 800671a:	d514      	bpl.n	8006746 <_printf_i+0x1ae>
 800671c:	07df      	lsls	r7, r3, #31
 800671e:	bf44      	itt	mi
 8006720:	f043 0320 	orrmi.w	r3, r3, #32
 8006724:	6023      	strmi	r3, [r4, #0]
 8006726:	b91e      	cbnz	r6, 8006730 <_printf_i+0x198>
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	f023 0320 	bic.w	r3, r3, #32
 800672e:	6023      	str	r3, [r4, #0]
 8006730:	2310      	movs	r3, #16
 8006732:	e7af      	b.n	8006694 <_printf_i+0xfc>
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	f043 0320 	orr.w	r3, r3, #32
 800673a:	6023      	str	r3, [r4, #0]
 800673c:	2378      	movs	r3, #120	; 0x78
 800673e:	4828      	ldr	r0, [pc, #160]	; (80067e0 <_printf_i+0x248>)
 8006740:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006744:	e7e3      	b.n	800670e <_printf_i+0x176>
 8006746:	0659      	lsls	r1, r3, #25
 8006748:	bf48      	it	mi
 800674a:	b2b6      	uxthmi	r6, r6
 800674c:	e7e6      	b.n	800671c <_printf_i+0x184>
 800674e:	4615      	mov	r5, r2
 8006750:	e7bb      	b.n	80066ca <_printf_i+0x132>
 8006752:	682b      	ldr	r3, [r5, #0]
 8006754:	6826      	ldr	r6, [r4, #0]
 8006756:	1d18      	adds	r0, r3, #4
 8006758:	6961      	ldr	r1, [r4, #20]
 800675a:	6028      	str	r0, [r5, #0]
 800675c:	0635      	lsls	r5, r6, #24
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	d501      	bpl.n	8006766 <_printf_i+0x1ce>
 8006762:	6019      	str	r1, [r3, #0]
 8006764:	e002      	b.n	800676c <_printf_i+0x1d4>
 8006766:	0670      	lsls	r0, r6, #25
 8006768:	d5fb      	bpl.n	8006762 <_printf_i+0x1ca>
 800676a:	8019      	strh	r1, [r3, #0]
 800676c:	2300      	movs	r3, #0
 800676e:	4615      	mov	r5, r2
 8006770:	6123      	str	r3, [r4, #16]
 8006772:	e7ba      	b.n	80066ea <_printf_i+0x152>
 8006774:	682b      	ldr	r3, [r5, #0]
 8006776:	2100      	movs	r1, #0
 8006778:	1d1a      	adds	r2, r3, #4
 800677a:	602a      	str	r2, [r5, #0]
 800677c:	681d      	ldr	r5, [r3, #0]
 800677e:	6862      	ldr	r2, [r4, #4]
 8006780:	4628      	mov	r0, r5
 8006782:	f000 fed7 	bl	8007534 <memchr>
 8006786:	b108      	cbz	r0, 800678c <_printf_i+0x1f4>
 8006788:	1b40      	subs	r0, r0, r5
 800678a:	6060      	str	r0, [r4, #4]
 800678c:	6863      	ldr	r3, [r4, #4]
 800678e:	6123      	str	r3, [r4, #16]
 8006790:	2300      	movs	r3, #0
 8006792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006796:	e7a8      	b.n	80066ea <_printf_i+0x152>
 8006798:	462a      	mov	r2, r5
 800679a:	4649      	mov	r1, r9
 800679c:	4640      	mov	r0, r8
 800679e:	6923      	ldr	r3, [r4, #16]
 80067a0:	47d0      	blx	sl
 80067a2:	3001      	adds	r0, #1
 80067a4:	d0ab      	beq.n	80066fe <_printf_i+0x166>
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	079b      	lsls	r3, r3, #30
 80067aa:	d413      	bmi.n	80067d4 <_printf_i+0x23c>
 80067ac:	68e0      	ldr	r0, [r4, #12]
 80067ae:	9b03      	ldr	r3, [sp, #12]
 80067b0:	4298      	cmp	r0, r3
 80067b2:	bfb8      	it	lt
 80067b4:	4618      	movlt	r0, r3
 80067b6:	e7a4      	b.n	8006702 <_printf_i+0x16a>
 80067b8:	2301      	movs	r3, #1
 80067ba:	4632      	mov	r2, r6
 80067bc:	4649      	mov	r1, r9
 80067be:	4640      	mov	r0, r8
 80067c0:	47d0      	blx	sl
 80067c2:	3001      	adds	r0, #1
 80067c4:	d09b      	beq.n	80066fe <_printf_i+0x166>
 80067c6:	3501      	adds	r5, #1
 80067c8:	68e3      	ldr	r3, [r4, #12]
 80067ca:	9903      	ldr	r1, [sp, #12]
 80067cc:	1a5b      	subs	r3, r3, r1
 80067ce:	42ab      	cmp	r3, r5
 80067d0:	dcf2      	bgt.n	80067b8 <_printf_i+0x220>
 80067d2:	e7eb      	b.n	80067ac <_printf_i+0x214>
 80067d4:	2500      	movs	r5, #0
 80067d6:	f104 0619 	add.w	r6, r4, #25
 80067da:	e7f5      	b.n	80067c8 <_printf_i+0x230>
 80067dc:	08008d86 	.word	0x08008d86
 80067e0:	08008d97 	.word	0x08008d97

080067e4 <siprintf>:
 80067e4:	b40e      	push	{r1, r2, r3}
 80067e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067ea:	b500      	push	{lr}
 80067ec:	b09c      	sub	sp, #112	; 0x70
 80067ee:	ab1d      	add	r3, sp, #116	; 0x74
 80067f0:	9002      	str	r0, [sp, #8]
 80067f2:	9006      	str	r0, [sp, #24]
 80067f4:	9107      	str	r1, [sp, #28]
 80067f6:	9104      	str	r1, [sp, #16]
 80067f8:	4808      	ldr	r0, [pc, #32]	; (800681c <siprintf+0x38>)
 80067fa:	4909      	ldr	r1, [pc, #36]	; (8006820 <siprintf+0x3c>)
 80067fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006800:	9105      	str	r1, [sp, #20]
 8006802:	6800      	ldr	r0, [r0, #0]
 8006804:	a902      	add	r1, sp, #8
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	f001 fb7e 	bl	8007f08 <_svfiprintf_r>
 800680c:	2200      	movs	r2, #0
 800680e:	9b02      	ldr	r3, [sp, #8]
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	b01c      	add	sp, #112	; 0x70
 8006814:	f85d eb04 	ldr.w	lr, [sp], #4
 8006818:	b003      	add	sp, #12
 800681a:	4770      	bx	lr
 800681c:	20000010 	.word	0x20000010
 8006820:	ffff0208 	.word	0xffff0208

08006824 <quorem>:
 8006824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006828:	6903      	ldr	r3, [r0, #16]
 800682a:	690c      	ldr	r4, [r1, #16]
 800682c:	4607      	mov	r7, r0
 800682e:	42a3      	cmp	r3, r4
 8006830:	f2c0 8082 	blt.w	8006938 <quorem+0x114>
 8006834:	3c01      	subs	r4, #1
 8006836:	f100 0514 	add.w	r5, r0, #20
 800683a:	f101 0814 	add.w	r8, r1, #20
 800683e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006842:	9301      	str	r3, [sp, #4]
 8006844:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006848:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800684c:	3301      	adds	r3, #1
 800684e:	429a      	cmp	r2, r3
 8006850:	fbb2 f6f3 	udiv	r6, r2, r3
 8006854:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006858:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800685c:	d331      	bcc.n	80068c2 <quorem+0x9e>
 800685e:	f04f 0e00 	mov.w	lr, #0
 8006862:	4640      	mov	r0, r8
 8006864:	46ac      	mov	ip, r5
 8006866:	46f2      	mov	sl, lr
 8006868:	f850 2b04 	ldr.w	r2, [r0], #4
 800686c:	b293      	uxth	r3, r2
 800686e:	fb06 e303 	mla	r3, r6, r3, lr
 8006872:	0c12      	lsrs	r2, r2, #16
 8006874:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006878:	b29b      	uxth	r3, r3
 800687a:	fb06 e202 	mla	r2, r6, r2, lr
 800687e:	ebaa 0303 	sub.w	r3, sl, r3
 8006882:	f8dc a000 	ldr.w	sl, [ip]
 8006886:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800688a:	fa1f fa8a 	uxth.w	sl, sl
 800688e:	4453      	add	r3, sl
 8006890:	f8dc a000 	ldr.w	sl, [ip]
 8006894:	b292      	uxth	r2, r2
 8006896:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800689a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800689e:	b29b      	uxth	r3, r3
 80068a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068a4:	4581      	cmp	r9, r0
 80068a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80068aa:	f84c 3b04 	str.w	r3, [ip], #4
 80068ae:	d2db      	bcs.n	8006868 <quorem+0x44>
 80068b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80068b4:	b92b      	cbnz	r3, 80068c2 <quorem+0x9e>
 80068b6:	9b01      	ldr	r3, [sp, #4]
 80068b8:	3b04      	subs	r3, #4
 80068ba:	429d      	cmp	r5, r3
 80068bc:	461a      	mov	r2, r3
 80068be:	d32f      	bcc.n	8006920 <quorem+0xfc>
 80068c0:	613c      	str	r4, [r7, #16]
 80068c2:	4638      	mov	r0, r7
 80068c4:	f001 f8d0 	bl	8007a68 <__mcmp>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	db25      	blt.n	8006918 <quorem+0xf4>
 80068cc:	4628      	mov	r0, r5
 80068ce:	f04f 0c00 	mov.w	ip, #0
 80068d2:	3601      	adds	r6, #1
 80068d4:	f858 1b04 	ldr.w	r1, [r8], #4
 80068d8:	f8d0 e000 	ldr.w	lr, [r0]
 80068dc:	b28b      	uxth	r3, r1
 80068de:	ebac 0303 	sub.w	r3, ip, r3
 80068e2:	fa1f f28e 	uxth.w	r2, lr
 80068e6:	4413      	add	r3, r2
 80068e8:	0c0a      	lsrs	r2, r1, #16
 80068ea:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80068ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068f8:	45c1      	cmp	r9, r8
 80068fa:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80068fe:	f840 3b04 	str.w	r3, [r0], #4
 8006902:	d2e7      	bcs.n	80068d4 <quorem+0xb0>
 8006904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006908:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800690c:	b922      	cbnz	r2, 8006918 <quorem+0xf4>
 800690e:	3b04      	subs	r3, #4
 8006910:	429d      	cmp	r5, r3
 8006912:	461a      	mov	r2, r3
 8006914:	d30a      	bcc.n	800692c <quorem+0x108>
 8006916:	613c      	str	r4, [r7, #16]
 8006918:	4630      	mov	r0, r6
 800691a:	b003      	add	sp, #12
 800691c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006920:	6812      	ldr	r2, [r2, #0]
 8006922:	3b04      	subs	r3, #4
 8006924:	2a00      	cmp	r2, #0
 8006926:	d1cb      	bne.n	80068c0 <quorem+0x9c>
 8006928:	3c01      	subs	r4, #1
 800692a:	e7c6      	b.n	80068ba <quorem+0x96>
 800692c:	6812      	ldr	r2, [r2, #0]
 800692e:	3b04      	subs	r3, #4
 8006930:	2a00      	cmp	r2, #0
 8006932:	d1f0      	bne.n	8006916 <quorem+0xf2>
 8006934:	3c01      	subs	r4, #1
 8006936:	e7eb      	b.n	8006910 <quorem+0xec>
 8006938:	2000      	movs	r0, #0
 800693a:	e7ee      	b.n	800691a <quorem+0xf6>
 800693c:	0000      	movs	r0, r0
	...

08006940 <_dtoa_r>:
 8006940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006944:	4616      	mov	r6, r2
 8006946:	461f      	mov	r7, r3
 8006948:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800694a:	b099      	sub	sp, #100	; 0x64
 800694c:	4605      	mov	r5, r0
 800694e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006952:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006956:	b974      	cbnz	r4, 8006976 <_dtoa_r+0x36>
 8006958:	2010      	movs	r0, #16
 800695a:	f000 fde3 	bl	8007524 <malloc>
 800695e:	4602      	mov	r2, r0
 8006960:	6268      	str	r0, [r5, #36]	; 0x24
 8006962:	b920      	cbnz	r0, 800696e <_dtoa_r+0x2e>
 8006964:	21ea      	movs	r1, #234	; 0xea
 8006966:	4ba8      	ldr	r3, [pc, #672]	; (8006c08 <_dtoa_r+0x2c8>)
 8006968:	48a8      	ldr	r0, [pc, #672]	; (8006c0c <_dtoa_r+0x2cc>)
 800696a:	f001 fbdd 	bl	8008128 <__assert_func>
 800696e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006972:	6004      	str	r4, [r0, #0]
 8006974:	60c4      	str	r4, [r0, #12]
 8006976:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006978:	6819      	ldr	r1, [r3, #0]
 800697a:	b151      	cbz	r1, 8006992 <_dtoa_r+0x52>
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	2301      	movs	r3, #1
 8006980:	4093      	lsls	r3, r2
 8006982:	604a      	str	r2, [r1, #4]
 8006984:	608b      	str	r3, [r1, #8]
 8006986:	4628      	mov	r0, r5
 8006988:	f000 fe30 	bl	80075ec <_Bfree>
 800698c:	2200      	movs	r2, #0
 800698e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	1e3b      	subs	r3, r7, #0
 8006994:	bfaf      	iteee	ge
 8006996:	2300      	movge	r3, #0
 8006998:	2201      	movlt	r2, #1
 800699a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800699e:	9305      	strlt	r3, [sp, #20]
 80069a0:	bfa8      	it	ge
 80069a2:	f8c8 3000 	strge.w	r3, [r8]
 80069a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80069aa:	4b99      	ldr	r3, [pc, #612]	; (8006c10 <_dtoa_r+0x2d0>)
 80069ac:	bfb8      	it	lt
 80069ae:	f8c8 2000 	strlt.w	r2, [r8]
 80069b2:	ea33 0309 	bics.w	r3, r3, r9
 80069b6:	d119      	bne.n	80069ec <_dtoa_r+0xac>
 80069b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80069bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80069be:	6013      	str	r3, [r2, #0]
 80069c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069c4:	4333      	orrs	r3, r6
 80069c6:	f000 857f 	beq.w	80074c8 <_dtoa_r+0xb88>
 80069ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069cc:	b953      	cbnz	r3, 80069e4 <_dtoa_r+0xa4>
 80069ce:	4b91      	ldr	r3, [pc, #580]	; (8006c14 <_dtoa_r+0x2d4>)
 80069d0:	e022      	b.n	8006a18 <_dtoa_r+0xd8>
 80069d2:	4b91      	ldr	r3, [pc, #580]	; (8006c18 <_dtoa_r+0x2d8>)
 80069d4:	9303      	str	r3, [sp, #12]
 80069d6:	3308      	adds	r3, #8
 80069d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	9803      	ldr	r0, [sp, #12]
 80069de:	b019      	add	sp, #100	; 0x64
 80069e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e4:	4b8b      	ldr	r3, [pc, #556]	; (8006c14 <_dtoa_r+0x2d4>)
 80069e6:	9303      	str	r3, [sp, #12]
 80069e8:	3303      	adds	r3, #3
 80069ea:	e7f5      	b.n	80069d8 <_dtoa_r+0x98>
 80069ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80069f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80069f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069f8:	2200      	movs	r2, #0
 80069fa:	2300      	movs	r3, #0
 80069fc:	f7f9 ffec 	bl	80009d8 <__aeabi_dcmpeq>
 8006a00:	4680      	mov	r8, r0
 8006a02:	b158      	cbz	r0, 8006a1c <_dtoa_r+0xdc>
 8006a04:	2301      	movs	r3, #1
 8006a06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a08:	6013      	str	r3, [r2, #0]
 8006a0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 8558 	beq.w	80074c2 <_dtoa_r+0xb82>
 8006a12:	4882      	ldr	r0, [pc, #520]	; (8006c1c <_dtoa_r+0x2dc>)
 8006a14:	6018      	str	r0, [r3, #0]
 8006a16:	1e43      	subs	r3, r0, #1
 8006a18:	9303      	str	r3, [sp, #12]
 8006a1a:	e7df      	b.n	80069dc <_dtoa_r+0x9c>
 8006a1c:	ab16      	add	r3, sp, #88	; 0x58
 8006a1e:	9301      	str	r3, [sp, #4]
 8006a20:	ab17      	add	r3, sp, #92	; 0x5c
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	4628      	mov	r0, r5
 8006a26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006a2a:	f001 f8c5 	bl	8007bb8 <__d2b>
 8006a2e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006a32:	4683      	mov	fp, r0
 8006a34:	2c00      	cmp	r4, #0
 8006a36:	d07f      	beq.n	8006b38 <_dtoa_r+0x1f8>
 8006a38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a3e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006a42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a46:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006a4a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006a4e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006a52:	2200      	movs	r2, #0
 8006a54:	4b72      	ldr	r3, [pc, #456]	; (8006c20 <_dtoa_r+0x2e0>)
 8006a56:	f7f9 fb9f 	bl	8000198 <__aeabi_dsub>
 8006a5a:	a365      	add	r3, pc, #404	; (adr r3, 8006bf0 <_dtoa_r+0x2b0>)
 8006a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a60:	f7f9 fd52 	bl	8000508 <__aeabi_dmul>
 8006a64:	a364      	add	r3, pc, #400	; (adr r3, 8006bf8 <_dtoa_r+0x2b8>)
 8006a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6a:	f7f9 fb97 	bl	800019c <__adddf3>
 8006a6e:	4606      	mov	r6, r0
 8006a70:	4620      	mov	r0, r4
 8006a72:	460f      	mov	r7, r1
 8006a74:	f7f9 fcde 	bl	8000434 <__aeabi_i2d>
 8006a78:	a361      	add	r3, pc, #388	; (adr r3, 8006c00 <_dtoa_r+0x2c0>)
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	f7f9 fd43 	bl	8000508 <__aeabi_dmul>
 8006a82:	4602      	mov	r2, r0
 8006a84:	460b      	mov	r3, r1
 8006a86:	4630      	mov	r0, r6
 8006a88:	4639      	mov	r1, r7
 8006a8a:	f7f9 fb87 	bl	800019c <__adddf3>
 8006a8e:	4606      	mov	r6, r0
 8006a90:	460f      	mov	r7, r1
 8006a92:	f7f9 ffe9 	bl	8000a68 <__aeabi_d2iz>
 8006a96:	2200      	movs	r2, #0
 8006a98:	4682      	mov	sl, r0
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	4639      	mov	r1, r7
 8006aa0:	f7f9 ffa4 	bl	80009ec <__aeabi_dcmplt>
 8006aa4:	b148      	cbz	r0, 8006aba <_dtoa_r+0x17a>
 8006aa6:	4650      	mov	r0, sl
 8006aa8:	f7f9 fcc4 	bl	8000434 <__aeabi_i2d>
 8006aac:	4632      	mov	r2, r6
 8006aae:	463b      	mov	r3, r7
 8006ab0:	f7f9 ff92 	bl	80009d8 <__aeabi_dcmpeq>
 8006ab4:	b908      	cbnz	r0, 8006aba <_dtoa_r+0x17a>
 8006ab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aba:	f1ba 0f16 	cmp.w	sl, #22
 8006abe:	d858      	bhi.n	8006b72 <_dtoa_r+0x232>
 8006ac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ac4:	4b57      	ldr	r3, [pc, #348]	; (8006c24 <_dtoa_r+0x2e4>)
 8006ac6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ace:	f7f9 ff8d 	bl	80009ec <__aeabi_dcmplt>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	d04f      	beq.n	8006b76 <_dtoa_r+0x236>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006adc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ade:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006ae0:	1b1c      	subs	r4, r3, r4
 8006ae2:	1e63      	subs	r3, r4, #1
 8006ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ae6:	bf49      	itett	mi
 8006ae8:	f1c4 0301 	rsbmi	r3, r4, #1
 8006aec:	2300      	movpl	r3, #0
 8006aee:	9306      	strmi	r3, [sp, #24]
 8006af0:	2300      	movmi	r3, #0
 8006af2:	bf54      	ite	pl
 8006af4:	9306      	strpl	r3, [sp, #24]
 8006af6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006af8:	f1ba 0f00 	cmp.w	sl, #0
 8006afc:	db3d      	blt.n	8006b7a <_dtoa_r+0x23a>
 8006afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b00:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006b04:	4453      	add	r3, sl
 8006b06:	9309      	str	r3, [sp, #36]	; 0x24
 8006b08:	2300      	movs	r3, #0
 8006b0a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b0e:	2b09      	cmp	r3, #9
 8006b10:	f200 808c 	bhi.w	8006c2c <_dtoa_r+0x2ec>
 8006b14:	2b05      	cmp	r3, #5
 8006b16:	bfc4      	itt	gt
 8006b18:	3b04      	subgt	r3, #4
 8006b1a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006b1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b1e:	bfc8      	it	gt
 8006b20:	2400      	movgt	r4, #0
 8006b22:	f1a3 0302 	sub.w	r3, r3, #2
 8006b26:	bfd8      	it	le
 8006b28:	2401      	movle	r4, #1
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	f200 808a 	bhi.w	8006c44 <_dtoa_r+0x304>
 8006b30:	e8df f003 	tbb	[pc, r3]
 8006b34:	5b4d4f2d 	.word	0x5b4d4f2d
 8006b38:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006b3c:	441c      	add	r4, r3
 8006b3e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	bfc3      	ittte	gt
 8006b46:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b4a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006b4e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006b52:	f1c3 0320 	rsble	r3, r3, #32
 8006b56:	bfc6      	itte	gt
 8006b58:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006b5c:	4318      	orrgt	r0, r3
 8006b5e:	fa06 f003 	lslle.w	r0, r6, r3
 8006b62:	f7f9 fc57 	bl	8000414 <__aeabi_ui2d>
 8006b66:	2301      	movs	r3, #1
 8006b68:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006b6c:	3c01      	subs	r4, #1
 8006b6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b70:	e76f      	b.n	8006a52 <_dtoa_r+0x112>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e7b2      	b.n	8006adc <_dtoa_r+0x19c>
 8006b76:	900f      	str	r0, [sp, #60]	; 0x3c
 8006b78:	e7b1      	b.n	8006ade <_dtoa_r+0x19e>
 8006b7a:	9b06      	ldr	r3, [sp, #24]
 8006b7c:	eba3 030a 	sub.w	r3, r3, sl
 8006b80:	9306      	str	r3, [sp, #24]
 8006b82:	f1ca 0300 	rsb	r3, sl, #0
 8006b86:	930a      	str	r3, [sp, #40]	; 0x28
 8006b88:	2300      	movs	r3, #0
 8006b8a:	930e      	str	r3, [sp, #56]	; 0x38
 8006b8c:	e7be      	b.n	8006b0c <_dtoa_r+0x1cc>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	dc58      	bgt.n	8006c4a <_dtoa_r+0x30a>
 8006b98:	f04f 0901 	mov.w	r9, #1
 8006b9c:	464b      	mov	r3, r9
 8006b9e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006ba2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006baa:	6042      	str	r2, [r0, #4]
 8006bac:	2204      	movs	r2, #4
 8006bae:	f102 0614 	add.w	r6, r2, #20
 8006bb2:	429e      	cmp	r6, r3
 8006bb4:	6841      	ldr	r1, [r0, #4]
 8006bb6:	d94e      	bls.n	8006c56 <_dtoa_r+0x316>
 8006bb8:	4628      	mov	r0, r5
 8006bba:	f000 fcd7 	bl	800756c <_Balloc>
 8006bbe:	9003      	str	r0, [sp, #12]
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d14c      	bne.n	8006c5e <_dtoa_r+0x31e>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006bca:	4b17      	ldr	r3, [pc, #92]	; (8006c28 <_dtoa_r+0x2e8>)
 8006bcc:	e6cc      	b.n	8006968 <_dtoa_r+0x28>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e7de      	b.n	8006b90 <_dtoa_r+0x250>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bd6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006bd8:	eb0a 0903 	add.w	r9, sl, r3
 8006bdc:	f109 0301 	add.w	r3, r9, #1
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	9308      	str	r3, [sp, #32]
 8006be4:	bfb8      	it	lt
 8006be6:	2301      	movlt	r3, #1
 8006be8:	e7dd      	b.n	8006ba6 <_dtoa_r+0x266>
 8006bea:	2301      	movs	r3, #1
 8006bec:	e7f2      	b.n	8006bd4 <_dtoa_r+0x294>
 8006bee:	bf00      	nop
 8006bf0:	636f4361 	.word	0x636f4361
 8006bf4:	3fd287a7 	.word	0x3fd287a7
 8006bf8:	8b60c8b3 	.word	0x8b60c8b3
 8006bfc:	3fc68a28 	.word	0x3fc68a28
 8006c00:	509f79fb 	.word	0x509f79fb
 8006c04:	3fd34413 	.word	0x3fd34413
 8006c08:	08008db5 	.word	0x08008db5
 8006c0c:	08008dcc 	.word	0x08008dcc
 8006c10:	7ff00000 	.word	0x7ff00000
 8006c14:	08008db1 	.word	0x08008db1
 8006c18:	08008da8 	.word	0x08008da8
 8006c1c:	08008d85 	.word	0x08008d85
 8006c20:	3ff80000 	.word	0x3ff80000
 8006c24:	08008ec0 	.word	0x08008ec0
 8006c28:	08008e27 	.word	0x08008e27
 8006c2c:	2401      	movs	r4, #1
 8006c2e:	2300      	movs	r3, #0
 8006c30:	940b      	str	r4, [sp, #44]	; 0x2c
 8006c32:	9322      	str	r3, [sp, #136]	; 0x88
 8006c34:	f04f 39ff 	mov.w	r9, #4294967295
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2312      	movs	r3, #18
 8006c3c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006c40:	9223      	str	r2, [sp, #140]	; 0x8c
 8006c42:	e7b0      	b.n	8006ba6 <_dtoa_r+0x266>
 8006c44:	2301      	movs	r3, #1
 8006c46:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c48:	e7f4      	b.n	8006c34 <_dtoa_r+0x2f4>
 8006c4a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006c4e:	464b      	mov	r3, r9
 8006c50:	f8cd 9020 	str.w	r9, [sp, #32]
 8006c54:	e7a7      	b.n	8006ba6 <_dtoa_r+0x266>
 8006c56:	3101      	adds	r1, #1
 8006c58:	6041      	str	r1, [r0, #4]
 8006c5a:	0052      	lsls	r2, r2, #1
 8006c5c:	e7a7      	b.n	8006bae <_dtoa_r+0x26e>
 8006c5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c60:	9a03      	ldr	r2, [sp, #12]
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	9b08      	ldr	r3, [sp, #32]
 8006c66:	2b0e      	cmp	r3, #14
 8006c68:	f200 80a8 	bhi.w	8006dbc <_dtoa_r+0x47c>
 8006c6c:	2c00      	cmp	r4, #0
 8006c6e:	f000 80a5 	beq.w	8006dbc <_dtoa_r+0x47c>
 8006c72:	f1ba 0f00 	cmp.w	sl, #0
 8006c76:	dd34      	ble.n	8006ce2 <_dtoa_r+0x3a2>
 8006c78:	4a9a      	ldr	r2, [pc, #616]	; (8006ee4 <_dtoa_r+0x5a4>)
 8006c7a:	f00a 030f 	and.w	r3, sl, #15
 8006c7e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c82:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006c86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006c8e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006c92:	d016      	beq.n	8006cc2 <_dtoa_r+0x382>
 8006c94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c98:	4b93      	ldr	r3, [pc, #588]	; (8006ee8 <_dtoa_r+0x5a8>)
 8006c9a:	2703      	movs	r7, #3
 8006c9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ca0:	f7f9 fd5c 	bl	800075c <__aeabi_ddiv>
 8006ca4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ca8:	f004 040f 	and.w	r4, r4, #15
 8006cac:	4e8e      	ldr	r6, [pc, #568]	; (8006ee8 <_dtoa_r+0x5a8>)
 8006cae:	b954      	cbnz	r4, 8006cc6 <_dtoa_r+0x386>
 8006cb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006cb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cb8:	f7f9 fd50 	bl	800075c <__aeabi_ddiv>
 8006cbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cc0:	e029      	b.n	8006d16 <_dtoa_r+0x3d6>
 8006cc2:	2702      	movs	r7, #2
 8006cc4:	e7f2      	b.n	8006cac <_dtoa_r+0x36c>
 8006cc6:	07e1      	lsls	r1, r4, #31
 8006cc8:	d508      	bpl.n	8006cdc <_dtoa_r+0x39c>
 8006cca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006cce:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006cd2:	f7f9 fc19 	bl	8000508 <__aeabi_dmul>
 8006cd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006cda:	3701      	adds	r7, #1
 8006cdc:	1064      	asrs	r4, r4, #1
 8006cde:	3608      	adds	r6, #8
 8006ce0:	e7e5      	b.n	8006cae <_dtoa_r+0x36e>
 8006ce2:	f000 80a5 	beq.w	8006e30 <_dtoa_r+0x4f0>
 8006ce6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cea:	f1ca 0400 	rsb	r4, sl, #0
 8006cee:	4b7d      	ldr	r3, [pc, #500]	; (8006ee4 <_dtoa_r+0x5a4>)
 8006cf0:	f004 020f 	and.w	r2, r4, #15
 8006cf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	f7f9 fc04 	bl	8000508 <__aeabi_dmul>
 8006d00:	2702      	movs	r7, #2
 8006d02:	2300      	movs	r3, #0
 8006d04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d08:	4e77      	ldr	r6, [pc, #476]	; (8006ee8 <_dtoa_r+0x5a8>)
 8006d0a:	1124      	asrs	r4, r4, #4
 8006d0c:	2c00      	cmp	r4, #0
 8006d0e:	f040 8084 	bne.w	8006e1a <_dtoa_r+0x4da>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1d2      	bne.n	8006cbc <_dtoa_r+0x37c>
 8006d16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 808b 	beq.w	8006e34 <_dtoa_r+0x4f4>
 8006d1e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006d22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006d26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	4b6f      	ldr	r3, [pc, #444]	; (8006eec <_dtoa_r+0x5ac>)
 8006d2e:	f7f9 fe5d 	bl	80009ec <__aeabi_dcmplt>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d07e      	beq.n	8006e34 <_dtoa_r+0x4f4>
 8006d36:	9b08      	ldr	r3, [sp, #32]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d07b      	beq.n	8006e34 <_dtoa_r+0x4f4>
 8006d3c:	f1b9 0f00 	cmp.w	r9, #0
 8006d40:	dd38      	ble.n	8006db4 <_dtoa_r+0x474>
 8006d42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d46:	2200      	movs	r2, #0
 8006d48:	4b69      	ldr	r3, [pc, #420]	; (8006ef0 <_dtoa_r+0x5b0>)
 8006d4a:	f7f9 fbdd 	bl	8000508 <__aeabi_dmul>
 8006d4e:	464c      	mov	r4, r9
 8006d50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d54:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006d58:	3701      	adds	r7, #1
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	f7f9 fb6a 	bl	8000434 <__aeabi_i2d>
 8006d60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d64:	f7f9 fbd0 	bl	8000508 <__aeabi_dmul>
 8006d68:	2200      	movs	r2, #0
 8006d6a:	4b62      	ldr	r3, [pc, #392]	; (8006ef4 <_dtoa_r+0x5b4>)
 8006d6c:	f7f9 fa16 	bl	800019c <__adddf3>
 8006d70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006d74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d78:	9611      	str	r6, [sp, #68]	; 0x44
 8006d7a:	2c00      	cmp	r4, #0
 8006d7c:	d15d      	bne.n	8006e3a <_dtoa_r+0x4fa>
 8006d7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d82:	2200      	movs	r2, #0
 8006d84:	4b5c      	ldr	r3, [pc, #368]	; (8006ef8 <_dtoa_r+0x5b8>)
 8006d86:	f7f9 fa07 	bl	8000198 <__aeabi_dsub>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d92:	4633      	mov	r3, r6
 8006d94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d96:	f7f9 fe47 	bl	8000a28 <__aeabi_dcmpgt>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	f040 829c 	bne.w	80072d8 <_dtoa_r+0x998>
 8006da0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006da4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006da6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006daa:	f7f9 fe1f 	bl	80009ec <__aeabi_dcmplt>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	f040 8290 	bne.w	80072d4 <_dtoa_r+0x994>
 8006db4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006db8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006dbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f2c0 8152 	blt.w	8007068 <_dtoa_r+0x728>
 8006dc4:	f1ba 0f0e 	cmp.w	sl, #14
 8006dc8:	f300 814e 	bgt.w	8007068 <_dtoa_r+0x728>
 8006dcc:	4b45      	ldr	r3, [pc, #276]	; (8006ee4 <_dtoa_r+0x5a4>)
 8006dce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006dd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006dd6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006dda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f280 80db 	bge.w	8006f98 <_dtoa_r+0x658>
 8006de2:	9b08      	ldr	r3, [sp, #32]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f300 80d7 	bgt.w	8006f98 <_dtoa_r+0x658>
 8006dea:	f040 8272 	bne.w	80072d2 <_dtoa_r+0x992>
 8006dee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006df2:	2200      	movs	r2, #0
 8006df4:	4b40      	ldr	r3, [pc, #256]	; (8006ef8 <_dtoa_r+0x5b8>)
 8006df6:	f7f9 fb87 	bl	8000508 <__aeabi_dmul>
 8006dfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dfe:	f7f9 fe09 	bl	8000a14 <__aeabi_dcmpge>
 8006e02:	9c08      	ldr	r4, [sp, #32]
 8006e04:	4626      	mov	r6, r4
 8006e06:	2800      	cmp	r0, #0
 8006e08:	f040 8248 	bne.w	800729c <_dtoa_r+0x95c>
 8006e0c:	2331      	movs	r3, #49	; 0x31
 8006e0e:	9f03      	ldr	r7, [sp, #12]
 8006e10:	f10a 0a01 	add.w	sl, sl, #1
 8006e14:	f807 3b01 	strb.w	r3, [r7], #1
 8006e18:	e244      	b.n	80072a4 <_dtoa_r+0x964>
 8006e1a:	07e2      	lsls	r2, r4, #31
 8006e1c:	d505      	bpl.n	8006e2a <_dtoa_r+0x4ea>
 8006e1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e22:	f7f9 fb71 	bl	8000508 <__aeabi_dmul>
 8006e26:	2301      	movs	r3, #1
 8006e28:	3701      	adds	r7, #1
 8006e2a:	1064      	asrs	r4, r4, #1
 8006e2c:	3608      	adds	r6, #8
 8006e2e:	e76d      	b.n	8006d0c <_dtoa_r+0x3cc>
 8006e30:	2702      	movs	r7, #2
 8006e32:	e770      	b.n	8006d16 <_dtoa_r+0x3d6>
 8006e34:	46d0      	mov	r8, sl
 8006e36:	9c08      	ldr	r4, [sp, #32]
 8006e38:	e78f      	b.n	8006d5a <_dtoa_r+0x41a>
 8006e3a:	9903      	ldr	r1, [sp, #12]
 8006e3c:	4b29      	ldr	r3, [pc, #164]	; (8006ee4 <_dtoa_r+0x5a4>)
 8006e3e:	4421      	add	r1, r4
 8006e40:	9112      	str	r1, [sp, #72]	; 0x48
 8006e42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e48:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006e4c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e50:	2900      	cmp	r1, #0
 8006e52:	d055      	beq.n	8006f00 <_dtoa_r+0x5c0>
 8006e54:	2000      	movs	r0, #0
 8006e56:	4929      	ldr	r1, [pc, #164]	; (8006efc <_dtoa_r+0x5bc>)
 8006e58:	f7f9 fc80 	bl	800075c <__aeabi_ddiv>
 8006e5c:	463b      	mov	r3, r7
 8006e5e:	4632      	mov	r2, r6
 8006e60:	f7f9 f99a 	bl	8000198 <__aeabi_dsub>
 8006e64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e68:	9f03      	ldr	r7, [sp, #12]
 8006e6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e6e:	f7f9 fdfb 	bl	8000a68 <__aeabi_d2iz>
 8006e72:	4604      	mov	r4, r0
 8006e74:	f7f9 fade 	bl	8000434 <__aeabi_i2d>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e80:	f7f9 f98a 	bl	8000198 <__aeabi_dsub>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	3430      	adds	r4, #48	; 0x30
 8006e8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e92:	f807 4b01 	strb.w	r4, [r7], #1
 8006e96:	f7f9 fda9 	bl	80009ec <__aeabi_dcmplt>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	d174      	bne.n	8006f88 <_dtoa_r+0x648>
 8006e9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	4911      	ldr	r1, [pc, #68]	; (8006eec <_dtoa_r+0x5ac>)
 8006ea6:	f7f9 f977 	bl	8000198 <__aeabi_dsub>
 8006eaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006eae:	f7f9 fd9d 	bl	80009ec <__aeabi_dcmplt>
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	f040 80b7 	bne.w	8007026 <_dtoa_r+0x6e6>
 8006eb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006eba:	429f      	cmp	r7, r3
 8006ebc:	f43f af7a 	beq.w	8006db4 <_dtoa_r+0x474>
 8006ec0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <_dtoa_r+0x5b0>)
 8006ec8:	f7f9 fb1e 	bl	8000508 <__aeabi_dmul>
 8006ecc:	2200      	movs	r2, #0
 8006ece:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ed2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ed6:	4b06      	ldr	r3, [pc, #24]	; (8006ef0 <_dtoa_r+0x5b0>)
 8006ed8:	f7f9 fb16 	bl	8000508 <__aeabi_dmul>
 8006edc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ee0:	e7c3      	b.n	8006e6a <_dtoa_r+0x52a>
 8006ee2:	bf00      	nop
 8006ee4:	08008ec0 	.word	0x08008ec0
 8006ee8:	08008e98 	.word	0x08008e98
 8006eec:	3ff00000 	.word	0x3ff00000
 8006ef0:	40240000 	.word	0x40240000
 8006ef4:	401c0000 	.word	0x401c0000
 8006ef8:	40140000 	.word	0x40140000
 8006efc:	3fe00000 	.word	0x3fe00000
 8006f00:	4630      	mov	r0, r6
 8006f02:	4639      	mov	r1, r7
 8006f04:	f7f9 fb00 	bl	8000508 <__aeabi_dmul>
 8006f08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f0e:	9c03      	ldr	r4, [sp, #12]
 8006f10:	9314      	str	r3, [sp, #80]	; 0x50
 8006f12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f16:	f7f9 fda7 	bl	8000a68 <__aeabi_d2iz>
 8006f1a:	9015      	str	r0, [sp, #84]	; 0x54
 8006f1c:	f7f9 fa8a 	bl	8000434 <__aeabi_i2d>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f28:	f7f9 f936 	bl	8000198 <__aeabi_dsub>
 8006f2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f2e:	4606      	mov	r6, r0
 8006f30:	3330      	adds	r3, #48	; 0x30
 8006f32:	f804 3b01 	strb.w	r3, [r4], #1
 8006f36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f38:	460f      	mov	r7, r1
 8006f3a:	429c      	cmp	r4, r3
 8006f3c:	f04f 0200 	mov.w	r2, #0
 8006f40:	d124      	bne.n	8006f8c <_dtoa_r+0x64c>
 8006f42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f46:	4bb0      	ldr	r3, [pc, #704]	; (8007208 <_dtoa_r+0x8c8>)
 8006f48:	f7f9 f928 	bl	800019c <__adddf3>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4630      	mov	r0, r6
 8006f52:	4639      	mov	r1, r7
 8006f54:	f7f9 fd68 	bl	8000a28 <__aeabi_dcmpgt>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d163      	bne.n	8007024 <_dtoa_r+0x6e4>
 8006f5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f60:	2000      	movs	r0, #0
 8006f62:	49a9      	ldr	r1, [pc, #676]	; (8007208 <_dtoa_r+0x8c8>)
 8006f64:	f7f9 f918 	bl	8000198 <__aeabi_dsub>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	4639      	mov	r1, r7
 8006f70:	f7f9 fd3c 	bl	80009ec <__aeabi_dcmplt>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	f43f af1d 	beq.w	8006db4 <_dtoa_r+0x474>
 8006f7a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006f7c:	1e7b      	subs	r3, r7, #1
 8006f7e:	9314      	str	r3, [sp, #80]	; 0x50
 8006f80:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006f84:	2b30      	cmp	r3, #48	; 0x30
 8006f86:	d0f8      	beq.n	8006f7a <_dtoa_r+0x63a>
 8006f88:	46c2      	mov	sl, r8
 8006f8a:	e03b      	b.n	8007004 <_dtoa_r+0x6c4>
 8006f8c:	4b9f      	ldr	r3, [pc, #636]	; (800720c <_dtoa_r+0x8cc>)
 8006f8e:	f7f9 fabb 	bl	8000508 <__aeabi_dmul>
 8006f92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f96:	e7bc      	b.n	8006f12 <_dtoa_r+0x5d2>
 8006f98:	9f03      	ldr	r7, [sp, #12]
 8006f9a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006f9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	f7f9 fbd9 	bl	800075c <__aeabi_ddiv>
 8006faa:	f7f9 fd5d 	bl	8000a68 <__aeabi_d2iz>
 8006fae:	4604      	mov	r4, r0
 8006fb0:	f7f9 fa40 	bl	8000434 <__aeabi_i2d>
 8006fb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fb8:	f7f9 faa6 	bl	8000508 <__aeabi_dmul>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4640      	mov	r0, r8
 8006fc2:	4649      	mov	r1, r9
 8006fc4:	f7f9 f8e8 	bl	8000198 <__aeabi_dsub>
 8006fc8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006fcc:	f807 6b01 	strb.w	r6, [r7], #1
 8006fd0:	9e03      	ldr	r6, [sp, #12]
 8006fd2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006fd6:	1bbe      	subs	r6, r7, r6
 8006fd8:	45b4      	cmp	ip, r6
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	d136      	bne.n	800704e <_dtoa_r+0x70e>
 8006fe0:	f7f9 f8dc 	bl	800019c <__adddf3>
 8006fe4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fe8:	4680      	mov	r8, r0
 8006fea:	4689      	mov	r9, r1
 8006fec:	f7f9 fd1c 	bl	8000a28 <__aeabi_dcmpgt>
 8006ff0:	bb58      	cbnz	r0, 800704a <_dtoa_r+0x70a>
 8006ff2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ff6:	4640      	mov	r0, r8
 8006ff8:	4649      	mov	r1, r9
 8006ffa:	f7f9 fced 	bl	80009d8 <__aeabi_dcmpeq>
 8006ffe:	b108      	cbz	r0, 8007004 <_dtoa_r+0x6c4>
 8007000:	07e1      	lsls	r1, r4, #31
 8007002:	d422      	bmi.n	800704a <_dtoa_r+0x70a>
 8007004:	4628      	mov	r0, r5
 8007006:	4659      	mov	r1, fp
 8007008:	f000 faf0 	bl	80075ec <_Bfree>
 800700c:	2300      	movs	r3, #0
 800700e:	703b      	strb	r3, [r7, #0]
 8007010:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007012:	f10a 0001 	add.w	r0, sl, #1
 8007016:	6018      	str	r0, [r3, #0]
 8007018:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800701a:	2b00      	cmp	r3, #0
 800701c:	f43f acde 	beq.w	80069dc <_dtoa_r+0x9c>
 8007020:	601f      	str	r7, [r3, #0]
 8007022:	e4db      	b.n	80069dc <_dtoa_r+0x9c>
 8007024:	4627      	mov	r7, r4
 8007026:	463b      	mov	r3, r7
 8007028:	461f      	mov	r7, r3
 800702a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800702e:	2a39      	cmp	r2, #57	; 0x39
 8007030:	d107      	bne.n	8007042 <_dtoa_r+0x702>
 8007032:	9a03      	ldr	r2, [sp, #12]
 8007034:	429a      	cmp	r2, r3
 8007036:	d1f7      	bne.n	8007028 <_dtoa_r+0x6e8>
 8007038:	2230      	movs	r2, #48	; 0x30
 800703a:	9903      	ldr	r1, [sp, #12]
 800703c:	f108 0801 	add.w	r8, r8, #1
 8007040:	700a      	strb	r2, [r1, #0]
 8007042:	781a      	ldrb	r2, [r3, #0]
 8007044:	3201      	adds	r2, #1
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	e79e      	b.n	8006f88 <_dtoa_r+0x648>
 800704a:	46d0      	mov	r8, sl
 800704c:	e7eb      	b.n	8007026 <_dtoa_r+0x6e6>
 800704e:	2200      	movs	r2, #0
 8007050:	4b6e      	ldr	r3, [pc, #440]	; (800720c <_dtoa_r+0x8cc>)
 8007052:	f7f9 fa59 	bl	8000508 <__aeabi_dmul>
 8007056:	2200      	movs	r2, #0
 8007058:	2300      	movs	r3, #0
 800705a:	4680      	mov	r8, r0
 800705c:	4689      	mov	r9, r1
 800705e:	f7f9 fcbb 	bl	80009d8 <__aeabi_dcmpeq>
 8007062:	2800      	cmp	r0, #0
 8007064:	d09b      	beq.n	8006f9e <_dtoa_r+0x65e>
 8007066:	e7cd      	b.n	8007004 <_dtoa_r+0x6c4>
 8007068:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800706a:	2a00      	cmp	r2, #0
 800706c:	f000 80d0 	beq.w	8007210 <_dtoa_r+0x8d0>
 8007070:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007072:	2a01      	cmp	r2, #1
 8007074:	f300 80ae 	bgt.w	80071d4 <_dtoa_r+0x894>
 8007078:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800707a:	2a00      	cmp	r2, #0
 800707c:	f000 80a6 	beq.w	80071cc <_dtoa_r+0x88c>
 8007080:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007084:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007086:	9f06      	ldr	r7, [sp, #24]
 8007088:	9a06      	ldr	r2, [sp, #24]
 800708a:	2101      	movs	r1, #1
 800708c:	441a      	add	r2, r3
 800708e:	9206      	str	r2, [sp, #24]
 8007090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007092:	4628      	mov	r0, r5
 8007094:	441a      	add	r2, r3
 8007096:	9209      	str	r2, [sp, #36]	; 0x24
 8007098:	f000 fb5e 	bl	8007758 <__i2b>
 800709c:	4606      	mov	r6, r0
 800709e:	2f00      	cmp	r7, #0
 80070a0:	dd0c      	ble.n	80070bc <_dtoa_r+0x77c>
 80070a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	dd09      	ble.n	80070bc <_dtoa_r+0x77c>
 80070a8:	42bb      	cmp	r3, r7
 80070aa:	bfa8      	it	ge
 80070ac:	463b      	movge	r3, r7
 80070ae:	9a06      	ldr	r2, [sp, #24]
 80070b0:	1aff      	subs	r7, r7, r3
 80070b2:	1ad2      	subs	r2, r2, r3
 80070b4:	9206      	str	r2, [sp, #24]
 80070b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	9309      	str	r3, [sp, #36]	; 0x24
 80070bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070be:	b1f3      	cbz	r3, 80070fe <_dtoa_r+0x7be>
 80070c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 80a8 	beq.w	8007218 <_dtoa_r+0x8d8>
 80070c8:	2c00      	cmp	r4, #0
 80070ca:	dd10      	ble.n	80070ee <_dtoa_r+0x7ae>
 80070cc:	4631      	mov	r1, r6
 80070ce:	4622      	mov	r2, r4
 80070d0:	4628      	mov	r0, r5
 80070d2:	f000 fbff 	bl	80078d4 <__pow5mult>
 80070d6:	465a      	mov	r2, fp
 80070d8:	4601      	mov	r1, r0
 80070da:	4606      	mov	r6, r0
 80070dc:	4628      	mov	r0, r5
 80070de:	f000 fb51 	bl	8007784 <__multiply>
 80070e2:	4680      	mov	r8, r0
 80070e4:	4659      	mov	r1, fp
 80070e6:	4628      	mov	r0, r5
 80070e8:	f000 fa80 	bl	80075ec <_Bfree>
 80070ec:	46c3      	mov	fp, r8
 80070ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f0:	1b1a      	subs	r2, r3, r4
 80070f2:	d004      	beq.n	80070fe <_dtoa_r+0x7be>
 80070f4:	4659      	mov	r1, fp
 80070f6:	4628      	mov	r0, r5
 80070f8:	f000 fbec 	bl	80078d4 <__pow5mult>
 80070fc:	4683      	mov	fp, r0
 80070fe:	2101      	movs	r1, #1
 8007100:	4628      	mov	r0, r5
 8007102:	f000 fb29 	bl	8007758 <__i2b>
 8007106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007108:	4604      	mov	r4, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	f340 8086 	ble.w	800721c <_dtoa_r+0x8dc>
 8007110:	461a      	mov	r2, r3
 8007112:	4601      	mov	r1, r0
 8007114:	4628      	mov	r0, r5
 8007116:	f000 fbdd 	bl	80078d4 <__pow5mult>
 800711a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800711c:	4604      	mov	r4, r0
 800711e:	2b01      	cmp	r3, #1
 8007120:	dd7f      	ble.n	8007222 <_dtoa_r+0x8e2>
 8007122:	f04f 0800 	mov.w	r8, #0
 8007126:	6923      	ldr	r3, [r4, #16]
 8007128:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800712c:	6918      	ldr	r0, [r3, #16]
 800712e:	f000 fac5 	bl	80076bc <__hi0bits>
 8007132:	f1c0 0020 	rsb	r0, r0, #32
 8007136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007138:	4418      	add	r0, r3
 800713a:	f010 001f 	ands.w	r0, r0, #31
 800713e:	f000 8092 	beq.w	8007266 <_dtoa_r+0x926>
 8007142:	f1c0 0320 	rsb	r3, r0, #32
 8007146:	2b04      	cmp	r3, #4
 8007148:	f340 808a 	ble.w	8007260 <_dtoa_r+0x920>
 800714c:	f1c0 001c 	rsb	r0, r0, #28
 8007150:	9b06      	ldr	r3, [sp, #24]
 8007152:	4407      	add	r7, r0
 8007154:	4403      	add	r3, r0
 8007156:	9306      	str	r3, [sp, #24]
 8007158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800715a:	4403      	add	r3, r0
 800715c:	9309      	str	r3, [sp, #36]	; 0x24
 800715e:	9b06      	ldr	r3, [sp, #24]
 8007160:	2b00      	cmp	r3, #0
 8007162:	dd05      	ble.n	8007170 <_dtoa_r+0x830>
 8007164:	4659      	mov	r1, fp
 8007166:	461a      	mov	r2, r3
 8007168:	4628      	mov	r0, r5
 800716a:	f000 fc0d 	bl	8007988 <__lshift>
 800716e:	4683      	mov	fp, r0
 8007170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007172:	2b00      	cmp	r3, #0
 8007174:	dd05      	ble.n	8007182 <_dtoa_r+0x842>
 8007176:	4621      	mov	r1, r4
 8007178:	461a      	mov	r2, r3
 800717a:	4628      	mov	r0, r5
 800717c:	f000 fc04 	bl	8007988 <__lshift>
 8007180:	4604      	mov	r4, r0
 8007182:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007184:	2b00      	cmp	r3, #0
 8007186:	d070      	beq.n	800726a <_dtoa_r+0x92a>
 8007188:	4621      	mov	r1, r4
 800718a:	4658      	mov	r0, fp
 800718c:	f000 fc6c 	bl	8007a68 <__mcmp>
 8007190:	2800      	cmp	r0, #0
 8007192:	da6a      	bge.n	800726a <_dtoa_r+0x92a>
 8007194:	2300      	movs	r3, #0
 8007196:	4659      	mov	r1, fp
 8007198:	220a      	movs	r2, #10
 800719a:	4628      	mov	r0, r5
 800719c:	f000 fa48 	bl	8007630 <__multadd>
 80071a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071a2:	4683      	mov	fp, r0
 80071a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 8194 	beq.w	80074d6 <_dtoa_r+0xb96>
 80071ae:	4631      	mov	r1, r6
 80071b0:	2300      	movs	r3, #0
 80071b2:	220a      	movs	r2, #10
 80071b4:	4628      	mov	r0, r5
 80071b6:	f000 fa3b 	bl	8007630 <__multadd>
 80071ba:	f1b9 0f00 	cmp.w	r9, #0
 80071be:	4606      	mov	r6, r0
 80071c0:	f300 8093 	bgt.w	80072ea <_dtoa_r+0x9aa>
 80071c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	dc57      	bgt.n	800727a <_dtoa_r+0x93a>
 80071ca:	e08e      	b.n	80072ea <_dtoa_r+0x9aa>
 80071cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80071ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071d2:	e757      	b.n	8007084 <_dtoa_r+0x744>
 80071d4:	9b08      	ldr	r3, [sp, #32]
 80071d6:	1e5c      	subs	r4, r3, #1
 80071d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071da:	42a3      	cmp	r3, r4
 80071dc:	bfb7      	itett	lt
 80071de:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80071e0:	1b1c      	subge	r4, r3, r4
 80071e2:	1ae2      	sublt	r2, r4, r3
 80071e4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80071e6:	bfbe      	ittt	lt
 80071e8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80071ea:	189b      	addlt	r3, r3, r2
 80071ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80071ee:	9b08      	ldr	r3, [sp, #32]
 80071f0:	bfb8      	it	lt
 80071f2:	2400      	movlt	r4, #0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	bfbb      	ittet	lt
 80071f8:	9b06      	ldrlt	r3, [sp, #24]
 80071fa:	9a08      	ldrlt	r2, [sp, #32]
 80071fc:	9f06      	ldrge	r7, [sp, #24]
 80071fe:	1a9f      	sublt	r7, r3, r2
 8007200:	bfac      	ite	ge
 8007202:	9b08      	ldrge	r3, [sp, #32]
 8007204:	2300      	movlt	r3, #0
 8007206:	e73f      	b.n	8007088 <_dtoa_r+0x748>
 8007208:	3fe00000 	.word	0x3fe00000
 800720c:	40240000 	.word	0x40240000
 8007210:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007212:	9f06      	ldr	r7, [sp, #24]
 8007214:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007216:	e742      	b.n	800709e <_dtoa_r+0x75e>
 8007218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800721a:	e76b      	b.n	80070f4 <_dtoa_r+0x7b4>
 800721c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800721e:	2b01      	cmp	r3, #1
 8007220:	dc19      	bgt.n	8007256 <_dtoa_r+0x916>
 8007222:	9b04      	ldr	r3, [sp, #16]
 8007224:	b9bb      	cbnz	r3, 8007256 <_dtoa_r+0x916>
 8007226:	9b05      	ldr	r3, [sp, #20]
 8007228:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800722c:	b99b      	cbnz	r3, 8007256 <_dtoa_r+0x916>
 800722e:	9b05      	ldr	r3, [sp, #20]
 8007230:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007234:	0d1b      	lsrs	r3, r3, #20
 8007236:	051b      	lsls	r3, r3, #20
 8007238:	b183      	cbz	r3, 800725c <_dtoa_r+0x91c>
 800723a:	f04f 0801 	mov.w	r8, #1
 800723e:	9b06      	ldr	r3, [sp, #24]
 8007240:	3301      	adds	r3, #1
 8007242:	9306      	str	r3, [sp, #24]
 8007244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007246:	3301      	adds	r3, #1
 8007248:	9309      	str	r3, [sp, #36]	; 0x24
 800724a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800724c:	2b00      	cmp	r3, #0
 800724e:	f47f af6a 	bne.w	8007126 <_dtoa_r+0x7e6>
 8007252:	2001      	movs	r0, #1
 8007254:	e76f      	b.n	8007136 <_dtoa_r+0x7f6>
 8007256:	f04f 0800 	mov.w	r8, #0
 800725a:	e7f6      	b.n	800724a <_dtoa_r+0x90a>
 800725c:	4698      	mov	r8, r3
 800725e:	e7f4      	b.n	800724a <_dtoa_r+0x90a>
 8007260:	f43f af7d 	beq.w	800715e <_dtoa_r+0x81e>
 8007264:	4618      	mov	r0, r3
 8007266:	301c      	adds	r0, #28
 8007268:	e772      	b.n	8007150 <_dtoa_r+0x810>
 800726a:	9b08      	ldr	r3, [sp, #32]
 800726c:	2b00      	cmp	r3, #0
 800726e:	dc36      	bgt.n	80072de <_dtoa_r+0x99e>
 8007270:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007272:	2b02      	cmp	r3, #2
 8007274:	dd33      	ble.n	80072de <_dtoa_r+0x99e>
 8007276:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800727a:	f1b9 0f00 	cmp.w	r9, #0
 800727e:	d10d      	bne.n	800729c <_dtoa_r+0x95c>
 8007280:	4621      	mov	r1, r4
 8007282:	464b      	mov	r3, r9
 8007284:	2205      	movs	r2, #5
 8007286:	4628      	mov	r0, r5
 8007288:	f000 f9d2 	bl	8007630 <__multadd>
 800728c:	4601      	mov	r1, r0
 800728e:	4604      	mov	r4, r0
 8007290:	4658      	mov	r0, fp
 8007292:	f000 fbe9 	bl	8007a68 <__mcmp>
 8007296:	2800      	cmp	r0, #0
 8007298:	f73f adb8 	bgt.w	8006e0c <_dtoa_r+0x4cc>
 800729c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800729e:	9f03      	ldr	r7, [sp, #12]
 80072a0:	ea6f 0a03 	mvn.w	sl, r3
 80072a4:	f04f 0800 	mov.w	r8, #0
 80072a8:	4621      	mov	r1, r4
 80072aa:	4628      	mov	r0, r5
 80072ac:	f000 f99e 	bl	80075ec <_Bfree>
 80072b0:	2e00      	cmp	r6, #0
 80072b2:	f43f aea7 	beq.w	8007004 <_dtoa_r+0x6c4>
 80072b6:	f1b8 0f00 	cmp.w	r8, #0
 80072ba:	d005      	beq.n	80072c8 <_dtoa_r+0x988>
 80072bc:	45b0      	cmp	r8, r6
 80072be:	d003      	beq.n	80072c8 <_dtoa_r+0x988>
 80072c0:	4641      	mov	r1, r8
 80072c2:	4628      	mov	r0, r5
 80072c4:	f000 f992 	bl	80075ec <_Bfree>
 80072c8:	4631      	mov	r1, r6
 80072ca:	4628      	mov	r0, r5
 80072cc:	f000 f98e 	bl	80075ec <_Bfree>
 80072d0:	e698      	b.n	8007004 <_dtoa_r+0x6c4>
 80072d2:	2400      	movs	r4, #0
 80072d4:	4626      	mov	r6, r4
 80072d6:	e7e1      	b.n	800729c <_dtoa_r+0x95c>
 80072d8:	46c2      	mov	sl, r8
 80072da:	4626      	mov	r6, r4
 80072dc:	e596      	b.n	8006e0c <_dtoa_r+0x4cc>
 80072de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 80fd 	beq.w	80074e4 <_dtoa_r+0xba4>
 80072ea:	2f00      	cmp	r7, #0
 80072ec:	dd05      	ble.n	80072fa <_dtoa_r+0x9ba>
 80072ee:	4631      	mov	r1, r6
 80072f0:	463a      	mov	r2, r7
 80072f2:	4628      	mov	r0, r5
 80072f4:	f000 fb48 	bl	8007988 <__lshift>
 80072f8:	4606      	mov	r6, r0
 80072fa:	f1b8 0f00 	cmp.w	r8, #0
 80072fe:	d05c      	beq.n	80073ba <_dtoa_r+0xa7a>
 8007300:	4628      	mov	r0, r5
 8007302:	6871      	ldr	r1, [r6, #4]
 8007304:	f000 f932 	bl	800756c <_Balloc>
 8007308:	4607      	mov	r7, r0
 800730a:	b928      	cbnz	r0, 8007318 <_dtoa_r+0x9d8>
 800730c:	4602      	mov	r2, r0
 800730e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007312:	4b7f      	ldr	r3, [pc, #508]	; (8007510 <_dtoa_r+0xbd0>)
 8007314:	f7ff bb28 	b.w	8006968 <_dtoa_r+0x28>
 8007318:	6932      	ldr	r2, [r6, #16]
 800731a:	f106 010c 	add.w	r1, r6, #12
 800731e:	3202      	adds	r2, #2
 8007320:	0092      	lsls	r2, r2, #2
 8007322:	300c      	adds	r0, #12
 8007324:	f000 f914 	bl	8007550 <memcpy>
 8007328:	2201      	movs	r2, #1
 800732a:	4639      	mov	r1, r7
 800732c:	4628      	mov	r0, r5
 800732e:	f000 fb2b 	bl	8007988 <__lshift>
 8007332:	46b0      	mov	r8, r6
 8007334:	4606      	mov	r6, r0
 8007336:	9b03      	ldr	r3, [sp, #12]
 8007338:	3301      	adds	r3, #1
 800733a:	9308      	str	r3, [sp, #32]
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	444b      	add	r3, r9
 8007340:	930a      	str	r3, [sp, #40]	; 0x28
 8007342:	9b04      	ldr	r3, [sp, #16]
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	9309      	str	r3, [sp, #36]	; 0x24
 800734a:	9b08      	ldr	r3, [sp, #32]
 800734c:	4621      	mov	r1, r4
 800734e:	3b01      	subs	r3, #1
 8007350:	4658      	mov	r0, fp
 8007352:	9304      	str	r3, [sp, #16]
 8007354:	f7ff fa66 	bl	8006824 <quorem>
 8007358:	4603      	mov	r3, r0
 800735a:	4641      	mov	r1, r8
 800735c:	3330      	adds	r3, #48	; 0x30
 800735e:	9006      	str	r0, [sp, #24]
 8007360:	4658      	mov	r0, fp
 8007362:	930b      	str	r3, [sp, #44]	; 0x2c
 8007364:	f000 fb80 	bl	8007a68 <__mcmp>
 8007368:	4632      	mov	r2, r6
 800736a:	4681      	mov	r9, r0
 800736c:	4621      	mov	r1, r4
 800736e:	4628      	mov	r0, r5
 8007370:	f000 fb96 	bl	8007aa0 <__mdiff>
 8007374:	68c2      	ldr	r2, [r0, #12]
 8007376:	4607      	mov	r7, r0
 8007378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800737a:	bb02      	cbnz	r2, 80073be <_dtoa_r+0xa7e>
 800737c:	4601      	mov	r1, r0
 800737e:	4658      	mov	r0, fp
 8007380:	f000 fb72 	bl	8007a68 <__mcmp>
 8007384:	4602      	mov	r2, r0
 8007386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007388:	4639      	mov	r1, r7
 800738a:	4628      	mov	r0, r5
 800738c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007390:	f000 f92c 	bl	80075ec <_Bfree>
 8007394:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007398:	9f08      	ldr	r7, [sp, #32]
 800739a:	ea43 0102 	orr.w	r1, r3, r2
 800739e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a0:	430b      	orrs	r3, r1
 80073a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073a4:	d10d      	bne.n	80073c2 <_dtoa_r+0xa82>
 80073a6:	2b39      	cmp	r3, #57	; 0x39
 80073a8:	d029      	beq.n	80073fe <_dtoa_r+0xabe>
 80073aa:	f1b9 0f00 	cmp.w	r9, #0
 80073ae:	dd01      	ble.n	80073b4 <_dtoa_r+0xa74>
 80073b0:	9b06      	ldr	r3, [sp, #24]
 80073b2:	3331      	adds	r3, #49	; 0x31
 80073b4:	9a04      	ldr	r2, [sp, #16]
 80073b6:	7013      	strb	r3, [r2, #0]
 80073b8:	e776      	b.n	80072a8 <_dtoa_r+0x968>
 80073ba:	4630      	mov	r0, r6
 80073bc:	e7b9      	b.n	8007332 <_dtoa_r+0x9f2>
 80073be:	2201      	movs	r2, #1
 80073c0:	e7e2      	b.n	8007388 <_dtoa_r+0xa48>
 80073c2:	f1b9 0f00 	cmp.w	r9, #0
 80073c6:	db06      	blt.n	80073d6 <_dtoa_r+0xa96>
 80073c8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80073ca:	ea41 0909 	orr.w	r9, r1, r9
 80073ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073d0:	ea59 0101 	orrs.w	r1, r9, r1
 80073d4:	d120      	bne.n	8007418 <_dtoa_r+0xad8>
 80073d6:	2a00      	cmp	r2, #0
 80073d8:	ddec      	ble.n	80073b4 <_dtoa_r+0xa74>
 80073da:	4659      	mov	r1, fp
 80073dc:	2201      	movs	r2, #1
 80073de:	4628      	mov	r0, r5
 80073e0:	9308      	str	r3, [sp, #32]
 80073e2:	f000 fad1 	bl	8007988 <__lshift>
 80073e6:	4621      	mov	r1, r4
 80073e8:	4683      	mov	fp, r0
 80073ea:	f000 fb3d 	bl	8007a68 <__mcmp>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	9b08      	ldr	r3, [sp, #32]
 80073f2:	dc02      	bgt.n	80073fa <_dtoa_r+0xaba>
 80073f4:	d1de      	bne.n	80073b4 <_dtoa_r+0xa74>
 80073f6:	07da      	lsls	r2, r3, #31
 80073f8:	d5dc      	bpl.n	80073b4 <_dtoa_r+0xa74>
 80073fa:	2b39      	cmp	r3, #57	; 0x39
 80073fc:	d1d8      	bne.n	80073b0 <_dtoa_r+0xa70>
 80073fe:	2339      	movs	r3, #57	; 0x39
 8007400:	9a04      	ldr	r2, [sp, #16]
 8007402:	7013      	strb	r3, [r2, #0]
 8007404:	463b      	mov	r3, r7
 8007406:	461f      	mov	r7, r3
 8007408:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800740c:	3b01      	subs	r3, #1
 800740e:	2a39      	cmp	r2, #57	; 0x39
 8007410:	d050      	beq.n	80074b4 <_dtoa_r+0xb74>
 8007412:	3201      	adds	r2, #1
 8007414:	701a      	strb	r2, [r3, #0]
 8007416:	e747      	b.n	80072a8 <_dtoa_r+0x968>
 8007418:	2a00      	cmp	r2, #0
 800741a:	dd03      	ble.n	8007424 <_dtoa_r+0xae4>
 800741c:	2b39      	cmp	r3, #57	; 0x39
 800741e:	d0ee      	beq.n	80073fe <_dtoa_r+0xabe>
 8007420:	3301      	adds	r3, #1
 8007422:	e7c7      	b.n	80073b4 <_dtoa_r+0xa74>
 8007424:	9a08      	ldr	r2, [sp, #32]
 8007426:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007428:	f802 3c01 	strb.w	r3, [r2, #-1]
 800742c:	428a      	cmp	r2, r1
 800742e:	d02a      	beq.n	8007486 <_dtoa_r+0xb46>
 8007430:	4659      	mov	r1, fp
 8007432:	2300      	movs	r3, #0
 8007434:	220a      	movs	r2, #10
 8007436:	4628      	mov	r0, r5
 8007438:	f000 f8fa 	bl	8007630 <__multadd>
 800743c:	45b0      	cmp	r8, r6
 800743e:	4683      	mov	fp, r0
 8007440:	f04f 0300 	mov.w	r3, #0
 8007444:	f04f 020a 	mov.w	r2, #10
 8007448:	4641      	mov	r1, r8
 800744a:	4628      	mov	r0, r5
 800744c:	d107      	bne.n	800745e <_dtoa_r+0xb1e>
 800744e:	f000 f8ef 	bl	8007630 <__multadd>
 8007452:	4680      	mov	r8, r0
 8007454:	4606      	mov	r6, r0
 8007456:	9b08      	ldr	r3, [sp, #32]
 8007458:	3301      	adds	r3, #1
 800745a:	9308      	str	r3, [sp, #32]
 800745c:	e775      	b.n	800734a <_dtoa_r+0xa0a>
 800745e:	f000 f8e7 	bl	8007630 <__multadd>
 8007462:	4631      	mov	r1, r6
 8007464:	4680      	mov	r8, r0
 8007466:	2300      	movs	r3, #0
 8007468:	220a      	movs	r2, #10
 800746a:	4628      	mov	r0, r5
 800746c:	f000 f8e0 	bl	8007630 <__multadd>
 8007470:	4606      	mov	r6, r0
 8007472:	e7f0      	b.n	8007456 <_dtoa_r+0xb16>
 8007474:	f1b9 0f00 	cmp.w	r9, #0
 8007478:	bfcc      	ite	gt
 800747a:	464f      	movgt	r7, r9
 800747c:	2701      	movle	r7, #1
 800747e:	f04f 0800 	mov.w	r8, #0
 8007482:	9a03      	ldr	r2, [sp, #12]
 8007484:	4417      	add	r7, r2
 8007486:	4659      	mov	r1, fp
 8007488:	2201      	movs	r2, #1
 800748a:	4628      	mov	r0, r5
 800748c:	9308      	str	r3, [sp, #32]
 800748e:	f000 fa7b 	bl	8007988 <__lshift>
 8007492:	4621      	mov	r1, r4
 8007494:	4683      	mov	fp, r0
 8007496:	f000 fae7 	bl	8007a68 <__mcmp>
 800749a:	2800      	cmp	r0, #0
 800749c:	dcb2      	bgt.n	8007404 <_dtoa_r+0xac4>
 800749e:	d102      	bne.n	80074a6 <_dtoa_r+0xb66>
 80074a0:	9b08      	ldr	r3, [sp, #32]
 80074a2:	07db      	lsls	r3, r3, #31
 80074a4:	d4ae      	bmi.n	8007404 <_dtoa_r+0xac4>
 80074a6:	463b      	mov	r3, r7
 80074a8:	461f      	mov	r7, r3
 80074aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074ae:	2a30      	cmp	r2, #48	; 0x30
 80074b0:	d0fa      	beq.n	80074a8 <_dtoa_r+0xb68>
 80074b2:	e6f9      	b.n	80072a8 <_dtoa_r+0x968>
 80074b4:	9a03      	ldr	r2, [sp, #12]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d1a5      	bne.n	8007406 <_dtoa_r+0xac6>
 80074ba:	2331      	movs	r3, #49	; 0x31
 80074bc:	f10a 0a01 	add.w	sl, sl, #1
 80074c0:	e779      	b.n	80073b6 <_dtoa_r+0xa76>
 80074c2:	4b14      	ldr	r3, [pc, #80]	; (8007514 <_dtoa_r+0xbd4>)
 80074c4:	f7ff baa8 	b.w	8006a18 <_dtoa_r+0xd8>
 80074c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f47f aa81 	bne.w	80069d2 <_dtoa_r+0x92>
 80074d0:	4b11      	ldr	r3, [pc, #68]	; (8007518 <_dtoa_r+0xbd8>)
 80074d2:	f7ff baa1 	b.w	8006a18 <_dtoa_r+0xd8>
 80074d6:	f1b9 0f00 	cmp.w	r9, #0
 80074da:	dc03      	bgt.n	80074e4 <_dtoa_r+0xba4>
 80074dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074de:	2b02      	cmp	r3, #2
 80074e0:	f73f aecb 	bgt.w	800727a <_dtoa_r+0x93a>
 80074e4:	9f03      	ldr	r7, [sp, #12]
 80074e6:	4621      	mov	r1, r4
 80074e8:	4658      	mov	r0, fp
 80074ea:	f7ff f99b 	bl	8006824 <quorem>
 80074ee:	9a03      	ldr	r2, [sp, #12]
 80074f0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80074f4:	f807 3b01 	strb.w	r3, [r7], #1
 80074f8:	1aba      	subs	r2, r7, r2
 80074fa:	4591      	cmp	r9, r2
 80074fc:	ddba      	ble.n	8007474 <_dtoa_r+0xb34>
 80074fe:	4659      	mov	r1, fp
 8007500:	2300      	movs	r3, #0
 8007502:	220a      	movs	r2, #10
 8007504:	4628      	mov	r0, r5
 8007506:	f000 f893 	bl	8007630 <__multadd>
 800750a:	4683      	mov	fp, r0
 800750c:	e7eb      	b.n	80074e6 <_dtoa_r+0xba6>
 800750e:	bf00      	nop
 8007510:	08008e27 	.word	0x08008e27
 8007514:	08008d84 	.word	0x08008d84
 8007518:	08008da8 	.word	0x08008da8

0800751c <_localeconv_r>:
 800751c:	4800      	ldr	r0, [pc, #0]	; (8007520 <_localeconv_r+0x4>)
 800751e:	4770      	bx	lr
 8007520:	20000164 	.word	0x20000164

08007524 <malloc>:
 8007524:	4b02      	ldr	r3, [pc, #8]	; (8007530 <malloc+0xc>)
 8007526:	4601      	mov	r1, r0
 8007528:	6818      	ldr	r0, [r3, #0]
 800752a:	f000 bc1d 	b.w	8007d68 <_malloc_r>
 800752e:	bf00      	nop
 8007530:	20000010 	.word	0x20000010

08007534 <memchr>:
 8007534:	4603      	mov	r3, r0
 8007536:	b510      	push	{r4, lr}
 8007538:	b2c9      	uxtb	r1, r1
 800753a:	4402      	add	r2, r0
 800753c:	4293      	cmp	r3, r2
 800753e:	4618      	mov	r0, r3
 8007540:	d101      	bne.n	8007546 <memchr+0x12>
 8007542:	2000      	movs	r0, #0
 8007544:	e003      	b.n	800754e <memchr+0x1a>
 8007546:	7804      	ldrb	r4, [r0, #0]
 8007548:	3301      	adds	r3, #1
 800754a:	428c      	cmp	r4, r1
 800754c:	d1f6      	bne.n	800753c <memchr+0x8>
 800754e:	bd10      	pop	{r4, pc}

08007550 <memcpy>:
 8007550:	440a      	add	r2, r1
 8007552:	4291      	cmp	r1, r2
 8007554:	f100 33ff 	add.w	r3, r0, #4294967295
 8007558:	d100      	bne.n	800755c <memcpy+0xc>
 800755a:	4770      	bx	lr
 800755c:	b510      	push	{r4, lr}
 800755e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007562:	4291      	cmp	r1, r2
 8007564:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007568:	d1f9      	bne.n	800755e <memcpy+0xe>
 800756a:	bd10      	pop	{r4, pc}

0800756c <_Balloc>:
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007570:	4604      	mov	r4, r0
 8007572:	460d      	mov	r5, r1
 8007574:	b976      	cbnz	r6, 8007594 <_Balloc+0x28>
 8007576:	2010      	movs	r0, #16
 8007578:	f7ff ffd4 	bl	8007524 <malloc>
 800757c:	4602      	mov	r2, r0
 800757e:	6260      	str	r0, [r4, #36]	; 0x24
 8007580:	b920      	cbnz	r0, 800758c <_Balloc+0x20>
 8007582:	2166      	movs	r1, #102	; 0x66
 8007584:	4b17      	ldr	r3, [pc, #92]	; (80075e4 <_Balloc+0x78>)
 8007586:	4818      	ldr	r0, [pc, #96]	; (80075e8 <_Balloc+0x7c>)
 8007588:	f000 fdce 	bl	8008128 <__assert_func>
 800758c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007590:	6006      	str	r6, [r0, #0]
 8007592:	60c6      	str	r6, [r0, #12]
 8007594:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007596:	68f3      	ldr	r3, [r6, #12]
 8007598:	b183      	cbz	r3, 80075bc <_Balloc+0x50>
 800759a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075a2:	b9b8      	cbnz	r0, 80075d4 <_Balloc+0x68>
 80075a4:	2101      	movs	r1, #1
 80075a6:	fa01 f605 	lsl.w	r6, r1, r5
 80075aa:	1d72      	adds	r2, r6, #5
 80075ac:	4620      	mov	r0, r4
 80075ae:	0092      	lsls	r2, r2, #2
 80075b0:	f000 fb5e 	bl	8007c70 <_calloc_r>
 80075b4:	b160      	cbz	r0, 80075d0 <_Balloc+0x64>
 80075b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075ba:	e00e      	b.n	80075da <_Balloc+0x6e>
 80075bc:	2221      	movs	r2, #33	; 0x21
 80075be:	2104      	movs	r1, #4
 80075c0:	4620      	mov	r0, r4
 80075c2:	f000 fb55 	bl	8007c70 <_calloc_r>
 80075c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075c8:	60f0      	str	r0, [r6, #12]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e4      	bne.n	800759a <_Balloc+0x2e>
 80075d0:	2000      	movs	r0, #0
 80075d2:	bd70      	pop	{r4, r5, r6, pc}
 80075d4:	6802      	ldr	r2, [r0, #0]
 80075d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075da:	2300      	movs	r3, #0
 80075dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075e0:	e7f7      	b.n	80075d2 <_Balloc+0x66>
 80075e2:	bf00      	nop
 80075e4:	08008db5 	.word	0x08008db5
 80075e8:	08008e38 	.word	0x08008e38

080075ec <_Bfree>:
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075f0:	4605      	mov	r5, r0
 80075f2:	460c      	mov	r4, r1
 80075f4:	b976      	cbnz	r6, 8007614 <_Bfree+0x28>
 80075f6:	2010      	movs	r0, #16
 80075f8:	f7ff ff94 	bl	8007524 <malloc>
 80075fc:	4602      	mov	r2, r0
 80075fe:	6268      	str	r0, [r5, #36]	; 0x24
 8007600:	b920      	cbnz	r0, 800760c <_Bfree+0x20>
 8007602:	218a      	movs	r1, #138	; 0x8a
 8007604:	4b08      	ldr	r3, [pc, #32]	; (8007628 <_Bfree+0x3c>)
 8007606:	4809      	ldr	r0, [pc, #36]	; (800762c <_Bfree+0x40>)
 8007608:	f000 fd8e 	bl	8008128 <__assert_func>
 800760c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007610:	6006      	str	r6, [r0, #0]
 8007612:	60c6      	str	r6, [r0, #12]
 8007614:	b13c      	cbz	r4, 8007626 <_Bfree+0x3a>
 8007616:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007618:	6862      	ldr	r2, [r4, #4]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007620:	6021      	str	r1, [r4, #0]
 8007622:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007626:	bd70      	pop	{r4, r5, r6, pc}
 8007628:	08008db5 	.word	0x08008db5
 800762c:	08008e38 	.word	0x08008e38

08007630 <__multadd>:
 8007630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007634:	4607      	mov	r7, r0
 8007636:	460c      	mov	r4, r1
 8007638:	461e      	mov	r6, r3
 800763a:	2000      	movs	r0, #0
 800763c:	690d      	ldr	r5, [r1, #16]
 800763e:	f101 0c14 	add.w	ip, r1, #20
 8007642:	f8dc 3000 	ldr.w	r3, [ip]
 8007646:	3001      	adds	r0, #1
 8007648:	b299      	uxth	r1, r3
 800764a:	fb02 6101 	mla	r1, r2, r1, r6
 800764e:	0c1e      	lsrs	r6, r3, #16
 8007650:	0c0b      	lsrs	r3, r1, #16
 8007652:	fb02 3306 	mla	r3, r2, r6, r3
 8007656:	b289      	uxth	r1, r1
 8007658:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800765c:	4285      	cmp	r5, r0
 800765e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007662:	f84c 1b04 	str.w	r1, [ip], #4
 8007666:	dcec      	bgt.n	8007642 <__multadd+0x12>
 8007668:	b30e      	cbz	r6, 80076ae <__multadd+0x7e>
 800766a:	68a3      	ldr	r3, [r4, #8]
 800766c:	42ab      	cmp	r3, r5
 800766e:	dc19      	bgt.n	80076a4 <__multadd+0x74>
 8007670:	6861      	ldr	r1, [r4, #4]
 8007672:	4638      	mov	r0, r7
 8007674:	3101      	adds	r1, #1
 8007676:	f7ff ff79 	bl	800756c <_Balloc>
 800767a:	4680      	mov	r8, r0
 800767c:	b928      	cbnz	r0, 800768a <__multadd+0x5a>
 800767e:	4602      	mov	r2, r0
 8007680:	21b5      	movs	r1, #181	; 0xb5
 8007682:	4b0c      	ldr	r3, [pc, #48]	; (80076b4 <__multadd+0x84>)
 8007684:	480c      	ldr	r0, [pc, #48]	; (80076b8 <__multadd+0x88>)
 8007686:	f000 fd4f 	bl	8008128 <__assert_func>
 800768a:	6922      	ldr	r2, [r4, #16]
 800768c:	f104 010c 	add.w	r1, r4, #12
 8007690:	3202      	adds	r2, #2
 8007692:	0092      	lsls	r2, r2, #2
 8007694:	300c      	adds	r0, #12
 8007696:	f7ff ff5b 	bl	8007550 <memcpy>
 800769a:	4621      	mov	r1, r4
 800769c:	4638      	mov	r0, r7
 800769e:	f7ff ffa5 	bl	80075ec <_Bfree>
 80076a2:	4644      	mov	r4, r8
 80076a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076a8:	3501      	adds	r5, #1
 80076aa:	615e      	str	r6, [r3, #20]
 80076ac:	6125      	str	r5, [r4, #16]
 80076ae:	4620      	mov	r0, r4
 80076b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076b4:	08008e27 	.word	0x08008e27
 80076b8:	08008e38 	.word	0x08008e38

080076bc <__hi0bits>:
 80076bc:	0c02      	lsrs	r2, r0, #16
 80076be:	0412      	lsls	r2, r2, #16
 80076c0:	4603      	mov	r3, r0
 80076c2:	b9ca      	cbnz	r2, 80076f8 <__hi0bits+0x3c>
 80076c4:	0403      	lsls	r3, r0, #16
 80076c6:	2010      	movs	r0, #16
 80076c8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80076cc:	bf04      	itt	eq
 80076ce:	021b      	lsleq	r3, r3, #8
 80076d0:	3008      	addeq	r0, #8
 80076d2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80076d6:	bf04      	itt	eq
 80076d8:	011b      	lsleq	r3, r3, #4
 80076da:	3004      	addeq	r0, #4
 80076dc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80076e0:	bf04      	itt	eq
 80076e2:	009b      	lsleq	r3, r3, #2
 80076e4:	3002      	addeq	r0, #2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	db05      	blt.n	80076f6 <__hi0bits+0x3a>
 80076ea:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80076ee:	f100 0001 	add.w	r0, r0, #1
 80076f2:	bf08      	it	eq
 80076f4:	2020      	moveq	r0, #32
 80076f6:	4770      	bx	lr
 80076f8:	2000      	movs	r0, #0
 80076fa:	e7e5      	b.n	80076c8 <__hi0bits+0xc>

080076fc <__lo0bits>:
 80076fc:	6803      	ldr	r3, [r0, #0]
 80076fe:	4602      	mov	r2, r0
 8007700:	f013 0007 	ands.w	r0, r3, #7
 8007704:	d00b      	beq.n	800771e <__lo0bits+0x22>
 8007706:	07d9      	lsls	r1, r3, #31
 8007708:	d421      	bmi.n	800774e <__lo0bits+0x52>
 800770a:	0798      	lsls	r0, r3, #30
 800770c:	bf49      	itett	mi
 800770e:	085b      	lsrmi	r3, r3, #1
 8007710:	089b      	lsrpl	r3, r3, #2
 8007712:	2001      	movmi	r0, #1
 8007714:	6013      	strmi	r3, [r2, #0]
 8007716:	bf5c      	itt	pl
 8007718:	2002      	movpl	r0, #2
 800771a:	6013      	strpl	r3, [r2, #0]
 800771c:	4770      	bx	lr
 800771e:	b299      	uxth	r1, r3
 8007720:	b909      	cbnz	r1, 8007726 <__lo0bits+0x2a>
 8007722:	2010      	movs	r0, #16
 8007724:	0c1b      	lsrs	r3, r3, #16
 8007726:	b2d9      	uxtb	r1, r3
 8007728:	b909      	cbnz	r1, 800772e <__lo0bits+0x32>
 800772a:	3008      	adds	r0, #8
 800772c:	0a1b      	lsrs	r3, r3, #8
 800772e:	0719      	lsls	r1, r3, #28
 8007730:	bf04      	itt	eq
 8007732:	091b      	lsreq	r3, r3, #4
 8007734:	3004      	addeq	r0, #4
 8007736:	0799      	lsls	r1, r3, #30
 8007738:	bf04      	itt	eq
 800773a:	089b      	lsreq	r3, r3, #2
 800773c:	3002      	addeq	r0, #2
 800773e:	07d9      	lsls	r1, r3, #31
 8007740:	d403      	bmi.n	800774a <__lo0bits+0x4e>
 8007742:	085b      	lsrs	r3, r3, #1
 8007744:	f100 0001 	add.w	r0, r0, #1
 8007748:	d003      	beq.n	8007752 <__lo0bits+0x56>
 800774a:	6013      	str	r3, [r2, #0]
 800774c:	4770      	bx	lr
 800774e:	2000      	movs	r0, #0
 8007750:	4770      	bx	lr
 8007752:	2020      	movs	r0, #32
 8007754:	4770      	bx	lr
	...

08007758 <__i2b>:
 8007758:	b510      	push	{r4, lr}
 800775a:	460c      	mov	r4, r1
 800775c:	2101      	movs	r1, #1
 800775e:	f7ff ff05 	bl	800756c <_Balloc>
 8007762:	4602      	mov	r2, r0
 8007764:	b928      	cbnz	r0, 8007772 <__i2b+0x1a>
 8007766:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800776a:	4b04      	ldr	r3, [pc, #16]	; (800777c <__i2b+0x24>)
 800776c:	4804      	ldr	r0, [pc, #16]	; (8007780 <__i2b+0x28>)
 800776e:	f000 fcdb 	bl	8008128 <__assert_func>
 8007772:	2301      	movs	r3, #1
 8007774:	6144      	str	r4, [r0, #20]
 8007776:	6103      	str	r3, [r0, #16]
 8007778:	bd10      	pop	{r4, pc}
 800777a:	bf00      	nop
 800777c:	08008e27 	.word	0x08008e27
 8007780:	08008e38 	.word	0x08008e38

08007784 <__multiply>:
 8007784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007788:	4691      	mov	r9, r2
 800778a:	690a      	ldr	r2, [r1, #16]
 800778c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007790:	460c      	mov	r4, r1
 8007792:	429a      	cmp	r2, r3
 8007794:	bfbe      	ittt	lt
 8007796:	460b      	movlt	r3, r1
 8007798:	464c      	movlt	r4, r9
 800779a:	4699      	movlt	r9, r3
 800779c:	6927      	ldr	r7, [r4, #16]
 800779e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077a2:	68a3      	ldr	r3, [r4, #8]
 80077a4:	6861      	ldr	r1, [r4, #4]
 80077a6:	eb07 060a 	add.w	r6, r7, sl
 80077aa:	42b3      	cmp	r3, r6
 80077ac:	b085      	sub	sp, #20
 80077ae:	bfb8      	it	lt
 80077b0:	3101      	addlt	r1, #1
 80077b2:	f7ff fedb 	bl	800756c <_Balloc>
 80077b6:	b930      	cbnz	r0, 80077c6 <__multiply+0x42>
 80077b8:	4602      	mov	r2, r0
 80077ba:	f240 115d 	movw	r1, #349	; 0x15d
 80077be:	4b43      	ldr	r3, [pc, #268]	; (80078cc <__multiply+0x148>)
 80077c0:	4843      	ldr	r0, [pc, #268]	; (80078d0 <__multiply+0x14c>)
 80077c2:	f000 fcb1 	bl	8008128 <__assert_func>
 80077c6:	f100 0514 	add.w	r5, r0, #20
 80077ca:	462b      	mov	r3, r5
 80077cc:	2200      	movs	r2, #0
 80077ce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077d2:	4543      	cmp	r3, r8
 80077d4:	d321      	bcc.n	800781a <__multiply+0x96>
 80077d6:	f104 0314 	add.w	r3, r4, #20
 80077da:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80077de:	f109 0314 	add.w	r3, r9, #20
 80077e2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80077e6:	9202      	str	r2, [sp, #8]
 80077e8:	1b3a      	subs	r2, r7, r4
 80077ea:	3a15      	subs	r2, #21
 80077ec:	f022 0203 	bic.w	r2, r2, #3
 80077f0:	3204      	adds	r2, #4
 80077f2:	f104 0115 	add.w	r1, r4, #21
 80077f6:	428f      	cmp	r7, r1
 80077f8:	bf38      	it	cc
 80077fa:	2204      	movcc	r2, #4
 80077fc:	9201      	str	r2, [sp, #4]
 80077fe:	9a02      	ldr	r2, [sp, #8]
 8007800:	9303      	str	r3, [sp, #12]
 8007802:	429a      	cmp	r2, r3
 8007804:	d80c      	bhi.n	8007820 <__multiply+0x9c>
 8007806:	2e00      	cmp	r6, #0
 8007808:	dd03      	ble.n	8007812 <__multiply+0x8e>
 800780a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800780e:	2b00      	cmp	r3, #0
 8007810:	d059      	beq.n	80078c6 <__multiply+0x142>
 8007812:	6106      	str	r6, [r0, #16]
 8007814:	b005      	add	sp, #20
 8007816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800781a:	f843 2b04 	str.w	r2, [r3], #4
 800781e:	e7d8      	b.n	80077d2 <__multiply+0x4e>
 8007820:	f8b3 a000 	ldrh.w	sl, [r3]
 8007824:	f1ba 0f00 	cmp.w	sl, #0
 8007828:	d023      	beq.n	8007872 <__multiply+0xee>
 800782a:	46a9      	mov	r9, r5
 800782c:	f04f 0c00 	mov.w	ip, #0
 8007830:	f104 0e14 	add.w	lr, r4, #20
 8007834:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007838:	f8d9 1000 	ldr.w	r1, [r9]
 800783c:	fa1f fb82 	uxth.w	fp, r2
 8007840:	b289      	uxth	r1, r1
 8007842:	fb0a 110b 	mla	r1, sl, fp, r1
 8007846:	4461      	add	r1, ip
 8007848:	f8d9 c000 	ldr.w	ip, [r9]
 800784c:	0c12      	lsrs	r2, r2, #16
 800784e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007852:	fb0a c202 	mla	r2, sl, r2, ip
 8007856:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800785a:	b289      	uxth	r1, r1
 800785c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007860:	4577      	cmp	r7, lr
 8007862:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007866:	f849 1b04 	str.w	r1, [r9], #4
 800786a:	d8e3      	bhi.n	8007834 <__multiply+0xb0>
 800786c:	9a01      	ldr	r2, [sp, #4]
 800786e:	f845 c002 	str.w	ip, [r5, r2]
 8007872:	9a03      	ldr	r2, [sp, #12]
 8007874:	3304      	adds	r3, #4
 8007876:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800787a:	f1b9 0f00 	cmp.w	r9, #0
 800787e:	d020      	beq.n	80078c2 <__multiply+0x13e>
 8007880:	46ae      	mov	lr, r5
 8007882:	f04f 0a00 	mov.w	sl, #0
 8007886:	6829      	ldr	r1, [r5, #0]
 8007888:	f104 0c14 	add.w	ip, r4, #20
 800788c:	f8bc b000 	ldrh.w	fp, [ip]
 8007890:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007894:	b289      	uxth	r1, r1
 8007896:	fb09 220b 	mla	r2, r9, fp, r2
 800789a:	4492      	add	sl, r2
 800789c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80078a0:	f84e 1b04 	str.w	r1, [lr], #4
 80078a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80078a8:	f8be 1000 	ldrh.w	r1, [lr]
 80078ac:	0c12      	lsrs	r2, r2, #16
 80078ae:	fb09 1102 	mla	r1, r9, r2, r1
 80078b2:	4567      	cmp	r7, ip
 80078b4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80078b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80078bc:	d8e6      	bhi.n	800788c <__multiply+0x108>
 80078be:	9a01      	ldr	r2, [sp, #4]
 80078c0:	50a9      	str	r1, [r5, r2]
 80078c2:	3504      	adds	r5, #4
 80078c4:	e79b      	b.n	80077fe <__multiply+0x7a>
 80078c6:	3e01      	subs	r6, #1
 80078c8:	e79d      	b.n	8007806 <__multiply+0x82>
 80078ca:	bf00      	nop
 80078cc:	08008e27 	.word	0x08008e27
 80078d0:	08008e38 	.word	0x08008e38

080078d4 <__pow5mult>:
 80078d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d8:	4615      	mov	r5, r2
 80078da:	f012 0203 	ands.w	r2, r2, #3
 80078de:	4606      	mov	r6, r0
 80078e0:	460f      	mov	r7, r1
 80078e2:	d007      	beq.n	80078f4 <__pow5mult+0x20>
 80078e4:	4c25      	ldr	r4, [pc, #148]	; (800797c <__pow5mult+0xa8>)
 80078e6:	3a01      	subs	r2, #1
 80078e8:	2300      	movs	r3, #0
 80078ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078ee:	f7ff fe9f 	bl	8007630 <__multadd>
 80078f2:	4607      	mov	r7, r0
 80078f4:	10ad      	asrs	r5, r5, #2
 80078f6:	d03d      	beq.n	8007974 <__pow5mult+0xa0>
 80078f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078fa:	b97c      	cbnz	r4, 800791c <__pow5mult+0x48>
 80078fc:	2010      	movs	r0, #16
 80078fe:	f7ff fe11 	bl	8007524 <malloc>
 8007902:	4602      	mov	r2, r0
 8007904:	6270      	str	r0, [r6, #36]	; 0x24
 8007906:	b928      	cbnz	r0, 8007914 <__pow5mult+0x40>
 8007908:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800790c:	4b1c      	ldr	r3, [pc, #112]	; (8007980 <__pow5mult+0xac>)
 800790e:	481d      	ldr	r0, [pc, #116]	; (8007984 <__pow5mult+0xb0>)
 8007910:	f000 fc0a 	bl	8008128 <__assert_func>
 8007914:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007918:	6004      	str	r4, [r0, #0]
 800791a:	60c4      	str	r4, [r0, #12]
 800791c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007920:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007924:	b94c      	cbnz	r4, 800793a <__pow5mult+0x66>
 8007926:	f240 2171 	movw	r1, #625	; 0x271
 800792a:	4630      	mov	r0, r6
 800792c:	f7ff ff14 	bl	8007758 <__i2b>
 8007930:	2300      	movs	r3, #0
 8007932:	4604      	mov	r4, r0
 8007934:	f8c8 0008 	str.w	r0, [r8, #8]
 8007938:	6003      	str	r3, [r0, #0]
 800793a:	f04f 0900 	mov.w	r9, #0
 800793e:	07eb      	lsls	r3, r5, #31
 8007940:	d50a      	bpl.n	8007958 <__pow5mult+0x84>
 8007942:	4639      	mov	r1, r7
 8007944:	4622      	mov	r2, r4
 8007946:	4630      	mov	r0, r6
 8007948:	f7ff ff1c 	bl	8007784 <__multiply>
 800794c:	4680      	mov	r8, r0
 800794e:	4639      	mov	r1, r7
 8007950:	4630      	mov	r0, r6
 8007952:	f7ff fe4b 	bl	80075ec <_Bfree>
 8007956:	4647      	mov	r7, r8
 8007958:	106d      	asrs	r5, r5, #1
 800795a:	d00b      	beq.n	8007974 <__pow5mult+0xa0>
 800795c:	6820      	ldr	r0, [r4, #0]
 800795e:	b938      	cbnz	r0, 8007970 <__pow5mult+0x9c>
 8007960:	4622      	mov	r2, r4
 8007962:	4621      	mov	r1, r4
 8007964:	4630      	mov	r0, r6
 8007966:	f7ff ff0d 	bl	8007784 <__multiply>
 800796a:	6020      	str	r0, [r4, #0]
 800796c:	f8c0 9000 	str.w	r9, [r0]
 8007970:	4604      	mov	r4, r0
 8007972:	e7e4      	b.n	800793e <__pow5mult+0x6a>
 8007974:	4638      	mov	r0, r7
 8007976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800797a:	bf00      	nop
 800797c:	08008f88 	.word	0x08008f88
 8007980:	08008db5 	.word	0x08008db5
 8007984:	08008e38 	.word	0x08008e38

08007988 <__lshift>:
 8007988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800798c:	460c      	mov	r4, r1
 800798e:	4607      	mov	r7, r0
 8007990:	4691      	mov	r9, r2
 8007992:	6923      	ldr	r3, [r4, #16]
 8007994:	6849      	ldr	r1, [r1, #4]
 8007996:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800799a:	68a3      	ldr	r3, [r4, #8]
 800799c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079a0:	f108 0601 	add.w	r6, r8, #1
 80079a4:	42b3      	cmp	r3, r6
 80079a6:	db0b      	blt.n	80079c0 <__lshift+0x38>
 80079a8:	4638      	mov	r0, r7
 80079aa:	f7ff fddf 	bl	800756c <_Balloc>
 80079ae:	4605      	mov	r5, r0
 80079b0:	b948      	cbnz	r0, 80079c6 <__lshift+0x3e>
 80079b2:	4602      	mov	r2, r0
 80079b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80079b8:	4b29      	ldr	r3, [pc, #164]	; (8007a60 <__lshift+0xd8>)
 80079ba:	482a      	ldr	r0, [pc, #168]	; (8007a64 <__lshift+0xdc>)
 80079bc:	f000 fbb4 	bl	8008128 <__assert_func>
 80079c0:	3101      	adds	r1, #1
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	e7ee      	b.n	80079a4 <__lshift+0x1c>
 80079c6:	2300      	movs	r3, #0
 80079c8:	f100 0114 	add.w	r1, r0, #20
 80079cc:	f100 0210 	add.w	r2, r0, #16
 80079d0:	4618      	mov	r0, r3
 80079d2:	4553      	cmp	r3, sl
 80079d4:	db37      	blt.n	8007a46 <__lshift+0xbe>
 80079d6:	6920      	ldr	r0, [r4, #16]
 80079d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079dc:	f104 0314 	add.w	r3, r4, #20
 80079e0:	f019 091f 	ands.w	r9, r9, #31
 80079e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80079ec:	d02f      	beq.n	8007a4e <__lshift+0xc6>
 80079ee:	468a      	mov	sl, r1
 80079f0:	f04f 0c00 	mov.w	ip, #0
 80079f4:	f1c9 0e20 	rsb	lr, r9, #32
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	fa02 f209 	lsl.w	r2, r2, r9
 80079fe:	ea42 020c 	orr.w	r2, r2, ip
 8007a02:	f84a 2b04 	str.w	r2, [sl], #4
 8007a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a0a:	4298      	cmp	r0, r3
 8007a0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007a10:	d8f2      	bhi.n	80079f8 <__lshift+0x70>
 8007a12:	1b03      	subs	r3, r0, r4
 8007a14:	3b15      	subs	r3, #21
 8007a16:	f023 0303 	bic.w	r3, r3, #3
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	f104 0215 	add.w	r2, r4, #21
 8007a20:	4290      	cmp	r0, r2
 8007a22:	bf38      	it	cc
 8007a24:	2304      	movcc	r3, #4
 8007a26:	f841 c003 	str.w	ip, [r1, r3]
 8007a2a:	f1bc 0f00 	cmp.w	ip, #0
 8007a2e:	d001      	beq.n	8007a34 <__lshift+0xac>
 8007a30:	f108 0602 	add.w	r6, r8, #2
 8007a34:	3e01      	subs	r6, #1
 8007a36:	4638      	mov	r0, r7
 8007a38:	4621      	mov	r1, r4
 8007a3a:	612e      	str	r6, [r5, #16]
 8007a3c:	f7ff fdd6 	bl	80075ec <_Bfree>
 8007a40:	4628      	mov	r0, r5
 8007a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a46:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	e7c1      	b.n	80079d2 <__lshift+0x4a>
 8007a4e:	3904      	subs	r1, #4
 8007a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a54:	4298      	cmp	r0, r3
 8007a56:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a5a:	d8f9      	bhi.n	8007a50 <__lshift+0xc8>
 8007a5c:	e7ea      	b.n	8007a34 <__lshift+0xac>
 8007a5e:	bf00      	nop
 8007a60:	08008e27 	.word	0x08008e27
 8007a64:	08008e38 	.word	0x08008e38

08007a68 <__mcmp>:
 8007a68:	4603      	mov	r3, r0
 8007a6a:	690a      	ldr	r2, [r1, #16]
 8007a6c:	6900      	ldr	r0, [r0, #16]
 8007a6e:	b530      	push	{r4, r5, lr}
 8007a70:	1a80      	subs	r0, r0, r2
 8007a72:	d10d      	bne.n	8007a90 <__mcmp+0x28>
 8007a74:	3314      	adds	r3, #20
 8007a76:	3114      	adds	r1, #20
 8007a78:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a80:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a84:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a88:	4295      	cmp	r5, r2
 8007a8a:	d002      	beq.n	8007a92 <__mcmp+0x2a>
 8007a8c:	d304      	bcc.n	8007a98 <__mcmp+0x30>
 8007a8e:	2001      	movs	r0, #1
 8007a90:	bd30      	pop	{r4, r5, pc}
 8007a92:	42a3      	cmp	r3, r4
 8007a94:	d3f4      	bcc.n	8007a80 <__mcmp+0x18>
 8007a96:	e7fb      	b.n	8007a90 <__mcmp+0x28>
 8007a98:	f04f 30ff 	mov.w	r0, #4294967295
 8007a9c:	e7f8      	b.n	8007a90 <__mcmp+0x28>
	...

08007aa0 <__mdiff>:
 8007aa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa4:	460d      	mov	r5, r1
 8007aa6:	4607      	mov	r7, r0
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	4628      	mov	r0, r5
 8007aac:	4614      	mov	r4, r2
 8007aae:	f7ff ffdb 	bl	8007a68 <__mcmp>
 8007ab2:	1e06      	subs	r6, r0, #0
 8007ab4:	d111      	bne.n	8007ada <__mdiff+0x3a>
 8007ab6:	4631      	mov	r1, r6
 8007ab8:	4638      	mov	r0, r7
 8007aba:	f7ff fd57 	bl	800756c <_Balloc>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	b928      	cbnz	r0, 8007ace <__mdiff+0x2e>
 8007ac2:	f240 2132 	movw	r1, #562	; 0x232
 8007ac6:	4b3a      	ldr	r3, [pc, #232]	; (8007bb0 <__mdiff+0x110>)
 8007ac8:	483a      	ldr	r0, [pc, #232]	; (8007bb4 <__mdiff+0x114>)
 8007aca:	f000 fb2d 	bl	8008128 <__assert_func>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ada:	bfa4      	itt	ge
 8007adc:	4623      	movge	r3, r4
 8007ade:	462c      	movge	r4, r5
 8007ae0:	4638      	mov	r0, r7
 8007ae2:	6861      	ldr	r1, [r4, #4]
 8007ae4:	bfa6      	itte	ge
 8007ae6:	461d      	movge	r5, r3
 8007ae8:	2600      	movge	r6, #0
 8007aea:	2601      	movlt	r6, #1
 8007aec:	f7ff fd3e 	bl	800756c <_Balloc>
 8007af0:	4602      	mov	r2, r0
 8007af2:	b918      	cbnz	r0, 8007afc <__mdiff+0x5c>
 8007af4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007af8:	4b2d      	ldr	r3, [pc, #180]	; (8007bb0 <__mdiff+0x110>)
 8007afa:	e7e5      	b.n	8007ac8 <__mdiff+0x28>
 8007afc:	f102 0814 	add.w	r8, r2, #20
 8007b00:	46c2      	mov	sl, r8
 8007b02:	f04f 0c00 	mov.w	ip, #0
 8007b06:	6927      	ldr	r7, [r4, #16]
 8007b08:	60c6      	str	r6, [r0, #12]
 8007b0a:	692e      	ldr	r6, [r5, #16]
 8007b0c:	f104 0014 	add.w	r0, r4, #20
 8007b10:	f105 0914 	add.w	r9, r5, #20
 8007b14:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007b18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b1c:	3410      	adds	r4, #16
 8007b1e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007b22:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b26:	fa1f f18b 	uxth.w	r1, fp
 8007b2a:	448c      	add	ip, r1
 8007b2c:	b299      	uxth	r1, r3
 8007b2e:	0c1b      	lsrs	r3, r3, #16
 8007b30:	ebac 0101 	sub.w	r1, ip, r1
 8007b34:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b38:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007b3c:	b289      	uxth	r1, r1
 8007b3e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007b42:	454e      	cmp	r6, r9
 8007b44:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007b48:	f84a 3b04 	str.w	r3, [sl], #4
 8007b4c:	d8e7      	bhi.n	8007b1e <__mdiff+0x7e>
 8007b4e:	1b73      	subs	r3, r6, r5
 8007b50:	3b15      	subs	r3, #21
 8007b52:	f023 0303 	bic.w	r3, r3, #3
 8007b56:	3515      	adds	r5, #21
 8007b58:	3304      	adds	r3, #4
 8007b5a:	42ae      	cmp	r6, r5
 8007b5c:	bf38      	it	cc
 8007b5e:	2304      	movcc	r3, #4
 8007b60:	4418      	add	r0, r3
 8007b62:	4443      	add	r3, r8
 8007b64:	461e      	mov	r6, r3
 8007b66:	4605      	mov	r5, r0
 8007b68:	4575      	cmp	r5, lr
 8007b6a:	d30e      	bcc.n	8007b8a <__mdiff+0xea>
 8007b6c:	f10e 0103 	add.w	r1, lr, #3
 8007b70:	1a09      	subs	r1, r1, r0
 8007b72:	f021 0103 	bic.w	r1, r1, #3
 8007b76:	3803      	subs	r0, #3
 8007b78:	4586      	cmp	lr, r0
 8007b7a:	bf38      	it	cc
 8007b7c:	2100      	movcc	r1, #0
 8007b7e:	4419      	add	r1, r3
 8007b80:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007b84:	b18b      	cbz	r3, 8007baa <__mdiff+0x10a>
 8007b86:	6117      	str	r7, [r2, #16]
 8007b88:	e7a4      	b.n	8007ad4 <__mdiff+0x34>
 8007b8a:	f855 8b04 	ldr.w	r8, [r5], #4
 8007b8e:	fa1f f188 	uxth.w	r1, r8
 8007b92:	4461      	add	r1, ip
 8007b94:	140c      	asrs	r4, r1, #16
 8007b96:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007b9a:	b289      	uxth	r1, r1
 8007b9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007ba0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007ba4:	f846 1b04 	str.w	r1, [r6], #4
 8007ba8:	e7de      	b.n	8007b68 <__mdiff+0xc8>
 8007baa:	3f01      	subs	r7, #1
 8007bac:	e7e8      	b.n	8007b80 <__mdiff+0xe0>
 8007bae:	bf00      	nop
 8007bb0:	08008e27 	.word	0x08008e27
 8007bb4:	08008e38 	.word	0x08008e38

08007bb8 <__d2b>:
 8007bb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007bc2:	4690      	mov	r8, r2
 8007bc4:	461d      	mov	r5, r3
 8007bc6:	f7ff fcd1 	bl	800756c <_Balloc>
 8007bca:	4604      	mov	r4, r0
 8007bcc:	b930      	cbnz	r0, 8007bdc <__d2b+0x24>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	f240 310a 	movw	r1, #778	; 0x30a
 8007bd4:	4b24      	ldr	r3, [pc, #144]	; (8007c68 <__d2b+0xb0>)
 8007bd6:	4825      	ldr	r0, [pc, #148]	; (8007c6c <__d2b+0xb4>)
 8007bd8:	f000 faa6 	bl	8008128 <__assert_func>
 8007bdc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007be0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007be4:	bb2d      	cbnz	r5, 8007c32 <__d2b+0x7a>
 8007be6:	9301      	str	r3, [sp, #4]
 8007be8:	f1b8 0300 	subs.w	r3, r8, #0
 8007bec:	d026      	beq.n	8007c3c <__d2b+0x84>
 8007bee:	4668      	mov	r0, sp
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	f7ff fd83 	bl	80076fc <__lo0bits>
 8007bf6:	9900      	ldr	r1, [sp, #0]
 8007bf8:	b1f0      	cbz	r0, 8007c38 <__d2b+0x80>
 8007bfa:	9a01      	ldr	r2, [sp, #4]
 8007bfc:	f1c0 0320 	rsb	r3, r0, #32
 8007c00:	fa02 f303 	lsl.w	r3, r2, r3
 8007c04:	430b      	orrs	r3, r1
 8007c06:	40c2      	lsrs	r2, r0
 8007c08:	6163      	str	r3, [r4, #20]
 8007c0a:	9201      	str	r2, [sp, #4]
 8007c0c:	9b01      	ldr	r3, [sp, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	bf14      	ite	ne
 8007c12:	2102      	movne	r1, #2
 8007c14:	2101      	moveq	r1, #1
 8007c16:	61a3      	str	r3, [r4, #24]
 8007c18:	6121      	str	r1, [r4, #16]
 8007c1a:	b1c5      	cbz	r5, 8007c4e <__d2b+0x96>
 8007c1c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c20:	4405      	add	r5, r0
 8007c22:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c26:	603d      	str	r5, [r7, #0]
 8007c28:	6030      	str	r0, [r6, #0]
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	b002      	add	sp, #8
 8007c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c36:	e7d6      	b.n	8007be6 <__d2b+0x2e>
 8007c38:	6161      	str	r1, [r4, #20]
 8007c3a:	e7e7      	b.n	8007c0c <__d2b+0x54>
 8007c3c:	a801      	add	r0, sp, #4
 8007c3e:	f7ff fd5d 	bl	80076fc <__lo0bits>
 8007c42:	2101      	movs	r1, #1
 8007c44:	9b01      	ldr	r3, [sp, #4]
 8007c46:	6121      	str	r1, [r4, #16]
 8007c48:	6163      	str	r3, [r4, #20]
 8007c4a:	3020      	adds	r0, #32
 8007c4c:	e7e5      	b.n	8007c1a <__d2b+0x62>
 8007c4e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007c52:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c56:	6038      	str	r0, [r7, #0]
 8007c58:	6918      	ldr	r0, [r3, #16]
 8007c5a:	f7ff fd2f 	bl	80076bc <__hi0bits>
 8007c5e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007c62:	6031      	str	r1, [r6, #0]
 8007c64:	e7e1      	b.n	8007c2a <__d2b+0x72>
 8007c66:	bf00      	nop
 8007c68:	08008e27 	.word	0x08008e27
 8007c6c:	08008e38 	.word	0x08008e38

08007c70 <_calloc_r>:
 8007c70:	b570      	push	{r4, r5, r6, lr}
 8007c72:	fba1 5402 	umull	r5, r4, r1, r2
 8007c76:	b934      	cbnz	r4, 8007c86 <_calloc_r+0x16>
 8007c78:	4629      	mov	r1, r5
 8007c7a:	f000 f875 	bl	8007d68 <_malloc_r>
 8007c7e:	4606      	mov	r6, r0
 8007c80:	b928      	cbnz	r0, 8007c8e <_calloc_r+0x1e>
 8007c82:	4630      	mov	r0, r6
 8007c84:	bd70      	pop	{r4, r5, r6, pc}
 8007c86:	220c      	movs	r2, #12
 8007c88:	2600      	movs	r6, #0
 8007c8a:	6002      	str	r2, [r0, #0]
 8007c8c:	e7f9      	b.n	8007c82 <_calloc_r+0x12>
 8007c8e:	462a      	mov	r2, r5
 8007c90:	4621      	mov	r1, r4
 8007c92:	f7fe f93f 	bl	8005f14 <memset>
 8007c96:	e7f4      	b.n	8007c82 <_calloc_r+0x12>

08007c98 <_free_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	2900      	cmp	r1, #0
 8007c9e:	d040      	beq.n	8007d22 <_free_r+0x8a>
 8007ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ca4:	1f0c      	subs	r4, r1, #4
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	bfb8      	it	lt
 8007caa:	18e4      	addlt	r4, r4, r3
 8007cac:	f000 fa98 	bl	80081e0 <__malloc_lock>
 8007cb0:	4a1c      	ldr	r2, [pc, #112]	; (8007d24 <_free_r+0x8c>)
 8007cb2:	6813      	ldr	r3, [r2, #0]
 8007cb4:	b933      	cbnz	r3, 8007cc4 <_free_r+0x2c>
 8007cb6:	6063      	str	r3, [r4, #4]
 8007cb8:	6014      	str	r4, [r2, #0]
 8007cba:	4628      	mov	r0, r5
 8007cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cc0:	f000 ba94 	b.w	80081ec <__malloc_unlock>
 8007cc4:	42a3      	cmp	r3, r4
 8007cc6:	d908      	bls.n	8007cda <_free_r+0x42>
 8007cc8:	6820      	ldr	r0, [r4, #0]
 8007cca:	1821      	adds	r1, r4, r0
 8007ccc:	428b      	cmp	r3, r1
 8007cce:	bf01      	itttt	eq
 8007cd0:	6819      	ldreq	r1, [r3, #0]
 8007cd2:	685b      	ldreq	r3, [r3, #4]
 8007cd4:	1809      	addeq	r1, r1, r0
 8007cd6:	6021      	streq	r1, [r4, #0]
 8007cd8:	e7ed      	b.n	8007cb6 <_free_r+0x1e>
 8007cda:	461a      	mov	r2, r3
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	b10b      	cbz	r3, 8007ce4 <_free_r+0x4c>
 8007ce0:	42a3      	cmp	r3, r4
 8007ce2:	d9fa      	bls.n	8007cda <_free_r+0x42>
 8007ce4:	6811      	ldr	r1, [r2, #0]
 8007ce6:	1850      	adds	r0, r2, r1
 8007ce8:	42a0      	cmp	r0, r4
 8007cea:	d10b      	bne.n	8007d04 <_free_r+0x6c>
 8007cec:	6820      	ldr	r0, [r4, #0]
 8007cee:	4401      	add	r1, r0
 8007cf0:	1850      	adds	r0, r2, r1
 8007cf2:	4283      	cmp	r3, r0
 8007cf4:	6011      	str	r1, [r2, #0]
 8007cf6:	d1e0      	bne.n	8007cba <_free_r+0x22>
 8007cf8:	6818      	ldr	r0, [r3, #0]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	4401      	add	r1, r0
 8007cfe:	6011      	str	r1, [r2, #0]
 8007d00:	6053      	str	r3, [r2, #4]
 8007d02:	e7da      	b.n	8007cba <_free_r+0x22>
 8007d04:	d902      	bls.n	8007d0c <_free_r+0x74>
 8007d06:	230c      	movs	r3, #12
 8007d08:	602b      	str	r3, [r5, #0]
 8007d0a:	e7d6      	b.n	8007cba <_free_r+0x22>
 8007d0c:	6820      	ldr	r0, [r4, #0]
 8007d0e:	1821      	adds	r1, r4, r0
 8007d10:	428b      	cmp	r3, r1
 8007d12:	bf01      	itttt	eq
 8007d14:	6819      	ldreq	r1, [r3, #0]
 8007d16:	685b      	ldreq	r3, [r3, #4]
 8007d18:	1809      	addeq	r1, r1, r0
 8007d1a:	6021      	streq	r1, [r4, #0]
 8007d1c:	6063      	str	r3, [r4, #4]
 8007d1e:	6054      	str	r4, [r2, #4]
 8007d20:	e7cb      	b.n	8007cba <_free_r+0x22>
 8007d22:	bd38      	pop	{r3, r4, r5, pc}
 8007d24:	20000374 	.word	0x20000374

08007d28 <sbrk_aligned>:
 8007d28:	b570      	push	{r4, r5, r6, lr}
 8007d2a:	4e0e      	ldr	r6, [pc, #56]	; (8007d64 <sbrk_aligned+0x3c>)
 8007d2c:	460c      	mov	r4, r1
 8007d2e:	6831      	ldr	r1, [r6, #0]
 8007d30:	4605      	mov	r5, r0
 8007d32:	b911      	cbnz	r1, 8007d3a <sbrk_aligned+0x12>
 8007d34:	f000 f9e8 	bl	8008108 <_sbrk_r>
 8007d38:	6030      	str	r0, [r6, #0]
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	f000 f9e3 	bl	8008108 <_sbrk_r>
 8007d42:	1c43      	adds	r3, r0, #1
 8007d44:	d00a      	beq.n	8007d5c <sbrk_aligned+0x34>
 8007d46:	1cc4      	adds	r4, r0, #3
 8007d48:	f024 0403 	bic.w	r4, r4, #3
 8007d4c:	42a0      	cmp	r0, r4
 8007d4e:	d007      	beq.n	8007d60 <sbrk_aligned+0x38>
 8007d50:	1a21      	subs	r1, r4, r0
 8007d52:	4628      	mov	r0, r5
 8007d54:	f000 f9d8 	bl	8008108 <_sbrk_r>
 8007d58:	3001      	adds	r0, #1
 8007d5a:	d101      	bne.n	8007d60 <sbrk_aligned+0x38>
 8007d5c:	f04f 34ff 	mov.w	r4, #4294967295
 8007d60:	4620      	mov	r0, r4
 8007d62:	bd70      	pop	{r4, r5, r6, pc}
 8007d64:	20000378 	.word	0x20000378

08007d68 <_malloc_r>:
 8007d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d6c:	1ccd      	adds	r5, r1, #3
 8007d6e:	f025 0503 	bic.w	r5, r5, #3
 8007d72:	3508      	adds	r5, #8
 8007d74:	2d0c      	cmp	r5, #12
 8007d76:	bf38      	it	cc
 8007d78:	250c      	movcc	r5, #12
 8007d7a:	2d00      	cmp	r5, #0
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	db01      	blt.n	8007d84 <_malloc_r+0x1c>
 8007d80:	42a9      	cmp	r1, r5
 8007d82:	d905      	bls.n	8007d90 <_malloc_r+0x28>
 8007d84:	230c      	movs	r3, #12
 8007d86:	2600      	movs	r6, #0
 8007d88:	603b      	str	r3, [r7, #0]
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d90:	4e2e      	ldr	r6, [pc, #184]	; (8007e4c <_malloc_r+0xe4>)
 8007d92:	f000 fa25 	bl	80081e0 <__malloc_lock>
 8007d96:	6833      	ldr	r3, [r6, #0]
 8007d98:	461c      	mov	r4, r3
 8007d9a:	bb34      	cbnz	r4, 8007dea <_malloc_r+0x82>
 8007d9c:	4629      	mov	r1, r5
 8007d9e:	4638      	mov	r0, r7
 8007da0:	f7ff ffc2 	bl	8007d28 <sbrk_aligned>
 8007da4:	1c43      	adds	r3, r0, #1
 8007da6:	4604      	mov	r4, r0
 8007da8:	d14d      	bne.n	8007e46 <_malloc_r+0xde>
 8007daa:	6834      	ldr	r4, [r6, #0]
 8007dac:	4626      	mov	r6, r4
 8007dae:	2e00      	cmp	r6, #0
 8007db0:	d140      	bne.n	8007e34 <_malloc_r+0xcc>
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	4631      	mov	r1, r6
 8007db6:	4638      	mov	r0, r7
 8007db8:	eb04 0803 	add.w	r8, r4, r3
 8007dbc:	f000 f9a4 	bl	8008108 <_sbrk_r>
 8007dc0:	4580      	cmp	r8, r0
 8007dc2:	d13a      	bne.n	8007e3a <_malloc_r+0xd2>
 8007dc4:	6821      	ldr	r1, [r4, #0]
 8007dc6:	3503      	adds	r5, #3
 8007dc8:	1a6d      	subs	r5, r5, r1
 8007dca:	f025 0503 	bic.w	r5, r5, #3
 8007dce:	3508      	adds	r5, #8
 8007dd0:	2d0c      	cmp	r5, #12
 8007dd2:	bf38      	it	cc
 8007dd4:	250c      	movcc	r5, #12
 8007dd6:	4638      	mov	r0, r7
 8007dd8:	4629      	mov	r1, r5
 8007dda:	f7ff ffa5 	bl	8007d28 <sbrk_aligned>
 8007dde:	3001      	adds	r0, #1
 8007de0:	d02b      	beq.n	8007e3a <_malloc_r+0xd2>
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	442b      	add	r3, r5
 8007de6:	6023      	str	r3, [r4, #0]
 8007de8:	e00e      	b.n	8007e08 <_malloc_r+0xa0>
 8007dea:	6822      	ldr	r2, [r4, #0]
 8007dec:	1b52      	subs	r2, r2, r5
 8007dee:	d41e      	bmi.n	8007e2e <_malloc_r+0xc6>
 8007df0:	2a0b      	cmp	r2, #11
 8007df2:	d916      	bls.n	8007e22 <_malloc_r+0xba>
 8007df4:	1961      	adds	r1, r4, r5
 8007df6:	42a3      	cmp	r3, r4
 8007df8:	6025      	str	r5, [r4, #0]
 8007dfa:	bf18      	it	ne
 8007dfc:	6059      	strne	r1, [r3, #4]
 8007dfe:	6863      	ldr	r3, [r4, #4]
 8007e00:	bf08      	it	eq
 8007e02:	6031      	streq	r1, [r6, #0]
 8007e04:	5162      	str	r2, [r4, r5]
 8007e06:	604b      	str	r3, [r1, #4]
 8007e08:	4638      	mov	r0, r7
 8007e0a:	f104 060b 	add.w	r6, r4, #11
 8007e0e:	f000 f9ed 	bl	80081ec <__malloc_unlock>
 8007e12:	f026 0607 	bic.w	r6, r6, #7
 8007e16:	1d23      	adds	r3, r4, #4
 8007e18:	1af2      	subs	r2, r6, r3
 8007e1a:	d0b6      	beq.n	8007d8a <_malloc_r+0x22>
 8007e1c:	1b9b      	subs	r3, r3, r6
 8007e1e:	50a3      	str	r3, [r4, r2]
 8007e20:	e7b3      	b.n	8007d8a <_malloc_r+0x22>
 8007e22:	6862      	ldr	r2, [r4, #4]
 8007e24:	42a3      	cmp	r3, r4
 8007e26:	bf0c      	ite	eq
 8007e28:	6032      	streq	r2, [r6, #0]
 8007e2a:	605a      	strne	r2, [r3, #4]
 8007e2c:	e7ec      	b.n	8007e08 <_malloc_r+0xa0>
 8007e2e:	4623      	mov	r3, r4
 8007e30:	6864      	ldr	r4, [r4, #4]
 8007e32:	e7b2      	b.n	8007d9a <_malloc_r+0x32>
 8007e34:	4634      	mov	r4, r6
 8007e36:	6876      	ldr	r6, [r6, #4]
 8007e38:	e7b9      	b.n	8007dae <_malloc_r+0x46>
 8007e3a:	230c      	movs	r3, #12
 8007e3c:	4638      	mov	r0, r7
 8007e3e:	603b      	str	r3, [r7, #0]
 8007e40:	f000 f9d4 	bl	80081ec <__malloc_unlock>
 8007e44:	e7a1      	b.n	8007d8a <_malloc_r+0x22>
 8007e46:	6025      	str	r5, [r4, #0]
 8007e48:	e7de      	b.n	8007e08 <_malloc_r+0xa0>
 8007e4a:	bf00      	nop
 8007e4c:	20000374 	.word	0x20000374

08007e50 <__ssputs_r>:
 8007e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e54:	688e      	ldr	r6, [r1, #8]
 8007e56:	4682      	mov	sl, r0
 8007e58:	429e      	cmp	r6, r3
 8007e5a:	460c      	mov	r4, r1
 8007e5c:	4690      	mov	r8, r2
 8007e5e:	461f      	mov	r7, r3
 8007e60:	d838      	bhi.n	8007ed4 <__ssputs_r+0x84>
 8007e62:	898a      	ldrh	r2, [r1, #12]
 8007e64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e68:	d032      	beq.n	8007ed0 <__ssputs_r+0x80>
 8007e6a:	6825      	ldr	r5, [r4, #0]
 8007e6c:	6909      	ldr	r1, [r1, #16]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	eba5 0901 	sub.w	r9, r5, r1
 8007e74:	6965      	ldr	r5, [r4, #20]
 8007e76:	444b      	add	r3, r9
 8007e78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e80:	106d      	asrs	r5, r5, #1
 8007e82:	429d      	cmp	r5, r3
 8007e84:	bf38      	it	cc
 8007e86:	461d      	movcc	r5, r3
 8007e88:	0553      	lsls	r3, r2, #21
 8007e8a:	d531      	bpl.n	8007ef0 <__ssputs_r+0xa0>
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	f7ff ff6b 	bl	8007d68 <_malloc_r>
 8007e92:	4606      	mov	r6, r0
 8007e94:	b950      	cbnz	r0, 8007eac <__ssputs_r+0x5c>
 8007e96:	230c      	movs	r3, #12
 8007e98:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9c:	f8ca 3000 	str.w	r3, [sl]
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ea6:	81a3      	strh	r3, [r4, #12]
 8007ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eac:	464a      	mov	r2, r9
 8007eae:	6921      	ldr	r1, [r4, #16]
 8007eb0:	f7ff fb4e 	bl	8007550 <memcpy>
 8007eb4:	89a3      	ldrh	r3, [r4, #12]
 8007eb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ebe:	81a3      	strh	r3, [r4, #12]
 8007ec0:	6126      	str	r6, [r4, #16]
 8007ec2:	444e      	add	r6, r9
 8007ec4:	6026      	str	r6, [r4, #0]
 8007ec6:	463e      	mov	r6, r7
 8007ec8:	6165      	str	r5, [r4, #20]
 8007eca:	eba5 0509 	sub.w	r5, r5, r9
 8007ece:	60a5      	str	r5, [r4, #8]
 8007ed0:	42be      	cmp	r6, r7
 8007ed2:	d900      	bls.n	8007ed6 <__ssputs_r+0x86>
 8007ed4:	463e      	mov	r6, r7
 8007ed6:	4632      	mov	r2, r6
 8007ed8:	4641      	mov	r1, r8
 8007eda:	6820      	ldr	r0, [r4, #0]
 8007edc:	f000 f966 	bl	80081ac <memmove>
 8007ee0:	68a3      	ldr	r3, [r4, #8]
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	1b9b      	subs	r3, r3, r6
 8007ee6:	60a3      	str	r3, [r4, #8]
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	4433      	add	r3, r6
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	e7db      	b.n	8007ea8 <__ssputs_r+0x58>
 8007ef0:	462a      	mov	r2, r5
 8007ef2:	f000 f981 	bl	80081f8 <_realloc_r>
 8007ef6:	4606      	mov	r6, r0
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	d1e1      	bne.n	8007ec0 <__ssputs_r+0x70>
 8007efc:	4650      	mov	r0, sl
 8007efe:	6921      	ldr	r1, [r4, #16]
 8007f00:	f7ff feca 	bl	8007c98 <_free_r>
 8007f04:	e7c7      	b.n	8007e96 <__ssputs_r+0x46>
	...

08007f08 <_svfiprintf_r>:
 8007f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	4698      	mov	r8, r3
 8007f0e:	898b      	ldrh	r3, [r1, #12]
 8007f10:	4607      	mov	r7, r0
 8007f12:	061b      	lsls	r3, r3, #24
 8007f14:	460d      	mov	r5, r1
 8007f16:	4614      	mov	r4, r2
 8007f18:	b09d      	sub	sp, #116	; 0x74
 8007f1a:	d50e      	bpl.n	8007f3a <_svfiprintf_r+0x32>
 8007f1c:	690b      	ldr	r3, [r1, #16]
 8007f1e:	b963      	cbnz	r3, 8007f3a <_svfiprintf_r+0x32>
 8007f20:	2140      	movs	r1, #64	; 0x40
 8007f22:	f7ff ff21 	bl	8007d68 <_malloc_r>
 8007f26:	6028      	str	r0, [r5, #0]
 8007f28:	6128      	str	r0, [r5, #16]
 8007f2a:	b920      	cbnz	r0, 8007f36 <_svfiprintf_r+0x2e>
 8007f2c:	230c      	movs	r3, #12
 8007f2e:	603b      	str	r3, [r7, #0]
 8007f30:	f04f 30ff 	mov.w	r0, #4294967295
 8007f34:	e0d1      	b.n	80080da <_svfiprintf_r+0x1d2>
 8007f36:	2340      	movs	r3, #64	; 0x40
 8007f38:	616b      	str	r3, [r5, #20]
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f3e:	2320      	movs	r3, #32
 8007f40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f44:	2330      	movs	r3, #48	; 0x30
 8007f46:	f04f 0901 	mov.w	r9, #1
 8007f4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80080f4 <_svfiprintf_r+0x1ec>
 8007f52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f56:	4623      	mov	r3, r4
 8007f58:	469a      	mov	sl, r3
 8007f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f5e:	b10a      	cbz	r2, 8007f64 <_svfiprintf_r+0x5c>
 8007f60:	2a25      	cmp	r2, #37	; 0x25
 8007f62:	d1f9      	bne.n	8007f58 <_svfiprintf_r+0x50>
 8007f64:	ebba 0b04 	subs.w	fp, sl, r4
 8007f68:	d00b      	beq.n	8007f82 <_svfiprintf_r+0x7a>
 8007f6a:	465b      	mov	r3, fp
 8007f6c:	4622      	mov	r2, r4
 8007f6e:	4629      	mov	r1, r5
 8007f70:	4638      	mov	r0, r7
 8007f72:	f7ff ff6d 	bl	8007e50 <__ssputs_r>
 8007f76:	3001      	adds	r0, #1
 8007f78:	f000 80aa 	beq.w	80080d0 <_svfiprintf_r+0x1c8>
 8007f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f7e:	445a      	add	r2, fp
 8007f80:	9209      	str	r2, [sp, #36]	; 0x24
 8007f82:	f89a 3000 	ldrb.w	r3, [sl]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 80a2 	beq.w	80080d0 <_svfiprintf_r+0x1c8>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f96:	f10a 0a01 	add.w	sl, sl, #1
 8007f9a:	9304      	str	r3, [sp, #16]
 8007f9c:	9307      	str	r3, [sp, #28]
 8007f9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fa2:	931a      	str	r3, [sp, #104]	; 0x68
 8007fa4:	4654      	mov	r4, sl
 8007fa6:	2205      	movs	r2, #5
 8007fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fac:	4851      	ldr	r0, [pc, #324]	; (80080f4 <_svfiprintf_r+0x1ec>)
 8007fae:	f7ff fac1 	bl	8007534 <memchr>
 8007fb2:	9a04      	ldr	r2, [sp, #16]
 8007fb4:	b9d8      	cbnz	r0, 8007fee <_svfiprintf_r+0xe6>
 8007fb6:	06d0      	lsls	r0, r2, #27
 8007fb8:	bf44      	itt	mi
 8007fba:	2320      	movmi	r3, #32
 8007fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fc0:	0711      	lsls	r1, r2, #28
 8007fc2:	bf44      	itt	mi
 8007fc4:	232b      	movmi	r3, #43	; 0x2b
 8007fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fca:	f89a 3000 	ldrb.w	r3, [sl]
 8007fce:	2b2a      	cmp	r3, #42	; 0x2a
 8007fd0:	d015      	beq.n	8007ffe <_svfiprintf_r+0xf6>
 8007fd2:	4654      	mov	r4, sl
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	f04f 0c0a 	mov.w	ip, #10
 8007fda:	9a07      	ldr	r2, [sp, #28]
 8007fdc:	4621      	mov	r1, r4
 8007fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fe2:	3b30      	subs	r3, #48	; 0x30
 8007fe4:	2b09      	cmp	r3, #9
 8007fe6:	d94e      	bls.n	8008086 <_svfiprintf_r+0x17e>
 8007fe8:	b1b0      	cbz	r0, 8008018 <_svfiprintf_r+0x110>
 8007fea:	9207      	str	r2, [sp, #28]
 8007fec:	e014      	b.n	8008018 <_svfiprintf_r+0x110>
 8007fee:	eba0 0308 	sub.w	r3, r0, r8
 8007ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	46a2      	mov	sl, r4
 8007ffa:	9304      	str	r3, [sp, #16]
 8007ffc:	e7d2      	b.n	8007fa4 <_svfiprintf_r+0x9c>
 8007ffe:	9b03      	ldr	r3, [sp, #12]
 8008000:	1d19      	adds	r1, r3, #4
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	9103      	str	r1, [sp, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	bfbb      	ittet	lt
 800800a:	425b      	neglt	r3, r3
 800800c:	f042 0202 	orrlt.w	r2, r2, #2
 8008010:	9307      	strge	r3, [sp, #28]
 8008012:	9307      	strlt	r3, [sp, #28]
 8008014:	bfb8      	it	lt
 8008016:	9204      	strlt	r2, [sp, #16]
 8008018:	7823      	ldrb	r3, [r4, #0]
 800801a:	2b2e      	cmp	r3, #46	; 0x2e
 800801c:	d10c      	bne.n	8008038 <_svfiprintf_r+0x130>
 800801e:	7863      	ldrb	r3, [r4, #1]
 8008020:	2b2a      	cmp	r3, #42	; 0x2a
 8008022:	d135      	bne.n	8008090 <_svfiprintf_r+0x188>
 8008024:	9b03      	ldr	r3, [sp, #12]
 8008026:	3402      	adds	r4, #2
 8008028:	1d1a      	adds	r2, r3, #4
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	9203      	str	r2, [sp, #12]
 800802e:	2b00      	cmp	r3, #0
 8008030:	bfb8      	it	lt
 8008032:	f04f 33ff 	movlt.w	r3, #4294967295
 8008036:	9305      	str	r3, [sp, #20]
 8008038:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80080f8 <_svfiprintf_r+0x1f0>
 800803c:	2203      	movs	r2, #3
 800803e:	4650      	mov	r0, sl
 8008040:	7821      	ldrb	r1, [r4, #0]
 8008042:	f7ff fa77 	bl	8007534 <memchr>
 8008046:	b140      	cbz	r0, 800805a <_svfiprintf_r+0x152>
 8008048:	2340      	movs	r3, #64	; 0x40
 800804a:	eba0 000a 	sub.w	r0, r0, sl
 800804e:	fa03 f000 	lsl.w	r0, r3, r0
 8008052:	9b04      	ldr	r3, [sp, #16]
 8008054:	3401      	adds	r4, #1
 8008056:	4303      	orrs	r3, r0
 8008058:	9304      	str	r3, [sp, #16]
 800805a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800805e:	2206      	movs	r2, #6
 8008060:	4826      	ldr	r0, [pc, #152]	; (80080fc <_svfiprintf_r+0x1f4>)
 8008062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008066:	f7ff fa65 	bl	8007534 <memchr>
 800806a:	2800      	cmp	r0, #0
 800806c:	d038      	beq.n	80080e0 <_svfiprintf_r+0x1d8>
 800806e:	4b24      	ldr	r3, [pc, #144]	; (8008100 <_svfiprintf_r+0x1f8>)
 8008070:	bb1b      	cbnz	r3, 80080ba <_svfiprintf_r+0x1b2>
 8008072:	9b03      	ldr	r3, [sp, #12]
 8008074:	3307      	adds	r3, #7
 8008076:	f023 0307 	bic.w	r3, r3, #7
 800807a:	3308      	adds	r3, #8
 800807c:	9303      	str	r3, [sp, #12]
 800807e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008080:	4433      	add	r3, r6
 8008082:	9309      	str	r3, [sp, #36]	; 0x24
 8008084:	e767      	b.n	8007f56 <_svfiprintf_r+0x4e>
 8008086:	460c      	mov	r4, r1
 8008088:	2001      	movs	r0, #1
 800808a:	fb0c 3202 	mla	r2, ip, r2, r3
 800808e:	e7a5      	b.n	8007fdc <_svfiprintf_r+0xd4>
 8008090:	2300      	movs	r3, #0
 8008092:	f04f 0c0a 	mov.w	ip, #10
 8008096:	4619      	mov	r1, r3
 8008098:	3401      	adds	r4, #1
 800809a:	9305      	str	r3, [sp, #20]
 800809c:	4620      	mov	r0, r4
 800809e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080a2:	3a30      	subs	r2, #48	; 0x30
 80080a4:	2a09      	cmp	r2, #9
 80080a6:	d903      	bls.n	80080b0 <_svfiprintf_r+0x1a8>
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d0c5      	beq.n	8008038 <_svfiprintf_r+0x130>
 80080ac:	9105      	str	r1, [sp, #20]
 80080ae:	e7c3      	b.n	8008038 <_svfiprintf_r+0x130>
 80080b0:	4604      	mov	r4, r0
 80080b2:	2301      	movs	r3, #1
 80080b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80080b8:	e7f0      	b.n	800809c <_svfiprintf_r+0x194>
 80080ba:	ab03      	add	r3, sp, #12
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	462a      	mov	r2, r5
 80080c0:	4638      	mov	r0, r7
 80080c2:	4b10      	ldr	r3, [pc, #64]	; (8008104 <_svfiprintf_r+0x1fc>)
 80080c4:	a904      	add	r1, sp, #16
 80080c6:	f7fd ffcb 	bl	8006060 <_printf_float>
 80080ca:	1c42      	adds	r2, r0, #1
 80080cc:	4606      	mov	r6, r0
 80080ce:	d1d6      	bne.n	800807e <_svfiprintf_r+0x176>
 80080d0:	89ab      	ldrh	r3, [r5, #12]
 80080d2:	065b      	lsls	r3, r3, #25
 80080d4:	f53f af2c 	bmi.w	8007f30 <_svfiprintf_r+0x28>
 80080d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080da:	b01d      	add	sp, #116	; 0x74
 80080dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e0:	ab03      	add	r3, sp, #12
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	462a      	mov	r2, r5
 80080e6:	4638      	mov	r0, r7
 80080e8:	4b06      	ldr	r3, [pc, #24]	; (8008104 <_svfiprintf_r+0x1fc>)
 80080ea:	a904      	add	r1, sp, #16
 80080ec:	f7fe fa54 	bl	8006598 <_printf_i>
 80080f0:	e7eb      	b.n	80080ca <_svfiprintf_r+0x1c2>
 80080f2:	bf00      	nop
 80080f4:	08008f94 	.word	0x08008f94
 80080f8:	08008f9a 	.word	0x08008f9a
 80080fc:	08008f9e 	.word	0x08008f9e
 8008100:	08006061 	.word	0x08006061
 8008104:	08007e51 	.word	0x08007e51

08008108 <_sbrk_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	2300      	movs	r3, #0
 800810c:	4d05      	ldr	r5, [pc, #20]	; (8008124 <_sbrk_r+0x1c>)
 800810e:	4604      	mov	r4, r0
 8008110:	4608      	mov	r0, r1
 8008112:	602b      	str	r3, [r5, #0]
 8008114:	f7fa fbc8 	bl	80028a8 <_sbrk>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d102      	bne.n	8008122 <_sbrk_r+0x1a>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	b103      	cbz	r3, 8008122 <_sbrk_r+0x1a>
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	2000037c 	.word	0x2000037c

08008128 <__assert_func>:
 8008128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800812a:	4614      	mov	r4, r2
 800812c:	461a      	mov	r2, r3
 800812e:	4b09      	ldr	r3, [pc, #36]	; (8008154 <__assert_func+0x2c>)
 8008130:	4605      	mov	r5, r0
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68d8      	ldr	r0, [r3, #12]
 8008136:	b14c      	cbz	r4, 800814c <__assert_func+0x24>
 8008138:	4b07      	ldr	r3, [pc, #28]	; (8008158 <__assert_func+0x30>)
 800813a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800813e:	9100      	str	r1, [sp, #0]
 8008140:	462b      	mov	r3, r5
 8008142:	4906      	ldr	r1, [pc, #24]	; (800815c <__assert_func+0x34>)
 8008144:	f000 f80e 	bl	8008164 <fiprintf>
 8008148:	f000 faaa 	bl	80086a0 <abort>
 800814c:	4b04      	ldr	r3, [pc, #16]	; (8008160 <__assert_func+0x38>)
 800814e:	461c      	mov	r4, r3
 8008150:	e7f3      	b.n	800813a <__assert_func+0x12>
 8008152:	bf00      	nop
 8008154:	20000010 	.word	0x20000010
 8008158:	08008fa5 	.word	0x08008fa5
 800815c:	08008fb2 	.word	0x08008fb2
 8008160:	08008fe0 	.word	0x08008fe0

08008164 <fiprintf>:
 8008164:	b40e      	push	{r1, r2, r3}
 8008166:	b503      	push	{r0, r1, lr}
 8008168:	4601      	mov	r1, r0
 800816a:	ab03      	add	r3, sp, #12
 800816c:	4805      	ldr	r0, [pc, #20]	; (8008184 <fiprintf+0x20>)
 800816e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008172:	6800      	ldr	r0, [r0, #0]
 8008174:	9301      	str	r3, [sp, #4]
 8008176:	f000 f895 	bl	80082a4 <_vfiprintf_r>
 800817a:	b002      	add	sp, #8
 800817c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008180:	b003      	add	sp, #12
 8008182:	4770      	bx	lr
 8008184:	20000010 	.word	0x20000010

08008188 <__ascii_mbtowc>:
 8008188:	b082      	sub	sp, #8
 800818a:	b901      	cbnz	r1, 800818e <__ascii_mbtowc+0x6>
 800818c:	a901      	add	r1, sp, #4
 800818e:	b142      	cbz	r2, 80081a2 <__ascii_mbtowc+0x1a>
 8008190:	b14b      	cbz	r3, 80081a6 <__ascii_mbtowc+0x1e>
 8008192:	7813      	ldrb	r3, [r2, #0]
 8008194:	600b      	str	r3, [r1, #0]
 8008196:	7812      	ldrb	r2, [r2, #0]
 8008198:	1e10      	subs	r0, r2, #0
 800819a:	bf18      	it	ne
 800819c:	2001      	movne	r0, #1
 800819e:	b002      	add	sp, #8
 80081a0:	4770      	bx	lr
 80081a2:	4610      	mov	r0, r2
 80081a4:	e7fb      	b.n	800819e <__ascii_mbtowc+0x16>
 80081a6:	f06f 0001 	mvn.w	r0, #1
 80081aa:	e7f8      	b.n	800819e <__ascii_mbtowc+0x16>

080081ac <memmove>:
 80081ac:	4288      	cmp	r0, r1
 80081ae:	b510      	push	{r4, lr}
 80081b0:	eb01 0402 	add.w	r4, r1, r2
 80081b4:	d902      	bls.n	80081bc <memmove+0x10>
 80081b6:	4284      	cmp	r4, r0
 80081b8:	4623      	mov	r3, r4
 80081ba:	d807      	bhi.n	80081cc <memmove+0x20>
 80081bc:	1e43      	subs	r3, r0, #1
 80081be:	42a1      	cmp	r1, r4
 80081c0:	d008      	beq.n	80081d4 <memmove+0x28>
 80081c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081ca:	e7f8      	b.n	80081be <memmove+0x12>
 80081cc:	4601      	mov	r1, r0
 80081ce:	4402      	add	r2, r0
 80081d0:	428a      	cmp	r2, r1
 80081d2:	d100      	bne.n	80081d6 <memmove+0x2a>
 80081d4:	bd10      	pop	{r4, pc}
 80081d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081de:	e7f7      	b.n	80081d0 <memmove+0x24>

080081e0 <__malloc_lock>:
 80081e0:	4801      	ldr	r0, [pc, #4]	; (80081e8 <__malloc_lock+0x8>)
 80081e2:	f000 bc19 	b.w	8008a18 <__retarget_lock_acquire_recursive>
 80081e6:	bf00      	nop
 80081e8:	20000380 	.word	0x20000380

080081ec <__malloc_unlock>:
 80081ec:	4801      	ldr	r0, [pc, #4]	; (80081f4 <__malloc_unlock+0x8>)
 80081ee:	f000 bc14 	b.w	8008a1a <__retarget_lock_release_recursive>
 80081f2:	bf00      	nop
 80081f4:	20000380 	.word	0x20000380

080081f8 <_realloc_r>:
 80081f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081fc:	4680      	mov	r8, r0
 80081fe:	4614      	mov	r4, r2
 8008200:	460e      	mov	r6, r1
 8008202:	b921      	cbnz	r1, 800820e <_realloc_r+0x16>
 8008204:	4611      	mov	r1, r2
 8008206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800820a:	f7ff bdad 	b.w	8007d68 <_malloc_r>
 800820e:	b92a      	cbnz	r2, 800821c <_realloc_r+0x24>
 8008210:	f7ff fd42 	bl	8007c98 <_free_r>
 8008214:	4625      	mov	r5, r4
 8008216:	4628      	mov	r0, r5
 8008218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800821c:	f000 fc64 	bl	8008ae8 <_malloc_usable_size_r>
 8008220:	4284      	cmp	r4, r0
 8008222:	4607      	mov	r7, r0
 8008224:	d802      	bhi.n	800822c <_realloc_r+0x34>
 8008226:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800822a:	d812      	bhi.n	8008252 <_realloc_r+0x5a>
 800822c:	4621      	mov	r1, r4
 800822e:	4640      	mov	r0, r8
 8008230:	f7ff fd9a 	bl	8007d68 <_malloc_r>
 8008234:	4605      	mov	r5, r0
 8008236:	2800      	cmp	r0, #0
 8008238:	d0ed      	beq.n	8008216 <_realloc_r+0x1e>
 800823a:	42bc      	cmp	r4, r7
 800823c:	4622      	mov	r2, r4
 800823e:	4631      	mov	r1, r6
 8008240:	bf28      	it	cs
 8008242:	463a      	movcs	r2, r7
 8008244:	f7ff f984 	bl	8007550 <memcpy>
 8008248:	4631      	mov	r1, r6
 800824a:	4640      	mov	r0, r8
 800824c:	f7ff fd24 	bl	8007c98 <_free_r>
 8008250:	e7e1      	b.n	8008216 <_realloc_r+0x1e>
 8008252:	4635      	mov	r5, r6
 8008254:	e7df      	b.n	8008216 <_realloc_r+0x1e>

08008256 <__sfputc_r>:
 8008256:	6893      	ldr	r3, [r2, #8]
 8008258:	b410      	push	{r4}
 800825a:	3b01      	subs	r3, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	6093      	str	r3, [r2, #8]
 8008260:	da07      	bge.n	8008272 <__sfputc_r+0x1c>
 8008262:	6994      	ldr	r4, [r2, #24]
 8008264:	42a3      	cmp	r3, r4
 8008266:	db01      	blt.n	800826c <__sfputc_r+0x16>
 8008268:	290a      	cmp	r1, #10
 800826a:	d102      	bne.n	8008272 <__sfputc_r+0x1c>
 800826c:	bc10      	pop	{r4}
 800826e:	f000 b949 	b.w	8008504 <__swbuf_r>
 8008272:	6813      	ldr	r3, [r2, #0]
 8008274:	1c58      	adds	r0, r3, #1
 8008276:	6010      	str	r0, [r2, #0]
 8008278:	7019      	strb	r1, [r3, #0]
 800827a:	4608      	mov	r0, r1
 800827c:	bc10      	pop	{r4}
 800827e:	4770      	bx	lr

08008280 <__sfputs_r>:
 8008280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008282:	4606      	mov	r6, r0
 8008284:	460f      	mov	r7, r1
 8008286:	4614      	mov	r4, r2
 8008288:	18d5      	adds	r5, r2, r3
 800828a:	42ac      	cmp	r4, r5
 800828c:	d101      	bne.n	8008292 <__sfputs_r+0x12>
 800828e:	2000      	movs	r0, #0
 8008290:	e007      	b.n	80082a2 <__sfputs_r+0x22>
 8008292:	463a      	mov	r2, r7
 8008294:	4630      	mov	r0, r6
 8008296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800829a:	f7ff ffdc 	bl	8008256 <__sfputc_r>
 800829e:	1c43      	adds	r3, r0, #1
 80082a0:	d1f3      	bne.n	800828a <__sfputs_r+0xa>
 80082a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080082a4 <_vfiprintf_r>:
 80082a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a8:	460d      	mov	r5, r1
 80082aa:	4614      	mov	r4, r2
 80082ac:	4698      	mov	r8, r3
 80082ae:	4606      	mov	r6, r0
 80082b0:	b09d      	sub	sp, #116	; 0x74
 80082b2:	b118      	cbz	r0, 80082bc <_vfiprintf_r+0x18>
 80082b4:	6983      	ldr	r3, [r0, #24]
 80082b6:	b90b      	cbnz	r3, 80082bc <_vfiprintf_r+0x18>
 80082b8:	f000 fb10 	bl	80088dc <__sinit>
 80082bc:	4b89      	ldr	r3, [pc, #548]	; (80084e4 <_vfiprintf_r+0x240>)
 80082be:	429d      	cmp	r5, r3
 80082c0:	d11b      	bne.n	80082fa <_vfiprintf_r+0x56>
 80082c2:	6875      	ldr	r5, [r6, #4]
 80082c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082c6:	07d9      	lsls	r1, r3, #31
 80082c8:	d405      	bmi.n	80082d6 <_vfiprintf_r+0x32>
 80082ca:	89ab      	ldrh	r3, [r5, #12]
 80082cc:	059a      	lsls	r2, r3, #22
 80082ce:	d402      	bmi.n	80082d6 <_vfiprintf_r+0x32>
 80082d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082d2:	f000 fba1 	bl	8008a18 <__retarget_lock_acquire_recursive>
 80082d6:	89ab      	ldrh	r3, [r5, #12]
 80082d8:	071b      	lsls	r3, r3, #28
 80082da:	d501      	bpl.n	80082e0 <_vfiprintf_r+0x3c>
 80082dc:	692b      	ldr	r3, [r5, #16]
 80082de:	b9eb      	cbnz	r3, 800831c <_vfiprintf_r+0x78>
 80082e0:	4629      	mov	r1, r5
 80082e2:	4630      	mov	r0, r6
 80082e4:	f000 f96e 	bl	80085c4 <__swsetup_r>
 80082e8:	b1c0      	cbz	r0, 800831c <_vfiprintf_r+0x78>
 80082ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082ec:	07dc      	lsls	r4, r3, #31
 80082ee:	d50e      	bpl.n	800830e <_vfiprintf_r+0x6a>
 80082f0:	f04f 30ff 	mov.w	r0, #4294967295
 80082f4:	b01d      	add	sp, #116	; 0x74
 80082f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fa:	4b7b      	ldr	r3, [pc, #492]	; (80084e8 <_vfiprintf_r+0x244>)
 80082fc:	429d      	cmp	r5, r3
 80082fe:	d101      	bne.n	8008304 <_vfiprintf_r+0x60>
 8008300:	68b5      	ldr	r5, [r6, #8]
 8008302:	e7df      	b.n	80082c4 <_vfiprintf_r+0x20>
 8008304:	4b79      	ldr	r3, [pc, #484]	; (80084ec <_vfiprintf_r+0x248>)
 8008306:	429d      	cmp	r5, r3
 8008308:	bf08      	it	eq
 800830a:	68f5      	ldreq	r5, [r6, #12]
 800830c:	e7da      	b.n	80082c4 <_vfiprintf_r+0x20>
 800830e:	89ab      	ldrh	r3, [r5, #12]
 8008310:	0598      	lsls	r0, r3, #22
 8008312:	d4ed      	bmi.n	80082f0 <_vfiprintf_r+0x4c>
 8008314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008316:	f000 fb80 	bl	8008a1a <__retarget_lock_release_recursive>
 800831a:	e7e9      	b.n	80082f0 <_vfiprintf_r+0x4c>
 800831c:	2300      	movs	r3, #0
 800831e:	9309      	str	r3, [sp, #36]	; 0x24
 8008320:	2320      	movs	r3, #32
 8008322:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008326:	2330      	movs	r3, #48	; 0x30
 8008328:	f04f 0901 	mov.w	r9, #1
 800832c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008330:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80084f0 <_vfiprintf_r+0x24c>
 8008334:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008338:	4623      	mov	r3, r4
 800833a:	469a      	mov	sl, r3
 800833c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008340:	b10a      	cbz	r2, 8008346 <_vfiprintf_r+0xa2>
 8008342:	2a25      	cmp	r2, #37	; 0x25
 8008344:	d1f9      	bne.n	800833a <_vfiprintf_r+0x96>
 8008346:	ebba 0b04 	subs.w	fp, sl, r4
 800834a:	d00b      	beq.n	8008364 <_vfiprintf_r+0xc0>
 800834c:	465b      	mov	r3, fp
 800834e:	4622      	mov	r2, r4
 8008350:	4629      	mov	r1, r5
 8008352:	4630      	mov	r0, r6
 8008354:	f7ff ff94 	bl	8008280 <__sfputs_r>
 8008358:	3001      	adds	r0, #1
 800835a:	f000 80aa 	beq.w	80084b2 <_vfiprintf_r+0x20e>
 800835e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008360:	445a      	add	r2, fp
 8008362:	9209      	str	r2, [sp, #36]	; 0x24
 8008364:	f89a 3000 	ldrb.w	r3, [sl]
 8008368:	2b00      	cmp	r3, #0
 800836a:	f000 80a2 	beq.w	80084b2 <_vfiprintf_r+0x20e>
 800836e:	2300      	movs	r3, #0
 8008370:	f04f 32ff 	mov.w	r2, #4294967295
 8008374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008378:	f10a 0a01 	add.w	sl, sl, #1
 800837c:	9304      	str	r3, [sp, #16]
 800837e:	9307      	str	r3, [sp, #28]
 8008380:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008384:	931a      	str	r3, [sp, #104]	; 0x68
 8008386:	4654      	mov	r4, sl
 8008388:	2205      	movs	r2, #5
 800838a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800838e:	4858      	ldr	r0, [pc, #352]	; (80084f0 <_vfiprintf_r+0x24c>)
 8008390:	f7ff f8d0 	bl	8007534 <memchr>
 8008394:	9a04      	ldr	r2, [sp, #16]
 8008396:	b9d8      	cbnz	r0, 80083d0 <_vfiprintf_r+0x12c>
 8008398:	06d1      	lsls	r1, r2, #27
 800839a:	bf44      	itt	mi
 800839c:	2320      	movmi	r3, #32
 800839e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083a2:	0713      	lsls	r3, r2, #28
 80083a4:	bf44      	itt	mi
 80083a6:	232b      	movmi	r3, #43	; 0x2b
 80083a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083ac:	f89a 3000 	ldrb.w	r3, [sl]
 80083b0:	2b2a      	cmp	r3, #42	; 0x2a
 80083b2:	d015      	beq.n	80083e0 <_vfiprintf_r+0x13c>
 80083b4:	4654      	mov	r4, sl
 80083b6:	2000      	movs	r0, #0
 80083b8:	f04f 0c0a 	mov.w	ip, #10
 80083bc:	9a07      	ldr	r2, [sp, #28]
 80083be:	4621      	mov	r1, r4
 80083c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083c4:	3b30      	subs	r3, #48	; 0x30
 80083c6:	2b09      	cmp	r3, #9
 80083c8:	d94e      	bls.n	8008468 <_vfiprintf_r+0x1c4>
 80083ca:	b1b0      	cbz	r0, 80083fa <_vfiprintf_r+0x156>
 80083cc:	9207      	str	r2, [sp, #28]
 80083ce:	e014      	b.n	80083fa <_vfiprintf_r+0x156>
 80083d0:	eba0 0308 	sub.w	r3, r0, r8
 80083d4:	fa09 f303 	lsl.w	r3, r9, r3
 80083d8:	4313      	orrs	r3, r2
 80083da:	46a2      	mov	sl, r4
 80083dc:	9304      	str	r3, [sp, #16]
 80083de:	e7d2      	b.n	8008386 <_vfiprintf_r+0xe2>
 80083e0:	9b03      	ldr	r3, [sp, #12]
 80083e2:	1d19      	adds	r1, r3, #4
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	9103      	str	r1, [sp, #12]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	bfbb      	ittet	lt
 80083ec:	425b      	neglt	r3, r3
 80083ee:	f042 0202 	orrlt.w	r2, r2, #2
 80083f2:	9307      	strge	r3, [sp, #28]
 80083f4:	9307      	strlt	r3, [sp, #28]
 80083f6:	bfb8      	it	lt
 80083f8:	9204      	strlt	r2, [sp, #16]
 80083fa:	7823      	ldrb	r3, [r4, #0]
 80083fc:	2b2e      	cmp	r3, #46	; 0x2e
 80083fe:	d10c      	bne.n	800841a <_vfiprintf_r+0x176>
 8008400:	7863      	ldrb	r3, [r4, #1]
 8008402:	2b2a      	cmp	r3, #42	; 0x2a
 8008404:	d135      	bne.n	8008472 <_vfiprintf_r+0x1ce>
 8008406:	9b03      	ldr	r3, [sp, #12]
 8008408:	3402      	adds	r4, #2
 800840a:	1d1a      	adds	r2, r3, #4
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	9203      	str	r2, [sp, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	bfb8      	it	lt
 8008414:	f04f 33ff 	movlt.w	r3, #4294967295
 8008418:	9305      	str	r3, [sp, #20]
 800841a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80084f4 <_vfiprintf_r+0x250>
 800841e:	2203      	movs	r2, #3
 8008420:	4650      	mov	r0, sl
 8008422:	7821      	ldrb	r1, [r4, #0]
 8008424:	f7ff f886 	bl	8007534 <memchr>
 8008428:	b140      	cbz	r0, 800843c <_vfiprintf_r+0x198>
 800842a:	2340      	movs	r3, #64	; 0x40
 800842c:	eba0 000a 	sub.w	r0, r0, sl
 8008430:	fa03 f000 	lsl.w	r0, r3, r0
 8008434:	9b04      	ldr	r3, [sp, #16]
 8008436:	3401      	adds	r4, #1
 8008438:	4303      	orrs	r3, r0
 800843a:	9304      	str	r3, [sp, #16]
 800843c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008440:	2206      	movs	r2, #6
 8008442:	482d      	ldr	r0, [pc, #180]	; (80084f8 <_vfiprintf_r+0x254>)
 8008444:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008448:	f7ff f874 	bl	8007534 <memchr>
 800844c:	2800      	cmp	r0, #0
 800844e:	d03f      	beq.n	80084d0 <_vfiprintf_r+0x22c>
 8008450:	4b2a      	ldr	r3, [pc, #168]	; (80084fc <_vfiprintf_r+0x258>)
 8008452:	bb1b      	cbnz	r3, 800849c <_vfiprintf_r+0x1f8>
 8008454:	9b03      	ldr	r3, [sp, #12]
 8008456:	3307      	adds	r3, #7
 8008458:	f023 0307 	bic.w	r3, r3, #7
 800845c:	3308      	adds	r3, #8
 800845e:	9303      	str	r3, [sp, #12]
 8008460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008462:	443b      	add	r3, r7
 8008464:	9309      	str	r3, [sp, #36]	; 0x24
 8008466:	e767      	b.n	8008338 <_vfiprintf_r+0x94>
 8008468:	460c      	mov	r4, r1
 800846a:	2001      	movs	r0, #1
 800846c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008470:	e7a5      	b.n	80083be <_vfiprintf_r+0x11a>
 8008472:	2300      	movs	r3, #0
 8008474:	f04f 0c0a 	mov.w	ip, #10
 8008478:	4619      	mov	r1, r3
 800847a:	3401      	adds	r4, #1
 800847c:	9305      	str	r3, [sp, #20]
 800847e:	4620      	mov	r0, r4
 8008480:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008484:	3a30      	subs	r2, #48	; 0x30
 8008486:	2a09      	cmp	r2, #9
 8008488:	d903      	bls.n	8008492 <_vfiprintf_r+0x1ee>
 800848a:	2b00      	cmp	r3, #0
 800848c:	d0c5      	beq.n	800841a <_vfiprintf_r+0x176>
 800848e:	9105      	str	r1, [sp, #20]
 8008490:	e7c3      	b.n	800841a <_vfiprintf_r+0x176>
 8008492:	4604      	mov	r4, r0
 8008494:	2301      	movs	r3, #1
 8008496:	fb0c 2101 	mla	r1, ip, r1, r2
 800849a:	e7f0      	b.n	800847e <_vfiprintf_r+0x1da>
 800849c:	ab03      	add	r3, sp, #12
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	462a      	mov	r2, r5
 80084a2:	4630      	mov	r0, r6
 80084a4:	4b16      	ldr	r3, [pc, #88]	; (8008500 <_vfiprintf_r+0x25c>)
 80084a6:	a904      	add	r1, sp, #16
 80084a8:	f7fd fdda 	bl	8006060 <_printf_float>
 80084ac:	4607      	mov	r7, r0
 80084ae:	1c78      	adds	r0, r7, #1
 80084b0:	d1d6      	bne.n	8008460 <_vfiprintf_r+0x1bc>
 80084b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084b4:	07d9      	lsls	r1, r3, #31
 80084b6:	d405      	bmi.n	80084c4 <_vfiprintf_r+0x220>
 80084b8:	89ab      	ldrh	r3, [r5, #12]
 80084ba:	059a      	lsls	r2, r3, #22
 80084bc:	d402      	bmi.n	80084c4 <_vfiprintf_r+0x220>
 80084be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084c0:	f000 faab 	bl	8008a1a <__retarget_lock_release_recursive>
 80084c4:	89ab      	ldrh	r3, [r5, #12]
 80084c6:	065b      	lsls	r3, r3, #25
 80084c8:	f53f af12 	bmi.w	80082f0 <_vfiprintf_r+0x4c>
 80084cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084ce:	e711      	b.n	80082f4 <_vfiprintf_r+0x50>
 80084d0:	ab03      	add	r3, sp, #12
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	462a      	mov	r2, r5
 80084d6:	4630      	mov	r0, r6
 80084d8:	4b09      	ldr	r3, [pc, #36]	; (8008500 <_vfiprintf_r+0x25c>)
 80084da:	a904      	add	r1, sp, #16
 80084dc:	f7fe f85c 	bl	8006598 <_printf_i>
 80084e0:	e7e4      	b.n	80084ac <_vfiprintf_r+0x208>
 80084e2:	bf00      	nop
 80084e4:	0800910c 	.word	0x0800910c
 80084e8:	0800912c 	.word	0x0800912c
 80084ec:	080090ec 	.word	0x080090ec
 80084f0:	08008f94 	.word	0x08008f94
 80084f4:	08008f9a 	.word	0x08008f9a
 80084f8:	08008f9e 	.word	0x08008f9e
 80084fc:	08006061 	.word	0x08006061
 8008500:	08008281 	.word	0x08008281

08008504 <__swbuf_r>:
 8008504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008506:	460e      	mov	r6, r1
 8008508:	4614      	mov	r4, r2
 800850a:	4605      	mov	r5, r0
 800850c:	b118      	cbz	r0, 8008516 <__swbuf_r+0x12>
 800850e:	6983      	ldr	r3, [r0, #24]
 8008510:	b90b      	cbnz	r3, 8008516 <__swbuf_r+0x12>
 8008512:	f000 f9e3 	bl	80088dc <__sinit>
 8008516:	4b21      	ldr	r3, [pc, #132]	; (800859c <__swbuf_r+0x98>)
 8008518:	429c      	cmp	r4, r3
 800851a:	d12b      	bne.n	8008574 <__swbuf_r+0x70>
 800851c:	686c      	ldr	r4, [r5, #4]
 800851e:	69a3      	ldr	r3, [r4, #24]
 8008520:	60a3      	str	r3, [r4, #8]
 8008522:	89a3      	ldrh	r3, [r4, #12]
 8008524:	071a      	lsls	r2, r3, #28
 8008526:	d52f      	bpl.n	8008588 <__swbuf_r+0x84>
 8008528:	6923      	ldr	r3, [r4, #16]
 800852a:	b36b      	cbz	r3, 8008588 <__swbuf_r+0x84>
 800852c:	6923      	ldr	r3, [r4, #16]
 800852e:	6820      	ldr	r0, [r4, #0]
 8008530:	b2f6      	uxtb	r6, r6
 8008532:	1ac0      	subs	r0, r0, r3
 8008534:	6963      	ldr	r3, [r4, #20]
 8008536:	4637      	mov	r7, r6
 8008538:	4283      	cmp	r3, r0
 800853a:	dc04      	bgt.n	8008546 <__swbuf_r+0x42>
 800853c:	4621      	mov	r1, r4
 800853e:	4628      	mov	r0, r5
 8008540:	f000 f938 	bl	80087b4 <_fflush_r>
 8008544:	bb30      	cbnz	r0, 8008594 <__swbuf_r+0x90>
 8008546:	68a3      	ldr	r3, [r4, #8]
 8008548:	3001      	adds	r0, #1
 800854a:	3b01      	subs	r3, #1
 800854c:	60a3      	str	r3, [r4, #8]
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	6022      	str	r2, [r4, #0]
 8008554:	701e      	strb	r6, [r3, #0]
 8008556:	6963      	ldr	r3, [r4, #20]
 8008558:	4283      	cmp	r3, r0
 800855a:	d004      	beq.n	8008566 <__swbuf_r+0x62>
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	07db      	lsls	r3, r3, #31
 8008560:	d506      	bpl.n	8008570 <__swbuf_r+0x6c>
 8008562:	2e0a      	cmp	r6, #10
 8008564:	d104      	bne.n	8008570 <__swbuf_r+0x6c>
 8008566:	4621      	mov	r1, r4
 8008568:	4628      	mov	r0, r5
 800856a:	f000 f923 	bl	80087b4 <_fflush_r>
 800856e:	b988      	cbnz	r0, 8008594 <__swbuf_r+0x90>
 8008570:	4638      	mov	r0, r7
 8008572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008574:	4b0a      	ldr	r3, [pc, #40]	; (80085a0 <__swbuf_r+0x9c>)
 8008576:	429c      	cmp	r4, r3
 8008578:	d101      	bne.n	800857e <__swbuf_r+0x7a>
 800857a:	68ac      	ldr	r4, [r5, #8]
 800857c:	e7cf      	b.n	800851e <__swbuf_r+0x1a>
 800857e:	4b09      	ldr	r3, [pc, #36]	; (80085a4 <__swbuf_r+0xa0>)
 8008580:	429c      	cmp	r4, r3
 8008582:	bf08      	it	eq
 8008584:	68ec      	ldreq	r4, [r5, #12]
 8008586:	e7ca      	b.n	800851e <__swbuf_r+0x1a>
 8008588:	4621      	mov	r1, r4
 800858a:	4628      	mov	r0, r5
 800858c:	f000 f81a 	bl	80085c4 <__swsetup_r>
 8008590:	2800      	cmp	r0, #0
 8008592:	d0cb      	beq.n	800852c <__swbuf_r+0x28>
 8008594:	f04f 37ff 	mov.w	r7, #4294967295
 8008598:	e7ea      	b.n	8008570 <__swbuf_r+0x6c>
 800859a:	bf00      	nop
 800859c:	0800910c 	.word	0x0800910c
 80085a0:	0800912c 	.word	0x0800912c
 80085a4:	080090ec 	.word	0x080090ec

080085a8 <__ascii_wctomb>:
 80085a8:	4603      	mov	r3, r0
 80085aa:	4608      	mov	r0, r1
 80085ac:	b141      	cbz	r1, 80085c0 <__ascii_wctomb+0x18>
 80085ae:	2aff      	cmp	r2, #255	; 0xff
 80085b0:	d904      	bls.n	80085bc <__ascii_wctomb+0x14>
 80085b2:	228a      	movs	r2, #138	; 0x8a
 80085b4:	f04f 30ff 	mov.w	r0, #4294967295
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	4770      	bx	lr
 80085bc:	2001      	movs	r0, #1
 80085be:	700a      	strb	r2, [r1, #0]
 80085c0:	4770      	bx	lr
	...

080085c4 <__swsetup_r>:
 80085c4:	4b32      	ldr	r3, [pc, #200]	; (8008690 <__swsetup_r+0xcc>)
 80085c6:	b570      	push	{r4, r5, r6, lr}
 80085c8:	681d      	ldr	r5, [r3, #0]
 80085ca:	4606      	mov	r6, r0
 80085cc:	460c      	mov	r4, r1
 80085ce:	b125      	cbz	r5, 80085da <__swsetup_r+0x16>
 80085d0:	69ab      	ldr	r3, [r5, #24]
 80085d2:	b913      	cbnz	r3, 80085da <__swsetup_r+0x16>
 80085d4:	4628      	mov	r0, r5
 80085d6:	f000 f981 	bl	80088dc <__sinit>
 80085da:	4b2e      	ldr	r3, [pc, #184]	; (8008694 <__swsetup_r+0xd0>)
 80085dc:	429c      	cmp	r4, r3
 80085de:	d10f      	bne.n	8008600 <__swsetup_r+0x3c>
 80085e0:	686c      	ldr	r4, [r5, #4]
 80085e2:	89a3      	ldrh	r3, [r4, #12]
 80085e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085e8:	0719      	lsls	r1, r3, #28
 80085ea:	d42c      	bmi.n	8008646 <__swsetup_r+0x82>
 80085ec:	06dd      	lsls	r5, r3, #27
 80085ee:	d411      	bmi.n	8008614 <__swsetup_r+0x50>
 80085f0:	2309      	movs	r3, #9
 80085f2:	6033      	str	r3, [r6, #0]
 80085f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085f8:	f04f 30ff 	mov.w	r0, #4294967295
 80085fc:	81a3      	strh	r3, [r4, #12]
 80085fe:	e03e      	b.n	800867e <__swsetup_r+0xba>
 8008600:	4b25      	ldr	r3, [pc, #148]	; (8008698 <__swsetup_r+0xd4>)
 8008602:	429c      	cmp	r4, r3
 8008604:	d101      	bne.n	800860a <__swsetup_r+0x46>
 8008606:	68ac      	ldr	r4, [r5, #8]
 8008608:	e7eb      	b.n	80085e2 <__swsetup_r+0x1e>
 800860a:	4b24      	ldr	r3, [pc, #144]	; (800869c <__swsetup_r+0xd8>)
 800860c:	429c      	cmp	r4, r3
 800860e:	bf08      	it	eq
 8008610:	68ec      	ldreq	r4, [r5, #12]
 8008612:	e7e6      	b.n	80085e2 <__swsetup_r+0x1e>
 8008614:	0758      	lsls	r0, r3, #29
 8008616:	d512      	bpl.n	800863e <__swsetup_r+0x7a>
 8008618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800861a:	b141      	cbz	r1, 800862e <__swsetup_r+0x6a>
 800861c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008620:	4299      	cmp	r1, r3
 8008622:	d002      	beq.n	800862a <__swsetup_r+0x66>
 8008624:	4630      	mov	r0, r6
 8008626:	f7ff fb37 	bl	8007c98 <_free_r>
 800862a:	2300      	movs	r3, #0
 800862c:	6363      	str	r3, [r4, #52]	; 0x34
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008634:	81a3      	strh	r3, [r4, #12]
 8008636:	2300      	movs	r3, #0
 8008638:	6063      	str	r3, [r4, #4]
 800863a:	6923      	ldr	r3, [r4, #16]
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	89a3      	ldrh	r3, [r4, #12]
 8008640:	f043 0308 	orr.w	r3, r3, #8
 8008644:	81a3      	strh	r3, [r4, #12]
 8008646:	6923      	ldr	r3, [r4, #16]
 8008648:	b94b      	cbnz	r3, 800865e <__swsetup_r+0x9a>
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008654:	d003      	beq.n	800865e <__swsetup_r+0x9a>
 8008656:	4621      	mov	r1, r4
 8008658:	4630      	mov	r0, r6
 800865a:	f000 fa05 	bl	8008a68 <__smakebuf_r>
 800865e:	89a0      	ldrh	r0, [r4, #12]
 8008660:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008664:	f010 0301 	ands.w	r3, r0, #1
 8008668:	d00a      	beq.n	8008680 <__swsetup_r+0xbc>
 800866a:	2300      	movs	r3, #0
 800866c:	60a3      	str	r3, [r4, #8]
 800866e:	6963      	ldr	r3, [r4, #20]
 8008670:	425b      	negs	r3, r3
 8008672:	61a3      	str	r3, [r4, #24]
 8008674:	6923      	ldr	r3, [r4, #16]
 8008676:	b943      	cbnz	r3, 800868a <__swsetup_r+0xc6>
 8008678:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800867c:	d1ba      	bne.n	80085f4 <__swsetup_r+0x30>
 800867e:	bd70      	pop	{r4, r5, r6, pc}
 8008680:	0781      	lsls	r1, r0, #30
 8008682:	bf58      	it	pl
 8008684:	6963      	ldrpl	r3, [r4, #20]
 8008686:	60a3      	str	r3, [r4, #8]
 8008688:	e7f4      	b.n	8008674 <__swsetup_r+0xb0>
 800868a:	2000      	movs	r0, #0
 800868c:	e7f7      	b.n	800867e <__swsetup_r+0xba>
 800868e:	bf00      	nop
 8008690:	20000010 	.word	0x20000010
 8008694:	0800910c 	.word	0x0800910c
 8008698:	0800912c 	.word	0x0800912c
 800869c:	080090ec 	.word	0x080090ec

080086a0 <abort>:
 80086a0:	2006      	movs	r0, #6
 80086a2:	b508      	push	{r3, lr}
 80086a4:	f000 fa50 	bl	8008b48 <raise>
 80086a8:	2001      	movs	r0, #1
 80086aa:	f7fa f88a 	bl	80027c2 <_exit>
	...

080086b0 <__sflush_r>:
 80086b0:	898a      	ldrh	r2, [r1, #12]
 80086b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b4:	4605      	mov	r5, r0
 80086b6:	0710      	lsls	r0, r2, #28
 80086b8:	460c      	mov	r4, r1
 80086ba:	d457      	bmi.n	800876c <__sflush_r+0xbc>
 80086bc:	684b      	ldr	r3, [r1, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	dc04      	bgt.n	80086cc <__sflush_r+0x1c>
 80086c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	dc01      	bgt.n	80086cc <__sflush_r+0x1c>
 80086c8:	2000      	movs	r0, #0
 80086ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086ce:	2e00      	cmp	r6, #0
 80086d0:	d0fa      	beq.n	80086c8 <__sflush_r+0x18>
 80086d2:	2300      	movs	r3, #0
 80086d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086d8:	682f      	ldr	r7, [r5, #0]
 80086da:	602b      	str	r3, [r5, #0]
 80086dc:	d032      	beq.n	8008744 <__sflush_r+0x94>
 80086de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086e0:	89a3      	ldrh	r3, [r4, #12]
 80086e2:	075a      	lsls	r2, r3, #29
 80086e4:	d505      	bpl.n	80086f2 <__sflush_r+0x42>
 80086e6:	6863      	ldr	r3, [r4, #4]
 80086e8:	1ac0      	subs	r0, r0, r3
 80086ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086ec:	b10b      	cbz	r3, 80086f2 <__sflush_r+0x42>
 80086ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086f0:	1ac0      	subs	r0, r0, r3
 80086f2:	2300      	movs	r3, #0
 80086f4:	4602      	mov	r2, r0
 80086f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086f8:	4628      	mov	r0, r5
 80086fa:	6a21      	ldr	r1, [r4, #32]
 80086fc:	47b0      	blx	r6
 80086fe:	1c43      	adds	r3, r0, #1
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	d106      	bne.n	8008712 <__sflush_r+0x62>
 8008704:	6829      	ldr	r1, [r5, #0]
 8008706:	291d      	cmp	r1, #29
 8008708:	d82c      	bhi.n	8008764 <__sflush_r+0xb4>
 800870a:	4a29      	ldr	r2, [pc, #164]	; (80087b0 <__sflush_r+0x100>)
 800870c:	40ca      	lsrs	r2, r1
 800870e:	07d6      	lsls	r6, r2, #31
 8008710:	d528      	bpl.n	8008764 <__sflush_r+0xb4>
 8008712:	2200      	movs	r2, #0
 8008714:	6062      	str	r2, [r4, #4]
 8008716:	6922      	ldr	r2, [r4, #16]
 8008718:	04d9      	lsls	r1, r3, #19
 800871a:	6022      	str	r2, [r4, #0]
 800871c:	d504      	bpl.n	8008728 <__sflush_r+0x78>
 800871e:	1c42      	adds	r2, r0, #1
 8008720:	d101      	bne.n	8008726 <__sflush_r+0x76>
 8008722:	682b      	ldr	r3, [r5, #0]
 8008724:	b903      	cbnz	r3, 8008728 <__sflush_r+0x78>
 8008726:	6560      	str	r0, [r4, #84]	; 0x54
 8008728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800872a:	602f      	str	r7, [r5, #0]
 800872c:	2900      	cmp	r1, #0
 800872e:	d0cb      	beq.n	80086c8 <__sflush_r+0x18>
 8008730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008734:	4299      	cmp	r1, r3
 8008736:	d002      	beq.n	800873e <__sflush_r+0x8e>
 8008738:	4628      	mov	r0, r5
 800873a:	f7ff faad 	bl	8007c98 <_free_r>
 800873e:	2000      	movs	r0, #0
 8008740:	6360      	str	r0, [r4, #52]	; 0x34
 8008742:	e7c2      	b.n	80086ca <__sflush_r+0x1a>
 8008744:	6a21      	ldr	r1, [r4, #32]
 8008746:	2301      	movs	r3, #1
 8008748:	4628      	mov	r0, r5
 800874a:	47b0      	blx	r6
 800874c:	1c41      	adds	r1, r0, #1
 800874e:	d1c7      	bne.n	80086e0 <__sflush_r+0x30>
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d0c4      	beq.n	80086e0 <__sflush_r+0x30>
 8008756:	2b1d      	cmp	r3, #29
 8008758:	d001      	beq.n	800875e <__sflush_r+0xae>
 800875a:	2b16      	cmp	r3, #22
 800875c:	d101      	bne.n	8008762 <__sflush_r+0xb2>
 800875e:	602f      	str	r7, [r5, #0]
 8008760:	e7b2      	b.n	80086c8 <__sflush_r+0x18>
 8008762:	89a3      	ldrh	r3, [r4, #12]
 8008764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008768:	81a3      	strh	r3, [r4, #12]
 800876a:	e7ae      	b.n	80086ca <__sflush_r+0x1a>
 800876c:	690f      	ldr	r7, [r1, #16]
 800876e:	2f00      	cmp	r7, #0
 8008770:	d0aa      	beq.n	80086c8 <__sflush_r+0x18>
 8008772:	0793      	lsls	r3, r2, #30
 8008774:	bf18      	it	ne
 8008776:	2300      	movne	r3, #0
 8008778:	680e      	ldr	r6, [r1, #0]
 800877a:	bf08      	it	eq
 800877c:	694b      	ldreq	r3, [r1, #20]
 800877e:	1bf6      	subs	r6, r6, r7
 8008780:	600f      	str	r7, [r1, #0]
 8008782:	608b      	str	r3, [r1, #8]
 8008784:	2e00      	cmp	r6, #0
 8008786:	dd9f      	ble.n	80086c8 <__sflush_r+0x18>
 8008788:	4633      	mov	r3, r6
 800878a:	463a      	mov	r2, r7
 800878c:	4628      	mov	r0, r5
 800878e:	6a21      	ldr	r1, [r4, #32]
 8008790:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008794:	47e0      	blx	ip
 8008796:	2800      	cmp	r0, #0
 8008798:	dc06      	bgt.n	80087a8 <__sflush_r+0xf8>
 800879a:	89a3      	ldrh	r3, [r4, #12]
 800879c:	f04f 30ff 	mov.w	r0, #4294967295
 80087a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087a4:	81a3      	strh	r3, [r4, #12]
 80087a6:	e790      	b.n	80086ca <__sflush_r+0x1a>
 80087a8:	4407      	add	r7, r0
 80087aa:	1a36      	subs	r6, r6, r0
 80087ac:	e7ea      	b.n	8008784 <__sflush_r+0xd4>
 80087ae:	bf00      	nop
 80087b0:	20400001 	.word	0x20400001

080087b4 <_fflush_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	690b      	ldr	r3, [r1, #16]
 80087b8:	4605      	mov	r5, r0
 80087ba:	460c      	mov	r4, r1
 80087bc:	b913      	cbnz	r3, 80087c4 <_fflush_r+0x10>
 80087be:	2500      	movs	r5, #0
 80087c0:	4628      	mov	r0, r5
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
 80087c4:	b118      	cbz	r0, 80087ce <_fflush_r+0x1a>
 80087c6:	6983      	ldr	r3, [r0, #24]
 80087c8:	b90b      	cbnz	r3, 80087ce <_fflush_r+0x1a>
 80087ca:	f000 f887 	bl	80088dc <__sinit>
 80087ce:	4b14      	ldr	r3, [pc, #80]	; (8008820 <_fflush_r+0x6c>)
 80087d0:	429c      	cmp	r4, r3
 80087d2:	d11b      	bne.n	800880c <_fflush_r+0x58>
 80087d4:	686c      	ldr	r4, [r5, #4]
 80087d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0ef      	beq.n	80087be <_fflush_r+0xa>
 80087de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087e0:	07d0      	lsls	r0, r2, #31
 80087e2:	d404      	bmi.n	80087ee <_fflush_r+0x3a>
 80087e4:	0599      	lsls	r1, r3, #22
 80087e6:	d402      	bmi.n	80087ee <_fflush_r+0x3a>
 80087e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087ea:	f000 f915 	bl	8008a18 <__retarget_lock_acquire_recursive>
 80087ee:	4628      	mov	r0, r5
 80087f0:	4621      	mov	r1, r4
 80087f2:	f7ff ff5d 	bl	80086b0 <__sflush_r>
 80087f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087f8:	4605      	mov	r5, r0
 80087fa:	07da      	lsls	r2, r3, #31
 80087fc:	d4e0      	bmi.n	80087c0 <_fflush_r+0xc>
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	059b      	lsls	r3, r3, #22
 8008802:	d4dd      	bmi.n	80087c0 <_fflush_r+0xc>
 8008804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008806:	f000 f908 	bl	8008a1a <__retarget_lock_release_recursive>
 800880a:	e7d9      	b.n	80087c0 <_fflush_r+0xc>
 800880c:	4b05      	ldr	r3, [pc, #20]	; (8008824 <_fflush_r+0x70>)
 800880e:	429c      	cmp	r4, r3
 8008810:	d101      	bne.n	8008816 <_fflush_r+0x62>
 8008812:	68ac      	ldr	r4, [r5, #8]
 8008814:	e7df      	b.n	80087d6 <_fflush_r+0x22>
 8008816:	4b04      	ldr	r3, [pc, #16]	; (8008828 <_fflush_r+0x74>)
 8008818:	429c      	cmp	r4, r3
 800881a:	bf08      	it	eq
 800881c:	68ec      	ldreq	r4, [r5, #12]
 800881e:	e7da      	b.n	80087d6 <_fflush_r+0x22>
 8008820:	0800910c 	.word	0x0800910c
 8008824:	0800912c 	.word	0x0800912c
 8008828:	080090ec 	.word	0x080090ec

0800882c <std>:
 800882c:	2300      	movs	r3, #0
 800882e:	b510      	push	{r4, lr}
 8008830:	4604      	mov	r4, r0
 8008832:	e9c0 3300 	strd	r3, r3, [r0]
 8008836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800883a:	6083      	str	r3, [r0, #8]
 800883c:	8181      	strh	r1, [r0, #12]
 800883e:	6643      	str	r3, [r0, #100]	; 0x64
 8008840:	81c2      	strh	r2, [r0, #14]
 8008842:	6183      	str	r3, [r0, #24]
 8008844:	4619      	mov	r1, r3
 8008846:	2208      	movs	r2, #8
 8008848:	305c      	adds	r0, #92	; 0x5c
 800884a:	f7fd fb63 	bl	8005f14 <memset>
 800884e:	4b05      	ldr	r3, [pc, #20]	; (8008864 <std+0x38>)
 8008850:	6224      	str	r4, [r4, #32]
 8008852:	6263      	str	r3, [r4, #36]	; 0x24
 8008854:	4b04      	ldr	r3, [pc, #16]	; (8008868 <std+0x3c>)
 8008856:	62a3      	str	r3, [r4, #40]	; 0x28
 8008858:	4b04      	ldr	r3, [pc, #16]	; (800886c <std+0x40>)
 800885a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800885c:	4b04      	ldr	r3, [pc, #16]	; (8008870 <std+0x44>)
 800885e:	6323      	str	r3, [r4, #48]	; 0x30
 8008860:	bd10      	pop	{r4, pc}
 8008862:	bf00      	nop
 8008864:	08008b81 	.word	0x08008b81
 8008868:	08008ba3 	.word	0x08008ba3
 800886c:	08008bdb 	.word	0x08008bdb
 8008870:	08008bff 	.word	0x08008bff

08008874 <_cleanup_r>:
 8008874:	4901      	ldr	r1, [pc, #4]	; (800887c <_cleanup_r+0x8>)
 8008876:	f000 b8af 	b.w	80089d8 <_fwalk_reent>
 800887a:	bf00      	nop
 800887c:	080087b5 	.word	0x080087b5

08008880 <__sfmoreglue>:
 8008880:	2268      	movs	r2, #104	; 0x68
 8008882:	b570      	push	{r4, r5, r6, lr}
 8008884:	1e4d      	subs	r5, r1, #1
 8008886:	4355      	muls	r5, r2
 8008888:	460e      	mov	r6, r1
 800888a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800888e:	f7ff fa6b 	bl	8007d68 <_malloc_r>
 8008892:	4604      	mov	r4, r0
 8008894:	b140      	cbz	r0, 80088a8 <__sfmoreglue+0x28>
 8008896:	2100      	movs	r1, #0
 8008898:	e9c0 1600 	strd	r1, r6, [r0]
 800889c:	300c      	adds	r0, #12
 800889e:	60a0      	str	r0, [r4, #8]
 80088a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80088a4:	f7fd fb36 	bl	8005f14 <memset>
 80088a8:	4620      	mov	r0, r4
 80088aa:	bd70      	pop	{r4, r5, r6, pc}

080088ac <__sfp_lock_acquire>:
 80088ac:	4801      	ldr	r0, [pc, #4]	; (80088b4 <__sfp_lock_acquire+0x8>)
 80088ae:	f000 b8b3 	b.w	8008a18 <__retarget_lock_acquire_recursive>
 80088b2:	bf00      	nop
 80088b4:	20000381 	.word	0x20000381

080088b8 <__sfp_lock_release>:
 80088b8:	4801      	ldr	r0, [pc, #4]	; (80088c0 <__sfp_lock_release+0x8>)
 80088ba:	f000 b8ae 	b.w	8008a1a <__retarget_lock_release_recursive>
 80088be:	bf00      	nop
 80088c0:	20000381 	.word	0x20000381

080088c4 <__sinit_lock_acquire>:
 80088c4:	4801      	ldr	r0, [pc, #4]	; (80088cc <__sinit_lock_acquire+0x8>)
 80088c6:	f000 b8a7 	b.w	8008a18 <__retarget_lock_acquire_recursive>
 80088ca:	bf00      	nop
 80088cc:	20000382 	.word	0x20000382

080088d0 <__sinit_lock_release>:
 80088d0:	4801      	ldr	r0, [pc, #4]	; (80088d8 <__sinit_lock_release+0x8>)
 80088d2:	f000 b8a2 	b.w	8008a1a <__retarget_lock_release_recursive>
 80088d6:	bf00      	nop
 80088d8:	20000382 	.word	0x20000382

080088dc <__sinit>:
 80088dc:	b510      	push	{r4, lr}
 80088de:	4604      	mov	r4, r0
 80088e0:	f7ff fff0 	bl	80088c4 <__sinit_lock_acquire>
 80088e4:	69a3      	ldr	r3, [r4, #24]
 80088e6:	b11b      	cbz	r3, 80088f0 <__sinit+0x14>
 80088e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088ec:	f7ff bff0 	b.w	80088d0 <__sinit_lock_release>
 80088f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80088f4:	6523      	str	r3, [r4, #80]	; 0x50
 80088f6:	4b13      	ldr	r3, [pc, #76]	; (8008944 <__sinit+0x68>)
 80088f8:	4a13      	ldr	r2, [pc, #76]	; (8008948 <__sinit+0x6c>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80088fe:	42a3      	cmp	r3, r4
 8008900:	bf08      	it	eq
 8008902:	2301      	moveq	r3, #1
 8008904:	4620      	mov	r0, r4
 8008906:	bf08      	it	eq
 8008908:	61a3      	streq	r3, [r4, #24]
 800890a:	f000 f81f 	bl	800894c <__sfp>
 800890e:	6060      	str	r0, [r4, #4]
 8008910:	4620      	mov	r0, r4
 8008912:	f000 f81b 	bl	800894c <__sfp>
 8008916:	60a0      	str	r0, [r4, #8]
 8008918:	4620      	mov	r0, r4
 800891a:	f000 f817 	bl	800894c <__sfp>
 800891e:	2200      	movs	r2, #0
 8008920:	2104      	movs	r1, #4
 8008922:	60e0      	str	r0, [r4, #12]
 8008924:	6860      	ldr	r0, [r4, #4]
 8008926:	f7ff ff81 	bl	800882c <std>
 800892a:	2201      	movs	r2, #1
 800892c:	2109      	movs	r1, #9
 800892e:	68a0      	ldr	r0, [r4, #8]
 8008930:	f7ff ff7c 	bl	800882c <std>
 8008934:	2202      	movs	r2, #2
 8008936:	2112      	movs	r1, #18
 8008938:	68e0      	ldr	r0, [r4, #12]
 800893a:	f7ff ff77 	bl	800882c <std>
 800893e:	2301      	movs	r3, #1
 8008940:	61a3      	str	r3, [r4, #24]
 8008942:	e7d1      	b.n	80088e8 <__sinit+0xc>
 8008944:	08008d70 	.word	0x08008d70
 8008948:	08008875 	.word	0x08008875

0800894c <__sfp>:
 800894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894e:	4607      	mov	r7, r0
 8008950:	f7ff ffac 	bl	80088ac <__sfp_lock_acquire>
 8008954:	4b1e      	ldr	r3, [pc, #120]	; (80089d0 <__sfp+0x84>)
 8008956:	681e      	ldr	r6, [r3, #0]
 8008958:	69b3      	ldr	r3, [r6, #24]
 800895a:	b913      	cbnz	r3, 8008962 <__sfp+0x16>
 800895c:	4630      	mov	r0, r6
 800895e:	f7ff ffbd 	bl	80088dc <__sinit>
 8008962:	3648      	adds	r6, #72	; 0x48
 8008964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008968:	3b01      	subs	r3, #1
 800896a:	d503      	bpl.n	8008974 <__sfp+0x28>
 800896c:	6833      	ldr	r3, [r6, #0]
 800896e:	b30b      	cbz	r3, 80089b4 <__sfp+0x68>
 8008970:	6836      	ldr	r6, [r6, #0]
 8008972:	e7f7      	b.n	8008964 <__sfp+0x18>
 8008974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008978:	b9d5      	cbnz	r5, 80089b0 <__sfp+0x64>
 800897a:	4b16      	ldr	r3, [pc, #88]	; (80089d4 <__sfp+0x88>)
 800897c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008980:	60e3      	str	r3, [r4, #12]
 8008982:	6665      	str	r5, [r4, #100]	; 0x64
 8008984:	f000 f847 	bl	8008a16 <__retarget_lock_init_recursive>
 8008988:	f7ff ff96 	bl	80088b8 <__sfp_lock_release>
 800898c:	2208      	movs	r2, #8
 800898e:	4629      	mov	r1, r5
 8008990:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008994:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008998:	6025      	str	r5, [r4, #0]
 800899a:	61a5      	str	r5, [r4, #24]
 800899c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80089a0:	f7fd fab8 	bl	8005f14 <memset>
 80089a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80089a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80089ac:	4620      	mov	r0, r4
 80089ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089b0:	3468      	adds	r4, #104	; 0x68
 80089b2:	e7d9      	b.n	8008968 <__sfp+0x1c>
 80089b4:	2104      	movs	r1, #4
 80089b6:	4638      	mov	r0, r7
 80089b8:	f7ff ff62 	bl	8008880 <__sfmoreglue>
 80089bc:	4604      	mov	r4, r0
 80089be:	6030      	str	r0, [r6, #0]
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d1d5      	bne.n	8008970 <__sfp+0x24>
 80089c4:	f7ff ff78 	bl	80088b8 <__sfp_lock_release>
 80089c8:	230c      	movs	r3, #12
 80089ca:	603b      	str	r3, [r7, #0]
 80089cc:	e7ee      	b.n	80089ac <__sfp+0x60>
 80089ce:	bf00      	nop
 80089d0:	08008d70 	.word	0x08008d70
 80089d4:	ffff0001 	.word	0xffff0001

080089d8 <_fwalk_reent>:
 80089d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089dc:	4606      	mov	r6, r0
 80089de:	4688      	mov	r8, r1
 80089e0:	2700      	movs	r7, #0
 80089e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089ea:	f1b9 0901 	subs.w	r9, r9, #1
 80089ee:	d505      	bpl.n	80089fc <_fwalk_reent+0x24>
 80089f0:	6824      	ldr	r4, [r4, #0]
 80089f2:	2c00      	cmp	r4, #0
 80089f4:	d1f7      	bne.n	80089e6 <_fwalk_reent+0xe>
 80089f6:	4638      	mov	r0, r7
 80089f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089fc:	89ab      	ldrh	r3, [r5, #12]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d907      	bls.n	8008a12 <_fwalk_reent+0x3a>
 8008a02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a06:	3301      	adds	r3, #1
 8008a08:	d003      	beq.n	8008a12 <_fwalk_reent+0x3a>
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	47c0      	blx	r8
 8008a10:	4307      	orrs	r7, r0
 8008a12:	3568      	adds	r5, #104	; 0x68
 8008a14:	e7e9      	b.n	80089ea <_fwalk_reent+0x12>

08008a16 <__retarget_lock_init_recursive>:
 8008a16:	4770      	bx	lr

08008a18 <__retarget_lock_acquire_recursive>:
 8008a18:	4770      	bx	lr

08008a1a <__retarget_lock_release_recursive>:
 8008a1a:	4770      	bx	lr

08008a1c <__swhatbuf_r>:
 8008a1c:	b570      	push	{r4, r5, r6, lr}
 8008a1e:	460e      	mov	r6, r1
 8008a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a24:	4614      	mov	r4, r2
 8008a26:	2900      	cmp	r1, #0
 8008a28:	461d      	mov	r5, r3
 8008a2a:	b096      	sub	sp, #88	; 0x58
 8008a2c:	da08      	bge.n	8008a40 <__swhatbuf_r+0x24>
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008a34:	602a      	str	r2, [r5, #0]
 8008a36:	061a      	lsls	r2, r3, #24
 8008a38:	d410      	bmi.n	8008a5c <__swhatbuf_r+0x40>
 8008a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a3e:	e00e      	b.n	8008a5e <__swhatbuf_r+0x42>
 8008a40:	466a      	mov	r2, sp
 8008a42:	f000 f903 	bl	8008c4c <_fstat_r>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	dbf1      	blt.n	8008a2e <__swhatbuf_r+0x12>
 8008a4a:	9a01      	ldr	r2, [sp, #4]
 8008a4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a54:	425a      	negs	r2, r3
 8008a56:	415a      	adcs	r2, r3
 8008a58:	602a      	str	r2, [r5, #0]
 8008a5a:	e7ee      	b.n	8008a3a <__swhatbuf_r+0x1e>
 8008a5c:	2340      	movs	r3, #64	; 0x40
 8008a5e:	2000      	movs	r0, #0
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	b016      	add	sp, #88	; 0x58
 8008a64:	bd70      	pop	{r4, r5, r6, pc}
	...

08008a68 <__smakebuf_r>:
 8008a68:	898b      	ldrh	r3, [r1, #12]
 8008a6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a6c:	079d      	lsls	r5, r3, #30
 8008a6e:	4606      	mov	r6, r0
 8008a70:	460c      	mov	r4, r1
 8008a72:	d507      	bpl.n	8008a84 <__smakebuf_r+0x1c>
 8008a74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	6123      	str	r3, [r4, #16]
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	6163      	str	r3, [r4, #20]
 8008a80:	b002      	add	sp, #8
 8008a82:	bd70      	pop	{r4, r5, r6, pc}
 8008a84:	466a      	mov	r2, sp
 8008a86:	ab01      	add	r3, sp, #4
 8008a88:	f7ff ffc8 	bl	8008a1c <__swhatbuf_r>
 8008a8c:	9900      	ldr	r1, [sp, #0]
 8008a8e:	4605      	mov	r5, r0
 8008a90:	4630      	mov	r0, r6
 8008a92:	f7ff f969 	bl	8007d68 <_malloc_r>
 8008a96:	b948      	cbnz	r0, 8008aac <__smakebuf_r+0x44>
 8008a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a9c:	059a      	lsls	r2, r3, #22
 8008a9e:	d4ef      	bmi.n	8008a80 <__smakebuf_r+0x18>
 8008aa0:	f023 0303 	bic.w	r3, r3, #3
 8008aa4:	f043 0302 	orr.w	r3, r3, #2
 8008aa8:	81a3      	strh	r3, [r4, #12]
 8008aaa:	e7e3      	b.n	8008a74 <__smakebuf_r+0xc>
 8008aac:	4b0d      	ldr	r3, [pc, #52]	; (8008ae4 <__smakebuf_r+0x7c>)
 8008aae:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ab0:	89a3      	ldrh	r3, [r4, #12]
 8008ab2:	6020      	str	r0, [r4, #0]
 8008ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab8:	81a3      	strh	r3, [r4, #12]
 8008aba:	9b00      	ldr	r3, [sp, #0]
 8008abc:	6120      	str	r0, [r4, #16]
 8008abe:	6163      	str	r3, [r4, #20]
 8008ac0:	9b01      	ldr	r3, [sp, #4]
 8008ac2:	b15b      	cbz	r3, 8008adc <__smakebuf_r+0x74>
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008aca:	f000 f8d1 	bl	8008c70 <_isatty_r>
 8008ace:	b128      	cbz	r0, 8008adc <__smakebuf_r+0x74>
 8008ad0:	89a3      	ldrh	r3, [r4, #12]
 8008ad2:	f023 0303 	bic.w	r3, r3, #3
 8008ad6:	f043 0301 	orr.w	r3, r3, #1
 8008ada:	81a3      	strh	r3, [r4, #12]
 8008adc:	89a0      	ldrh	r0, [r4, #12]
 8008ade:	4305      	orrs	r5, r0
 8008ae0:	81a5      	strh	r5, [r4, #12]
 8008ae2:	e7cd      	b.n	8008a80 <__smakebuf_r+0x18>
 8008ae4:	08008875 	.word	0x08008875

08008ae8 <_malloc_usable_size_r>:
 8008ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aec:	1f18      	subs	r0, r3, #4
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	bfbc      	itt	lt
 8008af2:	580b      	ldrlt	r3, [r1, r0]
 8008af4:	18c0      	addlt	r0, r0, r3
 8008af6:	4770      	bx	lr

08008af8 <_raise_r>:
 8008af8:	291f      	cmp	r1, #31
 8008afa:	b538      	push	{r3, r4, r5, lr}
 8008afc:	4604      	mov	r4, r0
 8008afe:	460d      	mov	r5, r1
 8008b00:	d904      	bls.n	8008b0c <_raise_r+0x14>
 8008b02:	2316      	movs	r3, #22
 8008b04:	6003      	str	r3, [r0, #0]
 8008b06:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b0e:	b112      	cbz	r2, 8008b16 <_raise_r+0x1e>
 8008b10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b14:	b94b      	cbnz	r3, 8008b2a <_raise_r+0x32>
 8008b16:	4620      	mov	r0, r4
 8008b18:	f000 f830 	bl	8008b7c <_getpid_r>
 8008b1c:	462a      	mov	r2, r5
 8008b1e:	4601      	mov	r1, r0
 8008b20:	4620      	mov	r0, r4
 8008b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b26:	f000 b817 	b.w	8008b58 <_kill_r>
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d00a      	beq.n	8008b44 <_raise_r+0x4c>
 8008b2e:	1c59      	adds	r1, r3, #1
 8008b30:	d103      	bne.n	8008b3a <_raise_r+0x42>
 8008b32:	2316      	movs	r3, #22
 8008b34:	6003      	str	r3, [r0, #0]
 8008b36:	2001      	movs	r0, #1
 8008b38:	e7e7      	b.n	8008b0a <_raise_r+0x12>
 8008b3a:	2400      	movs	r4, #0
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b42:	4798      	blx	r3
 8008b44:	2000      	movs	r0, #0
 8008b46:	e7e0      	b.n	8008b0a <_raise_r+0x12>

08008b48 <raise>:
 8008b48:	4b02      	ldr	r3, [pc, #8]	; (8008b54 <raise+0xc>)
 8008b4a:	4601      	mov	r1, r0
 8008b4c:	6818      	ldr	r0, [r3, #0]
 8008b4e:	f7ff bfd3 	b.w	8008af8 <_raise_r>
 8008b52:	bf00      	nop
 8008b54:	20000010 	.word	0x20000010

08008b58 <_kill_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	4d06      	ldr	r5, [pc, #24]	; (8008b78 <_kill_r+0x20>)
 8008b5e:	4604      	mov	r4, r0
 8008b60:	4608      	mov	r0, r1
 8008b62:	4611      	mov	r1, r2
 8008b64:	602b      	str	r3, [r5, #0]
 8008b66:	f7f9 fe1c 	bl	80027a2 <_kill>
 8008b6a:	1c43      	adds	r3, r0, #1
 8008b6c:	d102      	bne.n	8008b74 <_kill_r+0x1c>
 8008b6e:	682b      	ldr	r3, [r5, #0]
 8008b70:	b103      	cbz	r3, 8008b74 <_kill_r+0x1c>
 8008b72:	6023      	str	r3, [r4, #0]
 8008b74:	bd38      	pop	{r3, r4, r5, pc}
 8008b76:	bf00      	nop
 8008b78:	2000037c 	.word	0x2000037c

08008b7c <_getpid_r>:
 8008b7c:	f7f9 be0a 	b.w	8002794 <_getpid>

08008b80 <__sread>:
 8008b80:	b510      	push	{r4, lr}
 8008b82:	460c      	mov	r4, r1
 8008b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b88:	f000 f894 	bl	8008cb4 <_read_r>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	bfab      	itete	ge
 8008b90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b92:	89a3      	ldrhlt	r3, [r4, #12]
 8008b94:	181b      	addge	r3, r3, r0
 8008b96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b9a:	bfac      	ite	ge
 8008b9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b9e:	81a3      	strhlt	r3, [r4, #12]
 8008ba0:	bd10      	pop	{r4, pc}

08008ba2 <__swrite>:
 8008ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba6:	461f      	mov	r7, r3
 8008ba8:	898b      	ldrh	r3, [r1, #12]
 8008baa:	4605      	mov	r5, r0
 8008bac:	05db      	lsls	r3, r3, #23
 8008bae:	460c      	mov	r4, r1
 8008bb0:	4616      	mov	r6, r2
 8008bb2:	d505      	bpl.n	8008bc0 <__swrite+0x1e>
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bbc:	f000 f868 	bl	8008c90 <_lseek_r>
 8008bc0:	89a3      	ldrh	r3, [r4, #12]
 8008bc2:	4632      	mov	r2, r6
 8008bc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bc8:	81a3      	strh	r3, [r4, #12]
 8008bca:	4628      	mov	r0, r5
 8008bcc:	463b      	mov	r3, r7
 8008bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd6:	f000 b817 	b.w	8008c08 <_write_r>

08008bda <__sseek>:
 8008bda:	b510      	push	{r4, lr}
 8008bdc:	460c      	mov	r4, r1
 8008bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008be2:	f000 f855 	bl	8008c90 <_lseek_r>
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	89a3      	ldrh	r3, [r4, #12]
 8008bea:	bf15      	itete	ne
 8008bec:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bf6:	81a3      	strheq	r3, [r4, #12]
 8008bf8:	bf18      	it	ne
 8008bfa:	81a3      	strhne	r3, [r4, #12]
 8008bfc:	bd10      	pop	{r4, pc}

08008bfe <__sclose>:
 8008bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c02:	f000 b813 	b.w	8008c2c <_close_r>
	...

08008c08 <_write_r>:
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	4611      	mov	r1, r2
 8008c10:	2200      	movs	r2, #0
 8008c12:	4d05      	ldr	r5, [pc, #20]	; (8008c28 <_write_r+0x20>)
 8008c14:	602a      	str	r2, [r5, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	f7f9 fdfa 	bl	8002810 <_write>
 8008c1c:	1c43      	adds	r3, r0, #1
 8008c1e:	d102      	bne.n	8008c26 <_write_r+0x1e>
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	b103      	cbz	r3, 8008c26 <_write_r+0x1e>
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	bd38      	pop	{r3, r4, r5, pc}
 8008c28:	2000037c 	.word	0x2000037c

08008c2c <_close_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	2300      	movs	r3, #0
 8008c30:	4d05      	ldr	r5, [pc, #20]	; (8008c48 <_close_r+0x1c>)
 8008c32:	4604      	mov	r4, r0
 8008c34:	4608      	mov	r0, r1
 8008c36:	602b      	str	r3, [r5, #0]
 8008c38:	f7f9 fe06 	bl	8002848 <_close>
 8008c3c:	1c43      	adds	r3, r0, #1
 8008c3e:	d102      	bne.n	8008c46 <_close_r+0x1a>
 8008c40:	682b      	ldr	r3, [r5, #0]
 8008c42:	b103      	cbz	r3, 8008c46 <_close_r+0x1a>
 8008c44:	6023      	str	r3, [r4, #0]
 8008c46:	bd38      	pop	{r3, r4, r5, pc}
 8008c48:	2000037c 	.word	0x2000037c

08008c4c <_fstat_r>:
 8008c4c:	b538      	push	{r3, r4, r5, lr}
 8008c4e:	2300      	movs	r3, #0
 8008c50:	4d06      	ldr	r5, [pc, #24]	; (8008c6c <_fstat_r+0x20>)
 8008c52:	4604      	mov	r4, r0
 8008c54:	4608      	mov	r0, r1
 8008c56:	4611      	mov	r1, r2
 8008c58:	602b      	str	r3, [r5, #0]
 8008c5a:	f7f9 fe00 	bl	800285e <_fstat>
 8008c5e:	1c43      	adds	r3, r0, #1
 8008c60:	d102      	bne.n	8008c68 <_fstat_r+0x1c>
 8008c62:	682b      	ldr	r3, [r5, #0]
 8008c64:	b103      	cbz	r3, 8008c68 <_fstat_r+0x1c>
 8008c66:	6023      	str	r3, [r4, #0]
 8008c68:	bd38      	pop	{r3, r4, r5, pc}
 8008c6a:	bf00      	nop
 8008c6c:	2000037c 	.word	0x2000037c

08008c70 <_isatty_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	2300      	movs	r3, #0
 8008c74:	4d05      	ldr	r5, [pc, #20]	; (8008c8c <_isatty_r+0x1c>)
 8008c76:	4604      	mov	r4, r0
 8008c78:	4608      	mov	r0, r1
 8008c7a:	602b      	str	r3, [r5, #0]
 8008c7c:	f7f9 fdfe 	bl	800287c <_isatty>
 8008c80:	1c43      	adds	r3, r0, #1
 8008c82:	d102      	bne.n	8008c8a <_isatty_r+0x1a>
 8008c84:	682b      	ldr	r3, [r5, #0]
 8008c86:	b103      	cbz	r3, 8008c8a <_isatty_r+0x1a>
 8008c88:	6023      	str	r3, [r4, #0]
 8008c8a:	bd38      	pop	{r3, r4, r5, pc}
 8008c8c:	2000037c 	.word	0x2000037c

08008c90 <_lseek_r>:
 8008c90:	b538      	push	{r3, r4, r5, lr}
 8008c92:	4604      	mov	r4, r0
 8008c94:	4608      	mov	r0, r1
 8008c96:	4611      	mov	r1, r2
 8008c98:	2200      	movs	r2, #0
 8008c9a:	4d05      	ldr	r5, [pc, #20]	; (8008cb0 <_lseek_r+0x20>)
 8008c9c:	602a      	str	r2, [r5, #0]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	f7f9 fdf6 	bl	8002890 <_lseek>
 8008ca4:	1c43      	adds	r3, r0, #1
 8008ca6:	d102      	bne.n	8008cae <_lseek_r+0x1e>
 8008ca8:	682b      	ldr	r3, [r5, #0]
 8008caa:	b103      	cbz	r3, 8008cae <_lseek_r+0x1e>
 8008cac:	6023      	str	r3, [r4, #0]
 8008cae:	bd38      	pop	{r3, r4, r5, pc}
 8008cb0:	2000037c 	.word	0x2000037c

08008cb4 <_read_r>:
 8008cb4:	b538      	push	{r3, r4, r5, lr}
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	4608      	mov	r0, r1
 8008cba:	4611      	mov	r1, r2
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	4d05      	ldr	r5, [pc, #20]	; (8008cd4 <_read_r+0x20>)
 8008cc0:	602a      	str	r2, [r5, #0]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	f7f9 fd87 	bl	80027d6 <_read>
 8008cc8:	1c43      	adds	r3, r0, #1
 8008cca:	d102      	bne.n	8008cd2 <_read_r+0x1e>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	b103      	cbz	r3, 8008cd2 <_read_r+0x1e>
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	2000037c 	.word	0x2000037c

08008cd8 <_init>:
 8008cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cda:	bf00      	nop
 8008cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cde:	bc08      	pop	{r3}
 8008ce0:	469e      	mov	lr, r3
 8008ce2:	4770      	bx	lr

08008ce4 <_fini>:
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce6:	bf00      	nop
 8008ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cea:	bc08      	pop	{r3}
 8008cec:	469e      	mov	lr, r3
 8008cee:	4770      	bx	lr
